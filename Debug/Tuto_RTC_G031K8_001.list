
Tuto_RTC_G031K8_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a06c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800a128  0800a128  0001a128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6b4  0800a6b4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6bc  0800a6bc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d8  0800a89c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800a89c  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c473  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000211a  00000000  00000000  0002c6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002e7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c7  00000000  00000000  0002f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017de2  00000000  00000000  0002f9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e38a  00000000  00000000  000477b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000901d0  00000000  00000000  00055b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003770  00000000  00000000  000e5d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000e947c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d8 	.word	0x200001d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a110 	.word	0x0800a110

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001dc 	.word	0x200001dc
 8000100:	0800a110 	.word	0x0800a110

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f885 	bl	8001548 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd5 	bl	80013f8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f877 	bl	8001548 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86d 	bl	8001548 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fffd 	bl	800147c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fff3 	bl	800147c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 feeb 	bl	80022d4 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fb44 	bl	8001b94 <__aeabi_dsub>
 800050c:	f001 fee2 	bl	80022d4 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f853 	bl	8001610 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 ff16 	bl	80023a0 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f84a 	bl	8001610 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fb06 	bl	8001b94 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fecf 	bl	8002340 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f833 	bl	8001610 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fef6 	bl	80023a0 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ffa6 	bl	8002534 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ffa1 	bl	8002534 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	d434      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fa:	469b      	mov	fp, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	465a      	mov	r2, fp
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83b      	bhi.n	8000688 <__udivmoddi4+0xc4>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e079      	b.n	800070a <__udivmoddi4+0x146>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e076      	b.n	8000710 <__udivmoddi4+0x14c>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e029      	b.n	8000690 <__udivmoddi4+0xcc>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	469b      	mov	fp, r3
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	4652      	mov	r2, sl
 800066e:	40da      	lsrs	r2, r3
 8000670:	4641      	mov	r1, r8
 8000672:	0013      	movs	r3, r2
 8000674:	464a      	mov	r2, r9
 8000676:	408a      	lsls	r2, r1
 8000678:	0017      	movs	r7, r2
 800067a:	4642      	mov	r2, r8
 800067c:	431f      	orrs	r7, r3
 800067e:	4653      	mov	r3, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001e      	movs	r6, r3
 8000684:	42af      	cmp	r7, r5
 8000686:	d9c3      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000688:	2200      	movs	r2, #0
 800068a:	2300      	movs	r3, #0
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4643      	mov	r3, r8
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0d8      	beq.n	8000648 <__udivmoddi4+0x84>
 8000696:	07fb      	lsls	r3, r7, #31
 8000698:	0872      	lsrs	r2, r6, #1
 800069a:	431a      	orrs	r2, r3
 800069c:	4646      	mov	r6, r8
 800069e:	087b      	lsrs	r3, r7, #1
 80006a0:	e00e      	b.n	80006c0 <__udivmoddi4+0xfc>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d101      	bne.n	80006aa <__udivmoddi4+0xe6>
 80006a6:	42a2      	cmp	r2, r4
 80006a8:	d80c      	bhi.n	80006c4 <__udivmoddi4+0x100>
 80006aa:	1aa4      	subs	r4, r4, r2
 80006ac:	419d      	sbcs	r5, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	1924      	adds	r4, r4, r4
 80006b2:	416d      	adcs	r5, r5
 80006b4:	2100      	movs	r1, #0
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1824      	adds	r4, r4, r0
 80006ba:	414d      	adcs	r5, r1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d006      	beq.n	80006ce <__udivmoddi4+0x10a>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d9ee      	bls.n	80006a2 <__udivmoddi4+0xde>
 80006c4:	3e01      	subs	r6, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d1f8      	bne.n	80006c0 <__udivmoddi4+0xfc>
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	465b      	mov	r3, fp
 80006d4:	1900      	adds	r0, r0, r4
 80006d6:	4169      	adcs	r1, r5
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db24      	blt.n	8000726 <__udivmoddi4+0x162>
 80006dc:	002b      	movs	r3, r5
 80006de:	465a      	mov	r2, fp
 80006e0:	4644      	mov	r4, r8
 80006e2:	40d3      	lsrs	r3, r2
 80006e4:	002a      	movs	r2, r5
 80006e6:	40e2      	lsrs	r2, r4
 80006e8:	001c      	movs	r4, r3
 80006ea:	465b      	mov	r3, fp
 80006ec:	0015      	movs	r5, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db2a      	blt.n	8000748 <__udivmoddi4+0x184>
 80006f2:	0026      	movs	r6, r4
 80006f4:	409e      	lsls	r6, r3
 80006f6:	0033      	movs	r3, r6
 80006f8:	0026      	movs	r6, r4
 80006fa:	4647      	mov	r7, r8
 80006fc:	40be      	lsls	r6, r7
 80006fe:	0032      	movs	r2, r6
 8000700:	1a80      	subs	r0, r0, r2
 8000702:	4199      	sbcs	r1, r3
 8000704:	9000      	str	r0, [sp, #0]
 8000706:	9101      	str	r1, [sp, #4]
 8000708:	e79e      	b.n	8000648 <__udivmoddi4+0x84>
 800070a:	42a3      	cmp	r3, r4
 800070c:	d8bc      	bhi.n	8000688 <__udivmoddi4+0xc4>
 800070e:	e782      	b.n	8000616 <__udivmoddi4+0x52>
 8000710:	4642      	mov	r2, r8
 8000712:	2320      	movs	r3, #32
 8000714:	2100      	movs	r1, #0
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	40da      	lsrs	r2, r3
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	e785      	b.n	8000632 <__udivmoddi4+0x6e>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4646      	mov	r6, r8
 8000730:	409a      	lsls	r2, r3
 8000732:	0023      	movs	r3, r4
 8000734:	40f3      	lsrs	r3, r6
 8000736:	4644      	mov	r4, r8
 8000738:	4313      	orrs	r3, r2
 800073a:	002a      	movs	r2, r5
 800073c:	40e2      	lsrs	r2, r4
 800073e:	001c      	movs	r4, r3
 8000740:	465b      	mov	r3, fp
 8000742:	0015      	movs	r5, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	dad4      	bge.n	80006f2 <__udivmoddi4+0x12e>
 8000748:	4642      	mov	r2, r8
 800074a:	002f      	movs	r7, r5
 800074c:	2320      	movs	r3, #32
 800074e:	0026      	movs	r6, r4
 8000750:	4097      	lsls	r7, r2
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	40de      	lsrs	r6, r3
 8000756:	003b      	movs	r3, r7
 8000758:	4333      	orrs	r3, r6
 800075a:	e7cd      	b.n	80006f8 <__udivmoddi4+0x134>

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0004      	movs	r4, r0
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	001f      	movs	r7, r3
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0010      	movs	r0, r2
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0a5b      	lsrs	r3, r3, #9
 8000772:	0fcd      	lsrs	r5, r1, #31
 8000774:	0f61      	lsrs	r1, r4, #29
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	4319      	orrs	r1, r3
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	0fff      	lsrs	r7, r7, #31
 8000780:	46bc      	mov	ip, r7
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0f47      	lsrs	r7, r0, #29
 8000786:	4327      	orrs	r7, r4
 8000788:	0d76      	lsrs	r6, r6, #21
 800078a:	0d52      	lsrs	r2, r2, #21
 800078c:	00c0      	lsls	r0, r0, #3
 800078e:	46b9      	mov	r9, r7
 8000790:	4680      	mov	r8, r0
 8000792:	1ab7      	subs	r7, r6, r2
 8000794:	4565      	cmp	r5, ip
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e09b      	b.n	80008d2 <__aeabi_dadd+0x176>
 800079a:	2f00      	cmp	r7, #0
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x44>
 800079e:	e084      	b.n	80008aa <__aeabi_dadd+0x14e>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e0be      	b.n	8000924 <__aeabi_dadd+0x1c8>
 80007a6:	4ac8      	ldr	r2, [pc, #800]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80007a8:	4296      	cmp	r6, r2
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e124      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	464c      	mov	r4, r9
 80007b2:	0412      	lsls	r2, r2, #16
 80007b4:	4314      	orrs	r4, r2
 80007b6:	46a1      	mov	r9, r4
 80007b8:	2f38      	cmp	r7, #56	; 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x62>
 80007bc:	e167      	b.n	8000a8e <__aeabi_dadd+0x332>
 80007be:	2f1f      	cmp	r7, #31
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x68>
 80007c2:	e1d6      	b.n	8000b72 <__aeabi_dadd+0x416>
 80007c4:	2220      	movs	r2, #32
 80007c6:	464c      	mov	r4, r9
 80007c8:	1bd2      	subs	r2, r2, r7
 80007ca:	4094      	lsls	r4, r2
 80007cc:	46a2      	mov	sl, r4
 80007ce:	4644      	mov	r4, r8
 80007d0:	40fc      	lsrs	r4, r7
 80007d2:	0020      	movs	r0, r4
 80007d4:	4654      	mov	r4, sl
 80007d6:	4304      	orrs	r4, r0
 80007d8:	4640      	mov	r0, r8
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e42      	subs	r2, r0, #1
 80007de:	4190      	sbcs	r0, r2
 80007e0:	464a      	mov	r2, r9
 80007e2:	40fa      	lsrs	r2, r7
 80007e4:	4304      	orrs	r4, r0
 80007e6:	1a89      	subs	r1, r1, r2
 80007e8:	1b1c      	subs	r4, r3, r4
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4252      	negs	r2, r2
 80007f0:	1a8b      	subs	r3, r1, r2
 80007f2:	469a      	mov	sl, r3
 80007f4:	4653      	mov	r3, sl
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0xa0>
 80007fa:	e0d4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 80007fc:	4653      	mov	r3, sl
 80007fe:	025a      	lsls	r2, r3, #9
 8000800:	0a53      	lsrs	r3, r2, #9
 8000802:	469a      	mov	sl, r3
 8000804:	4653      	mov	r3, sl
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0xb0>
 800080a:	e104      	b.n	8000a16 <__aeabi_dadd+0x2ba>
 800080c:	4650      	mov	r0, sl
 800080e:	f001 fe73 	bl	80024f8 <__clzsi2>
 8000812:	0003      	movs	r3, r0
 8000814:	3b08      	subs	r3, #8
 8000816:	2220      	movs	r2, #32
 8000818:	0020      	movs	r0, r4
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	4651      	mov	r1, sl
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4099      	lsls	r1, r3
 8000822:	0002      	movs	r2, r0
 8000824:	409c      	lsls	r4, r3
 8000826:	430a      	orrs	r2, r1
 8000828:	42b3      	cmp	r3, r6
 800082a:	da00      	bge.n	800082e <__aeabi_dadd+0xd2>
 800082c:	e102      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 800082e:	1b9b      	subs	r3, r3, r6
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	291f      	cmp	r1, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0xdc>
 8000836:	e0a7      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000838:	2320      	movs	r3, #32
 800083a:	0010      	movs	r0, r2
 800083c:	0026      	movs	r6, r4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	409c      	lsls	r4, r3
 8000842:	4098      	lsls	r0, r3
 8000844:	40ce      	lsrs	r6, r1
 8000846:	40ca      	lsrs	r2, r1
 8000848:	1e63      	subs	r3, r4, #1
 800084a:	419c      	sbcs	r4, r3
 800084c:	4330      	orrs	r0, r6
 800084e:	4692      	mov	sl, r2
 8000850:	2600      	movs	r6, #0
 8000852:	4304      	orrs	r4, r0
 8000854:	0763      	lsls	r3, r4, #29
 8000856:	d009      	beq.n	800086c <__aeabi_dadd+0x110>
 8000858:	230f      	movs	r3, #15
 800085a:	4023      	ands	r3, r4
 800085c:	2b04      	cmp	r3, #4
 800085e:	d005      	beq.n	800086c <__aeabi_dadd+0x110>
 8000860:	1d23      	adds	r3, r4, #4
 8000862:	42a3      	cmp	r3, r4
 8000864:	41a4      	sbcs	r4, r4
 8000866:	4264      	negs	r4, r4
 8000868:	44a2      	add	sl, r4
 800086a:	001c      	movs	r4, r3
 800086c:	4653      	mov	r3, sl
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d400      	bmi.n	8000874 <__aeabi_dadd+0x118>
 8000872:	e09b      	b.n	80009ac <__aeabi_dadd+0x250>
 8000874:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000876:	3601      	adds	r6, #1
 8000878:	429e      	cmp	r6, r3
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x122>
 800087c:	e0b8      	b.n	80009f0 <__aeabi_dadd+0x294>
 800087e:	4653      	mov	r3, sl
 8000880:	4992      	ldr	r1, [pc, #584]	; (8000acc <__aeabi_dadd+0x370>)
 8000882:	08e4      	lsrs	r4, r4, #3
 8000884:	400b      	ands	r3, r1
 8000886:	0019      	movs	r1, r3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	4323      	orrs	r3, r4
 800088c:	0572      	lsls	r2, r6, #21
 800088e:	024c      	lsls	r4, r1, #9
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	0d52      	lsrs	r2, r2, #21
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	07ed      	lsls	r5, r5, #31
 8000898:	4322      	orrs	r2, r4
 800089a:	432a      	orrs	r2, r5
 800089c:	0018      	movs	r0, r3
 800089e:	0011      	movs	r1, r2
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d048      	beq.n	8000940 <__aeabi_dadd+0x1e4>
 80008ae:	1b97      	subs	r7, r2, r6
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x15a>
 80008b4:	e10e      	b.n	8000ad4 <__aeabi_dadd+0x378>
 80008b6:	000c      	movs	r4, r1
 80008b8:	431c      	orrs	r4, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x162>
 80008bc:	e1b7      	b.n	8000c2e <__aeabi_dadd+0x4d2>
 80008be:	1e7c      	subs	r4, r7, #1
 80008c0:	2f01      	cmp	r7, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x16a>
 80008c4:	e226      	b.n	8000d14 <__aeabi_dadd+0x5b8>
 80008c6:	4d80      	ldr	r5, [pc, #512]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008c8:	42af      	cmp	r7, r5
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x172>
 80008cc:	e1d5      	b.n	8000c7a <__aeabi_dadd+0x51e>
 80008ce:	0027      	movs	r7, r4
 80008d0:	e107      	b.n	8000ae2 <__aeabi_dadd+0x386>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x17c>
 80008d6:	e0b2      	b.n	8000a3e <__aeabi_dadd+0x2e2>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d047      	beq.n	800096c <__aeabi_dadd+0x210>
 80008dc:	4a7a      	ldr	r2, [pc, #488]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008de:	4296      	cmp	r6, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x188>
 80008e2:	e089      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	464c      	mov	r4, r9
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	4314      	orrs	r4, r2
 80008ec:	46a1      	mov	r9, r4
 80008ee:	2f38      	cmp	r7, #56	; 0x38
 80008f0:	dc6b      	bgt.n	80009ca <__aeabi_dadd+0x26e>
 80008f2:	2f1f      	cmp	r7, #31
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x19c>
 80008f6:	e16e      	b.n	8000bd6 <__aeabi_dadd+0x47a>
 80008f8:	003a      	movs	r2, r7
 80008fa:	4648      	mov	r0, r9
 80008fc:	3a20      	subs	r2, #32
 80008fe:	40d0      	lsrs	r0, r2
 8000900:	4684      	mov	ip, r0
 8000902:	2f20      	cmp	r7, #32
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	4648      	mov	r0, r9
 800090a:	1bd2      	subs	r2, r2, r7
 800090c:	4090      	lsls	r0, r2
 800090e:	0002      	movs	r2, r0
 8000910:	4640      	mov	r0, r8
 8000912:	4310      	orrs	r0, r2
 8000914:	4680      	mov	r8, r0
 8000916:	4640      	mov	r0, r8
 8000918:	1e42      	subs	r2, r0, #1
 800091a:	4190      	sbcs	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	0004      	movs	r4, r0
 8000920:	4314      	orrs	r4, r2
 8000922:	e057      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000924:	464a      	mov	r2, r9
 8000926:	4302      	orrs	r2, r0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x1d0>
 800092a:	e103      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 800092c:	1e7a      	subs	r2, r7, #1
 800092e:	2f01      	cmp	r7, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x1d8>
 8000932:	e193      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000934:	4c64      	ldr	r4, [pc, #400]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000936:	42a7      	cmp	r7, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x1e0>
 800093a:	e18a      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 800093c:	0017      	movs	r7, r2
 800093e:	e73b      	b.n	80007b8 <__aeabi_dadd+0x5c>
 8000940:	4c63      	ldr	r4, [pc, #396]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	4222      	tst	r2, r4
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x1ee>
 8000948:	e0e0      	b.n	8000b0c <__aeabi_dadd+0x3b0>
 800094a:	000a      	movs	r2, r1
 800094c:	431a      	orrs	r2, r3
 800094e:	2e00      	cmp	r6, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x1f8>
 8000952:	e174      	b.n	8000c3e <__aeabi_dadd+0x4e2>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x1fe>
 8000958:	e1d0      	b.n	8000cfc <__aeabi_dadd+0x5a0>
 800095a:	464a      	mov	r2, r9
 800095c:	4302      	orrs	r2, r0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x206>
 8000960:	e1e3      	b.n	8000d2a <__aeabi_dadd+0x5ce>
 8000962:	074a      	lsls	r2, r1, #29
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	08c9      	lsrs	r1, r1, #3
 800096a:	e029      	b.n	80009c0 <__aeabi_dadd+0x264>
 800096c:	464a      	mov	r2, r9
 800096e:	4302      	orrs	r2, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x218>
 8000972:	e17d      	b.n	8000c70 <__aeabi_dadd+0x514>
 8000974:	1e7a      	subs	r2, r7, #1
 8000976:	2f01      	cmp	r7, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c52      	ldr	r4, [pc, #328]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800097e:	42a7      	cmp	r7, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e166      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000984:	0017      	movs	r7, r2
 8000986:	e7b2      	b.n	80008ee <__aeabi_dadd+0x192>
 8000988:	0010      	movs	r0, r2
 800098a:	3b1f      	subs	r3, #31
 800098c:	40d8      	lsrs	r0, r3
 800098e:	2920      	cmp	r1, #32
 8000990:	d003      	beq.n	800099a <__aeabi_dadd+0x23e>
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	1a5b      	subs	r3, r3, r1
 8000996:	409a      	lsls	r2, r3
 8000998:	4314      	orrs	r4, r2
 800099a:	1e63      	subs	r3, r4, #1
 800099c:	419c      	sbcs	r4, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	2600      	movs	r6, #0
 80009a2:	469a      	mov	sl, r3
 80009a4:	4304      	orrs	r4, r0
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e755      	b.n	8000858 <__aeabi_dadd+0xfc>
 80009ac:	4652      	mov	r2, sl
 80009ae:	08e3      	lsrs	r3, r4, #3
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	4313      	orrs	r3, r2
 80009b4:	4652      	mov	r2, sl
 80009b6:	0037      	movs	r7, r6
 80009b8:	08d1      	lsrs	r1, r2, #3
 80009ba:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009bc:	4297      	cmp	r7, r2
 80009be:	d01f      	beq.n	8000a00 <__aeabi_dadd+0x2a4>
 80009c0:	0309      	lsls	r1, r1, #12
 80009c2:	057a      	lsls	r2, r7, #21
 80009c4:	0b0c      	lsrs	r4, r1, #12
 80009c6:	0d52      	lsrs	r2, r2, #21
 80009c8:	e764      	b.n	8000894 <__aeabi_dadd+0x138>
 80009ca:	4642      	mov	r2, r8
 80009cc:	464c      	mov	r4, r9
 80009ce:	4314      	orrs	r4, r2
 80009d0:	1e62      	subs	r2, r4, #1
 80009d2:	4194      	sbcs	r4, r2
 80009d4:	18e4      	adds	r4, r4, r3
 80009d6:	429c      	cmp	r4, r3
 80009d8:	4192      	sbcs	r2, r2
 80009da:	4252      	negs	r2, r2
 80009dc:	4692      	mov	sl, r2
 80009de:	448a      	add	sl, r1
 80009e0:	4653      	mov	r3, sl
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	d5df      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009e8:	3601      	adds	r6, #1
 80009ea:	429e      	cmp	r6, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x294>
 80009ee:	e0b3      	b.n	8000b58 <__aeabi_dadd+0x3fc>
 80009f0:	0032      	movs	r2, r6
 80009f2:	2400      	movs	r4, #0
 80009f4:	2300      	movs	r3, #0
 80009f6:	e74d      	b.n	8000894 <__aeabi_dadd+0x138>
 80009f8:	074a      	lsls	r2, r1, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	001a      	movs	r2, r3
 8000a02:	430a      	orrs	r2, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x2ac>
 8000a06:	e200      	b.n	8000e0a <__aeabi_dadd+0x6ae>
 8000a08:	2480      	movs	r4, #128	; 0x80
 8000a0a:	0324      	lsls	r4, r4, #12
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	0324      	lsls	r4, r4, #12
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	e73e      	b.n	8000894 <__aeabi_dadd+0x138>
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 fd6e 	bl	80024f8 <__clzsi2>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	3318      	adds	r3, #24
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_dadd+0x2ca>
 8000a24:	e6f7      	b.n	8000816 <__aeabi_dadd+0xba>
 8000a26:	0022      	movs	r2, r4
 8000a28:	3808      	subs	r0, #8
 8000a2a:	4082      	lsls	r2, r0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	42b3      	cmp	r3, r6
 8000a30:	db00      	blt.n	8000a34 <__aeabi_dadd+0x2d8>
 8000a32:	e6fc      	b.n	800082e <__aeabi_dadd+0xd2>
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <__aeabi_dadd+0x370>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	e70a      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d02b      	beq.n	8000a9a <__aeabi_dadd+0x33e>
 8000a42:	1b97      	subs	r7, r2, r6
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x2ee>
 8000a48:	e0b8      	b.n	8000bbc <__aeabi_dadd+0x460>
 8000a4a:	4c1f      	ldr	r4, [pc, #124]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a4c:	42a2      	cmp	r2, r4
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x2f6>
 8000a50:	e11c      	b.n	8000c8c <__aeabi_dadd+0x530>
 8000a52:	2480      	movs	r4, #128	; 0x80
 8000a54:	0424      	lsls	r4, r4, #16
 8000a56:	4321      	orrs	r1, r4
 8000a58:	2f38      	cmp	r7, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x302>
 8000a5c:	e11e      	b.n	8000c9c <__aeabi_dadd+0x540>
 8000a5e:	2f1f      	cmp	r7, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x308>
 8000a62:	e19e      	b.n	8000da2 <__aeabi_dadd+0x646>
 8000a64:	2620      	movs	r6, #32
 8000a66:	000c      	movs	r4, r1
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	40b3      	lsls	r3, r6
 8000a6e:	40b4      	lsls	r4, r6
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	1e5e      	subs	r6, r3, #1
 8000a74:	41b3      	sbcs	r3, r6
 8000a76:	40f9      	lsrs	r1, r7
 8000a78:	4304      	orrs	r4, r0
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4489      	add	r9, r1
 8000a7e:	4444      	add	r4, r8
 8000a80:	4544      	cmp	r4, r8
 8000a82:	419b      	sbcs	r3, r3
 8000a84:	425b      	negs	r3, r3
 8000a86:	444b      	add	r3, r9
 8000a88:	469a      	mov	sl, r3
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	e7a8      	b.n	80009e0 <__aeabi_dadd+0x284>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	464c      	mov	r4, r9
 8000a92:	4314      	orrs	r4, r2
 8000a94:	1e62      	subs	r2, r4, #1
 8000a96:	4194      	sbcs	r4, r2
 8000a98:	e6a6      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000a9c:	1c72      	adds	r2, r6, #1
 8000a9e:	4222      	tst	r2, r4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x348>
 8000aa2:	e0a8      	b.n	8000bf6 <__aeabi_dadd+0x49a>
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x352>
 8000aac:	e10a      	b.n	8000cc4 <__aeabi_dadd+0x568>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x358>
 8000ab2:	e15e      	b.n	8000d72 <__aeabi_dadd+0x616>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_dadd+0x360>
 8000aba:	e161      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000abc:	074a      	lsls	r2, r1, #29
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	08c9      	lsrs	r1, r1, #3
 8000ac4:	e77c      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff
 8000ad0:	000007fe 	.word	0x000007fe
 8000ad4:	4ccf      	ldr	r4, [pc, #828]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000ad6:	42a2      	cmp	r2, r4
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x380>
 8000ada:	e0ce      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	2f38      	cmp	r7, #56	; 0x38
 8000ae4:	dc5b      	bgt.n	8000b9e <__aeabi_dadd+0x442>
 8000ae6:	2f1f      	cmp	r7, #31
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dadd+0x390>
 8000aea:	e0dc      	b.n	8000ca6 <__aeabi_dadd+0x54a>
 8000aec:	2520      	movs	r5, #32
 8000aee:	000c      	movs	r4, r1
 8000af0:	1bed      	subs	r5, r5, r7
 8000af2:	001e      	movs	r6, r3
 8000af4:	40ab      	lsls	r3, r5
 8000af6:	40ac      	lsls	r4, r5
 8000af8:	40fe      	lsrs	r6, r7
 8000afa:	1e5d      	subs	r5, r3, #1
 8000afc:	41ab      	sbcs	r3, r5
 8000afe:	4334      	orrs	r4, r6
 8000b00:	40f9      	lsrs	r1, r7
 8000b02:	431c      	orrs	r4, r3
 8000b04:	464b      	mov	r3, r9
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	4699      	mov	r9, r3
 8000b0a:	e04c      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	1a1c      	subs	r4, r3, r0
 8000b10:	1a88      	subs	r0, r1, r2
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	4192      	sbcs	r2, r2
 8000b16:	4252      	negs	r2, r2
 8000b18:	4692      	mov	sl, r2
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	4650      	mov	r0, sl
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	4692      	mov	sl, r2
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	d478      	bmi.n	8000c18 <__aeabi_dadd+0x4bc>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4323      	orrs	r3, r4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x3d2>
 8000b2c:	e66a      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	e745      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000b34:	074a      	lsls	r2, r1, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000b3e:	181c      	adds	r4, r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4449      	add	r1, r9
 8000b46:	468a      	mov	sl, r1
 8000b48:	425b      	negs	r3, r3
 8000b4a:	449a      	add	sl, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	2601      	movs	r6, #1
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x3fa>
 8000b54:	e727      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b56:	2602      	movs	r6, #2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	4baf      	ldr	r3, [pc, #700]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	4021      	ands	r1, r4
 8000b64:	0862      	lsrs	r2, r4, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	07dc      	lsls	r4, r3, #31
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	4314      	orrs	r4, r2
 8000b70:	e670      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000b72:	003a      	movs	r2, r7
 8000b74:	464c      	mov	r4, r9
 8000b76:	3a20      	subs	r2, #32
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	46a4      	mov	ip, r4
 8000b7c:	2f20      	cmp	r7, #32
 8000b7e:	d007      	beq.n	8000b90 <__aeabi_dadd+0x434>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	4648      	mov	r0, r9
 8000b84:	1bd2      	subs	r2, r2, r7
 8000b86:	4090      	lsls	r0, r2
 8000b88:	0002      	movs	r2, r0
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	4310      	orrs	r0, r2
 8000b8e:	4680      	mov	r8, r0
 8000b90:	4640      	mov	r0, r8
 8000b92:	1e42      	subs	r2, r0, #1
 8000b94:	4190      	sbcs	r0, r2
 8000b96:	4662      	mov	r2, ip
 8000b98:	0004      	movs	r4, r0
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	e624      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1b1c      	subs	r4, r3, r4
 8000baa:	45a0      	cmp	r8, r4
 8000bac:	419b      	sbcs	r3, r3
 8000bae:	4649      	mov	r1, r9
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	1acb      	subs	r3, r1, r3
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	0016      	movs	r6, r2
 8000bba:	e61b      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000bbc:	000c      	movs	r4, r1
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x468>
 8000bc2:	e0c7      	b.n	8000d54 <__aeabi_dadd+0x5f8>
 8000bc4:	1e7c      	subs	r4, r7, #1
 8000bc6:	2f01      	cmp	r7, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x470>
 8000bca:	e0f9      	b.n	8000dc0 <__aeabi_dadd+0x664>
 8000bcc:	4e91      	ldr	r6, [pc, #580]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bce:	42b7      	cmp	r7, r6
 8000bd0:	d05c      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	e740      	b.n	8000a58 <__aeabi_dadd+0x2fc>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	464c      	mov	r4, r9
 8000bda:	4640      	mov	r0, r8
 8000bdc:	1bd2      	subs	r2, r2, r7
 8000bde:	4094      	lsls	r4, r2
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4304      	orrs	r4, r0
 8000be4:	4640      	mov	r0, r8
 8000be6:	4090      	lsls	r0, r2
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	4190      	sbcs	r0, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	40fa      	lsrs	r2, r7
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	1889      	adds	r1, r1, r2
 8000bf4:	e6ee      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000bf6:	4c87      	ldr	r4, [pc, #540]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x4a2>
 8000bfc:	e6f9      	b.n	80009f2 <__aeabi_dadd+0x296>
 8000bfe:	1818      	adds	r0, r3, r0
 8000c00:	4298      	cmp	r0, r3
 8000c02:	419b      	sbcs	r3, r3
 8000c04:	4449      	add	r1, r9
 8000c06:	425b      	negs	r3, r3
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	07dc      	lsls	r4, r3, #31
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	469a      	mov	sl, r3
 8000c12:	0016      	movs	r6, r2
 8000c14:	4304      	orrs	r4, r0
 8000c16:	e6c6      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1ad4      	subs	r4, r2, r3
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	4180      	sbcs	r0, r0
 8000c20:	464b      	mov	r3, r9
 8000c22:	4240      	negs	r0, r0
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	1a0b      	subs	r3, r1, r0
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	e5ea      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	08c0      	lsrs	r0, r0, #3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	4665      	mov	r5, ip
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	08d1      	lsrs	r1, r2, #3
 8000c3c:	e6bd      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x4e8>
 8000c42:	e08e      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000c44:	464b      	mov	r3, r9
 8000c46:	4303      	orrs	r3, r0
 8000c48:	d117      	bne.n	8000c7a <__aeabi_dadd+0x51e>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	0309      	lsls	r1, r1, #12
 8000c50:	e6da      	b.n	8000a08 <__aeabi_dadd+0x2ac>
 8000c52:	074a      	lsls	r2, r1, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c9      	lsrs	r1, r1, #3
 8000c5a:	e6d1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c5c:	1a1c      	subs	r4, r3, r0
 8000c5e:	464a      	mov	r2, r9
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	1a89      	subs	r1, r1, r2
 8000c66:	425b      	negs	r3, r3
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	e5c1      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e69f      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	08d8      	lsrs	r0, r3, #3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	464a      	mov	r2, r9
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	4665      	mov	r5, ip
 8000c86:	4303      	orrs	r3, r0
 8000c88:	08d1      	lsrs	r1, r2, #3
 8000c8a:	e6b9      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	08d8      	lsrs	r0, r3, #3
 8000c90:	464b      	mov	r3, r9
 8000c92:	464a      	mov	r2, r9
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e6b1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	1e63      	subs	r3, r4, #1
 8000ca2:	419c      	sbcs	r4, r3
 8000ca4:	e6eb      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000ca6:	003c      	movs	r4, r7
 8000ca8:	000d      	movs	r5, r1
 8000caa:	3c20      	subs	r4, #32
 8000cac:	40e5      	lsrs	r5, r4
 8000cae:	2f20      	cmp	r7, #32
 8000cb0:	d003      	beq.n	8000cba <__aeabi_dadd+0x55e>
 8000cb2:	2440      	movs	r4, #64	; 0x40
 8000cb4:	1be4      	subs	r4, r4, r7
 8000cb6:	40a1      	lsls	r1, r4
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	001c      	movs	r4, r3
 8000cbc:	1e63      	subs	r3, r4, #1
 8000cbe:	419c      	sbcs	r4, r3
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	e770      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0e1      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	d0c1      	beq.n	8000c52 <__aeabi_dadd+0x4f6>
 8000cce:	074a      	lsls	r2, r1, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	4211      	tst	r1, r2
 8000cdc:	d008      	beq.n	8000cf0 <__aeabi_dadd+0x594>
 8000cde:	4648      	mov	r0, r9
 8000ce0:	08c4      	lsrs	r4, r0, #3
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d104      	bne.n	8000cf0 <__aeabi_dadd+0x594>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	0021      	movs	r1, r4
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0742      	lsls	r2, r0, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	0f5a      	lsrs	r2, r3, #29
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	0752      	lsls	r2, r2, #29
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	e681      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	4303      	orrs	r3, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x5a8>
 8000d02:	e714      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	08d1      	lsrs	r1, r2, #3
 8000d12:	e655      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d14:	1ac4      	subs	r4, r0, r3
 8000d16:	45a0      	cmp	r8, r4
 8000d18:	4180      	sbcs	r0, r0
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	1a59      	subs	r1, r3, r1
 8000d20:	1a0b      	subs	r3, r1, r0
 8000d22:	469a      	mov	sl, r3
 8000d24:	4665      	mov	r5, ip
 8000d26:	2601      	movs	r6, #1
 8000d28:	e564      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000d2a:	1a1c      	subs	r4, r3, r0
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	4180      	sbcs	r0, r0
 8000d32:	1a8a      	subs	r2, r1, r2
 8000d34:	4240      	negs	r0, r0
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	4692      	mov	sl, r2
 8000d3a:	0212      	lsls	r2, r2, #8
 8000d3c:	d549      	bpl.n	8000dd2 <__aeabi_dadd+0x676>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	1ad4      	subs	r4, r2, r3
 8000d42:	45a0      	cmp	r8, r4
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	464b      	mov	r3, r9
 8000d48:	4240      	negs	r0, r0
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	1a0b      	subs	r3, r1, r0
 8000d4e:	469a      	mov	sl, r3
 8000d50:	4665      	mov	r5, ip
 8000d52:	e57f      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000d54:	464b      	mov	r3, r9
 8000d56:	464a      	mov	r2, r9
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	075b      	lsls	r3, r3, #29
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	08d1      	lsrs	r1, r2, #3
 8000d60:	e62b      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000d62:	464a      	mov	r2, r9
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	4302      	orrs	r2, r0
 8000d68:	d138      	bne.n	8000ddc <__aeabi_dadd+0x680>
 8000d6a:	074a      	lsls	r2, r1, #29
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	08c9      	lsrs	r1, r1, #3
 8000d70:	e646      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000d72:	464b      	mov	r3, r9
 8000d74:	464a      	mov	r2, r9
 8000d76:	08c0      	lsrs	r0, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	08d1      	lsrs	r1, r2, #3
 8000d7e:	e61f      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d80:	181c      	adds	r4, r3, r0
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	4449      	add	r1, r9
 8000d88:	468a      	mov	sl, r1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	449a      	add	sl, r3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e607      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d96:	4652      	mov	r2, sl
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	e601      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000da2:	003c      	movs	r4, r7
 8000da4:	000e      	movs	r6, r1
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e6      	lsrs	r6, r4
 8000daa:	2f20      	cmp	r7, #32
 8000dac:	d003      	beq.n	8000db6 <__aeabi_dadd+0x65a>
 8000dae:	2440      	movs	r4, #64	; 0x40
 8000db0:	1be4      	subs	r4, r4, r7
 8000db2:	40a1      	lsls	r1, r4
 8000db4:	430b      	orrs	r3, r1
 8000db6:	001c      	movs	r4, r3
 8000db8:	1e63      	subs	r3, r4, #1
 8000dba:	419c      	sbcs	r4, r3
 8000dbc:	4334      	orrs	r4, r6
 8000dbe:	e65e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000dc0:	4443      	add	r3, r8
 8000dc2:	4283      	cmp	r3, r0
 8000dc4:	4180      	sbcs	r0, r0
 8000dc6:	4449      	add	r1, r9
 8000dc8:	468a      	mov	sl, r1
 8000dca:	4240      	negs	r0, r0
 8000dcc:	001c      	movs	r4, r3
 8000dce:	4482      	add	sl, r0
 8000dd0:	e6bc      	b.n	8000b4c <__aeabi_dadd+0x3f0>
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	4323      	orrs	r3, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x67e>
 8000dd8:	e6a9      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000dda:	e5e4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000ddc:	074a      	lsls	r2, r1, #29
 8000dde:	4313      	orrs	r3, r2
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	0312      	lsls	r2, r2, #12
 8000de6:	4211      	tst	r1, r2
 8000de8:	d009      	beq.n	8000dfe <__aeabi_dadd+0x6a2>
 8000dea:	4648      	mov	r0, r9
 8000dec:	08c4      	lsrs	r4, r0, #3
 8000dee:	4214      	tst	r4, r2
 8000df0:	d105      	bne.n	8000dfe <__aeabi_dadd+0x6a2>
 8000df2:	4643      	mov	r3, r8
 8000df4:	4665      	mov	r5, ip
 8000df6:	0021      	movs	r1, r4
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	0742      	lsls	r2, r0, #29
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	0f5a      	lsrs	r2, r3, #29
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	0752      	lsls	r2, r2, #29
 8000e06:	4313      	orrs	r3, r2
 8000e08:	e5fa      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4a01      	ldr	r2, [pc, #4]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000e0e:	001c      	movs	r4, r3
 8000e10:	e540      	b.n	8000894 <__aeabi_dadd+0x138>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff

08000e1c <__aeabi_ddiv>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	4657      	mov	r7, sl
 8000e20:	464e      	mov	r6, r9
 8000e22:	4645      	mov	r5, r8
 8000e24:	46de      	mov	lr, fp
 8000e26:	b5e0      	push	{r5, r6, r7, lr}
 8000e28:	030c      	lsls	r4, r1, #12
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	004b      	lsls	r3, r1, #1
 8000e2e:	4681      	mov	r9, r0
 8000e30:	4692      	mov	sl, r2
 8000e32:	0005      	movs	r5, r0
 8000e34:	b085      	sub	sp, #20
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	0fce      	lsrs	r6, r1, #31
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x26>
 8000e40:	e152      	b.n	80010e8 <__aeabi_ddiv+0x2cc>
 8000e42:	4ad2      	ldr	r2, [pc, #840]	; (800118c <__aeabi_ddiv+0x370>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x2e>
 8000e48:	e16e      	b.n	8001128 <__aeabi_ddiv+0x30c>
 8000e4a:	0f42      	lsrs	r2, r0, #29
 8000e4c:	00e4      	lsls	r4, r4, #3
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	4322      	orrs	r2, r4
 8000e56:	4690      	mov	r8, r2
 8000e58:	4acd      	ldr	r2, [pc, #820]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e5a:	00c5      	lsls	r5, r0, #3
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	449b      	add	fp, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	4699      	mov	r9, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	033c      	lsls	r4, r7, #12
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	0b24      	lsrs	r4, r4, #12
 8000e6e:	0d5b      	lsrs	r3, r3, #21
 8000e70:	0fff      	lsrs	r7, r7, #31
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x5c>
 8000e76:	e11a      	b.n	80010ae <__aeabi_ddiv+0x292>
 8000e78:	4ac4      	ldr	r2, [pc, #784]	; (800118c <__aeabi_ddiv+0x370>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x64>
 8000e7e:	e15e      	b.n	800113e <__aeabi_ddiv+0x322>
 8000e80:	0f42      	lsrs	r2, r0, #29
 8000e82:	00e4      	lsls	r4, r4, #3
 8000e84:	4322      	orrs	r2, r4
 8000e86:	2480      	movs	r4, #128	; 0x80
 8000e88:	0424      	lsls	r4, r4, #16
 8000e8a:	4314      	orrs	r4, r2
 8000e8c:	4ac0      	ldr	r2, [pc, #768]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e8e:	00c1      	lsls	r1, r0, #3
 8000e90:	4694      	mov	ip, r2
 8000e92:	465a      	mov	r2, fp
 8000e94:	4463      	add	r3, ip
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	469b      	mov	fp, r3
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	407b      	eors	r3, r7
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d827      	bhi.n	8000ef8 <__aeabi_ddiv+0xdc>
 8000ea8:	4aba      	ldr	r2, [pc, #744]	; (8001194 <__aeabi_ddiv+0x378>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	469f      	mov	pc, r3
 8000eb0:	46b2      	mov	sl, r6
 8000eb2:	9b00      	ldr	r3, [sp, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d016      	beq.n	8000ee6 <__aeabi_ddiv+0xca>
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0xa2>
 8000ebc:	e287      	b.n	80013ce <__aeabi_ddiv+0x5b2>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_ddiv+0xa8>
 8000ec2:	e0d5      	b.n	8001070 <__aeabi_ddiv+0x254>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2500      	movs	r5, #0
 8000eca:	051b      	lsls	r3, r3, #20
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	07d2      	lsls	r2, r2, #31
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	b005      	add	sp, #20
 8000eda:	bcf0      	pop	{r4, r5, r6, r7}
 8000edc:	46bb      	mov	fp, r7
 8000ede:	46b2      	mov	sl, r6
 8000ee0:	46a9      	mov	r9, r5
 8000ee2:	46a0      	mov	r8, r4
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4ba8      	ldr	r3, [pc, #672]	; (800118c <__aeabi_ddiv+0x370>)
 8000eec:	e7ed      	b.n	8000eca <__aeabi_ddiv+0xae>
 8000eee:	46ba      	mov	sl, r7
 8000ef0:	46a0      	mov	r8, r4
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	9000      	str	r0, [sp, #0]
 8000ef6:	e7dc      	b.n	8000eb2 <__aeabi_ddiv+0x96>
 8000ef8:	4544      	cmp	r4, r8
 8000efa:	d200      	bcs.n	8000efe <__aeabi_ddiv+0xe2>
 8000efc:	e1c4      	b.n	8001288 <__aeabi_ddiv+0x46c>
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xe6>
 8000f00:	e1bf      	b.n	8001282 <__aeabi_ddiv+0x466>
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	469c      	mov	ip, r3
 8000f08:	002e      	movs	r6, r5
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	44e3      	add	fp, ip
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	0e0c      	lsrs	r4, r1, #24
 8000f14:	431c      	orrs	r4, r3
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	4699      	mov	r9, r3
 8000f1a:	0423      	lsls	r3, r4, #16
 8000f1c:	020a      	lsls	r2, r1, #8
 8000f1e:	0c1f      	lsrs	r7, r3, #16
 8000f20:	4649      	mov	r1, r9
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9701      	str	r7, [sp, #4]
 8000f26:	f7ff f98f 	bl	8000248 <__aeabi_uidivmod>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	437a      	muls	r2, r7
 8000f2e:	040b      	lsls	r3, r1, #16
 8000f30:	0c31      	lsrs	r1, r6, #16
 8000f32:	4680      	mov	r8, r0
 8000f34:	4319      	orrs	r1, r3
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d907      	bls.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	469c      	mov	ip, r3
 8000f40:	1909      	adds	r1, r1, r4
 8000f42:	44e0      	add	r8, ip
 8000f44:	428c      	cmp	r4, r1
 8000f46:	d800      	bhi.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f48:	e201      	b.n	800134e <__aeabi_ddiv+0x532>
 8000f4a:	1a88      	subs	r0, r1, r2
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f97b 	bl	8000248 <__aeabi_uidivmod>
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c36      	lsrs	r6, r6, #16
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	430e      	orrs	r6, r1
 8000f60:	42b2      	cmp	r2, r6
 8000f62:	d904      	bls.n	8000f6e <__aeabi_ddiv+0x152>
 8000f64:	1936      	adds	r6, r6, r4
 8000f66:	3b01      	subs	r3, #1
 8000f68:	42b4      	cmp	r4, r6
 8000f6a:	d800      	bhi.n	8000f6e <__aeabi_ddiv+0x152>
 8000f6c:	e1e9      	b.n	8001342 <__aeabi_ddiv+0x526>
 8000f6e:	1ab0      	subs	r0, r6, r2
 8000f70:	4642      	mov	r2, r8
 8000f72:	9e00      	ldr	r6, [sp, #0]
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	0c33      	lsrs	r3, r6, #16
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	4690      	mov	r8, r2
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	0413      	lsls	r3, r2, #16
 8000f84:	0432      	lsls	r2, r6, #16
 8000f86:	0c16      	lsrs	r6, r2, #16
 8000f88:	0032      	movs	r2, r6
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	435a      	muls	r2, r3
 8000f8e:	9603      	str	r6, [sp, #12]
 8000f90:	437b      	muls	r3, r7
 8000f92:	434e      	muls	r6, r1
 8000f94:	4379      	muls	r1, r7
 8000f96:	0c17      	lsrs	r7, r2, #16
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	199b      	adds	r3, r3, r6
 8000f9c:	4463      	add	r3, ip
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x18e>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0276      	lsls	r6, r6, #9
 8000fa6:	46b4      	mov	ip, r6
 8000fa8:	4461      	add	r1, ip
 8000faa:	0c1e      	lsrs	r6, r3, #16
 8000fac:	1871      	adds	r1, r6, r1
 8000fae:	0416      	lsls	r6, r2, #16
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	199e      	adds	r6, r3, r6
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d302      	bcc.n	8000fc0 <__aeabi_ddiv+0x1a4>
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	d210      	bcs.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4465      	add	r5, ip
 8000fca:	001f      	movs	r7, r3
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	191b      	adds	r3, r3, r4
 8000fd4:	18c0      	adds	r0, r0, r3
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x1c0>
 8000fda:	e19e      	b.n	800131a <__aeabi_ddiv+0x4fe>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8000fde:	e199      	b.n	8001314 <__aeabi_ddiv+0x4f8>
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	1bae      	subs	r6, r5, r6
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	41ad      	sbcs	r5, r5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	426d      	negs	r5, r5
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x1d8>
 8000ff2:	e1d2      	b.n	800139a <__aeabi_ddiv+0x57e>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f927 	bl	8000248 <__aeabi_uidivmod>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	4342      	muls	r2, r0
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	0005      	movs	r5, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x1f0>
 800100a:	e16c      	b.n	80012e6 <__aeabi_ddiv+0x4ca>
 800100c:	1a88      	subs	r0, r1, r2
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f91a 	bl	8000248 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0436      	lsls	r6, r6, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	0c36      	lsrs	r6, r6, #16
 800101e:	0003      	movs	r3, r0
 8001020:	430e      	orrs	r6, r1
 8001022:	42b2      	cmp	r2, r6
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x20c>
 8001026:	e153      	b.n	80012d0 <__aeabi_ddiv+0x4b4>
 8001028:	9803      	ldr	r0, [sp, #12]
 800102a:	1ab6      	subs	r6, r6, r2
 800102c:	0002      	movs	r2, r0
 800102e:	042d      	lsls	r5, r5, #16
 8001030:	431d      	orrs	r5, r3
 8001032:	9f02      	ldr	r7, [sp, #8]
 8001034:	042b      	lsls	r3, r5, #16
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	437b      	muls	r3, r7
 800103c:	469c      	mov	ip, r3
 800103e:	0c29      	lsrs	r1, r5, #16
 8001040:	4348      	muls	r0, r1
 8001042:	0c13      	lsrs	r3, r2, #16
 8001044:	4484      	add	ip, r0
 8001046:	4463      	add	r3, ip
 8001048:	4379      	muls	r1, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x23a>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0240      	lsls	r0, r0, #9
 8001052:	4684      	mov	ip, r0
 8001054:	4461      	add	r1, ip
 8001056:	0c18      	lsrs	r0, r3, #16
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	1840      	adds	r0, r0, r1
 8001060:	189b      	adds	r3, r3, r2
 8001062:	4286      	cmp	r6, r0
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x24c>
 8001066:	e100      	b.n	800126a <__aeabi_ddiv+0x44e>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x250>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x448>
 800106c:	2301      	movs	r3, #1
 800106e:	431d      	orrs	r5, r3
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <__aeabi_ddiv+0x37c>)
 8001072:	445b      	add	r3, fp
 8001074:	2b00      	cmp	r3, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x25e>
 8001078:	e0aa      	b.n	80011d0 <__aeabi_ddiv+0x3b4>
 800107a:	076a      	lsls	r2, r5, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x264>
 800107e:	e13d      	b.n	80012fc <__aeabi_ddiv+0x4e0>
 8001080:	08e9      	lsrs	r1, r5, #3
 8001082:	4642      	mov	r2, r8
 8001084:	01d2      	lsls	r2, r2, #7
 8001086:	d506      	bpl.n	8001096 <__aeabi_ddiv+0x27a>
 8001088:	4642      	mov	r2, r8
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <__aeabi_ddiv+0x380>)
 800108c:	401a      	ands	r2, r3
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	4690      	mov	r8, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	445b      	add	r3, fp
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <__aeabi_ddiv+0x384>)
 8001098:	4293      	cmp	r3, r2
 800109a:	dd00      	ble.n	800109e <__aeabi_ddiv+0x282>
 800109c:	e723      	b.n	8000ee6 <__aeabi_ddiv+0xca>
 800109e:	4642      	mov	r2, r8
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	0755      	lsls	r5, r2, #29
 80010a4:	0252      	lsls	r2, r2, #9
 80010a6:	430d      	orrs	r5, r1
 80010a8:	0b12      	lsrs	r2, r2, #12
 80010aa:	0d5b      	lsrs	r3, r3, #21
 80010ac:	e70d      	b.n	8000eca <__aeabi_ddiv+0xae>
 80010ae:	4651      	mov	r1, sl
 80010b0:	4321      	orrs	r1, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x29a>
 80010b4:	e07c      	b.n	80011b0 <__aeabi_ddiv+0x394>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_ddiv+0x2a0>
 80010ba:	e0fb      	b.n	80012b4 <__aeabi_ddiv+0x498>
 80010bc:	0020      	movs	r0, r4
 80010be:	f001 fa1b 	bl	80024f8 <__clzsi2>
 80010c2:	0002      	movs	r2, r0
 80010c4:	3a0b      	subs	r2, #11
 80010c6:	231d      	movs	r3, #29
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	4652      	mov	r2, sl
 80010cc:	0001      	movs	r1, r0
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4653      	mov	r3, sl
 80010d2:	3908      	subs	r1, #8
 80010d4:	408b      	lsls	r3, r1
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0019      	movs	r1, r3
 80010da:	4314      	orrs	r4, r2
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <__aeabi_ddiv+0x388>)
 80010de:	4458      	add	r0, fp
 80010e0:	469b      	mov	fp, r3
 80010e2:	4483      	add	fp, r0
 80010e4:	2000      	movs	r0, #0
 80010e6:	e6d9      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x35e>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x2da>
 80010f4:	e0cf      	b.n	8001296 <__aeabi_ddiv+0x47a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 f9fe 	bl	80024f8 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	0002      	movs	r2, r0
 8001100:	390b      	subs	r1, #11
 8001102:	231d      	movs	r3, #29
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	4649      	mov	r1, r9
 8001108:	0010      	movs	r0, r2
 800110a:	40d9      	lsrs	r1, r3
 800110c:	3808      	subs	r0, #8
 800110e:	4084      	lsls	r4, r0
 8001110:	000b      	movs	r3, r1
 8001112:	464d      	mov	r5, r9
 8001114:	4323      	orrs	r3, r4
 8001116:	4698      	mov	r8, r3
 8001118:	4085      	lsls	r5, r0
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <__aeabi_ddiv+0x38c>)
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	e69e      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 8001128:	0002      	movs	r2, r0
 800112a:	4322      	orrs	r2, r4
 800112c:	4690      	mov	r8, r2
 800112e:	d11d      	bne.n	800116c <__aeabi_ddiv+0x350>
 8001130:	2208      	movs	r2, #8
 8001132:	469b      	mov	fp, r3
 8001134:	2302      	movs	r3, #2
 8001136:	2500      	movs	r5, #0
 8001138:	4691      	mov	r9, r2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e693      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800113e:	4651      	mov	r1, sl
 8001140:	4321      	orrs	r1, r4
 8001142:	d109      	bne.n	8001158 <__aeabi_ddiv+0x33c>
 8001144:	2302      	movs	r3, #2
 8001146:	464a      	mov	r2, r9
 8001148:	431a      	orrs	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__aeabi_ddiv+0x390>)
 800114c:	4691      	mov	r9, r2
 800114e:	469c      	mov	ip, r3
 8001150:	2400      	movs	r4, #0
 8001152:	2002      	movs	r0, #2
 8001154:	44e3      	add	fp, ip
 8001156:	e6a1      	b.n	8000e9c <__aeabi_ddiv+0x80>
 8001158:	2303      	movs	r3, #3
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <__aeabi_ddiv+0x390>)
 8001160:	4691      	mov	r9, r2
 8001162:	469c      	mov	ip, r3
 8001164:	4651      	mov	r1, sl
 8001166:	2003      	movs	r0, #3
 8001168:	44e3      	add	fp, ip
 800116a:	e697      	b.n	8000e9c <__aeabi_ddiv+0x80>
 800116c:	220c      	movs	r2, #12
 800116e:	469b      	mov	fp, r3
 8001170:	2303      	movs	r3, #3
 8001172:	46a0      	mov	r8, r4
 8001174:	4691      	mov	r9, r2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	e675      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800117a:	2304      	movs	r3, #4
 800117c:	4699      	mov	r9, r3
 800117e:	2300      	movs	r3, #0
 8001180:	469b      	mov	fp, r3
 8001182:	3301      	adds	r3, #1
 8001184:	2500      	movs	r5, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	e66d      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	fffffc01 	.word	0xfffffc01
 8001194:	0800a1ac 	.word	0x0800a1ac
 8001198:	000003ff 	.word	0x000003ff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	fffffc0d 	.word	0xfffffc0d
 80011ac:	fffff801 	.word	0xfffff801
 80011b0:	464a      	mov	r2, r9
 80011b2:	2301      	movs	r3, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	4691      	mov	r9, r2
 80011b8:	2400      	movs	r4, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	e66e      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80011be:	2300      	movs	r3, #0
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	469a      	mov	sl, r3
 80011c4:	2500      	movs	r5, #0
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80011c8:	0312      	lsls	r2, r2, #12
 80011ca:	e67e      	b.n	8000eca <__aeabi_ddiv+0xae>
 80011cc:	2501      	movs	r5, #1
 80011ce:	426d      	negs	r5, r5
 80011d0:	2201      	movs	r2, #1
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	2a38      	cmp	r2, #56	; 0x38
 80011d6:	dd00      	ble.n	80011da <__aeabi_ddiv+0x3be>
 80011d8:	e674      	b.n	8000ec4 <__aeabi_ddiv+0xa8>
 80011da:	2a1f      	cmp	r2, #31
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_ddiv+0x3c4>
 80011de:	e0bd      	b.n	800135c <__aeabi_ddiv+0x540>
 80011e0:	211f      	movs	r1, #31
 80011e2:	4249      	negs	r1, r1
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	4641      	mov	r1, r8
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	000b      	movs	r3, r1
 80011ec:	2a20      	cmp	r2, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x3de>
 80011f0:	4641      	mov	r1, r8
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <__aeabi_ddiv+0x5d0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4091      	lsls	r1, r2
 80011f8:	430d      	orrs	r5, r1
 80011fa:	0029      	movs	r1, r5
 80011fc:	1e4a      	subs	r2, r1, #1
 80011fe:	4191      	sbcs	r1, r2
 8001200:	4319      	orrs	r1, r3
 8001202:	2307      	movs	r3, #7
 8001204:	001d      	movs	r5, r3
 8001206:	2200      	movs	r2, #0
 8001208:	400d      	ands	r5, r1
 800120a:	420b      	tst	r3, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x3f4>
 800120e:	e0d0      	b.n	80013b2 <__aeabi_ddiv+0x596>
 8001210:	220f      	movs	r2, #15
 8001212:	2300      	movs	r3, #0
 8001214:	400a      	ands	r2, r1
 8001216:	2a04      	cmp	r2, #4
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x400>
 800121a:	e0c7      	b.n	80013ac <__aeabi_ddiv+0x590>
 800121c:	1d0a      	adds	r2, r1, #4
 800121e:	428a      	cmp	r2, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	4249      	negs	r1, r1
 8001224:	185b      	adds	r3, r3, r1
 8001226:	0011      	movs	r1, r2
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	d400      	bmi.n	800122e <__aeabi_ddiv+0x412>
 800122c:	e0be      	b.n	80013ac <__aeabi_ddiv+0x590>
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2500      	movs	r5, #0
 8001234:	e649      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4643      	mov	r3, r8
 800123a:	0312      	lsls	r2, r2, #12
 800123c:	4213      	tst	r3, r2
 800123e:	d008      	beq.n	8001252 <__aeabi_ddiv+0x436>
 8001240:	4214      	tst	r4, r2
 8001242:	d106      	bne.n	8001252 <__aeabi_ddiv+0x436>
 8001244:	4322      	orrs	r2, r4
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	46ba      	mov	sl, r7
 800124a:	000d      	movs	r5, r1
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	e63b      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	4643      	mov	r3, r8
 8001256:	0312      	lsls	r2, r2, #12
 8001258:	431a      	orrs	r2, r3
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	46b2      	mov	sl, r6
 800125e:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 8001260:	0b12      	lsrs	r2, r2, #12
 8001262:	e632      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x44e>
 8001268:	e702      	b.n	8001070 <__aeabi_ddiv+0x254>
 800126a:	19a6      	adds	r6, r4, r6
 800126c:	1e6a      	subs	r2, r5, #1
 800126e:	42a6      	cmp	r6, r4
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x458>
 8001272:	e089      	b.n	8001388 <__aeabi_ddiv+0x56c>
 8001274:	4286      	cmp	r6, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x45e>
 8001278:	e09f      	b.n	80013ba <__aeabi_ddiv+0x59e>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x462>
 800127c:	e0af      	b.n	80013de <__aeabi_ddiv+0x5c2>
 800127e:	0015      	movs	r5, r2
 8001280:	e6f4      	b.n	800106c <__aeabi_ddiv+0x250>
 8001282:	42a9      	cmp	r1, r5
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x46c>
 8001286:	e63c      	b.n	8000f02 <__aeabi_ddiv+0xe6>
 8001288:	4643      	mov	r3, r8
 800128a:	07de      	lsls	r6, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	086b      	lsrs	r3, r5, #1
 8001290:	431e      	orrs	r6, r3
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	e63c      	b.n	8000f10 <__aeabi_ddiv+0xf4>
 8001296:	f001 f92f 	bl	80024f8 <__clzsi2>
 800129a:	0001      	movs	r1, r0
 800129c:	0002      	movs	r2, r0
 800129e:	3115      	adds	r1, #21
 80012a0:	3220      	adds	r2, #32
 80012a2:	291c      	cmp	r1, #28
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_ddiv+0x48c>
 80012a6:	e72c      	b.n	8001102 <__aeabi_ddiv+0x2e6>
 80012a8:	464b      	mov	r3, r9
 80012aa:	3808      	subs	r0, #8
 80012ac:	4083      	lsls	r3, r0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	e732      	b.n	800111a <__aeabi_ddiv+0x2fe>
 80012b4:	f001 f920 	bl	80024f8 <__clzsi2>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	3215      	adds	r2, #21
 80012be:	3020      	adds	r0, #32
 80012c0:	2a1c      	cmp	r2, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4aa>
 80012c4:	e6ff      	b.n	80010c6 <__aeabi_ddiv+0x2aa>
 80012c6:	4654      	mov	r4, sl
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	409c      	lsls	r4, r3
 80012ce:	e705      	b.n	80010dc <__aeabi_ddiv+0x2c0>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x4be>
 80012d8:	e6a6      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012da:	42b2      	cmp	r2, r6
 80012dc:	d800      	bhi.n	80012e0 <__aeabi_ddiv+0x4c4>
 80012de:	e6a3      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e0:	1e83      	subs	r3, r0, #2
 80012e2:	1936      	adds	r6, r6, r4
 80012e4:	e6a0      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	3d01      	subs	r5, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x4d4>
 80012ee:	e68d      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x4da>
 80012f4:	e68a      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f6:	1e85      	subs	r5, r0, #2
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	e687      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012fc:	220f      	movs	r2, #15
 80012fe:	402a      	ands	r2, r5
 8001300:	2a04      	cmp	r2, #4
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0x4ea>
 8001304:	e6bc      	b.n	8001080 <__aeabi_ddiv+0x264>
 8001306:	1d29      	adds	r1, r5, #4
 8001308:	42a9      	cmp	r1, r5
 800130a:	41ad      	sbcs	r5, r5
 800130c:	426d      	negs	r5, r5
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	44a8      	add	r8, r5
 8001312:	e6b6      	b.n	8001082 <__aeabi_ddiv+0x266>
 8001314:	42af      	cmp	r7, r5
 8001316:	d900      	bls.n	800131a <__aeabi_ddiv+0x4fe>
 8001318:	e662      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 800131a:	4281      	cmp	r1, r0
 800131c:	d804      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 800131e:	d000      	beq.n	8001322 <__aeabi_ddiv+0x506>
 8001320:	e65e      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001322:	42ae      	cmp	r6, r5
 8001324:	d800      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 8001326:	e65b      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001328:	2302      	movs	r3, #2
 800132a:	425b      	negs	r3, r3
 800132c:	469c      	mov	ip, r3
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	44e0      	add	r8, ip
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	429d      	cmp	r5, r3
 8001338:	419b      	sbcs	r3, r3
 800133a:	425b      	negs	r3, r3
 800133c:	191b      	adds	r3, r3, r4
 800133e:	18c0      	adds	r0, r0, r3
 8001340:	e64f      	b.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8001342:	42b2      	cmp	r2, r6
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x52c>
 8001346:	e612      	b.n	8000f6e <__aeabi_ddiv+0x152>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	1936      	adds	r6, r6, r4
 800134c:	e60f      	b.n	8000f6e <__aeabi_ddiv+0x152>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x538>
 8001352:	e5fa      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	4698      	mov	r8, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e5f6      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <__aeabi_ddiv+0x5d4>)
 800135e:	0028      	movs	r0, r5
 8001360:	445b      	add	r3, fp
 8001362:	4641      	mov	r1, r8
 8001364:	409d      	lsls	r5, r3
 8001366:	4099      	lsls	r1, r3
 8001368:	40d0      	lsrs	r0, r2
 800136a:	1e6b      	subs	r3, r5, #1
 800136c:	419d      	sbcs	r5, r3
 800136e:	4643      	mov	r3, r8
 8001370:	4301      	orrs	r1, r0
 8001372:	4329      	orrs	r1, r5
 8001374:	40d3      	lsrs	r3, r2
 8001376:	074a      	lsls	r2, r1, #29
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x560>
 800137a:	e755      	b.n	8001228 <__aeabi_ddiv+0x40c>
 800137c:	220f      	movs	r2, #15
 800137e:	400a      	ands	r2, r1
 8001380:	2a04      	cmp	r2, #4
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0x56a>
 8001384:	e74a      	b.n	800121c <__aeabi_ddiv+0x400>
 8001386:	e74f      	b.n	8001228 <__aeabi_ddiv+0x40c>
 8001388:	0015      	movs	r5, r2
 800138a:	4286      	cmp	r6, r0
 800138c:	d000      	beq.n	8001390 <__aeabi_ddiv+0x574>
 800138e:	e66d      	b.n	800106c <__aeabi_ddiv+0x250>
 8001390:	9a00      	ldr	r2, [sp, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_ddiv+0x57c>
 8001396:	e669      	b.n	800106c <__aeabi_ddiv+0x250>
 8001398:	e66a      	b.n	8001070 <__aeabi_ddiv+0x254>
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <__aeabi_ddiv+0x5d8>)
 800139c:	445b      	add	r3, fp
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_ddiv+0x588>
 80013a2:	e713      	b.n	80011cc <__aeabi_ddiv+0x3b0>
 80013a4:	2501      	movs	r5, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	44a8      	add	r8, r5
 80013aa:	e66a      	b.n	8001082 <__aeabi_ddiv+0x266>
 80013ac:	075d      	lsls	r5, r3, #29
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	0b1a      	lsrs	r2, r3, #12
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	2300      	movs	r3, #0
 80013b6:	430d      	orrs	r5, r1
 80013b8:	e587      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	3d02      	subs	r5, #2
 80013be:	004a      	lsls	r2, r1, #1
 80013c0:	428a      	cmp	r2, r1
 80013c2:	41bf      	sbcs	r7, r7
 80013c4:	427f      	negs	r7, r7
 80013c6:	193f      	adds	r7, r7, r4
 80013c8:	19f6      	adds	r6, r6, r7
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	e7dd      	b.n	800138a <__aeabi_ddiv+0x56e>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4643      	mov	r3, r8
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	431a      	orrs	r2, r3
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80013da:	0b12      	lsrs	r2, r2, #12
 80013dc:	e575      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013de:	9900      	ldr	r1, [sp, #0]
 80013e0:	4299      	cmp	r1, r3
 80013e2:	d3ea      	bcc.n	80013ba <__aeabi_ddiv+0x59e>
 80013e4:	0015      	movs	r5, r2
 80013e6:	e7d3      	b.n	8001390 <__aeabi_ddiv+0x574>
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	0000043e 	.word	0x0000043e
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	000003ff 	.word	0x000003ff

080013f8 <__eqdf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	46de      	mov	lr, fp
 8001400:	4657      	mov	r7, sl
 8001402:	4690      	mov	r8, r2
 8001404:	b5e0      	push	{r5, r6, r7, lr}
 8001406:	0017      	movs	r7, r2
 8001408:	031a      	lsls	r2, r3, #12
 800140a:	0b12      	lsrs	r2, r2, #12
 800140c:	0005      	movs	r5, r0
 800140e:	4684      	mov	ip, r0
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <__eqdf2+0x80>)
 8001412:	030e      	lsls	r6, r1, #12
 8001414:	004c      	lsls	r4, r1, #1
 8001416:	4691      	mov	r9, r2
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	469b      	mov	fp, r3
 800141e:	0b36      	lsrs	r6, r6, #12
 8001420:	0d64      	lsrs	r4, r4, #21
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	0d52      	lsrs	r2, r2, #21
 8001426:	4284      	cmp	r4, r0
 8001428:	d019      	beq.n	800145e <__eqdf2+0x66>
 800142a:	4282      	cmp	r2, r0
 800142c:	d010      	beq.n	8001450 <__eqdf2+0x58>
 800142e:	2001      	movs	r0, #1
 8001430:	4294      	cmp	r4, r2
 8001432:	d10e      	bne.n	8001452 <__eqdf2+0x5a>
 8001434:	454e      	cmp	r6, r9
 8001436:	d10c      	bne.n	8001452 <__eqdf2+0x5a>
 8001438:	2001      	movs	r0, #1
 800143a:	45c4      	cmp	ip, r8
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x5a>
 800143e:	4559      	cmp	r1, fp
 8001440:	d017      	beq.n	8001472 <__eqdf2+0x7a>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x5a>
 8001446:	0030      	movs	r0, r6
 8001448:	4328      	orrs	r0, r5
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x5a>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	0033      	movs	r3, r6
 8001460:	2001      	movs	r0, #1
 8001462:	432b      	orrs	r3, r5
 8001464:	d1f5      	bne.n	8001452 <__eqdf2+0x5a>
 8001466:	42a2      	cmp	r2, r4
 8001468:	d1f3      	bne.n	8001452 <__eqdf2+0x5a>
 800146a:	464b      	mov	r3, r9
 800146c:	433b      	orrs	r3, r7
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x5a>
 8001470:	e7e2      	b.n	8001438 <__eqdf2+0x40>
 8001472:	2000      	movs	r0, #0
 8001474:	e7ed      	b.n	8001452 <__eqdf2+0x5a>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4647      	mov	r7, r8
 8001480:	46ce      	mov	lr, r9
 8001482:	0004      	movs	r4, r0
 8001484:	0018      	movs	r0, r3
 8001486:	0016      	movs	r6, r2
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	0b1b      	lsrs	r3, r3, #12
 800148c:	4d2d      	ldr	r5, [pc, #180]	; (8001544 <__gedf2+0xc8>)
 800148e:	004a      	lsls	r2, r1, #1
 8001490:	4699      	mov	r9, r3
 8001492:	b580      	push	{r7, lr}
 8001494:	0043      	lsls	r3, r0, #1
 8001496:	030f      	lsls	r7, r1, #12
 8001498:	46a4      	mov	ip, r4
 800149a:	46b0      	mov	r8, r6
 800149c:	0b3f      	lsrs	r7, r7, #12
 800149e:	0d52      	lsrs	r2, r2, #21
 80014a0:	0fc9      	lsrs	r1, r1, #31
 80014a2:	0d5b      	lsrs	r3, r3, #21
 80014a4:	0fc0      	lsrs	r0, r0, #31
 80014a6:	42aa      	cmp	r2, r5
 80014a8:	d021      	beq.n	80014ee <__gedf2+0x72>
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d013      	beq.n	80014d6 <__gedf2+0x5a>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d122      	bne.n	80014f8 <__gedf2+0x7c>
 80014b2:	433c      	orrs	r4, r7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <__gedf2+0x42>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d022      	beq.n	8001504 <__gedf2+0x88>
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0x68>
 80014c2:	4281      	cmp	r1, r0
 80014c4:	d022      	beq.n	800150c <__gedf2+0x90>
 80014c6:	2002      	movs	r0, #2
 80014c8:	3901      	subs	r1, #1
 80014ca:	4008      	ands	r0, r1
 80014cc:	3801      	subs	r0, #1
 80014ce:	bcc0      	pop	{r6, r7}
 80014d0:	46b9      	mov	r9, r7
 80014d2:	46b0      	mov	r8, r6
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	464d      	mov	r5, r9
 80014d8:	432e      	orrs	r6, r5
 80014da:	d129      	bne.n	8001530 <__gedf2+0xb4>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d1f0      	bne.n	80014c2 <__gedf2+0x46>
 80014e0:	433c      	orrs	r4, r7
 80014e2:	d1ee      	bne.n	80014c2 <__gedf2+0x46>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f2      	bne.n	80014ce <__gedf2+0x52>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7ef      	b.n	80014ce <__gedf2+0x52>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d11d      	bne.n	8001530 <__gedf2+0xb4>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d0ee      	beq.n	80014d6 <__gedf2+0x5a>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e2      	bne.n	80014c2 <__gedf2+0x46>
 80014fc:	464c      	mov	r4, r9
 80014fe:	4326      	orrs	r6, r4
 8001500:	d1df      	bne.n	80014c2 <__gedf2+0x46>
 8001502:	e7e0      	b.n	80014c6 <__gedf2+0x4a>
 8001504:	2000      	movs	r0, #0
 8001506:	2c00      	cmp	r4, #0
 8001508:	d0e1      	beq.n	80014ce <__gedf2+0x52>
 800150a:	e7dc      	b.n	80014c6 <__gedf2+0x4a>
 800150c:	429a      	cmp	r2, r3
 800150e:	dc0a      	bgt.n	8001526 <__gedf2+0xaa>
 8001510:	dbe8      	blt.n	80014e4 <__gedf2+0x68>
 8001512:	454f      	cmp	r7, r9
 8001514:	d8d7      	bhi.n	80014c6 <__gedf2+0x4a>
 8001516:	d00e      	beq.n	8001536 <__gedf2+0xba>
 8001518:	2000      	movs	r0, #0
 800151a:	454f      	cmp	r7, r9
 800151c:	d2d7      	bcs.n	80014ce <__gedf2+0x52>
 800151e:	2900      	cmp	r1, #0
 8001520:	d0e2      	beq.n	80014e8 <__gedf2+0x6c>
 8001522:	0008      	movs	r0, r1
 8001524:	e7d3      	b.n	80014ce <__gedf2+0x52>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7ce      	b.n	80014ce <__gedf2+0x52>
 8001530:	2002      	movs	r0, #2
 8001532:	4240      	negs	r0, r0
 8001534:	e7cb      	b.n	80014ce <__gedf2+0x52>
 8001536:	45c4      	cmp	ip, r8
 8001538:	d8c5      	bhi.n	80014c6 <__gedf2+0x4a>
 800153a:	2000      	movs	r0, #0
 800153c:	45c4      	cmp	ip, r8
 800153e:	d2c6      	bcs.n	80014ce <__gedf2+0x52>
 8001540:	e7ed      	b.n	800151e <__gedf2+0xa2>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__ledf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4647      	mov	r7, r8
 800154c:	46ce      	mov	lr, r9
 800154e:	0004      	movs	r4, r0
 8001550:	0018      	movs	r0, r3
 8001552:	0016      	movs	r6, r2
 8001554:	031b      	lsls	r3, r3, #12
 8001556:	0b1b      	lsrs	r3, r3, #12
 8001558:	4d2c      	ldr	r5, [pc, #176]	; (800160c <__ledf2+0xc4>)
 800155a:	004a      	lsls	r2, r1, #1
 800155c:	4699      	mov	r9, r3
 800155e:	b580      	push	{r7, lr}
 8001560:	0043      	lsls	r3, r0, #1
 8001562:	030f      	lsls	r7, r1, #12
 8001564:	46a4      	mov	ip, r4
 8001566:	46b0      	mov	r8, r6
 8001568:	0b3f      	lsrs	r7, r7, #12
 800156a:	0d52      	lsrs	r2, r2, #21
 800156c:	0fc9      	lsrs	r1, r1, #31
 800156e:	0d5b      	lsrs	r3, r3, #21
 8001570:	0fc0      	lsrs	r0, r0, #31
 8001572:	42aa      	cmp	r2, r5
 8001574:	d00d      	beq.n	8001592 <__ledf2+0x4a>
 8001576:	42ab      	cmp	r3, r5
 8001578:	d010      	beq.n	800159c <__ledf2+0x54>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d127      	bne.n	80015ce <__ledf2+0x86>
 800157e:	433c      	orrs	r4, r7
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <__ledf2+0x60>
 8001584:	464d      	mov	r5, r9
 8001586:	432e      	orrs	r6, r5
 8001588:	d10e      	bne.n	80015a8 <__ledf2+0x60>
 800158a:	2000      	movs	r0, #0
 800158c:	2c00      	cmp	r4, #0
 800158e:	d015      	beq.n	80015bc <__ledf2+0x74>
 8001590:	e00e      	b.n	80015b0 <__ledf2+0x68>
 8001592:	003d      	movs	r5, r7
 8001594:	4325      	orrs	r5, r4
 8001596:	d110      	bne.n	80015ba <__ledf2+0x72>
 8001598:	4293      	cmp	r3, r2
 800159a:	d118      	bne.n	80015ce <__ledf2+0x86>
 800159c:	464d      	mov	r5, r9
 800159e:	432e      	orrs	r6, r5
 80015a0:	d10b      	bne.n	80015ba <__ledf2+0x72>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <__ledf2+0x64>
 80015a6:	433c      	orrs	r4, r7
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d00b      	beq.n	80015c4 <__ledf2+0x7c>
 80015ac:	4281      	cmp	r1, r0
 80015ae:	d014      	beq.n	80015da <__ledf2+0x92>
 80015b0:	2002      	movs	r0, #2
 80015b2:	3901      	subs	r1, #1
 80015b4:	4008      	ands	r0, r1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e000      	b.n	80015bc <__ledf2+0x74>
 80015ba:	2002      	movs	r0, #2
 80015bc:	bcc0      	pop	{r6, r7}
 80015be:	46b9      	mov	r9, r7
 80015c0:	46b0      	mov	r8, r6
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1f9      	bne.n	80015bc <__ledf2+0x74>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7f6      	b.n	80015bc <__ledf2+0x74>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ec      	bne.n	80015ac <__ledf2+0x64>
 80015d2:	464c      	mov	r4, r9
 80015d4:	4326      	orrs	r6, r4
 80015d6:	d1e9      	bne.n	80015ac <__ledf2+0x64>
 80015d8:	e7ea      	b.n	80015b0 <__ledf2+0x68>
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd04      	ble.n	80015e8 <__ledf2+0xa0>
 80015de:	4243      	negs	r3, r0
 80015e0:	4158      	adcs	r0, r3
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	3801      	subs	r0, #1
 80015e6:	e7e9      	b.n	80015bc <__ledf2+0x74>
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbeb      	blt.n	80015c4 <__ledf2+0x7c>
 80015ec:	454f      	cmp	r7, r9
 80015ee:	d8df      	bhi.n	80015b0 <__ledf2+0x68>
 80015f0:	d006      	beq.n	8001600 <__ledf2+0xb8>
 80015f2:	2000      	movs	r0, #0
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d2e1      	bcs.n	80015bc <__ledf2+0x74>
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d0e5      	beq.n	80015c8 <__ledf2+0x80>
 80015fc:	0008      	movs	r0, r1
 80015fe:	e7dd      	b.n	80015bc <__ledf2+0x74>
 8001600:	45c4      	cmp	ip, r8
 8001602:	d8d5      	bhi.n	80015b0 <__ledf2+0x68>
 8001604:	2000      	movs	r0, #0
 8001606:	45c4      	cmp	ip, r8
 8001608:	d2d8      	bcs.n	80015bc <__ledf2+0x74>
 800160a:	e7f5      	b.n	80015f8 <__ledf2+0xb0>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4645      	mov	r5, r8
 8001614:	46de      	mov	lr, fp
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	469b      	mov	fp, r3
 8001624:	004d      	lsls	r5, r1, #1
 8001626:	0fcb      	lsrs	r3, r1, #31
 8001628:	0004      	movs	r4, r0
 800162a:	4691      	mov	r9, r2
 800162c:	4698      	mov	r8, r3
 800162e:	b087      	sub	sp, #28
 8001630:	0d6d      	lsrs	r5, r5, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e1cd      	b.n	80019d2 <__aeabi_dmul+0x3c2>
 8001636:	4bce      	ldr	r3, [pc, #824]	; (8001970 <__aeabi_dmul+0x360>)
 8001638:	429d      	cmp	r5, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e1e9      	b.n	8001a12 <__aeabi_dmul+0x402>
 800163e:	465a      	mov	r2, fp
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	00c3      	lsls	r3, r0, #3
 800164e:	469a      	mov	sl, r3
 8001650:	4bc8      	ldr	r3, [pc, #800]	; (8001974 <__aeabi_dmul+0x364>)
 8001652:	4693      	mov	fp, r2
 8001654:	469c      	mov	ip, r3
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4465      	add	r5, ip
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	033c      	lsls	r4, r7, #12
 8001660:	007b      	lsls	r3, r7, #1
 8001662:	4648      	mov	r0, r9
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	0fff      	lsrs	r7, r7, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x60>
 800166e:	e189      	b.n	8001984 <__aeabi_dmul+0x374>
 8001670:	4abf      	ldr	r2, [pc, #764]	; (8001970 <__aeabi_dmul+0x360>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <__aeabi_dmul+0x9a>
 8001676:	0f42      	lsrs	r2, r0, #29
 8001678:	00e4      	lsls	r4, r4, #3
 800167a:	4322      	orrs	r2, r4
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	0424      	lsls	r4, r4, #16
 8001680:	4314      	orrs	r4, r2
 8001682:	4abc      	ldr	r2, [pc, #752]	; (8001974 <__aeabi_dmul+0x364>)
 8001684:	2100      	movs	r1, #0
 8001686:	4694      	mov	ip, r2
 8001688:	4642      	mov	r2, r8
 800168a:	4463      	add	r3, ip
 800168c:	195b      	adds	r3, r3, r5
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	407a      	eors	r2, r7
 8001694:	3301      	adds	r3, #1
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2e0a      	cmp	r6, #10
 800169e:	dd1c      	ble.n	80016da <__aeabi_dmul+0xca>
 80016a0:	003a      	movs	r2, r7
 80016a2:	2e0b      	cmp	r6, #11
 80016a4:	d05e      	beq.n	8001764 <__aeabi_dmul+0x154>
 80016a6:	4647      	mov	r7, r8
 80016a8:	e056      	b.n	8001758 <__aeabi_dmul+0x148>
 80016aa:	4649      	mov	r1, r9
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <__aeabi_dmul+0x360>)
 80016ae:	4321      	orrs	r1, r4
 80016b0:	18eb      	adds	r3, r5, r3
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d12a      	bne.n	800170e <__aeabi_dmul+0xfe>
 80016b8:	2080      	movs	r0, #128	; 0x80
 80016ba:	2202      	movs	r2, #2
 80016bc:	0100      	lsls	r0, r0, #4
 80016be:	002b      	movs	r3, r5
 80016c0:	4684      	mov	ip, r0
 80016c2:	4316      	orrs	r6, r2
 80016c4:	4642      	mov	r2, r8
 80016c6:	4463      	add	r3, ip
 80016c8:	407a      	eors	r2, r7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2e0a      	cmp	r6, #10
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dmul+0xc4>
 80016d2:	e231      	b.n	8001b38 <__aeabi_dmul+0x528>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2400      	movs	r4, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	2e02      	cmp	r6, #2
 80016dc:	dc26      	bgt.n	800172c <__aeabi_dmul+0x11c>
 80016de:	3e01      	subs	r6, #1
 80016e0:	2e01      	cmp	r6, #1
 80016e2:	d852      	bhi.n	800178a <__aeabi_dmul+0x17a>
 80016e4:	2902      	cmp	r1, #2
 80016e6:	d04c      	beq.n	8001782 <__aeabi_dmul+0x172>
 80016e8:	2901      	cmp	r1, #1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dmul+0xde>
 80016ec:	e118      	b.n	8001920 <__aeabi_dmul+0x310>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	4323      	orrs	r3, r4
 80016f8:	07d2      	lsls	r2, r2, #31
 80016fa:	4313      	orrs	r3, r2
 80016fc:	0028      	movs	r0, r5
 80016fe:	0019      	movs	r1, r3
 8001700:	b007      	add	sp, #28
 8001702:	bcf0      	pop	{r4, r5, r6, r7}
 8001704:	46bb      	mov	fp, r7
 8001706:	46b2      	mov	sl, r6
 8001708:	46a9      	mov	r9, r5
 800170a:	46a0      	mov	r8, r4
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	2203      	movs	r2, #3
 8001712:	0109      	lsls	r1, r1, #4
 8001714:	002b      	movs	r3, r5
 8001716:	468c      	mov	ip, r1
 8001718:	4316      	orrs	r6, r2
 800171a:	4642      	mov	r2, r8
 800171c:	4463      	add	r3, ip
 800171e:	407a      	eors	r2, r7
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2e0a      	cmp	r6, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e228      	b.n	8001b7c <__aeabi_dmul+0x56c>
 800172a:	2103      	movs	r1, #3
 800172c:	2501      	movs	r5, #1
 800172e:	40b5      	lsls	r5, r6
 8001730:	46ac      	mov	ip, r5
 8001732:	26a6      	movs	r6, #166	; 0xa6
 8001734:	4663      	mov	r3, ip
 8001736:	00f6      	lsls	r6, r6, #3
 8001738:	4035      	ands	r5, r6
 800173a:	4233      	tst	r3, r6
 800173c:	d10b      	bne.n	8001756 <__aeabi_dmul+0x146>
 800173e:	2690      	movs	r6, #144	; 0x90
 8001740:	00b6      	lsls	r6, r6, #2
 8001742:	4233      	tst	r3, r6
 8001744:	d118      	bne.n	8001778 <__aeabi_dmul+0x168>
 8001746:	3eb9      	subs	r6, #185	; 0xb9
 8001748:	3eff      	subs	r6, #255	; 0xff
 800174a:	421e      	tst	r6, r3
 800174c:	d01d      	beq.n	800178a <__aeabi_dmul+0x17a>
 800174e:	46a3      	mov	fp, r4
 8001750:	4682      	mov	sl, r0
 8001752:	9100      	str	r1, [sp, #0]
 8001754:	e000      	b.n	8001758 <__aeabi_dmul+0x148>
 8001756:	0017      	movs	r7, r2
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	003a      	movs	r2, r7
 800175c:	2902      	cmp	r1, #2
 800175e:	d010      	beq.n	8001782 <__aeabi_dmul+0x172>
 8001760:	465c      	mov	r4, fp
 8001762:	4650      	mov	r0, sl
 8001764:	2903      	cmp	r1, #3
 8001766:	d1bf      	bne.n	80016e8 <__aeabi_dmul+0xd8>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	0005      	movs	r5, r0
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <__aeabi_dmul+0x360>)
 8001774:	0b24      	lsrs	r4, r4, #12
 8001776:	e7bd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	2200      	movs	r2, #0
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <__aeabi_dmul+0x360>)
 800177e:	0324      	lsls	r4, r4, #12
 8001780:	e7b8      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001782:	2400      	movs	r4, #0
 8001784:	2500      	movs	r5, #0
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <__aeabi_dmul+0x360>)
 8001788:	e7b4      	b.n	80016f4 <__aeabi_dmul+0xe4>
 800178a:	4653      	mov	r3, sl
 800178c:	041e      	lsls	r6, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	0c1f      	lsrs	r7, r3, #16
 8001792:	0033      	movs	r3, r6
 8001794:	0c01      	lsrs	r1, r0, #16
 8001796:	0400      	lsls	r0, r0, #16
 8001798:	0c00      	lsrs	r0, r0, #16
 800179a:	4343      	muls	r3, r0
 800179c:	4698      	mov	r8, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	437b      	muls	r3, r7
 80017a2:	4699      	mov	r9, r3
 80017a4:	0033      	movs	r3, r6
 80017a6:	434b      	muls	r3, r1
 80017a8:	469c      	mov	ip, r3
 80017aa:	4643      	mov	r3, r8
 80017ac:	000d      	movs	r5, r1
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	469a      	mov	sl, r3
 80017b2:	437d      	muls	r5, r7
 80017b4:	44cc      	add	ip, r9
 80017b6:	44d4      	add	ip, sl
 80017b8:	9500      	str	r5, [sp, #0]
 80017ba:	45e1      	cmp	r9, ip
 80017bc:	d904      	bls.n	80017c8 <__aeabi_dmul+0x1b8>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4699      	mov	r9, r3
 80017c4:	444d      	add	r5, r9
 80017c6:	9500      	str	r5, [sp, #0]
 80017c8:	4663      	mov	r3, ip
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	001d      	movs	r5, r3
 80017ce:	4663      	mov	r3, ip
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	469c      	mov	ip, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	4698      	mov	r8, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4443      	add	r3, r8
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	0c23      	lsrs	r3, r4, #16
 80017e4:	4698      	mov	r8, r3
 80017e6:	0033      	movs	r3, r6
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	4363      	muls	r3, r4
 80017ee:	469c      	mov	ip, r3
 80017f0:	0023      	movs	r3, r4
 80017f2:	437b      	muls	r3, r7
 80017f4:	4699      	mov	r9, r3
 80017f6:	4643      	mov	r3, r8
 80017f8:	435e      	muls	r6, r3
 80017fa:	435f      	muls	r7, r3
 80017fc:	444e      	add	r6, r9
 80017fe:	4663      	mov	r3, ip
 8001800:	46b2      	mov	sl, r6
 8001802:	0c1e      	lsrs	r6, r3, #16
 8001804:	4456      	add	r6, sl
 8001806:	45b1      	cmp	r9, r6
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x202>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4699      	mov	r9, r3
 8001810:	444f      	add	r7, r9
 8001812:	0c33      	lsrs	r3, r6, #16
 8001814:	4699      	mov	r9, r3
 8001816:	003b      	movs	r3, r7
 8001818:	444b      	add	r3, r9
 800181a:	9305      	str	r3, [sp, #20]
 800181c:	4663      	mov	r3, ip
 800181e:	46ac      	mov	ip, r5
 8001820:	041f      	lsls	r7, r3, #16
 8001822:	0c3f      	lsrs	r7, r7, #16
 8001824:	0436      	lsls	r6, r6, #16
 8001826:	19f6      	adds	r6, r6, r7
 8001828:	44b4      	add	ip, r6
 800182a:	4663      	mov	r3, ip
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	465b      	mov	r3, fp
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	465b      	mov	r3, fp
 8001836:	041f      	lsls	r7, r3, #16
 8001838:	0c3f      	lsrs	r7, r7, #16
 800183a:	003b      	movs	r3, r7
 800183c:	4343      	muls	r3, r0
 800183e:	4699      	mov	r9, r3
 8001840:	4663      	mov	r3, ip
 8001842:	4343      	muls	r3, r0
 8001844:	469a      	mov	sl, r3
 8001846:	464b      	mov	r3, r9
 8001848:	4660      	mov	r0, ip
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	469b      	mov	fp, r3
 800184e:	4348      	muls	r0, r1
 8001850:	4379      	muls	r1, r7
 8001852:	4451      	add	r1, sl
 8001854:	4459      	add	r1, fp
 8001856:	458a      	cmp	sl, r1
 8001858:	d903      	bls.n	8001862 <__aeabi_dmul+0x252>
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	469a      	mov	sl, r3
 8001860:	4450      	add	r0, sl
 8001862:	0c0b      	lsrs	r3, r1, #16
 8001864:	469a      	mov	sl, r3
 8001866:	464b      	mov	r3, r9
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	4699      	mov	r9, r3
 800186e:	003b      	movs	r3, r7
 8001870:	4363      	muls	r3, r4
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	4645      	mov	r5, r8
 8001876:	4449      	add	r1, r9
 8001878:	4699      	mov	r9, r3
 800187a:	4663      	mov	r3, ip
 800187c:	435c      	muls	r4, r3
 800187e:	436b      	muls	r3, r5
 8001880:	469c      	mov	ip, r3
 8001882:	464b      	mov	r3, r9
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	436f      	muls	r7, r5
 800188a:	193f      	adds	r7, r7, r4
 800188c:	4447      	add	r7, r8
 800188e:	4450      	add	r0, sl
 8001890:	42bc      	cmp	r4, r7
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x28c>
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	4698      	mov	r8, r3
 800189a:	44c4      	add	ip, r8
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	9d00      	ldr	r5, [sp, #0]
 80018a0:	4698      	mov	r8, r3
 80018a2:	4445      	add	r5, r8
 80018a4:	42b5      	cmp	r5, r6
 80018a6:	41b6      	sbcs	r6, r6
 80018a8:	4273      	negs	r3, r6
 80018aa:	4698      	mov	r8, r3
 80018ac:	464b      	mov	r3, r9
 80018ae:	041e      	lsls	r6, r3, #16
 80018b0:	9b05      	ldr	r3, [sp, #20]
 80018b2:	043c      	lsls	r4, r7, #16
 80018b4:	4699      	mov	r9, r3
 80018b6:	0c36      	lsrs	r6, r6, #16
 80018b8:	19a4      	adds	r4, r4, r6
 80018ba:	444c      	add	r4, r9
 80018bc:	46a1      	mov	r9, r4
 80018be:	4683      	mov	fp, r0
 80018c0:	186e      	adds	r6, r5, r1
 80018c2:	44c1      	add	r9, r8
 80018c4:	428e      	cmp	r6, r1
 80018c6:	4189      	sbcs	r1, r1
 80018c8:	44cb      	add	fp, r9
 80018ca:	465d      	mov	r5, fp
 80018cc:	4249      	negs	r1, r1
 80018ce:	186d      	adds	r5, r5, r1
 80018d0:	429c      	cmp	r4, r3
 80018d2:	41a4      	sbcs	r4, r4
 80018d4:	45c1      	cmp	r9, r8
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	4583      	cmp	fp, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	428d      	cmp	r5, r1
 80018de:	4189      	sbcs	r1, r1
 80018e0:	425b      	negs	r3, r3
 80018e2:	4264      	negs	r4, r4
 80018e4:	431c      	orrs	r4, r3
 80018e6:	4240      	negs	r0, r0
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	4249      	negs	r1, r1
 80018ec:	4301      	orrs	r1, r0
 80018ee:	0270      	lsls	r0, r6, #9
 80018f0:	0c3f      	lsrs	r7, r7, #16
 80018f2:	4318      	orrs	r0, r3
 80018f4:	19e4      	adds	r4, r4, r7
 80018f6:	1e47      	subs	r7, r0, #1
 80018f8:	41b8      	sbcs	r0, r7
 80018fa:	1864      	adds	r4, r4, r1
 80018fc:	4464      	add	r4, ip
 80018fe:	0df6      	lsrs	r6, r6, #23
 8001900:	0261      	lsls	r1, r4, #9
 8001902:	4330      	orrs	r0, r6
 8001904:	0dec      	lsrs	r4, r5, #23
 8001906:	026e      	lsls	r6, r5, #9
 8001908:	430c      	orrs	r4, r1
 800190a:	4330      	orrs	r0, r6
 800190c:	01c9      	lsls	r1, r1, #7
 800190e:	d400      	bmi.n	8001912 <__aeabi_dmul+0x302>
 8001910:	e0f1      	b.n	8001af6 <__aeabi_dmul+0x4e6>
 8001912:	2101      	movs	r1, #1
 8001914:	0843      	lsrs	r3, r0, #1
 8001916:	4001      	ands	r1, r0
 8001918:	430b      	orrs	r3, r1
 800191a:	07e0      	lsls	r0, r4, #31
 800191c:	4318      	orrs	r0, r3
 800191e:	0864      	lsrs	r4, r4, #1
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <__aeabi_dmul+0x368>)
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	468c      	mov	ip, r1
 8001926:	4463      	add	r3, ip
 8001928:	2b00      	cmp	r3, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_dmul+0x31e>
 800192c:	e097      	b.n	8001a5e <__aeabi_dmul+0x44e>
 800192e:	0741      	lsls	r1, r0, #29
 8001930:	d009      	beq.n	8001946 <__aeabi_dmul+0x336>
 8001932:	210f      	movs	r1, #15
 8001934:	4001      	ands	r1, r0
 8001936:	2904      	cmp	r1, #4
 8001938:	d005      	beq.n	8001946 <__aeabi_dmul+0x336>
 800193a:	1d01      	adds	r1, r0, #4
 800193c:	4281      	cmp	r1, r0
 800193e:	4180      	sbcs	r0, r0
 8001940:	4240      	negs	r0, r0
 8001942:	1824      	adds	r4, r4, r0
 8001944:	0008      	movs	r0, r1
 8001946:	01e1      	lsls	r1, r4, #7
 8001948:	d506      	bpl.n	8001958 <__aeabi_dmul+0x348>
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	00c9      	lsls	r1, r1, #3
 800194e:	468c      	mov	ip, r1
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <__aeabi_dmul+0x36c>)
 8001952:	401c      	ands	r4, r3
 8001954:	9b02      	ldr	r3, [sp, #8]
 8001956:	4463      	add	r3, ip
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <__aeabi_dmul+0x370>)
 800195a:	428b      	cmp	r3, r1
 800195c:	dd00      	ble.n	8001960 <__aeabi_dmul+0x350>
 800195e:	e710      	b.n	8001782 <__aeabi_dmul+0x172>
 8001960:	0761      	lsls	r1, r4, #29
 8001962:	08c5      	lsrs	r5, r0, #3
 8001964:	0264      	lsls	r4, r4, #9
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	430d      	orrs	r5, r1
 800196a:	0b24      	lsrs	r4, r4, #12
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	000003ff 	.word	0x000003ff
 800197c:	feffffff 	.word	0xfeffffff
 8001980:	000007fe 	.word	0x000007fe
 8001984:	464b      	mov	r3, r9
 8001986:	4323      	orrs	r3, r4
 8001988:	d059      	beq.n	8001a3e <__aeabi_dmul+0x42e>
 800198a:	2c00      	cmp	r4, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dmul+0x380>
 800198e:	e0a3      	b.n	8001ad8 <__aeabi_dmul+0x4c8>
 8001990:	0020      	movs	r0, r4
 8001992:	f000 fdb1 	bl	80024f8 <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	4649      	mov	r1, r9
 80019a2:	0018      	movs	r0, r3
 80019a4:	40d1      	lsrs	r1, r2
 80019a6:	464a      	mov	r2, r9
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	4084      	lsls	r4, r0
 80019ae:	0010      	movs	r0, r2
 80019b0:	430c      	orrs	r4, r1
 80019b2:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <__aeabi_dmul+0x574>)
 80019b4:	1aeb      	subs	r3, r5, r3
 80019b6:	4694      	mov	ip, r2
 80019b8:	4642      	mov	r2, r8
 80019ba:	4463      	add	r3, ip
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	407a      	eors	r2, r7
 80019c2:	3301      	adds	r3, #1
 80019c4:	2100      	movs	r1, #0
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2e0a      	cmp	r6, #10
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x3c0>
 80019ce:	e667      	b.n	80016a0 <__aeabi_dmul+0x90>
 80019d0:	e683      	b.n	80016da <__aeabi_dmul+0xca>
 80019d2:	465b      	mov	r3, fp
 80019d4:	4303      	orrs	r3, r0
 80019d6:	469a      	mov	sl, r3
 80019d8:	d02a      	beq.n	8001a30 <__aeabi_dmul+0x420>
 80019da:	465b      	mov	r3, fp
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06d      	beq.n	8001abc <__aeabi_dmul+0x4ac>
 80019e0:	4658      	mov	r0, fp
 80019e2:	f000 fd89 	bl	80024f8 <__clzsi2>
 80019e6:	0001      	movs	r1, r0
 80019e8:	0003      	movs	r3, r0
 80019ea:	390b      	subs	r1, #11
 80019ec:	221d      	movs	r2, #29
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	0021      	movs	r1, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	465d      	mov	r5, fp
 80019f6:	40d1      	lsrs	r1, r2
 80019f8:	3808      	subs	r0, #8
 80019fa:	4085      	lsls	r5, r0
 80019fc:	000a      	movs	r2, r1
 80019fe:	4084      	lsls	r4, r0
 8001a00:	432a      	orrs	r2, r5
 8001a02:	4693      	mov	fp, r2
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4d5f      	ldr	r5, [pc, #380]	; (8001b84 <__aeabi_dmul+0x574>)
 8001a08:	2600      	movs	r6, #0
 8001a0a:	1aed      	subs	r5, r5, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	e625      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a12:	465b      	mov	r3, fp
 8001a14:	4303      	orrs	r3, r0
 8001a16:	469a      	mov	sl, r3
 8001a18:	d105      	bne.n	8001a26 <__aeabi_dmul+0x416>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2608      	movs	r6, #8
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	e61b      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a26:	2303      	movs	r3, #3
 8001a28:	4682      	mov	sl, r0
 8001a2a:	260c      	movs	r6, #12
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e616      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a30:	2300      	movs	r3, #0
 8001a32:	469b      	mov	fp, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	2604      	movs	r6, #4
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e60f      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a3e:	4642      	mov	r2, r8
 8001a40:	3301      	adds	r3, #1
 8001a42:	9501      	str	r5, [sp, #4]
 8001a44:	431e      	orrs	r6, r3
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	407a      	eors	r2, r7
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2e0a      	cmp	r6, #10
 8001a58:	dd00      	ble.n	8001a5c <__aeabi_dmul+0x44c>
 8001a5a:	e621      	b.n	80016a0 <__aeabi_dmul+0x90>
 8001a5c:	e63d      	b.n	80016da <__aeabi_dmul+0xca>
 8001a5e:	2101      	movs	r1, #1
 8001a60:	1ac9      	subs	r1, r1, r3
 8001a62:	2938      	cmp	r1, #56	; 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x458>
 8001a66:	e642      	b.n	80016ee <__aeabi_dmul+0xde>
 8001a68:	291f      	cmp	r1, #31
 8001a6a:	dd47      	ble.n	8001afc <__aeabi_dmul+0x4ec>
 8001a6c:	261f      	movs	r6, #31
 8001a6e:	0025      	movs	r5, r4
 8001a70:	4276      	negs	r6, r6
 8001a72:	1af3      	subs	r3, r6, r3
 8001a74:	40dd      	lsrs	r5, r3
 8001a76:	002b      	movs	r3, r5
 8001a78:	2920      	cmp	r1, #32
 8001a7a:	d005      	beq.n	8001a88 <__aeabi_dmul+0x478>
 8001a7c:	4942      	ldr	r1, [pc, #264]	; (8001b88 <__aeabi_dmul+0x578>)
 8001a7e:	9d02      	ldr	r5, [sp, #8]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4465      	add	r5, ip
 8001a84:	40ac      	lsls	r4, r5
 8001a86:	4320      	orrs	r0, r4
 8001a88:	1e41      	subs	r1, r0, #1
 8001a8a:	4188      	sbcs	r0, r1
 8001a8c:	4318      	orrs	r0, r3
 8001a8e:	2307      	movs	r3, #7
 8001a90:	001d      	movs	r5, r3
 8001a92:	2400      	movs	r4, #0
 8001a94:	4005      	ands	r5, r0
 8001a96:	4203      	tst	r3, r0
 8001a98:	d04a      	beq.n	8001b30 <__aeabi_dmul+0x520>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d042      	beq.n	8001b2a <__aeabi_dmul+0x51a>
 8001aa4:	1d03      	adds	r3, r0, #4
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	4180      	sbcs	r0, r0
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1824      	adds	r4, r4, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d53a      	bpl.n	8001b2a <__aeabi_dmul+0x51a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	e61b      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001abc:	f000 fd1c 	bl	80024f8 <__clzsi2>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	3115      	adds	r1, #21
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	291c      	cmp	r1, #28
 8001aca:	dd8f      	ble.n	80019ec <__aeabi_dmul+0x3dc>
 8001acc:	3808      	subs	r0, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4084      	lsls	r4, r0
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	46a3      	mov	fp, r4
 8001ad6:	e796      	b.n	8001a06 <__aeabi_dmul+0x3f6>
 8001ad8:	f000 fd0e 	bl	80024f8 <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0003      	movs	r3, r0
 8001ae0:	3115      	adds	r1, #21
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	291c      	cmp	r1, #28
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dmul+0x4da>
 8001ae8:	e758      	b.n	800199c <__aeabi_dmul+0x38c>
 8001aea:	0002      	movs	r2, r0
 8001aec:	464c      	mov	r4, r9
 8001aee:	3a08      	subs	r2, #8
 8001af0:	2000      	movs	r0, #0
 8001af2:	4094      	lsls	r4, r2
 8001af4:	e75d      	b.n	80019b2 <__aeabi_dmul+0x3a2>
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	e711      	b.n	8001920 <__aeabi_dmul+0x310>
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <__aeabi_dmul+0x57c>)
 8001afe:	0026      	movs	r6, r4
 8001b00:	469c      	mov	ip, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	9d02      	ldr	r5, [sp, #8]
 8001b06:	40cb      	lsrs	r3, r1
 8001b08:	4465      	add	r5, ip
 8001b0a:	40ae      	lsls	r6, r5
 8001b0c:	431e      	orrs	r6, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	40ab      	lsls	r3, r5
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	4183      	sbcs	r3, r0
 8001b16:	0030      	movs	r0, r6
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	40cc      	lsrs	r4, r1
 8001b1c:	0743      	lsls	r3, r0, #29
 8001b1e:	d0c7      	beq.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4003      	ands	r3, r0
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d1bd      	bne.n	8001aa4 <__aeabi_dmul+0x494>
 8001b28:	e7c2      	b.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b2a:	0765      	lsls	r5, r4, #29
 8001b2c:	0264      	lsls	r4, r4, #9
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	08c0      	lsrs	r0, r0, #3
 8001b32:	2300      	movs	r3, #0
 8001b34:	4305      	orrs	r5, r0
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b38:	2500      	movs	r5, #0
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	2e0f      	cmp	r6, #15
 8001b3e:	d10c      	bne.n	8001b5a <__aeabi_dmul+0x54a>
 8001b40:	2480      	movs	r4, #128	; 0x80
 8001b42:	465b      	mov	r3, fp
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	4223      	tst	r3, r4
 8001b48:	d00e      	beq.n	8001b68 <__aeabi_dmul+0x558>
 8001b4a:	4221      	tst	r1, r4
 8001b4c:	d10c      	bne.n	8001b68 <__aeabi_dmul+0x558>
 8001b4e:	430c      	orrs	r4, r1
 8001b50:	0324      	lsls	r4, r4, #12
 8001b52:	003a      	movs	r2, r7
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	e5cc      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b5a:	2e0b      	cmp	r6, #11
 8001b5c:	d000      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b5e:	e5a2      	b.n	80016a6 <__aeabi_dmul+0x96>
 8001b60:	468b      	mov	fp, r1
 8001b62:	46aa      	mov	sl, r5
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	e5f7      	b.n	8001758 <__aeabi_dmul+0x148>
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	4642      	mov	r2, r8
 8001b74:	4655      	mov	r5, sl
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b78:	0b24      	lsrs	r4, r4, #12
 8001b7a:	e5bb      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	0021      	movs	r1, r4
 8001b80:	2303      	movs	r3, #3
 8001b82:	e7db      	b.n	8001b3c <__aeabi_dmul+0x52c>
 8001b84:	fffffc0d 	.word	0xfffffc0d
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	000007ff 	.word	0x000007ff

08001b94 <__aeabi_dsub>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	4657      	mov	r7, sl
 8001b98:	464e      	mov	r6, r9
 8001b9a:	4645      	mov	r5, r8
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ba0:	000d      	movs	r5, r1
 8001ba2:	0004      	movs	r4, r0
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	032b      	lsls	r3, r5, #12
 8001baa:	0a5b      	lsrs	r3, r3, #9
 8001bac:	0f62      	lsrs	r2, r4, #29
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	00e3      	lsls	r3, r4, #3
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	0a64      	lsrs	r4, r4, #9
 8001bb6:	0f47      	lsrs	r7, r0, #29
 8001bb8:	4327      	orrs	r7, r4
 8001bba:	4cd0      	ldr	r4, [pc, #832]	; (8001efc <__aeabi_dsub+0x368>)
 8001bbc:	006e      	lsls	r6, r5, #1
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	004a      	lsls	r2, r1, #1
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	0d76      	lsrs	r6, r6, #21
 8001bcc:	0fed      	lsrs	r5, r5, #31
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	9001      	str	r0, [sp, #4]
 8001bd4:	42a2      	cmp	r2, r4
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x46>
 8001bd8:	e0b9      	b.n	8001d4e <__aeabi_dsub+0x1ba>
 8001bda:	2401      	movs	r4, #1
 8001bdc:	4061      	eors	r1, r4
 8001bde:	468b      	mov	fp, r1
 8001be0:	428d      	cmp	r5, r1
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x52>
 8001be4:	e08d      	b.n	8001d02 <__aeabi_dsub+0x16e>
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dsub+0x5c>
 8001bee:	e0b7      	b.n	8001d60 <__aeabi_dsub+0x1cc>
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x62>
 8001bf4:	e0cb      	b.n	8001d8e <__aeabi_dsub+0x1fa>
 8001bf6:	4ac1      	ldr	r2, [pc, #772]	; (8001efc <__aeabi_dsub+0x368>)
 8001bf8:	4296      	cmp	r6, r2
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x6a>
 8001bfc:	e186      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0412      	lsls	r2, r2, #16
 8001c02:	4317      	orrs	r7, r2
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a38      	cmp	r2, #56	; 0x38
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x78>
 8001c0a:	e1a4      	b.n	8001f56 <__aeabi_dsub+0x3c2>
 8001c0c:	2a1f      	cmp	r2, #31
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dsub+0x7e>
 8001c10:	e21d      	b.n	800204e <__aeabi_dsub+0x4ba>
 8001c12:	4661      	mov	r1, ip
 8001c14:	2220      	movs	r2, #32
 8001c16:	003c      	movs	r4, r7
 8001c18:	1a52      	subs	r2, r2, r1
 8001c1a:	0001      	movs	r1, r0
 8001c1c:	4090      	lsls	r0, r2
 8001c1e:	4094      	lsls	r4, r2
 8001c20:	1e42      	subs	r2, r0, #1
 8001c22:	4190      	sbcs	r0, r2
 8001c24:	4662      	mov	r2, ip
 8001c26:	46a0      	mov	r8, r4
 8001c28:	4664      	mov	r4, ip
 8001c2a:	40d7      	lsrs	r7, r2
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	40e1      	lsrs	r1, r4
 8001c30:	4644      	mov	r4, r8
 8001c32:	1bd2      	subs	r2, r2, r7
 8001c34:	4691      	mov	r9, r2
 8001c36:	430c      	orrs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	1b1c      	subs	r4, r3, r4
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	4192      	sbcs	r2, r2
 8001c40:	464b      	mov	r3, r9
 8001c42:	4252      	negs	r2, r2
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	469a      	mov	sl, r3
 8001c48:	4653      	mov	r3, sl
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	d400      	bmi.n	8001c50 <__aeabi_dsub+0xbc>
 8001c4e:	e12b      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001c50:	4653      	mov	r3, sl
 8001c52:	025a      	lsls	r2, r3, #9
 8001c54:	0a53      	lsrs	r3, r2, #9
 8001c56:	469a      	mov	sl, r3
 8001c58:	4653      	mov	r3, sl
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0xcc>
 8001c5e:	e166      	b.n	8001f2e <__aeabi_dsub+0x39a>
 8001c60:	4650      	mov	r0, sl
 8001c62:	f000 fc49 	bl	80024f8 <__clzsi2>
 8001c66:	0003      	movs	r3, r0
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	4651      	mov	r1, sl
 8001c72:	40d0      	lsrs	r0, r2
 8001c74:	4099      	lsls	r1, r3
 8001c76:	0002      	movs	r2, r0
 8001c78:	409c      	lsls	r4, r3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0xee>
 8001c80:	e164      	b.n	8001f4c <__aeabi_dsub+0x3b8>
 8001c82:	1b9b      	subs	r3, r3, r6
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	291f      	cmp	r1, #31
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0xf8>
 8001c8a:	e0fe      	b.n	8001e8a <__aeabi_dsub+0x2f6>
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0026      	movs	r6, r4
 8001c92:	1a5b      	subs	r3, r3, r1
 8001c94:	409c      	lsls	r4, r3
 8001c96:	4098      	lsls	r0, r3
 8001c98:	40ce      	lsrs	r6, r1
 8001c9a:	40ca      	lsrs	r2, r1
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	4330      	orrs	r0, r6
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	4304      	orrs	r4, r0
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d009      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cb4:	1d23      	adds	r3, r4, #4
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	41a4      	sbcs	r4, r4
 8001cba:	4264      	negs	r4, r4
 8001cbc:	44a2      	add	sl, r4
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dsub+0x134>
 8001cc6:	e0f2      	b.n	8001eae <__aeabi_dsub+0x31a>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <__aeabi_dsub+0x368>)
 8001cca:	3601      	adds	r6, #1
 8001ccc:	429e      	cmp	r6, r3
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x13e>
 8001cd0:	e10f      	b.n	8001ef2 <__aeabi_dsub+0x35e>
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	498a      	ldr	r1, [pc, #552]	; (8001f00 <__aeabi_dsub+0x36c>)
 8001cd6:	08e4      	lsrs	r4, r4, #3
 8001cd8:	400b      	ands	r3, r1
 8001cda:	0019      	movs	r1, r3
 8001cdc:	075b      	lsls	r3, r3, #29
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	0572      	lsls	r2, r6, #21
 8001ce2:	024c      	lsls	r4, r1, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	0d52      	lsrs	r2, r2, #21
 8001ce8:	0512      	lsls	r2, r2, #20
 8001cea:	4322      	orrs	r2, r4
 8001cec:	07ed      	lsls	r5, r5, #31
 8001cee:	432a      	orrs	r2, r5
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	1ab4      	subs	r4, r6, r2
 8001d04:	46a4      	mov	ip, r4
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	dd59      	ble.n	8001dbe <__aeabi_dsub+0x22a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x17c>
 8001d0e:	e0b0      	b.n	8001e72 <__aeabi_dsub+0x2de>
 8001d10:	4556      	cmp	r6, sl
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x182>
 8001d14:	e0fa      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0412      	lsls	r2, r2, #16
 8001d1a:	4317      	orrs	r7, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	2a38      	cmp	r2, #56	; 0x38
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dsub+0x190>
 8001d22:	e0d4      	b.n	8001ece <__aeabi_dsub+0x33a>
 8001d24:	2a1f      	cmp	r2, #31
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x196>
 8001d28:	e1c0      	b.n	80020ac <__aeabi_dsub+0x518>
 8001d2a:	0039      	movs	r1, r7
 8001d2c:	3a20      	subs	r2, #32
 8001d2e:	40d1      	lsrs	r1, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	2a20      	cmp	r2, #32
 8001d34:	d006      	beq.n	8001d44 <__aeabi_dsub+0x1b0>
 8001d36:	4664      	mov	r4, ip
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1b12      	subs	r2, r2, r4
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	4094      	lsls	r4, r2
 8001d40:	4304      	orrs	r4, r0
 8001d42:	9401      	str	r4, [sp, #4]
 8001d44:	9c01      	ldr	r4, [sp, #4]
 8001d46:	1e62      	subs	r2, r4, #1
 8001d48:	4194      	sbcs	r4, r2
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	e0c3      	b.n	8001ed6 <__aeabi_dsub+0x342>
 8001d4e:	003c      	movs	r4, r7
 8001d50:	4304      	orrs	r4, r0
 8001d52:	d02b      	beq.n	8001dac <__aeabi_dsub+0x218>
 8001d54:	468b      	mov	fp, r1
 8001d56:	428d      	cmp	r5, r1
 8001d58:	d02e      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001d5a:	4c6a      	ldr	r4, [pc, #424]	; (8001f04 <__aeabi_dsub+0x370>)
 8001d5c:	46a4      	mov	ip, r4
 8001d5e:	44b4      	add	ip, r6
 8001d60:	4664      	mov	r4, ip
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d05f      	beq.n	8001e26 <__aeabi_dsub+0x292>
 8001d66:	1b94      	subs	r4, r2, r6
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x1dc>
 8001d6e:	e120      	b.n	8001fb2 <__aeabi_dsub+0x41e>
 8001d70:	464c      	mov	r4, r9
 8001d72:	431c      	orrs	r4, r3
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x1e4>
 8001d76:	e1c7      	b.n	8002108 <__aeabi_dsub+0x574>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	1e4c      	subs	r4, r1, #1
 8001d7c:	2901      	cmp	r1, #1
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1ee>
 8001d80:	e223      	b.n	80021ca <__aeabi_dsub+0x636>
 8001d82:	4d5e      	ldr	r5, [pc, #376]	; (8001efc <__aeabi_dsub+0x368>)
 8001d84:	45ac      	cmp	ip, r5
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x1f6>
 8001d88:	e1d8      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	e11a      	b.n	8001fc4 <__aeabi_dsub+0x430>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x202>
 8001d94:	e0e4      	b.n	8001f60 <__aeabi_dsub+0x3cc>
 8001d96:	0022      	movs	r2, r4
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	2c01      	cmp	r4, #1
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x20c>
 8001d9e:	e1c3      	b.n	8002128 <__aeabi_dsub+0x594>
 8001da0:	4956      	ldr	r1, [pc, #344]	; (8001efc <__aeabi_dsub+0x368>)
 8001da2:	428c      	cmp	r4, r1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x214>
 8001da6:	e0b1      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001da8:	4694      	mov	ip, r2
 8001daa:	e72b      	b.n	8001c04 <__aeabi_dsub+0x70>
 8001dac:	2401      	movs	r4, #1
 8001dae:	4061      	eors	r1, r4
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001db6:	e716      	b.n	8001be6 <__aeabi_dsub+0x52>
 8001db8:	4952      	ldr	r1, [pc, #328]	; (8001f04 <__aeabi_dsub+0x370>)
 8001dba:	468c      	mov	ip, r1
 8001dbc:	44b4      	add	ip, r6
 8001dbe:	4664      	mov	r4, ip
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x232>
 8001dc4:	e0d3      	b.n	8001f6e <__aeabi_dsub+0x3da>
 8001dc6:	1b91      	subs	r1, r2, r6
 8001dc8:	468c      	mov	ip, r1
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x23c>
 8001dce:	e15e      	b.n	800208e <__aeabi_dsub+0x4fa>
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <__aeabi_dsub+0x368>)
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x244>
 8001dd6:	e1be      	b.n	8002156 <__aeabi_dsub+0x5c2>
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	464c      	mov	r4, r9
 8001ddc:	0409      	lsls	r1, r1, #16
 8001dde:	430c      	orrs	r4, r1
 8001de0:	46a1      	mov	r9, r4
 8001de2:	4661      	mov	r1, ip
 8001de4:	2938      	cmp	r1, #56	; 0x38
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x256>
 8001de8:	e1ba      	b.n	8002160 <__aeabi_dsub+0x5cc>
 8001dea:	291f      	cmp	r1, #31
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0x25c>
 8001dee:	e227      	b.n	8002240 <__aeabi_dsub+0x6ac>
 8001df0:	2420      	movs	r4, #32
 8001df2:	1a64      	subs	r4, r4, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	40a1      	lsls	r1, r4
 8001df8:	001e      	movs	r6, r3
 8001dfa:	4688      	mov	r8, r1
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	40a3      	lsls	r3, r4
 8001e00:	40ce      	lsrs	r6, r1
 8001e02:	4641      	mov	r1, r8
 8001e04:	1e5c      	subs	r4, r3, #1
 8001e06:	41a3      	sbcs	r3, r4
 8001e08:	4331      	orrs	r1, r6
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	4663      	mov	r3, ip
 8001e10:	4649      	mov	r1, r9
 8001e12:	40d9      	lsrs	r1, r3
 8001e14:	187f      	adds	r7, r7, r1
 8001e16:	1824      	adds	r4, r4, r0
 8001e18:	4284      	cmp	r4, r0
 8001e1a:	419b      	sbcs	r3, r3
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	469a      	mov	sl, r3
 8001e20:	0016      	movs	r6, r2
 8001e22:	44ba      	add	sl, r7
 8001e24:	e05d      	b.n	8001ee2 <__aeabi_dsub+0x34e>
 8001e26:	4c38      	ldr	r4, [pc, #224]	; (8001f08 <__aeabi_dsub+0x374>)
 8001e28:	1c72      	adds	r2, r6, #1
 8001e2a:	4222      	tst	r2, r4
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x29c>
 8001e2e:	e0df      	b.n	8001ff0 <__aeabi_dsub+0x45c>
 8001e30:	464a      	mov	r2, r9
 8001e32:	431a      	orrs	r2, r3
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x2a6>
 8001e38:	e15c      	b.n	80020f4 <__aeabi_dsub+0x560>
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x2ac>
 8001e3e:	e1cf      	b.n	80021e0 <__aeabi_dsub+0x64c>
 8001e40:	003a      	movs	r2, r7
 8001e42:	4302      	orrs	r2, r0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x2b4>
 8001e46:	e17f      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001e48:	1a1c      	subs	r4, r3, r0
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	4189      	sbcs	r1, r1
 8001e50:	1bd2      	subs	r2, r2, r7
 8001e52:	4249      	negs	r1, r1
 8001e54:	1a52      	subs	r2, r2, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x2ca>
 8001e5c:	e20a      	b.n	8002274 <__aeabi_dsub+0x6e0>
 8001e5e:	1ac4      	subs	r4, r0, r3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	464b      	mov	r3, r9
 8001e66:	4240      	negs	r0, r0
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	1a3b      	subs	r3, r7, r0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	465d      	mov	r5, fp
 8001e70:	e71a      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001e72:	003a      	movs	r2, r7
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d073      	beq.n	8001f60 <__aeabi_dsub+0x3cc>
 8001e78:	0022      	movs	r2, r4
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	2c01      	cmp	r4, #1
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x2ee>
 8001e80:	e0cb      	b.n	800201a <__aeabi_dsub+0x486>
 8001e82:	4554      	cmp	r4, sl
 8001e84:	d042      	beq.n	8001f0c <__aeabi_dsub+0x378>
 8001e86:	4694      	mov	ip, r2
 8001e88:	e748      	b.n	8001d1c <__aeabi_dsub+0x188>
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	3b1f      	subs	r3, #31
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d003      	beq.n	8001e9c <__aeabi_dsub+0x308>
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	4314      	orrs	r4, r2
 8001e9c:	1e63      	subs	r3, r4, #1
 8001e9e:	419c      	sbcs	r4, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	469a      	mov	sl, r3
 8001ea6:	4304      	orrs	r4, r0
 8001ea8:	0763      	lsls	r3, r4, #29
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x31a>
 8001eac:	e6fe      	b.n	8001cac <__aeabi_dsub+0x118>
 8001eae:	4652      	mov	r2, sl
 8001eb0:	08e3      	lsrs	r3, r4, #3
 8001eb2:	0752      	lsls	r2, r2, #29
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	46b4      	mov	ip, r6
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	490f      	ldr	r1, [pc, #60]	; (8001efc <__aeabi_dsub+0x368>)
 8001ebe:	458c      	cmp	ip, r1
 8001ec0:	d02a      	beq.n	8001f18 <__aeabi_dsub+0x384>
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	0b14      	lsrs	r4, r2, #12
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	0d52      	lsrs	r2, r2, #21
 8001ecc:	e70c      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4304      	orrs	r4, r0
 8001ed2:	1e62      	subs	r2, r4, #1
 8001ed4:	4194      	sbcs	r4, r2
 8001ed6:	18e4      	adds	r4, r4, r3
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	444a      	add	r2, r9
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	d5df      	bpl.n	8001ea8 <__aeabi_dsub+0x314>
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__aeabi_dsub+0x368>)
 8001eea:	3601      	adds	r6, #1
 8001eec:	429e      	cmp	r6, r3
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x35e>
 8001ef0:	e0a0      	b.n	8002034 <__aeabi_dsub+0x4a0>
 8001ef2:	0032      	movs	r2, r6
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e6f6      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	fffff801 	.word	0xfffff801
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	464a      	mov	r2, r9
 8001f10:	0752      	lsls	r2, r2, #29
 8001f12:	4313      	orrs	r3, r2
 8001f14:	464a      	mov	r2, r9
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x38c>
 8001f1e:	e1b5      	b.n	800228c <__aeabi_dsub+0x6f8>
 8001f20:	2480      	movs	r4, #128	; 0x80
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4314      	orrs	r4, r2
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4ad5      	ldr	r2, [pc, #852]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e6dc      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f000 fae2 	bl	80024f8 <__clzsi2>
 8001f34:	0003      	movs	r3, r0
 8001f36:	3318      	adds	r3, #24
 8001f38:	2b1f      	cmp	r3, #31
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x3aa>
 8001f3c:	e695      	b.n	8001c6a <__aeabi_dsub+0xd6>
 8001f3e:	0022      	movs	r2, r4
 8001f40:	3808      	subs	r0, #8
 8001f42:	4082      	lsls	r2, r0
 8001f44:	2400      	movs	r4, #0
 8001f46:	429e      	cmp	r6, r3
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x3b8>
 8001f4a:	e69a      	b.n	8001c82 <__aeabi_dsub+0xee>
 8001f4c:	1af6      	subs	r6, r6, r3
 8001f4e:	4bcd      	ldr	r3, [pc, #820]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001f50:	401a      	ands	r2, r3
 8001f52:	4692      	mov	sl, r2
 8001f54:	e6a8      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001f56:	003c      	movs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	1e62      	subs	r2, r4, #1
 8001f5c:	4194      	sbcs	r4, r2
 8001f5e:	e66c      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8001f60:	464a      	mov	r2, r9
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	0752      	lsls	r2, r2, #29
 8001f66:	4313      	orrs	r3, r2
 8001f68:	464a      	mov	r2, r9
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	e7a6      	b.n	8001ebc <__aeabi_dsub+0x328>
 8001f6e:	4cc6      	ldr	r4, [pc, #792]	; (8002288 <__aeabi_dsub+0x6f4>)
 8001f70:	1c72      	adds	r2, r6, #1
 8001f72:	4222      	tst	r2, r4
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x3e4>
 8001f76:	e0ac      	b.n	80020d2 <__aeabi_dsub+0x53e>
 8001f78:	464a      	mov	r2, r9
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x3ee>
 8001f80:	e105      	b.n	800218e <__aeabi_dsub+0x5fa>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x3f4>
 8001f86:	e156      	b.n	8002236 <__aeabi_dsub+0x6a2>
 8001f88:	003a      	movs	r2, r7
 8001f8a:	4302      	orrs	r2, r0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x3fc>
 8001f8e:	e0db      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001f90:	181c      	adds	r4, r3, r0
 8001f92:	429c      	cmp	r4, r3
 8001f94:	419b      	sbcs	r3, r3
 8001f96:	444f      	add	r7, r9
 8001f98:	46ba      	mov	sl, r7
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	449a      	add	sl, r3
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	d400      	bmi.n	8001fa6 <__aeabi_dsub+0x412>
 8001fa4:	e780      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	4bb6      	ldr	r3, [pc, #728]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001faa:	2601      	movs	r6, #1
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e77a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fb2:	4cb3      	ldr	r4, [pc, #716]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x426>
 8001fb8:	e0c0      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001fba:	2480      	movs	r4, #128	; 0x80
 8001fbc:	464d      	mov	r5, r9
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	46a9      	mov	r9, r5
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2c38      	cmp	r4, #56	; 0x38
 8001fc8:	dc53      	bgt.n	8002072 <__aeabi_dsub+0x4de>
 8001fca:	4661      	mov	r1, ip
 8001fcc:	2c1f      	cmp	r4, #31
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x43e>
 8001fd0:	e0cd      	b.n	800216e <__aeabi_dsub+0x5da>
 8001fd2:	2520      	movs	r5, #32
 8001fd4:	001e      	movs	r6, r3
 8001fd6:	1b2d      	subs	r5, r5, r4
 8001fd8:	464c      	mov	r4, r9
 8001fda:	40ab      	lsls	r3, r5
 8001fdc:	40ac      	lsls	r4, r5
 8001fde:	40ce      	lsrs	r6, r1
 8001fe0:	1e5d      	subs	r5, r3, #1
 8001fe2:	41ab      	sbcs	r3, r5
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	464c      	mov	r4, r9
 8001fea:	40cc      	lsrs	r4, r1
 8001fec:	1b3f      	subs	r7, r7, r4
 8001fee:	e045      	b.n	800207c <__aeabi_dsub+0x4e8>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a1c      	subs	r4, r3, r0
 8001ff4:	1bd1      	subs	r1, r2, r7
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	4192      	sbcs	r2, r2
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	4651      	mov	r1, sl
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4692      	mov	sl, r2
 8002006:	0212      	lsls	r2, r2, #8
 8002008:	d500      	bpl.n	800200c <__aeabi_dsub+0x478>
 800200a:	e083      	b.n	8002114 <__aeabi_dsub+0x580>
 800200c:	4653      	mov	r3, sl
 800200e:	4323      	orrs	r3, r4
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x480>
 8002012:	e621      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002014:	2200      	movs	r2, #0
 8002016:	2500      	movs	r5, #0
 8002018:	e753      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 800201a:	181c      	adds	r4, r3, r0
 800201c:	429c      	cmp	r4, r3
 800201e:	419b      	sbcs	r3, r3
 8002020:	444f      	add	r7, r9
 8002022:	46ba      	mov	sl, r7
 8002024:	425b      	negs	r3, r3
 8002026:	449a      	add	sl, r3
 8002028:	4653      	mov	r3, sl
 800202a:	2601      	movs	r6, #1
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	d400      	bmi.n	8002032 <__aeabi_dsub+0x49e>
 8002030:	e73a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8002032:	2602      	movs	r6, #2
 8002034:	4652      	mov	r2, sl
 8002036:	4b93      	ldr	r3, [pc, #588]	; (8002284 <__aeabi_dsub+0x6f0>)
 8002038:	2101      	movs	r1, #1
 800203a:	401a      	ands	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	4021      	ands	r1, r4
 8002040:	0862      	lsrs	r2, r4, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	07dc      	lsls	r4, r3, #31
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	469a      	mov	sl, r3
 800204a:	4314      	orrs	r4, r2
 800204c:	e62c      	b.n	8001ca8 <__aeabi_dsub+0x114>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x4d4>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e5e3      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8002072:	4649      	mov	r1, r9
 8002074:	4319      	orrs	r1, r3
 8002076:	000b      	movs	r3, r1
 8002078:	1e5c      	subs	r4, r3, #1
 800207a:	41a3      	sbcs	r3, r4
 800207c:	1ac4      	subs	r4, r0, r3
 800207e:	42a0      	cmp	r0, r4
 8002080:	419b      	sbcs	r3, r3
 8002082:	425b      	negs	r3, r3
 8002084:	1afb      	subs	r3, r7, r3
 8002086:	469a      	mov	sl, r3
 8002088:	465d      	mov	r5, fp
 800208a:	0016      	movs	r6, r2
 800208c:	e5dc      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800208e:	4649      	mov	r1, r9
 8002090:	4319      	orrs	r1, r3
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x502>
 8002094:	e0ae      	b.n	80021f4 <__aeabi_dsub+0x660>
 8002096:	4661      	mov	r1, ip
 8002098:	4664      	mov	r4, ip
 800209a:	3901      	subs	r1, #1
 800209c:	2c01      	cmp	r4, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x50e>
 80020a0:	e0e0      	b.n	8002264 <__aeabi_dsub+0x6d0>
 80020a2:	4c77      	ldr	r4, [pc, #476]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020a4:	45a4      	cmp	ip, r4
 80020a6:	d056      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 80020a8:	468c      	mov	ip, r1
 80020aa:	e69a      	b.n	8001de2 <__aeabi_dsub+0x24e>
 80020ac:	4661      	mov	r1, ip
 80020ae:	2220      	movs	r2, #32
 80020b0:	003c      	movs	r4, r7
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	4094      	lsls	r4, r2
 80020b6:	0001      	movs	r1, r0
 80020b8:	4090      	lsls	r0, r2
 80020ba:	46a0      	mov	r8, r4
 80020bc:	4664      	mov	r4, ip
 80020be:	1e42      	subs	r2, r0, #1
 80020c0:	4190      	sbcs	r0, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	40e1      	lsrs	r1, r4
 80020c6:	4644      	mov	r4, r8
 80020c8:	40d7      	lsrs	r7, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	4304      	orrs	r4, r0
 80020ce:	44b9      	add	r9, r7
 80020d0:	e701      	b.n	8001ed6 <__aeabi_dsub+0x342>
 80020d2:	496b      	ldr	r1, [pc, #428]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020d4:	428a      	cmp	r2, r1
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x546>
 80020d8:	e70c      	b.n	8001ef4 <__aeabi_dsub+0x360>
 80020da:	1818      	adds	r0, r3, r0
 80020dc:	4298      	cmp	r0, r3
 80020de:	419b      	sbcs	r3, r3
 80020e0:	444f      	add	r7, r9
 80020e2:	425b      	negs	r3, r3
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	07dc      	lsls	r4, r3, #31
 80020e8:	0840      	lsrs	r0, r0, #1
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	469a      	mov	sl, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	4304      	orrs	r4, r0
 80020f2:	e6d9      	b.n	8001ea8 <__aeabi_dsub+0x314>
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x566>
 80020f8:	e081      	b.n	80021fe <__aeabi_dsub+0x66a>
 80020fa:	003b      	movs	r3, r7
 80020fc:	4303      	orrs	r3, r0
 80020fe:	d11d      	bne.n	800213c <__aeabi_dsub+0x5a8>
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2500      	movs	r5, #0
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	e70b      	b.n	8001f20 <__aeabi_dsub+0x38c>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e6d3      	b.n	8001ebc <__aeabi_dsub+0x328>
 8002114:	1ac4      	subs	r4, r0, r3
 8002116:	42a0      	cmp	r0, r4
 8002118:	4180      	sbcs	r0, r0
 800211a:	464b      	mov	r3, r9
 800211c:	4240      	negs	r0, r0
 800211e:	1aff      	subs	r7, r7, r3
 8002120:	1a3b      	subs	r3, r7, r0
 8002122:	469a      	mov	sl, r3
 8002124:	465d      	mov	r5, fp
 8002126:	e597      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002128:	1a1c      	subs	r4, r3, r0
 800212a:	464a      	mov	r2, r9
 800212c:	42a3      	cmp	r3, r4
 800212e:	419b      	sbcs	r3, r3
 8002130:	1bd7      	subs	r7, r2, r7
 8002132:	425b      	negs	r3, r3
 8002134:	1afb      	subs	r3, r7, r3
 8002136:	469a      	mov	sl, r3
 8002138:	2601      	movs	r6, #1
 800213a:	e585      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800213c:	08c0      	lsrs	r0, r0, #3
 800213e:	077b      	lsls	r3, r7, #29
 8002140:	465d      	mov	r5, fp
 8002142:	4303      	orrs	r3, r0
 8002144:	08fa      	lsrs	r2, r7, #3
 8002146:	e6e7      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002148:	464a      	mov	r2, r9
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	464a      	mov	r2, r9
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	e6b5      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e6db      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002160:	4649      	mov	r1, r9
 8002162:	4319      	orrs	r1, r3
 8002164:	000b      	movs	r3, r1
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	418b      	sbcs	r3, r1
 800216a:	001c      	movs	r4, r3
 800216c:	e653      	b.n	8001e16 <__aeabi_dsub+0x282>
 800216e:	464d      	mov	r5, r9
 8002170:	3c20      	subs	r4, #32
 8002172:	40e5      	lsrs	r5, r4
 8002174:	2920      	cmp	r1, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x5f0>
 8002178:	2440      	movs	r4, #64	; 0x40
 800217a:	1a64      	subs	r4, r4, r1
 800217c:	4649      	mov	r1, r9
 800217e:	40a1      	lsls	r1, r4
 8002180:	430b      	orrs	r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4643      	mov	r3, r8
 8002186:	1e5c      	subs	r4, r3, #1
 8002188:	41a3      	sbcs	r3, r4
 800218a:	432b      	orrs	r3, r5
 800218c:	e776      	b.n	800207c <__aeabi_dsub+0x4e8>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d0e1      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 8002192:	003a      	movs	r2, r7
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	4302      	orrs	r2, r0
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x608>
 800219a:	e6b8      	b.n	8001f0e <__aeabi_dsub+0x37a>
 800219c:	464a      	mov	r2, r9
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	2480      	movs	r4, #128	; 0x80
 80021a2:	4313      	orrs	r3, r2
 80021a4:	464a      	mov	r2, r9
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	08d2      	lsrs	r2, r2, #3
 80021aa:	4222      	tst	r2, r4
 80021ac:	d007      	beq.n	80021be <__aeabi_dsub+0x62a>
 80021ae:	08fe      	lsrs	r6, r7, #3
 80021b0:	4226      	tst	r6, r4
 80021b2:	d104      	bne.n	80021be <__aeabi_dsub+0x62a>
 80021b4:	465d      	mov	r5, fp
 80021b6:	0032      	movs	r2, r6
 80021b8:	08c3      	lsrs	r3, r0, #3
 80021ba:	077f      	lsls	r7, r7, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	0f59      	lsrs	r1, r3, #29
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	0749      	lsls	r1, r1, #29
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	430b      	orrs	r3, r1
 80021c8:	e6a6      	b.n	8001f18 <__aeabi_dsub+0x384>
 80021ca:	1ac4      	subs	r4, r0, r3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	4180      	sbcs	r0, r0
 80021d0:	464b      	mov	r3, r9
 80021d2:	4240      	negs	r0, r0
 80021d4:	1aff      	subs	r7, r7, r3
 80021d6:	1a3b      	subs	r3, r7, r0
 80021d8:	469a      	mov	sl, r3
 80021da:	465d      	mov	r5, fp
 80021dc:	2601      	movs	r6, #1
 80021de:	e533      	b.n	8001c48 <__aeabi_dsub+0xb4>
 80021e0:	003b      	movs	r3, r7
 80021e2:	4303      	orrs	r3, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x654>
 80021e6:	e715      	b.n	8002014 <__aeabi_dsub+0x480>
 80021e8:	08c0      	lsrs	r0, r0, #3
 80021ea:	077b      	lsls	r3, r7, #29
 80021ec:	465d      	mov	r5, fp
 80021ee:	4303      	orrs	r3, r0
 80021f0:	08fa      	lsrs	r2, r7, #3
 80021f2:	e666      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 80021f4:	08c0      	lsrs	r0, r0, #3
 80021f6:	077b      	lsls	r3, r7, #29
 80021f8:	4303      	orrs	r3, r0
 80021fa:	08fa      	lsrs	r2, r7, #3
 80021fc:	e65e      	b.n	8001ebc <__aeabi_dsub+0x328>
 80021fe:	003a      	movs	r2, r7
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	4302      	orrs	r2, r0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x674>
 8002206:	e682      	b.n	8001f0e <__aeabi_dsub+0x37a>
 8002208:	464a      	mov	r2, r9
 800220a:	0752      	lsls	r2, r2, #29
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	4313      	orrs	r3, r2
 8002210:	464a      	mov	r2, r9
 8002212:	0324      	lsls	r4, r4, #12
 8002214:	08d2      	lsrs	r2, r2, #3
 8002216:	4222      	tst	r2, r4
 8002218:	d007      	beq.n	800222a <__aeabi_dsub+0x696>
 800221a:	08fe      	lsrs	r6, r7, #3
 800221c:	4226      	tst	r6, r4
 800221e:	d104      	bne.n	800222a <__aeabi_dsub+0x696>
 8002220:	465d      	mov	r5, fp
 8002222:	0032      	movs	r2, r6
 8002224:	08c3      	lsrs	r3, r0, #3
 8002226:	077f      	lsls	r7, r7, #29
 8002228:	433b      	orrs	r3, r7
 800222a:	0f59      	lsrs	r1, r3, #29
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	0749      	lsls	r1, r1, #29
 8002232:	430b      	orrs	r3, r1
 8002234:	e670      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002236:	08c0      	lsrs	r0, r0, #3
 8002238:	077b      	lsls	r3, r7, #29
 800223a:	4303      	orrs	r3, r0
 800223c:	08fa      	lsrs	r2, r7, #3
 800223e:	e640      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002240:	464c      	mov	r4, r9
 8002242:	3920      	subs	r1, #32
 8002244:	40cc      	lsrs	r4, r1
 8002246:	4661      	mov	r1, ip
 8002248:	2920      	cmp	r1, #32
 800224a:	d006      	beq.n	800225a <__aeabi_dsub+0x6c6>
 800224c:	4666      	mov	r6, ip
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	1b89      	subs	r1, r1, r6
 8002252:	464e      	mov	r6, r9
 8002254:	408e      	lsls	r6, r1
 8002256:	4333      	orrs	r3, r6
 8002258:	4698      	mov	r8, r3
 800225a:	4643      	mov	r3, r8
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	418b      	sbcs	r3, r1
 8002260:	431c      	orrs	r4, r3
 8002262:	e5d8      	b.n	8001e16 <__aeabi_dsub+0x282>
 8002264:	181c      	adds	r4, r3, r0
 8002266:	4284      	cmp	r4, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	444f      	add	r7, r9
 800226c:	46ba      	mov	sl, r7
 800226e:	4240      	negs	r0, r0
 8002270:	4482      	add	sl, r0
 8002272:	e6d9      	b.n	8002028 <__aeabi_dsub+0x494>
 8002274:	4653      	mov	r3, sl
 8002276:	4323      	orrs	r3, r4
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x6e8>
 800227a:	e6cb      	b.n	8002014 <__aeabi_dsub+0x480>
 800227c:	e614      	b.n	8001ea8 <__aeabi_dsub+0x314>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff
 8002284:	ff7fffff 	.word	0xff7fffff
 8002288:	000007fe 	.word	0x000007fe
 800228c:	2300      	movs	r3, #0
 800228e:	4a01      	ldr	r2, [pc, #4]	; (8002294 <__aeabi_dsub+0x700>)
 8002290:	001c      	movs	r4, r3
 8002292:	e529      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dcmpun>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	0005      	movs	r5, r0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <__aeabi_dcmpun+0x38>)
 800229e:	031c      	lsls	r4, r3, #12
 80022a0:	0016      	movs	r6, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	030a      	lsls	r2, r1, #12
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	0b12      	lsrs	r2, r2, #12
 80022aa:	0d49      	lsrs	r1, r1, #21
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	4281      	cmp	r1, r0
 80022b2:	d008      	beq.n	80022c6 <__aeabi_dcmpun+0x2e>
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <__aeabi_dcmpun+0x38>)
 80022b6:	2000      	movs	r0, #0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022bc:	0020      	movs	r0, r4
 80022be:	4330      	orrs	r0, r6
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	432a      	orrs	r2, r5
 80022ca:	d1fb      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022cc:	e7f2      	b.n	80022b4 <__aeabi_dcmpun+0x1c>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_d2iz>:
 80022d4:	000a      	movs	r2, r1
 80022d6:	b530      	push	{r4, r5, lr}
 80022d8:	4c13      	ldr	r4, [pc, #76]	; (8002328 <__aeabi_d2iz+0x54>)
 80022da:	0053      	lsls	r3, r2, #1
 80022dc:	0309      	lsls	r1, r1, #12
 80022de:	0005      	movs	r5, r0
 80022e0:	0b09      	lsrs	r1, r1, #12
 80022e2:	2000      	movs	r0, #0
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	0fd2      	lsrs	r2, r2, #31
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	dd04      	ble.n	80022f6 <__aeabi_d2iz+0x22>
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <__aeabi_d2iz+0x58>)
 80022ee:	4283      	cmp	r3, r0
 80022f0:	dd02      	ble.n	80022f8 <__aeabi_d2iz+0x24>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <__aeabi_d2iz+0x5c>)
 80022f4:	18d0      	adds	r0, r2, r3
 80022f6:	bd30      	pop	{r4, r5, pc}
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4301      	orrs	r1, r0
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <__aeabi_d2iz+0x60>)
 8002300:	1ac0      	subs	r0, r0, r3
 8002302:	281f      	cmp	r0, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x44>
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <__aeabi_d2iz+0x64>)
 8002308:	1ac3      	subs	r3, r0, r3
 800230a:	40d9      	lsrs	r1, r3
 800230c:	000b      	movs	r3, r1
 800230e:	4258      	negs	r0, r3
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1f0      	bne.n	80022f6 <__aeabi_d2iz+0x22>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ee      	b.n	80022f6 <__aeabi_d2iz+0x22>
 8002318:	4c08      	ldr	r4, [pc, #32]	; (800233c <__aeabi_d2iz+0x68>)
 800231a:	40c5      	lsrs	r5, r0
 800231c:	46a4      	mov	ip, r4
 800231e:	4463      	add	r3, ip
 8002320:	4099      	lsls	r1, r3
 8002322:	000b      	movs	r3, r1
 8002324:	432b      	orrs	r3, r5
 8002326:	e7f2      	b.n	800230e <__aeabi_d2iz+0x3a>
 8002328:	000003fe 	.word	0x000003fe
 800232c:	0000041d 	.word	0x0000041d
 8002330:	7fffffff 	.word	0x7fffffff
 8002334:	00000433 	.word	0x00000433
 8002338:	00000413 	.word	0x00000413
 800233c:	fffffbed 	.word	0xfffffbed

08002340 <__aeabi_i2d>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	2800      	cmp	r0, #0
 8002344:	d016      	beq.n	8002374 <__aeabi_i2d+0x34>
 8002346:	17c3      	asrs	r3, r0, #31
 8002348:	18c5      	adds	r5, r0, r3
 800234a:	405d      	eors	r5, r3
 800234c:	0fc4      	lsrs	r4, r0, #31
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f8d2 	bl	80024f8 <__clzsi2>
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <__aeabi_i2d+0x5c>)
 8002356:	1a1b      	subs	r3, r3, r0
 8002358:	280a      	cmp	r0, #10
 800235a:	dc16      	bgt.n	800238a <__aeabi_i2d+0x4a>
 800235c:	0002      	movs	r2, r0
 800235e:	002e      	movs	r6, r5
 8002360:	3215      	adds	r2, #21
 8002362:	4096      	lsls	r6, r2
 8002364:	220b      	movs	r2, #11
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	40d5      	lsrs	r5, r2
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	032d      	lsls	r5, r5, #12
 800236e:	0b2d      	lsrs	r5, r5, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	e003      	b.n	800237c <__aeabi_i2d+0x3c>
 8002374:	2400      	movs	r4, #0
 8002376:	2300      	movs	r3, #0
 8002378:	2500      	movs	r5, #0
 800237a:	2600      	movs	r6, #0
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	432b      	orrs	r3, r5
 8002380:	07e4      	lsls	r4, r4, #31
 8002382:	4323      	orrs	r3, r4
 8002384:	0030      	movs	r0, r6
 8002386:	0019      	movs	r1, r3
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	380b      	subs	r0, #11
 800238c:	4085      	lsls	r5, r0
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	032d      	lsls	r5, r5, #12
 8002392:	2600      	movs	r6, #0
 8002394:	0b2d      	lsrs	r5, r5, #12
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	e7f0      	b.n	800237c <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f8a7 	bl	80024f8 <__clzsi2>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <__aeabi_ui2d+0x48>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	280a      	cmp	r0, #10
 80023b0:	dc11      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b2:	220b      	movs	r2, #11
 80023b4:	0021      	movs	r1, r4
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	40d1      	lsrs	r1, r2
 80023ba:	3015      	adds	r0, #21
 80023bc:	030a      	lsls	r2, r1, #12
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4084      	lsls	r4, r0
 80023c2:	0b12      	lsrs	r2, r2, #12
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	2400      	movs	r4, #0
 80023e2:	0b12      	lsrs	r2, r2, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e7f1      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__aeabi_d2f>:
 80023ec:	0002      	movs	r2, r0
 80023ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f0:	004b      	lsls	r3, r1, #1
 80023f2:	030d      	lsls	r5, r1, #12
 80023f4:	0f40      	lsrs	r0, r0, #29
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	0fcc      	lsrs	r4, r1, #31
 80023fa:	0a6d      	lsrs	r5, r5, #9
 80023fc:	493a      	ldr	r1, [pc, #232]	; (80024e8 <__aeabi_d2f+0xfc>)
 80023fe:	4305      	orrs	r5, r0
 8002400:	1c58      	adds	r0, r3, #1
 8002402:	00d7      	lsls	r7, r2, #3
 8002404:	4208      	tst	r0, r1
 8002406:	d00a      	beq.n	800241e <__aeabi_d2f+0x32>
 8002408:	4938      	ldr	r1, [pc, #224]	; (80024ec <__aeabi_d2f+0x100>)
 800240a:	1859      	adds	r1, r3, r1
 800240c:	29fe      	cmp	r1, #254	; 0xfe
 800240e:	dd16      	ble.n	800243e <__aeabi_d2f+0x52>
 8002410:	20ff      	movs	r0, #255	; 0xff
 8002412:	2200      	movs	r2, #0
 8002414:	05c0      	lsls	r0, r0, #23
 8002416:	4310      	orrs	r0, r2
 8002418:	07e4      	lsls	r4, r4, #31
 800241a:	4320      	orrs	r0, r4
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <__aeabi_d2f+0x44>
 8002422:	433d      	orrs	r5, r7
 8002424:	d026      	beq.n	8002474 <__aeabi_d2f+0x88>
 8002426:	2205      	movs	r2, #5
 8002428:	0192      	lsls	r2, r2, #6
 800242a:	0a52      	lsrs	r2, r2, #9
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	e7f1      	b.n	8002414 <__aeabi_d2f+0x28>
 8002430:	432f      	orrs	r7, r5
 8002432:	d0ed      	beq.n	8002410 <__aeabi_d2f+0x24>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	03d2      	lsls	r2, r2, #15
 8002438:	20ff      	movs	r0, #255	; 0xff
 800243a:	432a      	orrs	r2, r5
 800243c:	e7ea      	b.n	8002414 <__aeabi_d2f+0x28>
 800243e:	2900      	cmp	r1, #0
 8002440:	dd1b      	ble.n	800247a <__aeabi_d2f+0x8e>
 8002442:	0192      	lsls	r2, r2, #6
 8002444:	1e50      	subs	r0, r2, #1
 8002446:	4182      	sbcs	r2, r0
 8002448:	00ed      	lsls	r5, r5, #3
 800244a:	0f7f      	lsrs	r7, r7, #29
 800244c:	432a      	orrs	r2, r5
 800244e:	433a      	orrs	r2, r7
 8002450:	0753      	lsls	r3, r2, #29
 8002452:	d047      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002454:	230f      	movs	r3, #15
 8002456:	4013      	ands	r3, r2
 8002458:	2b04      	cmp	r3, #4
 800245a:	d000      	beq.n	800245e <__aeabi_d2f+0x72>
 800245c:	3204      	adds	r2, #4
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	04db      	lsls	r3, r3, #19
 8002462:	4013      	ands	r3, r2
 8002464:	d03e      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002466:	1c48      	adds	r0, r1, #1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	d0d1      	beq.n	8002410 <__aeabi_d2f+0x24>
 800246c:	0192      	lsls	r2, r2, #6
 800246e:	0a52      	lsrs	r2, r2, #9
 8002470:	b2c0      	uxtb	r0, r0
 8002472:	e7cf      	b.n	8002414 <__aeabi_d2f+0x28>
 8002474:	2000      	movs	r0, #0
 8002476:	2200      	movs	r2, #0
 8002478:	e7cc      	b.n	8002414 <__aeabi_d2f+0x28>
 800247a:	000a      	movs	r2, r1
 800247c:	3217      	adds	r2, #23
 800247e:	db2f      	blt.n	80024e0 <__aeabi_d2f+0xf4>
 8002480:	2680      	movs	r6, #128	; 0x80
 8002482:	0436      	lsls	r6, r6, #16
 8002484:	432e      	orrs	r6, r5
 8002486:	251e      	movs	r5, #30
 8002488:	1a6d      	subs	r5, r5, r1
 800248a:	2d1f      	cmp	r5, #31
 800248c:	dd11      	ble.n	80024b2 <__aeabi_d2f+0xc6>
 800248e:	2202      	movs	r2, #2
 8002490:	4252      	negs	r2, r2
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	0031      	movs	r1, r6
 8002496:	40d1      	lsrs	r1, r2
 8002498:	2d20      	cmp	r5, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_d2f+0xba>
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <__aeabi_d2f+0x104>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	409e      	lsls	r6, r3
 80024a4:	4337      	orrs	r7, r6
 80024a6:	003a      	movs	r2, r7
 80024a8:	1e53      	subs	r3, r2, #1
 80024aa:	419a      	sbcs	r2, r3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	2100      	movs	r1, #0
 80024b0:	e7ce      	b.n	8002450 <__aeabi_d2f+0x64>
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <__aeabi_d2f+0x108>)
 80024b4:	0038      	movs	r0, r7
 80024b6:	4694      	mov	ip, r2
 80024b8:	4463      	add	r3, ip
 80024ba:	4098      	lsls	r0, r3
 80024bc:	003a      	movs	r2, r7
 80024be:	1e41      	subs	r1, r0, #1
 80024c0:	4188      	sbcs	r0, r1
 80024c2:	409e      	lsls	r6, r3
 80024c4:	40ea      	lsrs	r2, r5
 80024c6:	4330      	orrs	r0, r6
 80024c8:	4302      	orrs	r2, r0
 80024ca:	2100      	movs	r1, #0
 80024cc:	0753      	lsls	r3, r2, #29
 80024ce:	d1c1      	bne.n	8002454 <__aeabi_d2f+0x68>
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0013      	movs	r3, r2
 80024d4:	04c9      	lsls	r1, r1, #19
 80024d6:	2001      	movs	r0, #1
 80024d8:	400b      	ands	r3, r1
 80024da:	420a      	tst	r2, r1
 80024dc:	d1c6      	bne.n	800246c <__aeabi_d2f+0x80>
 80024de:	e7a3      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7a0      	b.n	8002426 <__aeabi_d2f+0x3a>
 80024e4:	000b      	movs	r3, r1
 80024e6:	e79f      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	fffffc80 	.word	0xfffffc80
 80024f0:	fffffca2 	.word	0xfffffca2
 80024f4:	fffffc82 	.word	0xfffffc82

080024f8 <__clzsi2>:
 80024f8:	211c      	movs	r1, #28
 80024fa:	2301      	movs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	4298      	cmp	r0, r3
 8002500:	d301      	bcc.n	8002506 <__clzsi2+0xe>
 8002502:	0c00      	lsrs	r0, r0, #16
 8002504:	3910      	subs	r1, #16
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	4298      	cmp	r0, r3
 800250a:	d301      	bcc.n	8002510 <__clzsi2+0x18>
 800250c:	0a00      	lsrs	r0, r0, #8
 800250e:	3908      	subs	r1, #8
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	4298      	cmp	r0, r3
 8002514:	d301      	bcc.n	800251a <__clzsi2+0x22>
 8002516:	0900      	lsrs	r0, r0, #4
 8002518:	3904      	subs	r1, #4
 800251a:	a202      	add	r2, pc, #8	; (adr r2, 8002524 <__clzsi2+0x2c>)
 800251c:	5c10      	ldrb	r0, [r2, r0]
 800251e:	1840      	adds	r0, r0, r1
 8002520:	4770      	bx	lr
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	02020304 	.word	0x02020304
 8002528:	01010101 	.word	0x01010101
	...

08002534 <__clzdi2>:
 8002534:	b510      	push	{r4, lr}
 8002536:	2900      	cmp	r1, #0
 8002538:	d103      	bne.n	8002542 <__clzdi2+0xe>
 800253a:	f7ff ffdd 	bl	80024f8 <__clzsi2>
 800253e:	3020      	adds	r0, #32
 8002540:	e002      	b.n	8002548 <__clzdi2+0x14>
 8002542:	0008      	movs	r0, r1
 8002544:	f7ff ffd8 	bl	80024f8 <__clzsi2>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			; (mov r8, r8)

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b5b0      	push	{r4, r5, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002550:	f000 fdba 	bl	80030c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002554:	f000 f848 	bl	80025e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002558:	f000 f96a 	bl	8002830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800255c:	f000 f934 	bl	80027c8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002560:	f000 f88e 	bl	8002680 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // System hello
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <main+0x8c>)
 8002566:	681c      	ldr	r4, [r3, #0]
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <main+0x8c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fd fdc9 	bl	8000104 <strlen>
 8002572:	0003      	movs	r3, r0
 8002574:	b29a      	uxth	r2, r3
 8002576:	23fa      	movs	r3, #250	; 0xfa
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4818      	ldr	r0, [pc, #96]	; (80025dc <main+0x90>)
 800257c:	0021      	movs	r1, r4
 800257e:	f002 fc57 	bl	8004e30 <HAL_UART_Transmit>

  // Test to prove that RTC is working
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <main+0x94>)
 8002584:	0018      	movs	r0, r3
 8002586:	f000 fb39 	bl	8002bfc <my_rtc_get_dt_s>
  send_debug_logs ( rtc_dt_s ) ;
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <main+0x94>)
 800258c:	0018      	movs	r0, r3
 800258e:	f000 f9b1 	bl	80028f4 <send_debug_logs>
  HAL_Delay ( 10000 ) ;
 8002592:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <main+0x98>)
 8002594:	0018      	movs	r0, r3
 8002596:	f000 fe1d 	bl	80031d4 <HAL_Delay>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <main+0x94>)
 800259c:	0018      	movs	r0, r3
 800259e:	f000 fb2d 	bl	8002bfc <my_rtc_get_dt_s>
  send_debug_logs ( rtc_dt_s ) ;
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <main+0x94>)
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 f9a5 	bl	80028f4 <send_debug_logs>

  if ( my_rtc_set_alarm ( 10 ) )
 80025aa:	200a      	movs	r0, #10
 80025ac:	f000 fb68 	bl	8002c80 <my_rtc_set_alarm>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d00f      	beq.n	80025d4 <main+0x88>
  {
  	  HAL_SuspendTick () ;
 80025b4:	f000 fe32 	bl	800321c <HAL_SuspendTick>
  	  HAL_PWR_EnterSTOPMode ( PWR_MAINREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80025b8:	2102      	movs	r1, #2
 80025ba:	2000      	movs	r0, #0
 80025bc:	f001 f880 	bl	80036c0 <HAL_PWR_EnterSTOPMode>
  	  //HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
  	  HAL_ResumeTick () ;
 80025c0:	f000 fe3a 	bl	8003238 <HAL_ResumeTick>
  	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <main+0x94>)
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 fb18 	bl	8002bfc <my_rtc_get_dt_s>
  	  send_debug_logs ( rtc_dt_s ) ;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <main+0x94>)
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 f990 	bl	80028f4 <send_debug_logs>

    /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <main+0x88>
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000220 	.word	0x20000220
 80025e0:	200002b4 	.word	0x200002b4
 80025e4:	00002710 	.word	0x00002710

080025e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b093      	sub	sp, #76	; 0x4c
 80025ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ee:	2410      	movs	r4, #16
 80025f0:	193b      	adds	r3, r7, r4
 80025f2:	0018      	movs	r0, r3
 80025f4:	2338      	movs	r3, #56	; 0x38
 80025f6:	001a      	movs	r2, r3
 80025f8:	2100      	movs	r1, #0
 80025fa:	f004 fed7 	bl	80073ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025fe:	003b      	movs	r3, r7
 8002600:	0018      	movs	r0, r3
 8002602:	2310      	movs	r3, #16
 8002604:	001a      	movs	r2, r3
 8002606:	2100      	movs	r1, #0
 8002608:	f004 fed0 	bl	80073ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	0018      	movs	r0, r3
 8002612:	f001 f88d 	bl	8003730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002616:	193b      	adds	r3, r7, r4
 8002618:	220a      	movs	r2, #10
 800261a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800261c:	193b      	adds	r3, r7, r4
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	0052      	lsls	r2, r2, #1
 8002622:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002624:	0021      	movs	r1, r4
 8002626:	187b      	adds	r3, r7, r1
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800262c:	187b      	adds	r3, r7, r1
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2201      	movs	r2, #1
 8002636:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002638:	187b      	adds	r3, r7, r1
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800263e:	187b      	adds	r3, r7, r1
 8002640:	0018      	movs	r0, r3
 8002642:	f001 f8c1 	bl	80037c8 <HAL_RCC_OscConfig>
 8002646:	1e03      	subs	r3, r0, #0
 8002648:	d001      	beq.n	800264e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800264a:	f000 f983 	bl	8002954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800264e:	003b      	movs	r3, r7
 8002650:	2207      	movs	r2, #7
 8002652:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002654:	003b      	movs	r3, r7
 8002656:	2200      	movs	r2, #0
 8002658:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800265a:	003b      	movs	r3, r7
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002660:	003b      	movs	r3, r7
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002666:	003b      	movs	r3, r7
 8002668:	2100      	movs	r1, #0
 800266a:	0018      	movs	r0, r3
 800266c:	f001 fbc6 	bl	8003dfc <HAL_RCC_ClockConfig>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d001      	beq.n	8002678 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002674:	f000 f96e 	bl	8002954 <Error_Handler>
  }
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b013      	add	sp, #76	; 0x4c
 800267e:	bd90      	pop	{r4, r7, pc}

08002680 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b090      	sub	sp, #64	; 0x40
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002686:	232c      	movs	r3, #44	; 0x2c
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	0018      	movs	r0, r3
 800268c:	2314      	movs	r3, #20
 800268e:	001a      	movs	r2, r3
 8002690:	2100      	movs	r1, #0
 8002692:	f004 fe8b 	bl	80073ac <memset>
  RTC_DateTypeDef sDate = {0};
 8002696:	2328      	movs	r3, #40	; 0x28
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800269e:	003b      	movs	r3, r7
 80026a0:	0018      	movs	r0, r3
 80026a2:	2328      	movs	r3, #40	; 0x28
 80026a4:	001a      	movs	r2, r3
 80026a6:	2100      	movs	r1, #0
 80026a8:	f004 fe80 	bl	80073ac <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <MX_RTC_Init+0x140>)
 80026ae:	4a45      	ldr	r2, [pc, #276]	; (80027c4 <MX_RTC_Init+0x144>)
 80026b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <MX_RTC_Init+0x140>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80026b8:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <MX_RTC_Init+0x140>)
 80026ba:	227f      	movs	r2, #127	; 0x7f
 80026bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <MX_RTC_Init+0x140>)
 80026c0:	22ff      	movs	r2, #255	; 0xff
 80026c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026c4:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <MX_RTC_Init+0x140>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <MX_RTC_Init+0x140>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026d0:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <MX_RTC_Init+0x140>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <MX_RTC_Init+0x140>)
 80026d8:	2280      	movs	r2, #128	; 0x80
 80026da:	05d2      	lsls	r2, r2, #23
 80026dc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80026de:	4b38      	ldr	r3, [pc, #224]	; (80027c0 <MX_RTC_Init+0x140>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <MX_RTC_Init+0x140>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f001 feac 	bl	8004444 <HAL_RTC_Init>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80026f0:	f000 f930 	bl	8002954 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	187b      	adds	r3, r7, r1
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80026fc:	187b      	adds	r3, r7, r1
 80026fe:	2200      	movs	r2, #0
 8002700:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002702:	187b      	adds	r3, r7, r1
 8002704:	2200      	movs	r2, #0
 8002706:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8002708:	187b      	adds	r3, r7, r1
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800270e:	187b      	adds	r3, r7, r1
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800271a:	1879      	adds	r1, r7, r1
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <MX_RTC_Init+0x140>)
 800271e:	2200      	movs	r2, #0
 8002720:	0018      	movs	r0, r3
 8002722:	f001 ff31 	bl	8004588 <HAL_RTC_SetTime>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d001      	beq.n	800272e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800272a:	f000 f913 	bl	8002954 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800272e:	2128      	movs	r1, #40	; 0x28
 8002730:	187b      	adds	r3, r7, r1
 8002732:	2206      	movs	r2, #6
 8002734:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002736:	187b      	adds	r3, r7, r1
 8002738:	2201      	movs	r2, #1
 800273a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2201      	movs	r2, #1
 8002740:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2200      	movs	r2, #0
 8002746:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002748:	1879      	adds	r1, r7, r1
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <MX_RTC_Init+0x140>)
 800274c:	2200      	movs	r2, #0
 800274e:	0018      	movs	r0, r3
 8002750:	f002 f81e 	bl	8004790 <HAL_RTC_SetDate>
 8002754:	1e03      	subs	r3, r0, #0
 8002756:	d001      	beq.n	800275c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002758:	f000 f8fc 	bl	8002954 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800275c:	003b      	movs	r3, r7
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002762:	003b      	movs	r3, r7
 8002764:	2200      	movs	r2, #0
 8002766:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002768:	003b      	movs	r3, r7
 800276a:	2200      	movs	r2, #0
 800276c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800276e:	003b      	movs	r3, r7
 8002770:	2200      	movs	r2, #0
 8002772:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002774:	003b      	movs	r3, r7
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800277a:	003b      	movs	r3, r7
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002780:	003b      	movs	r3, r7
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002786:	003b      	movs	r3, r7
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800278c:	003b      	movs	r3, r7
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8002792:	003b      	movs	r3, r7
 8002794:	2220      	movs	r2, #32
 8002796:	2101      	movs	r1, #1
 8002798:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800279a:	003b      	movs	r3, r7
 800279c:	2280      	movs	r2, #128	; 0x80
 800279e:	0052      	lsls	r2, r2, #1
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80027a2:	0039      	movs	r1, r7
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <MX_RTC_Init+0x140>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	0018      	movs	r0, r3
 80027aa:	f002 f8d1 	bl	8004950 <HAL_RTC_SetAlarm>
 80027ae:	1e03      	subs	r3, r0, #0
 80027b0:	d001      	beq.n	80027b6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80027b2:	f000 f8cf 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b010      	add	sp, #64	; 0x40
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	200001f4 	.word	0x200001f4
 80027c4:	40002800 	.word	0x40002800

080027c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <MX_USART2_UART_Init+0x64>)
 80027d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027d4:	22e1      	movs	r2, #225	; 0xe1
 80027d6:	0252      	lsls	r2, r2, #9
 80027d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027ee:	220c      	movs	r2, #12
 80027f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_USART2_UART_Init+0x60>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <MX_USART2_UART_Init+0x60>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_USART2_UART_Init+0x60>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <MX_USART2_UART_Init+0x60>)
 800280c:	2200      	movs	r2, #0
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <MX_USART2_UART_Init+0x60>)
 8002812:	0018      	movs	r0, r3
 8002814:	f002 fab6 	bl	8004d84 <HAL_UART_Init>
 8002818:	1e03      	subs	r3, r0, #0
 800281a:	d001      	beq.n	8002820 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800281c:	f000 f89a 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	20000220 	.word	0x20000220
 800282c:	40004400 	.word	0x40004400

08002830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002836:	240c      	movs	r4, #12
 8002838:	193b      	adds	r3, r7, r4
 800283a:	0018      	movs	r0, r3
 800283c:	2314      	movs	r3, #20
 800283e:	001a      	movs	r2, r3
 8002840:	2100      	movs	r1, #0
 8002842:	f004 fdb3 	bl	80073ac <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <MX_GPIO_Init+0xb8>)
 8002848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284a:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <MX_GPIO_Init+0xb8>)
 800284c:	2104      	movs	r1, #4
 800284e:	430a      	orrs	r2, r1
 8002850:	635a      	str	r2, [r3, #52]	; 0x34
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <MX_GPIO_Init+0xb8>)
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <MX_GPIO_Init+0xb8>)
 8002860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002862:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <MX_GPIO_Init+0xb8>)
 8002864:	2120      	movs	r1, #32
 8002866:	430a      	orrs	r2, r1
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
 800286a:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <MX_GPIO_Init+0xb8>)
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	2220      	movs	r2, #32
 8002870:	4013      	ands	r3, r2
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <MX_GPIO_Init+0xb8>)
 8002878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <MX_GPIO_Init+0xb8>)
 800287c:	2101      	movs	r1, #1
 800287e:	430a      	orrs	r2, r1
 8002880:	635a      	str	r2, [r3, #52]	; 0x34
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <MX_GPIO_Init+0xb8>)
 8002884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002886:	2201      	movs	r2, #1
 8002888:	4013      	ands	r3, r2
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <MX_GPIO_Init+0xbc>)
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	; 0x40
 8002894:	0018      	movs	r0, r3
 8002896:	f000 fef5 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800289a:	193b      	adds	r3, r7, r4
 800289c:	2204      	movs	r2, #4
 800289e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	2288      	movs	r2, #136	; 0x88
 80028a4:	0352      	lsls	r2, r2, #13
 80028a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <MX_GPIO_Init+0xc0>)
 80028b2:	0019      	movs	r1, r3
 80028b4:	0010      	movs	r0, r2
 80028b6:	f000 fd81 	bl	80033bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 80028ba:	0021      	movs	r1, r4
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2201      	movs	r2, #1
 80028c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	187b      	adds	r3, r7, r1
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	4a05      	ldr	r2, [pc, #20]	; (80028ec <MX_GPIO_Init+0xbc>)
 80028d8:	0019      	movs	r1, r3
 80028da:	0010      	movs	r0, r2
 80028dc:	f000 fd6e 	bl	80033bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b009      	add	sp, #36	; 0x24
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	50000800 	.word	0x50000800
 80028f0:	50001400 	.word	0x50001400

080028f4 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fd fc00 	bl	8000104 <strlen>
 8002904:	0003      	movs	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2bfa      	cmp	r3, #250	; 0xfa
 800290c:	d908      	bls.n	8002920 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800290e:	23fa      	movs	r3, #250	; 0xfa
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	490d      	ldr	r1, [pc, #52]	; (8002948 <send_debug_logs+0x54>)
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <send_debug_logs+0x58>)
 8002916:	222a      	movs	r2, #42	; 0x2a
 8002918:	f002 fa8a 	bl	8004e30 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800291c:	23fa      	movs	r3, #250	; 0xfa
 800291e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	b29a      	uxth	r2, r3
 8002924:	23fa      	movs	r3, #250	; 0xfa
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4808      	ldr	r0, [pc, #32]	; (800294c <send_debug_logs+0x58>)
 800292c:	f002 fa80 	bl	8004e30 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002930:	23fa      	movs	r3, #250	; 0xfa
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4906      	ldr	r1, [pc, #24]	; (8002950 <send_debug_logs+0x5c>)
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <send_debug_logs+0x58>)
 8002938:	2201      	movs	r2, #1
 800293a:	f002 fa79 	bl	8004e30 <HAL_UART_Transmit>
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b004      	add	sp, #16
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	0800a148 	.word	0x0800a148
 800294c:	20000220 	.word	0x20000220
 8002950:	0800a174 	.word	0x0800a174

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800295c:	e7fe      	b.n	800295c <Error_Handler+0x8>
	...

08002960 <my_conv_rtc2timestamp>:
	return i ;
}

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	78db      	ldrb	r3, [r3, #3]
 800296e:	22fa      	movs	r2, #250	; 0xfa
 8002970:	00d2      	lsls	r2, r2, #3
 8002972:	4694      	mov	ip, r2
 8002974:	4463      	add	r3, ip
 8002976:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	0013      	movs	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	189b      	adds	r3, r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	189b      	adds	r3, r3, r2
 8002984:	009a      	lsls	r2, r3, #2
 8002986:	189a      	adds	r2, r3, r2
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	492c      	ldr	r1, [pc, #176]	; (8002a3c <my_conv_rtc2timestamp+0xdc>)
 800298c:	468c      	mov	ip, r1
 800298e:	4463      	add	r3, ip
 8002990:	089b      	lsrs	r3, r3, #2
 8002992:	18d3      	adds	r3, r2, r3
 8002994:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <my_conv_rtc2timestamp+0xe0>)
 8002996:	4694      	mov	ip, r2
 8002998:	4463      	add	r3, ip
 800299a:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	e00a      	b.n	80029b8 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 80029a2:	4a28      	ldr	r2, [pc, #160]	; (8002a44 <my_conv_rtc2timestamp+0xe4>)
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	18d3      	adds	r3, r2, r3
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	001a      	movs	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3301      	adds	r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	785b      	ldrb	r3, [r3, #1]
 80029bc:	3b01      	subs	r3, #1
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	dbee      	blt.n	80029a2 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d908      	bls.n	80029de <my_conv_rtc2timestamp+0x7e>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 f8de 	bl	8002b90 <my_conv_is_leap_year>
 80029d4:	1e03      	subs	r3, r0, #0
 80029d6:	d002      	beq.n	80029de <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3301      	adds	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	789b      	ldrb	r3, [r3, #2]
 80029e2:	001a      	movs	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	18d3      	adds	r3, r2, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	0013      	movs	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	189b      	adds	r3, r3, r2
 80029f4:	011a      	lsls	r2, r3, #4
 80029f6:	1ad2      	subs	r2, r2, r3
 80029f8:	0113      	lsls	r3, r2, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	01db      	lsls	r3, r3, #7
 80029fe:	0019      	movs	r1, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	001a      	movs	r2, r3
 8002a06:	0013      	movs	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	011a      	lsls	r2, r3, #4
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	0113      	lsls	r3, r2, #4
 8002a12:	001a      	movs	r2, r3
 8002a14:	0013      	movs	r3, r2
 8002a16:	18ca      	adds	r2, r1, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	000b      	movs	r3, r1
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a5b      	subs	r3, r3, r1
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	18d3      	adds	r3, r2, r3
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	7892      	ldrb	r2, [r2, #2]
 8002a2c:	189b      	adds	r3, r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]

    return ts ;
 8002a30:	68bb      	ldr	r3, [r7, #8]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b006      	add	sp, #24
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	fffff84f 	.word	0xfffff84f
 8002a40:	fff50736 	.word	0xfff50736
 8002a44:	0800a1ec 	.word	0x0800a1ec

08002a48 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8002a48:	b590      	push	{r4, r7, lr}
 8002a4a:	b08b      	sub	sp, #44	; 0x2c
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	213c      	movs	r1, #60	; 0x3c
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7fd fbf5 	bl	8000248 <__aeabi_uidivmod>
 8002a5e:	000b      	movs	r3, r1
 8002a60:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	213c      	movs	r1, #60	; 0x3c
 8002a66:	0018      	movs	r0, r3
 8002a68:	f7fd fb68 	bl	800013c <__udivsi3>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	213c      	movs	r1, #60	; 0x3c
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7fd fbe9 	bl	8000248 <__aeabi_uidivmod>
 8002a76:	000b      	movs	r3, r1
 8002a78:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22e1      	movs	r2, #225	; 0xe1
 8002a7e:	0111      	lsls	r1, r2, #4
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7fd fb5b 	bl	800013c <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	2118      	movs	r1, #24
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7fd fbdc 	bl	8000248 <__aeabi_uidivmod>
 8002a90:	000b      	movs	r3, r1
 8002a92:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	493b      	ldr	r1, [pc, #236]	; (8002b84 <my_conv_timestamp2rtc+0x13c>)
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7fd fb4f 	bl	800013c <__udivsi3>
 8002a9e:	0003      	movs	r3, r0
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8002aa2:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <my_conv_timestamp2rtc+0x140>)
 8002aa4:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8002aa6:	e00d      	b.n	8002ac4 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f870 	bl	8002b90 <my_conv_is_leap_year>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	336e      	adds	r3, #110	; 0x6e
 8002ab4:	33ff      	adds	r3, #255	; 0xff
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f862 	bl	8002b90 <my_conv_is_leap_year>
 8002acc:	0003      	movs	r3, r0
 8002ace:	336e      	adds	r3, #110	; 0x6e
 8002ad0:	33ff      	adds	r3, #255	; 0xff
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d2e6      	bcs.n	8002aa8 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8002ade:	e018      	b.n	8002b12 <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8002ae0:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <my_conv_timestamp2rtc+0x144>)
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	0052      	lsls	r2, r2, #1
 8002ae6:	5ad3      	ldrh	r3, [r2, r3]
 8002ae8:	001c      	movs	r4, r3
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <my_conv_timestamp2rtc+0xb8>
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f84c 	bl	8002b90 <my_conv_is_leap_year>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d001      	beq.n	8002b00 <my_conv_timestamp2rtc+0xb8>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <my_conv_timestamp2rtc+0xba>
 8002b00:	2300      	movs	r3, #0
 8002b02:	191b      	adds	r3, r3, r4
 8002b04:	001a      	movs	r2, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <my_conv_timestamp2rtc+0x144>)
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	0052      	lsls	r2, r2, #1
 8002b18:	5ad3      	ldrh	r3, [r2, r3]
 8002b1a:	001c      	movs	r4, r3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d107      	bne.n	8002b32 <my_conv_timestamp2rtc+0xea>
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 f833 	bl	8002b90 <my_conv_is_leap_year>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d001      	beq.n	8002b32 <my_conv_timestamp2rtc+0xea>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <my_conv_timestamp2rtc+0xec>
 8002b32:	2300      	movs	r3, #0
 8002b34:	191b      	adds	r3, r3, r4
 8002b36:	001a      	movs	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d2d0      	bcs.n	8002ae0 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3330      	adds	r3, #48	; 0x30
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	709a      	strb	r2, [r3, #2]
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b00b      	add	sp, #44	; 0x2c
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	00015180 	.word	0x00015180
 8002b88:	000007b2 	.word	0x000007b2
 8002b8c:	0800a1f8 	.word	0x0800a1f8

08002b90 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d106      	bne.n	8002bae <my_conv_is_leap_year+0x1e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2164      	movs	r1, #100	; 0x64
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7fd fc39 	bl	800041c <__aeabi_idivmod>
 8002baa:	1e0b      	subs	r3, r1, #0
 8002bac:	d107      	bne.n	8002bbe <my_conv_is_leap_year+0x2e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	22c8      	movs	r2, #200	; 0xc8
 8002bb2:	0051      	lsls	r1, r2, #1
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd fc31 	bl	800041c <__aeabi_idivmod>
 8002bba:	1e0b      	subs	r3, r1, #0
 8002bbc:	d101      	bne.n	8002bc2 <my_conv_is_leap_year+0x32>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <my_conv_is_leap_year+0x34>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <my_rtc_get_dt+0x2c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f001 fe69 	bl	80048b4 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8002be2:	6839      	ldr	r1, [r7, #0]
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <my_rtc_get_dt+0x2c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	0018      	movs	r0, r3
 8002bea:	f001 fd75 	bl	80046d8 <HAL_RTC_GetTime>
}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b002      	add	sp, #8
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	200001f4 	.word	0x200001f4

08002bfc <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8002bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfe:	b08d      	sub	sp, #52	; 0x34
 8002c00:	af04      	add	r7, sp, #16
 8002c02:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8002c04:	2508      	movs	r5, #8
 8002c06:	1979      	adds	r1, r7, r5
 8002c08:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <my_rtc_get_dt_s+0x7c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f001 fd63 	bl	80046d8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8002c12:	241c      	movs	r4, #28
 8002c14:	1939      	adds	r1, r7, r4
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <my_rtc_get_dt_s+0x7c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f001 fe4a 	bl	80048b4 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8002c20:	0021      	movs	r1, r4
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	78db      	ldrb	r3, [r3, #3]
 8002c26:	22fa      	movs	r2, #250	; 0xfa
 8002c28:	00d2      	lsls	r2, r2, #3
 8002c2a:	189a      	adds	r2, r3, r2
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	469c      	mov	ip, r3
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	789b      	ldrb	r3, [r3, #2]
 8002c36:	001c      	movs	r4, r3
 8002c38:	0028      	movs	r0, r5
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	001d      	movs	r5, r3
 8002c40:	183b      	adds	r3, r7, r0
 8002c42:	785b      	ldrb	r3, [r3, #1]
 8002c44:	001e      	movs	r6, r3
 8002c46:	183b      	adds	r3, r7, r0
 8002c48:	789b      	ldrb	r3, [r3, #2]
 8002c4a:	490c      	ldr	r1, [pc, #48]	; (8002c7c <my_rtc_get_dt_s+0x80>)
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	9602      	str	r6, [sp, #8]
 8002c52:	9501      	str	r5, [sp, #4]
 8002c54:	9400      	str	r4, [sp, #0]
 8002c56:	4663      	mov	r3, ip
 8002c58:	f004 fb3c 	bl	80072d4 <siprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8002c5c:	211c      	movs	r1, #28
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	22fa      	movs	r2, #250	; 0xfa
 8002c66:	00d2      	lsls	r2, r2, #3
 8002c68:	4694      	mov	ip, r2
 8002c6a:	4463      	add	r3, ip
 8002c6c:	b29b      	uxth	r3, r3
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b009      	add	sp, #36	; 0x24
 8002c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	200001f4 	.word	0x200001f4
 8002c7c:	0800a178 	.word	0x0800a178

08002c80 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8002c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c82:	b0a5      	sub	sp, #148	; 0x94
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	bool r = false ;
 8002c88:	268f      	movs	r6, #143	; 0x8f
 8002c8a:	19bb      	adds	r3, r7, r6
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]

	my_rtc_get_dt ( &d , &t ) ;
 8002c90:	2470      	movs	r4, #112	; 0x70
 8002c92:	193a      	adds	r2, r7, r4
 8002c94:	2584      	movs	r5, #132	; 0x84
 8002c96:	197b      	adds	r3, r7, r5
 8002c98:	0011      	movs	r1, r2
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f7ff ff96 	bl	8002bcc <my_rtc_get_dt>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8002ca0:	193a      	adds	r2, r7, r4
 8002ca2:	197b      	adds	r3, r7, r5
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7ff fe5a 	bl	8002960 <my_conv_rtc2timestamp>
 8002cac:	0002      	movs	r2, r0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	2088      	movs	r0, #136	; 0x88
 8002cb4:	183a      	adds	r2, r7, r0
 8002cb6:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8002cb8:	193a      	adds	r2, r7, r4
 8002cba:	1979      	adds	r1, r7, r5
 8002cbc:	0005      	movs	r5, r0
 8002cbe:	183b      	adds	r3, r7, r0
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff fec0 	bl	8002a48 <my_conv_timestamp2rtc>
	a.AlarmTime.Hours = t.Hours ;
 8002cc8:	193b      	adds	r3, r7, r4
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	2148      	movs	r1, #72	; 0x48
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	785a      	ldrb	r2, [r3, #1]
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	789a      	ldrb	r2, [r3, #2]
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0 ;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY ;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2280      	movs	r2, #128	; 0x80
 8002cf8:	0612      	lsls	r2, r2, #24
 8002cfa:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	2200      	movs	r2, #0
 8002d00:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2200      	movs	r2, #0
 8002d06:	61da      	str	r2, [r3, #28]
	a.Alarm = RTC_ALARM_A ;
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	2280      	movs	r2, #128	; 0x80
 8002d0c:	0052      	lsls	r2, r2, #1
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

	if ( HAL_RTC_SetAlarm ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8002d10:	1879      	adds	r1, r7, r1
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <my_rtc_set_alarm+0xe0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	0018      	movs	r0, r3
 8002d18:	f001 fe1a 	bl	8004950 <HAL_RTC_SetAlarm>
 8002d1c:	1e03      	subs	r3, r0, #0
 8002d1e:	d117      	bne.n	8002d50 <my_rtc_set_alarm+0xd0>
	{
		char s[60] = {0} ;
 8002d20:	240c      	movs	r4, #12
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2238      	movs	r2, #56	; 0x38
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f004 fb3c 	bl	80073ac <memset>
		sprintf ( s , "Alarm set to %lu" , alarm_ts ) ;
 8002d34:	197b      	adds	r3, r7, r5
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	490a      	ldr	r1, [pc, #40]	; (8002d64 <my_rtc_set_alarm+0xe4>)
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f004 fac9 	bl	80072d4 <siprintf>
		send_debug_logs ( s ) ;
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff fdd5 	bl	80028f4 <send_debug_logs>
		r = true ;
 8002d4a:	19bb      	adds	r3, r7, r6
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
	}
	return r ;
 8002d50:	238f      	movs	r3, #143	; 0x8f
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	781b      	ldrb	r3, [r3, #0]
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b025      	add	sp, #148	; 0x94
 8002d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	200001f4 	.word	0x200001f4
 8002d64:	0800a198 	.word	0x0800a198

08002d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_MspInit+0x44>)
 8002d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_MspInit+0x44>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	430a      	orrs	r2, r1
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_MspInit+0x44>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2201      	movs	r2, #1
 8002d80:	4013      	ands	r3, r2
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_MspInit+0x44>)
 8002d88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_MspInit+0x44>)
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	0549      	lsls	r1, r1, #21
 8002d90:	430a      	orrs	r2, r1
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_MspInit+0x44>)
 8002d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d98:	2380      	movs	r3, #128	; 0x80
 8002d9a:	055b      	lsls	r3, r3, #21
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b002      	add	sp, #8
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b08f      	sub	sp, #60	; 0x3c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002db8:	2410      	movs	r4, #16
 8002dba:	193b      	adds	r3, r7, r4
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	2328      	movs	r3, #40	; 0x28
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f004 faf2 	bl	80073ac <memset>
  if(hrtc->Instance==RTC)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a15      	ldr	r2, [pc, #84]	; (8002e24 <HAL_RTC_MspInit+0x74>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d124      	bne.n	8002e1c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	2280      	movs	r2, #128	; 0x80
 8002dd6:	0292      	lsls	r2, r2, #10
 8002dd8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002dda:	193b      	adds	r3, r7, r4
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	0018      	movs	r0, r3
 8002de6:	f001 f9b3 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002dee:	f7ff fdb1 	bl	8002954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_RTC_MspInit+0x78>)
 8002df4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df6:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RTC_MspInit+0x78>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0209      	lsls	r1, r1, #8
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RTC_MspInit+0x78>)
 8002e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RTC_MspInit+0x78>)
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	00c9      	lsls	r1, r1, #3
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e0e:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RTC_MspInit+0x78>)
 8002e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b00f      	add	sp, #60	; 0x3c
 8002e22:	bd90      	pop	{r4, r7, pc}
 8002e24:	40002800 	.word	0x40002800
 8002e28:	40021000 	.word	0x40021000

08002e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b08b      	sub	sp, #44	; 0x2c
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	2414      	movs	r4, #20
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	0018      	movs	r0, r3
 8002e3a:	2314      	movs	r3, #20
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	2100      	movs	r1, #0
 8002e40:	f004 fab4 	bl	80073ac <memset>
  if(huart->Instance==USART2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_UART_MspInit+0x8c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d130      	bne.n	8002eb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_UART_MspInit+0x90>)
 8002e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e52:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_UART_MspInit+0x90>)
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	0289      	lsls	r1, r1, #10
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_UART_MspInit+0x90>)
 8002e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	029b      	lsls	r3, r3, #10
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6a:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_UART_MspInit+0x90>)
 8002e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_UART_MspInit+0x90>)
 8002e70:	2101      	movs	r1, #1
 8002e72:	430a      	orrs	r2, r1
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34
 8002e76:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_UART_MspInit+0x90>)
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8002e82:	0021      	movs	r1, r4
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	220c      	movs	r2, #12
 8002e88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e90:	187b      	adds	r3, r7, r1
 8002e92:	2201      	movs	r2, #1
 8002e94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	187a      	adds	r2, r7, r1
 8002ea4:	23a0      	movs	r3, #160	; 0xa0
 8002ea6:	05db      	lsls	r3, r3, #23
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fa86 	bl	80033bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b00b      	add	sp, #44	; 0x2c
 8002eb6:	bd90      	pop	{r4, r7, pc}
 8002eb8:	40004400 	.word	0x40004400
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec4:	e7fe      	b.n	8002ec4 <NMI_Handler+0x4>

08002ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eca:	e7fe      	b.n	8002eca <HardFault_Handler+0x4>

08002ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee4:	f000 f95a 	bl	800319c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee8:	46c0      	nop			; (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	af00      	add	r7, sp, #0
  return 1;
 8002ef2:	2301      	movs	r3, #1
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_kill>:

int _kill(int pid, int sig)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f04:	f004 fabe 	bl	8007484 <__errno>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	2216      	movs	r2, #22
 8002f0c:	601a      	str	r2, [r3, #0]
  return -1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	425b      	negs	r3, r3
}
 8002f12:	0018      	movs	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b002      	add	sp, #8
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <_exit>:

void _exit (int status)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f22:	2301      	movs	r3, #1
 8002f24:	425a      	negs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0011      	movs	r1, r2
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f7ff ffe5 	bl	8002efa <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f30:	e7fe      	b.n	8002f30 <_exit+0x16>

08002f32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e00a      	b.n	8002f5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f44:	e000      	b.n	8002f48 <_read+0x16>
 8002f46:	bf00      	nop
 8002f48:	0001      	movs	r1, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	60ba      	str	r2, [r7, #8]
 8002f50:	b2ca      	uxtb	r2, r1
 8002f52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	dbf0      	blt.n	8002f44 <_read+0x12>
  }

  return len;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b006      	add	sp, #24
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e009      	b.n	8002f92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	60ba      	str	r2, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	0018      	movs	r0, r3
 8002f88:	e000      	b.n	8002f8c <_write+0x20>
 8002f8a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	617b      	str	r3, [r7, #20]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	dbf1      	blt.n	8002f7e <_write+0x12>
  }
  return len;
 8002f9a:	687b      	ldr	r3, [r7, #4]
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b006      	add	sp, #24
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_close>:

int _close(int file)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fac:	2301      	movs	r3, #1
 8002fae:	425b      	negs	r3, r3
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	0192      	lsls	r2, r2, #6
 8002fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_isatty>:

int _isatty(int file)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fdc:	2301      	movs	r3, #1
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b002      	add	sp, #8
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <_sbrk+0x5c>)
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <_sbrk+0x60>)
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003010:	4b13      	ldr	r3, [pc, #76]	; (8003060 <_sbrk+0x64>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <_sbrk+0x64>)
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <_sbrk+0x68>)
 800301c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800301e:	4b10      	ldr	r3, [pc, #64]	; (8003060 <_sbrk+0x64>)
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	429a      	cmp	r2, r3
 800302a:	d207      	bcs.n	800303c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800302c:	f004 fa2a 	bl	8007484 <__errno>
 8003030:	0003      	movs	r3, r0
 8003032:	220c      	movs	r2, #12
 8003034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003036:	2301      	movs	r3, #1
 8003038:	425b      	negs	r3, r3
 800303a:	e009      	b.n	8003050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <_sbrk+0x64>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	18d2      	adds	r2, r2, r3
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <_sbrk+0x64>)
 800304c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800304e:	68fb      	ldr	r3, [r7, #12]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20002000 	.word	0x20002000
 800305c:	00000400 	.word	0x00000400
 8003060:	200002c8 	.word	0x200002c8
 8003064:	20000420 	.word	0x20000420

08003068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003074:	480d      	ldr	r0, [pc, #52]	; (80030ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003076:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003078:	f7ff fff6 	bl	8003068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800307c:	480c      	ldr	r0, [pc, #48]	; (80030b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800307e:	490d      	ldr	r1, [pc, #52]	; (80030b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <LoopForever+0xe>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003084:	e002      	b.n	800308c <LoopCopyDataInit>

08003086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800308a:	3304      	adds	r3, #4

0800308c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800308c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800308e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003090:	d3f9      	bcc.n	8003086 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003094:	4c0a      	ldr	r4, [pc, #40]	; (80030c0 <LoopForever+0x16>)
  movs r3, #0
 8003096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003098:	e001      	b.n	800309e <LoopFillZerobss>

0800309a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800309a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800309c:	3204      	adds	r2, #4

0800309e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800309e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030a0:	d3fb      	bcc.n	800309a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030a2:	f004 f9f5 	bl	8007490 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030a6:	f7ff fa51 	bl	800254c <main>

080030aa <LoopForever>:

LoopForever:
  b LoopForever
 80030aa:	e7fe      	b.n	80030aa <LoopForever>
  ldr   r0, =_estack
 80030ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80030b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030b4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80030b8:	0800a6c4 	.word	0x0800a6c4
  ldr r2, =_sbss
 80030bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030c0:	2000041c 	.word	0x2000041c

080030c4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030c4:	e7fe      	b.n	80030c4 <ADC1_IRQHandler>
	...

080030c8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_Init+0x3c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Init+0x3c>)
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	0049      	lsls	r1, r1, #1
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030e2:	2000      	movs	r0, #0
 80030e4:	f000 f810 	bl	8003108 <HAL_InitTick>
 80030e8:	1e03      	subs	r3, r0, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e001      	b.n	80030f8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80030f4:	f7ff fe38 	bl	8002d68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	781b      	ldrb	r3, [r3, #0]
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b002      	add	sp, #8
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40022000 	.word	0x40022000

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b590      	push	{r4, r7, lr}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003110:	230f      	movs	r3, #15
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_InitTick+0x88>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d02b      	beq.n	8003178 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003120:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_InitTick+0x8c>)
 8003122:	681c      	ldr	r4, [r3, #0]
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <HAL_InitTick+0x88>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	0019      	movs	r1, r3
 800312a:	23fa      	movs	r3, #250	; 0xfa
 800312c:	0098      	lsls	r0, r3, #2
 800312e:	f7fd f805 	bl	800013c <__udivsi3>
 8003132:	0003      	movs	r3, r0
 8003134:	0019      	movs	r1, r3
 8003136:	0020      	movs	r0, r4
 8003138:	f7fd f800 	bl	800013c <__udivsi3>
 800313c:	0003      	movs	r3, r0
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f92f 	bl	80033a2 <HAL_SYSTICK_Config>
 8003144:	1e03      	subs	r3, r0, #0
 8003146:	d112      	bne.n	800316e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d80a      	bhi.n	8003164 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	2301      	movs	r3, #1
 8003152:	425b      	negs	r3, r3
 8003154:	2200      	movs	r2, #0
 8003156:	0018      	movs	r0, r3
 8003158:	f000 f90e 	bl	8003378 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_InitTick+0x90>)
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e00d      	b.n	8003180 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003164:	230f      	movs	r3, #15
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e008      	b.n	8003180 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e003      	b.n	8003180 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003178:	230f      	movs	r3, #15
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2201      	movs	r2, #1
 800317e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	781b      	ldrb	r3, [r3, #0]
}
 8003186:	0018      	movs	r0, r3
 8003188:	46bd      	mov	sp, r7
 800318a:	b005      	add	sp, #20
 800318c:	bd90      	pop	{r4, r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	2000000c 	.word	0x2000000c
 8003194:	20000004 	.word	0x20000004
 8003198:	20000008 	.word	0x20000008

0800319c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_IncTick+0x1c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	001a      	movs	r2, r3
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_IncTick+0x20>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	18d2      	adds	r2, r2, r3
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <HAL_IncTick+0x20>)
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	46c0      	nop			; (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	2000000c 	.word	0x2000000c
 80031bc:	200002cc 	.word	0x200002cc

080031c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  return uwTick;
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <HAL_GetTick+0x10>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	200002cc 	.word	0x200002cc

080031d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff fff0 	bl	80031c0 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3301      	adds	r3, #1
 80031ec:	d005      	beq.n	80031fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_Delay+0x44>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	001a      	movs	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	f7ff ffe0 	bl	80031c0 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d8f7      	bhi.n	80031fc <HAL_Delay+0x28>
  {
  }
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b004      	add	sp, #16
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	2000000c 	.word	0x2000000c

0800321c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_SuspendTick+0x18>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_SuspendTick+0x18>)
 8003226:	2102      	movs	r1, #2
 8003228:	438a      	bics	r2, r1
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	e000e010 	.word	0xe000e010

08003238 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <HAL_ResumeTick+0x18>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <HAL_ResumeTick+0x18>)
 8003242:	2102      	movs	r1, #2
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	46c0      	nop			; (mov r8, r8)
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	e000e010 	.word	0xe000e010

08003254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003254:	b590      	push	{r4, r7, lr}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	0002      	movs	r2, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003262:	1dfb      	adds	r3, r7, #7
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b7f      	cmp	r3, #127	; 0x7f
 8003268:	d828      	bhi.n	80032bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800326a:	4a2f      	ldr	r2, [pc, #188]	; (8003328 <__NVIC_SetPriority+0xd4>)
 800326c:	1dfb      	adds	r3, r7, #7
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b25b      	sxtb	r3, r3
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	33c0      	adds	r3, #192	; 0xc0
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	589b      	ldr	r3, [r3, r2]
 800327a:	1dfa      	adds	r2, r7, #7
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	0011      	movs	r1, r2
 8003280:	2203      	movs	r2, #3
 8003282:	400a      	ands	r2, r1
 8003284:	00d2      	lsls	r2, r2, #3
 8003286:	21ff      	movs	r1, #255	; 0xff
 8003288:	4091      	lsls	r1, r2
 800328a:	000a      	movs	r2, r1
 800328c:	43d2      	mvns	r2, r2
 800328e:	401a      	ands	r2, r3
 8003290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	019b      	lsls	r3, r3, #6
 8003296:	22ff      	movs	r2, #255	; 0xff
 8003298:	401a      	ands	r2, r3
 800329a:	1dfb      	adds	r3, r7, #7
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	0018      	movs	r0, r3
 80032a0:	2303      	movs	r3, #3
 80032a2:	4003      	ands	r3, r0
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a8:	481f      	ldr	r0, [pc, #124]	; (8003328 <__NVIC_SetPriority+0xd4>)
 80032aa:	1dfb      	adds	r3, r7, #7
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	430a      	orrs	r2, r1
 80032b4:	33c0      	adds	r3, #192	; 0xc0
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032ba:	e031      	b.n	8003320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <__NVIC_SetPriority+0xd8>)
 80032be:	1dfb      	adds	r3, r7, #7
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	0019      	movs	r1, r3
 80032c4:	230f      	movs	r3, #15
 80032c6:	400b      	ands	r3, r1
 80032c8:	3b08      	subs	r3, #8
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3306      	adds	r3, #6
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	3304      	adds	r3, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1dfa      	adds	r2, r7, #7
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	0011      	movs	r1, r2
 80032dc:	2203      	movs	r2, #3
 80032de:	400a      	ands	r2, r1
 80032e0:	00d2      	lsls	r2, r2, #3
 80032e2:	21ff      	movs	r1, #255	; 0xff
 80032e4:	4091      	lsls	r1, r2
 80032e6:	000a      	movs	r2, r1
 80032e8:	43d2      	mvns	r2, r2
 80032ea:	401a      	ands	r2, r3
 80032ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	401a      	ands	r2, r3
 80032f6:	1dfb      	adds	r3, r7, #7
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	0018      	movs	r0, r3
 80032fc:	2303      	movs	r3, #3
 80032fe:	4003      	ands	r3, r0
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003304:	4809      	ldr	r0, [pc, #36]	; (800332c <__NVIC_SetPriority+0xd8>)
 8003306:	1dfb      	adds	r3, r7, #7
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	001c      	movs	r4, r3
 800330c:	230f      	movs	r3, #15
 800330e:	4023      	ands	r3, r4
 8003310:	3b08      	subs	r3, #8
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	430a      	orrs	r2, r1
 8003316:	3306      	adds	r3, #6
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	18c3      	adds	r3, r0, r3
 800331c:	3304      	adds	r3, #4
 800331e:	601a      	str	r2, [r3, #0]
}
 8003320:	46c0      	nop			; (mov r8, r8)
 8003322:	46bd      	mov	sp, r7
 8003324:	b003      	add	sp, #12
 8003326:	bd90      	pop	{r4, r7, pc}
 8003328:	e000e100 	.word	0xe000e100
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	1e5a      	subs	r2, r3, #1
 800333c:	2380      	movs	r3, #128	; 0x80
 800333e:	045b      	lsls	r3, r3, #17
 8003340:	429a      	cmp	r2, r3
 8003342:	d301      	bcc.n	8003348 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003344:	2301      	movs	r3, #1
 8003346:	e010      	b.n	800336a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003348:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <SysTick_Config+0x44>)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	3a01      	subs	r2, #1
 800334e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003350:	2301      	movs	r3, #1
 8003352:	425b      	negs	r3, r3
 8003354:	2103      	movs	r1, #3
 8003356:	0018      	movs	r0, r3
 8003358:	f7ff ff7c 	bl	8003254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <SysTick_Config+0x44>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003362:	4b04      	ldr	r3, [pc, #16]	; (8003374 <SysTick_Config+0x44>)
 8003364:	2207      	movs	r2, #7
 8003366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003368:	2300      	movs	r3, #0
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b002      	add	sp, #8
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	e000e010 	.word	0xe000e010

08003378 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	210f      	movs	r1, #15
 8003384:	187b      	adds	r3, r7, r1
 8003386:	1c02      	adds	r2, r0, #0
 8003388:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	187b      	adds	r3, r7, r1
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	b25b      	sxtb	r3, r3
 8003392:	0011      	movs	r1, r2
 8003394:	0018      	movs	r0, r3
 8003396:	f7ff ff5d 	bl	8003254 <__NVIC_SetPriority>
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	46bd      	mov	sp, r7
 800339e:	b004      	add	sp, #16
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff ffbf 	bl	8003330 <SysTick_Config>
 80033b2:	0003      	movs	r3, r0
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b002      	add	sp, #8
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ca:	e147      	b.n	800365c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4091      	lsls	r1, r2
 80033d6:	000a      	movs	r2, r1
 80033d8:	4013      	ands	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d100      	bne.n	80033e4 <HAL_GPIO_Init+0x28>
 80033e2:	e138      	b.n	8003656 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d005      	beq.n	80033fc <HAL_GPIO_Init+0x40>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2203      	movs	r2, #3
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d130      	bne.n	800345e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2203      	movs	r2, #3
 8003408:	409a      	lsls	r2, r3
 800340a:	0013      	movs	r3, r2
 800340c:	43da      	mvns	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4013      	ands	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	409a      	lsls	r2, r3
 800341e:	0013      	movs	r3, r2
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003432:	2201      	movs	r2, #1
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
 8003438:	0013      	movs	r3, r2
 800343a:	43da      	mvns	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	2201      	movs	r2, #1
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
 8003450:	0013      	movs	r3, r2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2203      	movs	r2, #3
 8003464:	4013      	ands	r3, r2
 8003466:	2b03      	cmp	r3, #3
 8003468:	d017      	beq.n	800349a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	409a      	lsls	r2, r3
 8003478:	0013      	movs	r3, r2
 800347a:	43da      	mvns	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	409a      	lsls	r2, r3
 800348c:	0013      	movs	r3, r2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2203      	movs	r2, #3
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d123      	bne.n	80034ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	08da      	lsrs	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3208      	adds	r2, #8
 80034ae:	0092      	lsls	r2, r2, #2
 80034b0:	58d3      	ldr	r3, [r2, r3]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2207      	movs	r2, #7
 80034b8:	4013      	ands	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	409a      	lsls	r2, r3
 80034c0:	0013      	movs	r3, r2
 80034c2:	43da      	mvns	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4013      	ands	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	2107      	movs	r1, #7
 80034d2:	400b      	ands	r3, r1
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	409a      	lsls	r2, r3
 80034d8:	0013      	movs	r3, r2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	08da      	lsrs	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3208      	adds	r2, #8
 80034e8:	0092      	lsls	r2, r2, #2
 80034ea:	6939      	ldr	r1, [r7, #16]
 80034ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	409a      	lsls	r2, r3
 80034fc:	0013      	movs	r3, r2
 80034fe:	43da      	mvns	r2, r3
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2203      	movs	r2, #3
 800350c:	401a      	ands	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	23c0      	movs	r3, #192	; 0xc0
 8003528:	029b      	lsls	r3, r3, #10
 800352a:	4013      	ands	r3, r2
 800352c:	d100      	bne.n	8003530 <HAL_GPIO_Init+0x174>
 800352e:	e092      	b.n	8003656 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003530:	4a50      	ldr	r2, [pc, #320]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	3318      	adds	r3, #24
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	589b      	ldr	r3, [r3, r2]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2203      	movs	r2, #3
 8003542:	4013      	ands	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	220f      	movs	r2, #15
 8003548:	409a      	lsls	r2, r3
 800354a:	0013      	movs	r3, r2
 800354c:	43da      	mvns	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	23a0      	movs	r3, #160	; 0xa0
 8003558:	05db      	lsls	r3, r3, #23
 800355a:	429a      	cmp	r2, r3
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0x1ca>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a45      	ldr	r2, [pc, #276]	; (8003678 <HAL_GPIO_Init+0x2bc>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00d      	beq.n	8003582 <HAL_GPIO_Init+0x1c6>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a44      	ldr	r2, [pc, #272]	; (800367c <HAL_GPIO_Init+0x2c0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d007      	beq.n	800357e <HAL_GPIO_Init+0x1c2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a43      	ldr	r2, [pc, #268]	; (8003680 <HAL_GPIO_Init+0x2c4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_GPIO_Init+0x1be>
 8003576:	2303      	movs	r3, #3
 8003578:	e006      	b.n	8003588 <HAL_GPIO_Init+0x1cc>
 800357a:	2305      	movs	r3, #5
 800357c:	e004      	b.n	8003588 <HAL_GPIO_Init+0x1cc>
 800357e:	2302      	movs	r3, #2
 8003580:	e002      	b.n	8003588 <HAL_GPIO_Init+0x1cc>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <HAL_GPIO_Init+0x1cc>
 8003586:	2300      	movs	r3, #0
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	2103      	movs	r1, #3
 800358c:	400a      	ands	r2, r1
 800358e:	00d2      	lsls	r2, r2, #3
 8003590:	4093      	lsls	r3, r2
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003598:	4936      	ldr	r1, [pc, #216]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3318      	adds	r3, #24
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43da      	mvns	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	035b      	lsls	r3, r3, #13
 80035be:	4013      	ands	r3, r2
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035ca:	4b2a      	ldr	r3, [pc, #168]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80035d0:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43da      	mvns	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	039b      	lsls	r3, r3, #14
 80035e8:	4013      	ands	r3, r2
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035f4:	4b1f      	ldr	r3, [pc, #124]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035fa:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 80035fc:	2384      	movs	r3, #132	; 0x84
 80035fe:	58d3      	ldr	r3, [r2, r3]
 8003600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43da      	mvns	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	2380      	movs	r3, #128	; 0x80
 8003612:	029b      	lsls	r3, r3, #10
 8003614:	4013      	ands	r3, r2
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003620:	4914      	ldr	r1, [pc, #80]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 8003622:	2284      	movs	r2, #132	; 0x84
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003628:	4a12      	ldr	r2, [pc, #72]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	58d3      	ldr	r3, [r2, r3]
 800362e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	43da      	mvns	r2, r3
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	025b      	lsls	r3, r3, #9
 8003642:	4013      	ands	r3, r2
 8003644:	d003      	beq.n	800364e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800364e:	4909      	ldr	r1, [pc, #36]	; (8003674 <HAL_GPIO_Init+0x2b8>)
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	3301      	adds	r3, #1
 800365a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	40da      	lsrs	r2, r3
 8003664:	1e13      	subs	r3, r2, #0
 8003666:	d000      	beq.n	800366a <HAL_GPIO_Init+0x2ae>
 8003668:	e6b0      	b.n	80033cc <HAL_GPIO_Init+0x10>
  }
}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b006      	add	sp, #24
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021800 	.word	0x40021800
 8003678:	50000400 	.word	0x50000400
 800367c:	50000800 	.word	0x50000800
 8003680:	50000c00 	.word	0x50000c00

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	0008      	movs	r0, r1
 800368e:	0011      	movs	r1, r2
 8003690:	1cbb      	adds	r3, r7, #2
 8003692:	1c02      	adds	r2, r0, #0
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	1c7b      	adds	r3, r7, #1
 8003698:	1c0a      	adds	r2, r1, #0
 800369a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800369c:	1c7b      	adds	r3, r7, #1
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a4:	1cbb      	adds	r3, r7, #2
 80036a6:	881a      	ldrh	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036ac:	e003      	b.n	80036b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ae:	1cbb      	adds	r3, r7, #2
 80036b0:	881a      	ldrh	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	b002      	add	sp, #8
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	000a      	movs	r2, r1
 80036ca:	1cfb      	adds	r3, r7, #3
 80036cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_PWR_EnterSTOPMode+0x68>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2207      	movs	r2, #7
 80036da:	4393      	bics	r3, r2
 80036dc:	001a      	movs	r2, r3
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_PWR_EnterSTOPMode+0x68>)
 80036e0:	2101      	movs	r1, #1
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]
 80036e6:	e005      	b.n	80036f4 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <HAL_PWR_EnterSTOPMode+0x68>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_PWR_EnterSTOPMode+0x68>)
 80036ee:	2107      	movs	r1, #7
 80036f0:	438a      	bics	r2, r1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_PWR_EnterSTOPMode+0x6c>)
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <HAL_PWR_EnterSTOPMode+0x6c>)
 80036fa:	2104      	movs	r1, #4
 80036fc:	430a      	orrs	r2, r1
 80036fe:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8003700:	1cfb      	adds	r3, r7, #3
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003708:	bf30      	wfi
 800370a:	e002      	b.n	8003712 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800370c:	bf40      	sev
    __WFE();
 800370e:	bf20      	wfe
    __WFE();
 8003710:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_PWR_EnterSTOPMode+0x6c>)
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_PWR_EnterSTOPMode+0x6c>)
 8003718:	2104      	movs	r1, #4
 800371a:	438a      	bics	r2, r1
 800371c:	611a      	str	r2, [r3, #16]
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	40007000 	.word	0x40007000
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800373e:	4013      	ands	r3, r2
 8003740:	0019      	movs	r1, r3
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	430a      	orrs	r2, r1
 8003748:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d11f      	bne.n	8003794 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	0013      	movs	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	189b      	adds	r3, r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4912      	ldr	r1, [pc, #72]	; (80037ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003762:	0018      	movs	r0, r3
 8003764:	f7fc fcea 	bl	800013c <__udivsi3>
 8003768:	0003      	movs	r3, r0
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800376e:	e008      	b.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3b01      	subs	r3, #1
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	e001      	b.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e009      	b.n	8003796 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	401a      	ands	r2, r3
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	429a      	cmp	r2, r3
 8003792:	d0ed      	beq.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	0018      	movs	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	b004      	add	sp, #16
 800379c:	bd80      	pop	{r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	40007000 	.word	0x40007000
 80037a4:	fffff9ff 	.word	0xfffff9ff
 80037a8:	20000004 	.word	0x20000004
 80037ac:	000f4240 	.word	0x000f4240

080037b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	23e0      	movs	r3, #224	; 0xe0
 80037ba:	01db      	lsls	r3, r3, #7
 80037bc:	4013      	ands	r3, r2
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000

080037c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e2fe      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2201      	movs	r2, #1
 80037e0:	4013      	ands	r3, r2
 80037e2:	d100      	bne.n	80037e6 <HAL_RCC_OscConfig+0x1e>
 80037e4:	e07c      	b.n	80038e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e6:	4bc3      	ldr	r3, [pc, #780]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2238      	movs	r2, #56	; 0x38
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f0:	4bc0      	ldr	r3, [pc, #768]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2203      	movs	r2, #3
 80037f6:	4013      	ands	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d102      	bne.n	8003806 <HAL_RCC_OscConfig+0x3e>
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d002      	beq.n	800380c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4bb9      	ldr	r3, [pc, #740]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	2380      	movs	r3, #128	; 0x80
 8003812:	029b      	lsls	r3, r3, #10
 8003814:	4013      	ands	r3, r2
 8003816:	d062      	beq.n	80038de <HAL_RCC_OscConfig+0x116>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d15e      	bne.n	80038de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e2d9      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	025b      	lsls	r3, r3, #9
 800382c:	429a      	cmp	r2, r3
 800382e:	d107      	bne.n	8003840 <HAL_RCC_OscConfig+0x78>
 8003830:	4bb0      	ldr	r3, [pc, #704]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4baf      	ldr	r3, [pc, #700]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	0249      	lsls	r1, r1, #9
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e020      	b.n	8003882 <HAL_RCC_OscConfig+0xba>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	23a0      	movs	r3, #160	; 0xa0
 8003846:	02db      	lsls	r3, r3, #11
 8003848:	429a      	cmp	r2, r3
 800384a:	d10e      	bne.n	800386a <HAL_RCC_OscConfig+0xa2>
 800384c:	4ba9      	ldr	r3, [pc, #676]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	4ba8      	ldr	r3, [pc, #672]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	02c9      	lsls	r1, r1, #11
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	4ba6      	ldr	r3, [pc, #664]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4ba5      	ldr	r3, [pc, #660]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003860:	2180      	movs	r1, #128	; 0x80
 8003862:	0249      	lsls	r1, r1, #9
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	e00b      	b.n	8003882 <HAL_RCC_OscConfig+0xba>
 800386a:	4ba2      	ldr	r3, [pc, #648]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4ba1      	ldr	r3, [pc, #644]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003870:	49a1      	ldr	r1, [pc, #644]	; (8003af8 <HAL_RCC_OscConfig+0x330>)
 8003872:	400a      	ands	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	4b9f      	ldr	r3, [pc, #636]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b9e      	ldr	r3, [pc, #632]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800387c:	499f      	ldr	r1, [pc, #636]	; (8003afc <HAL_RCC_OscConfig+0x334>)
 800387e:	400a      	ands	r2, r1
 8003880:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d014      	beq.n	80038b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7ff fc99 	bl	80031c0 <HAL_GetTick>
 800388e:	0003      	movs	r3, r0
 8003890:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7ff fc94 	bl	80031c0 <HAL_GetTick>
 8003898:	0002      	movs	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	; 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e298      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a6:	4b93      	ldr	r3, [pc, #588]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	2380      	movs	r3, #128	; 0x80
 80038ac:	029b      	lsls	r3, r3, #10
 80038ae:	4013      	ands	r3, r2
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0xcc>
 80038b2:	e015      	b.n	80038e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7ff fc84 	bl	80031c0 <HAL_GetTick>
 80038b8:	0003      	movs	r3, r0
 80038ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038be:	f7ff fc7f 	bl	80031c0 <HAL_GetTick>
 80038c2:	0002      	movs	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b64      	cmp	r3, #100	; 0x64
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e283      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	029b      	lsls	r3, r3, #10
 80038d8:	4013      	ands	r3, r2
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0xf6>
 80038dc:	e000      	b.n	80038e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2202      	movs	r2, #2
 80038e6:	4013      	ands	r3, r2
 80038e8:	d100      	bne.n	80038ec <HAL_RCC_OscConfig+0x124>
 80038ea:	e099      	b.n	8003a20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ec:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2238      	movs	r2, #56	; 0x38
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f6:	4b7f      	ldr	r3, [pc, #508]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2203      	movs	r2, #3
 80038fc:	4013      	ands	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	2b10      	cmp	r3, #16
 8003904:	d102      	bne.n	800390c <HAL_RCC_OscConfig+0x144>
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b02      	cmp	r3, #2
 800390a:	d002      	beq.n	8003912 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d135      	bne.n	800397e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003912:	4b78      	ldr	r3, [pc, #480]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4013      	ands	r3, r2
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x162>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e256      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b72      	ldr	r3, [pc, #456]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a74      	ldr	r2, [pc, #464]	; (8003b00 <HAL_RCC_OscConfig+0x338>)
 8003930:	4013      	ands	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	4b6e      	ldr	r3, [pc, #440]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d112      	bne.n	800396c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003946:	4b6b      	ldr	r3, [pc, #428]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6e      	ldr	r2, [pc, #440]	; (8003b04 <HAL_RCC_OscConfig+0x33c>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	4b67      	ldr	r3, [pc, #412]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800395a:	4b66      	ldr	r3, [pc, #408]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	0adb      	lsrs	r3, r3, #11
 8003960:	2207      	movs	r2, #7
 8003962:	4013      	ands	r3, r2
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x340>)
 8003966:	40da      	lsrs	r2, r3
 8003968:	4b68      	ldr	r3, [pc, #416]	; (8003b0c <HAL_RCC_OscConfig+0x344>)
 800396a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800396c:	4b68      	ldr	r3, [pc, #416]	; (8003b10 <HAL_RCC_OscConfig+0x348>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	0018      	movs	r0, r3
 8003972:	f7ff fbc9 	bl	8003108 <HAL_InitTick>
 8003976:	1e03      	subs	r3, r0, #0
 8003978:	d051      	beq.n	8003a1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e22c      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d030      	beq.n	80039e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003986:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a5e      	ldr	r2, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x33c>)
 800398c:	4013      	ands	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800399a:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80039a0:	2180      	movs	r1, #128	; 0x80
 80039a2:	0049      	lsls	r1, r1, #1
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7ff fc0a 	bl	80031c0 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b2:	f7ff fc05 	bl	80031c0 <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e209      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039c4:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	4013      	ands	r3, r2
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b48      	ldr	r3, [pc, #288]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a4a      	ldr	r2, [pc, #296]	; (8003b00 <HAL_RCC_OscConfig+0x338>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	021a      	lsls	r2, r3, #8
 80039e0:	4b44      	ldr	r3, [pc, #272]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	e01b      	b.n	8003a20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 80039ee:	4949      	ldr	r1, [pc, #292]	; (8003b14 <HAL_RCC_OscConfig+0x34c>)
 80039f0:	400a      	ands	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f4:	f7ff fbe4 	bl	80031c0 <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fe:	f7ff fbdf 	bl	80031c0 <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1e3      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a10:	4b38      	ldr	r3, [pc, #224]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x236>
 8003a1c:	e000      	b.n	8003a20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2208      	movs	r2, #8
 8003a26:	4013      	ands	r3, r2
 8003a28:	d047      	beq.n	8003aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003a2a:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2238      	movs	r2, #56	; 0x38
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b18      	cmp	r3, #24
 8003a34:	d10a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003a36:	4b2f      	ldr	r3, [pc, #188]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d03c      	beq.n	8003aba <HAL_RCC_OscConfig+0x2f2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d138      	bne.n	8003aba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e1c5      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d019      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a58:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7ff fbae 	bl	80031c0 <HAL_GetTick>
 8003a64:	0003      	movs	r3, r0
 8003a66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a6a:	f7ff fba9 	bl	80031c0 <HAL_GetTick>
 8003a6e:	0002      	movs	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1ad      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a80:	2202      	movs	r2, #2
 8003a82:	4013      	ands	r3, r2
 8003a84:	d0f1      	beq.n	8003a6a <HAL_RCC_OscConfig+0x2a2>
 8003a86:	e018      	b.n	8003aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a8c:	4b19      	ldr	r3, [pc, #100]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	438a      	bics	r2, r1
 8003a92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a94:	f7ff fb94 	bl	80031c0 <HAL_GetTick>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7ff fb8f 	bl	80031c0 <HAL_GetTick>
 8003aa2:	0002      	movs	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e193      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d1f1      	bne.n	8003a9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d100      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x2fe>
 8003ac4:	e0c6      	b.n	8003c54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac6:	231f      	movs	r3, #31
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003ace:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2238      	movs	r2, #56	; 0x38
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d11e      	bne.n	8003b18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x31e>
 8003ae4:	e0b6      	b.n	8003c54 <HAL_RCC_OscConfig+0x48c>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d000      	beq.n	8003af0 <HAL_RCC_OscConfig+0x328>
 8003aee:	e0b1      	b.n	8003c54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e171      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
 8003af4:	40021000 	.word	0x40021000
 8003af8:	fffeffff 	.word	0xfffeffff
 8003afc:	fffbffff 	.word	0xfffbffff
 8003b00:	ffff80ff 	.word	0xffff80ff
 8003b04:	ffffc7ff 	.word	0xffffc7ff
 8003b08:	00f42400 	.word	0x00f42400
 8003b0c:	20000004 	.word	0x20000004
 8003b10:	20000008 	.word	0x20000008
 8003b14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b18:	4bb1      	ldr	r3, [pc, #708]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	055b      	lsls	r3, r3, #21
 8003b20:	4013      	ands	r3, r2
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_OscConfig+0x360>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <HAL_RCC_OscConfig+0x362>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d011      	beq.n	8003b52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003b2e:	4bac      	ldr	r3, [pc, #688]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b32:	4bab      	ldr	r3, [pc, #684]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	0549      	lsls	r1, r1, #21
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b3c:	4ba8      	ldr	r3, [pc, #672]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	055b      	lsls	r3, r3, #21
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003b4a:	231f      	movs	r3, #31
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b52:	4ba4      	ldr	r3, [pc, #656]	; (8003de4 <HAL_RCC_OscConfig+0x61c>)
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d11a      	bne.n	8003b94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5e:	4ba1      	ldr	r3, [pc, #644]	; (8003de4 <HAL_RCC_OscConfig+0x61c>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4ba0      	ldr	r3, [pc, #640]	; (8003de4 <HAL_RCC_OscConfig+0x61c>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0049      	lsls	r1, r1, #1
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003b6c:	f7ff fb28 	bl	80031c0 <HAL_GetTick>
 8003b70:	0003      	movs	r3, r0
 8003b72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b76:	f7ff fb23 	bl	80031c0 <HAL_GetTick>
 8003b7a:	0002      	movs	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e127      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b88:	4b96      	ldr	r3, [pc, #600]	; (8003de4 <HAL_RCC_OscConfig+0x61c>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4013      	ands	r3, r2
 8003b92:	d0f0      	beq.n	8003b76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x3e2>
 8003b9c:	4b90      	ldr	r3, [pc, #576]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003b9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ba0:	4b8f      	ldr	r3, [pc, #572]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ba8:	e01c      	b.n	8003be4 <HAL_RCC_OscConfig+0x41c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2b05      	cmp	r3, #5
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x404>
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bb4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bb6:	4b8a      	ldr	r3, [pc, #552]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bb8:	2104      	movs	r1, #4
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bbe:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bc2:	4b87      	ldr	r3, [pc, #540]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bca:	e00b      	b.n	8003be4 <HAL_RCC_OscConfig+0x41c>
 8003bcc:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bd0:	4b83      	ldr	r3, [pc, #524]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bd8:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bdc:	4b80      	ldr	r3, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003bde:	2104      	movs	r1, #4
 8003be0:	438a      	bics	r2, r1
 8003be2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d014      	beq.n	8003c16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bec:	f7ff fae8 	bl	80031c0 <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf4:	e009      	b.n	8003c0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7ff fae3 	bl	80031c0 <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	4a79      	ldr	r2, [pc, #484]	; (8003de8 <HAL_RCC_OscConfig+0x620>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0e6      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0a:	4b75      	ldr	r3, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	2202      	movs	r2, #2
 8003c10:	4013      	ands	r3, r2
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x42e>
 8003c14:	e013      	b.n	8003c3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7ff fad3 	bl	80031c0 <HAL_GetTick>
 8003c1a:	0003      	movs	r3, r0
 8003c1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c1e:	e009      	b.n	8003c34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7ff face 	bl	80031c0 <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	4a6f      	ldr	r2, [pc, #444]	; (8003de8 <HAL_RCC_OscConfig+0x620>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0d1      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c34:	4b6a      	ldr	r3, [pc, #424]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	2202      	movs	r2, #2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003c3e:	231f      	movs	r3, #31
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d105      	bne.n	8003c54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003c48:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4c:	4b64      	ldr	r3, [pc, #400]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c4e:	4967      	ldr	r1, [pc, #412]	; (8003dec <HAL_RCC_OscConfig+0x624>)
 8003c50:	400a      	ands	r2, r1
 8003c52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d100      	bne.n	8003c5e <HAL_RCC_OscConfig+0x496>
 8003c5c:	e0bb      	b.n	8003dd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c5e:	4b60      	ldr	r3, [pc, #384]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2238      	movs	r2, #56	; 0x38
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d100      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4a4>
 8003c6a:	e07b      	b.n	8003d64 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	69db      	ldr	r3, [r3, #28]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d156      	bne.n	8003d22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c74:	4b5a      	ldr	r3, [pc, #360]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c7a:	495d      	ldr	r1, [pc, #372]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c80:	f7ff fa9e 	bl	80031c0 <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7ff fa99 	bl	80031c0 <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e09d      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9c:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	049b      	lsls	r3, r3, #18
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca8:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a51      	ldr	r2, [pc, #324]	; (8003df4 <HAL_RCC_OscConfig+0x62c>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cdc:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	0449      	lsls	r1, r1, #17
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003cea:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	4b3c      	ldr	r3, [pc, #240]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003cf0:	2180      	movs	r1, #128	; 0x80
 8003cf2:	0549      	lsls	r1, r1, #21
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7ff fa62 	bl	80031c0 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d02:	f7ff fa5d 	bl	80031c0 <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e061      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d14:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	049b      	lsls	r3, r3, #18
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x53a>
 8003d20:	e059      	b.n	8003dd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b2f      	ldr	r3, [pc, #188]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003d28:	4931      	ldr	r1, [pc, #196]	; (8003df0 <HAL_RCC_OscConfig+0x628>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7ff fa47 	bl	80031c0 <HAL_GetTick>
 8003d32:	0003      	movs	r3, r0
 8003d34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d38:	f7ff fa42 	bl	80031c0 <HAL_GetTick>
 8003d3c:	0002      	movs	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e046      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	049b      	lsls	r3, r3, #18
 8003d52:	4013      	ands	r3, r2
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003d5c:	4926      	ldr	r1, [pc, #152]	; (8003df8 <HAL_RCC_OscConfig+0x630>)
 8003d5e:	400a      	ands	r2, r1
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	e038      	b.n	8003dd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e033      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x618>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d126      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2270      	movs	r2, #112	; 0x70
 8003d88:	401a      	ands	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d11f      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	23fe      	movs	r3, #254	; 0xfe
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	401a      	ands	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d116      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	23f8      	movs	r3, #248	; 0xf8
 8003da8:	039b      	lsls	r3, r3, #14
 8003daa:	401a      	ands	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10e      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	23e0      	movs	r3, #224	; 0xe0
 8003db8:	051b      	lsls	r3, r3, #20
 8003dba:	401a      	ands	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d106      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	0f5b      	lsrs	r3, r3, #29
 8003dc8:	075a      	lsls	r2, r3, #29
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	0018      	movs	r0, r3
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b008      	add	sp, #32
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40007000 	.word	0x40007000
 8003de8:	00001388 	.word	0x00001388
 8003dec:	efffffff 	.word	0xefffffff
 8003df0:	feffffff 	.word	0xfeffffff
 8003df4:	11c1808c 	.word	0x11c1808c
 8003df8:	eefefffc 	.word	0xeefefffc

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0e9      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b76      	ldr	r3, [pc, #472]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2207      	movs	r2, #7
 8003e16:	4013      	ands	r3, r2
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d91e      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b73      	ldr	r3, [pc, #460]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2207      	movs	r2, #7
 8003e24:	4393      	bics	r3, r2
 8003e26:	0019      	movs	r1, r3
 8003e28:	4b70      	ldr	r3, [pc, #448]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e30:	f7ff f9c6 	bl	80031c0 <HAL_GetTick>
 8003e34:	0003      	movs	r3, r0
 8003e36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e38:	e009      	b.n	8003e4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3a:	f7ff f9c1 	bl	80031c0 <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	4a6a      	ldr	r2, [pc, #424]	; (8003ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e0ca      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2207      	movs	r2, #7
 8003e54:	4013      	ands	r3, r2
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d1ee      	bne.n	8003e3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2202      	movs	r2, #2
 8003e62:	4013      	ands	r3, r2
 8003e64:	d015      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d006      	beq.n	8003e7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003e70:	4b60      	ldr	r3, [pc, #384]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b5f      	ldr	r3, [pc, #380]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003e76:	21e0      	movs	r1, #224	; 0xe0
 8003e78:	01c9      	lsls	r1, r1, #7
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e7e:	4b5d      	ldr	r3, [pc, #372]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	4a5d      	ldr	r2, [pc, #372]	; (8003ff8 <HAL_RCC_ClockConfig+0x1fc>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	0019      	movs	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d057      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	029b      	lsls	r3, r3, #10
 8003eac:	4013      	ands	r3, r2
 8003eae:	d12b      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e097      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d107      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebc:	4b4d      	ldr	r3, [pc, #308]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	049b      	lsls	r3, r3, #18
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d11f      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e08b      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed4:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4013      	ands	r3, r2
 8003ede:	d113      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e07f      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eec:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e074      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efa:	4b3e      	ldr	r3, [pc, #248]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	2202      	movs	r2, #2
 8003f00:	4013      	ands	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e06d      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f08:	4b3a      	ldr	r3, [pc, #232]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2207      	movs	r2, #7
 8003f0e:	4393      	bics	r3, r2
 8003f10:	0019      	movs	r1, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7ff f950 	bl	80031c0 <HAL_GetTick>
 8003f20:	0003      	movs	r3, r0
 8003f22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f24:	e009      	b.n	8003f3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f26:	f7ff f94b 	bl	80031c0 <HAL_GetTick>
 8003f2a:	0002      	movs	r2, r0
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e054      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2238      	movs	r2, #56	; 0x38
 8003f40:	401a      	ands	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1ec      	bne.n	8003f26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2207      	movs	r2, #7
 8003f52:	4013      	ands	r3, r2
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d21e      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2207      	movs	r2, #7
 8003f60:	4393      	bics	r3, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	4b21      	ldr	r3, [pc, #132]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f6c:	f7ff f928 	bl	80031c0 <HAL_GetTick>
 8003f70:	0003      	movs	r3, r0
 8003f72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f74:	e009      	b.n	8003f8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f76:	f7ff f923 	bl	80031c0 <HAL_GetTick>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e02c      	b.n	8003fe4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f8a:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_RCC_ClockConfig+0x1f0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2207      	movs	r2, #7
 8003f90:	4013      	ands	r3, r2
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1ee      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	; (8003ffc <HAL_RCC_ClockConfig+0x200>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003fb6:	f000 f829 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003fba:	0001      	movs	r1, r0
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_RCC_ClockConfig+0x204>)
 8003fc8:	0092      	lsls	r2, r2, #2
 8003fca:	58d3      	ldr	r3, [r2, r3]
 8003fcc:	221f      	movs	r2, #31
 8003fce:	4013      	ands	r3, r2
 8003fd0:	000a      	movs	r2, r1
 8003fd2:	40da      	lsrs	r2, r3
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_ClockConfig+0x208>)
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_RCC_ClockConfig+0x20c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff f893 	bl	8003108 <HAL_InitTick>
 8003fe2:	0003      	movs	r3, r0
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b004      	add	sp, #16
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	00001388 	.word	0x00001388
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	fffff0ff 	.word	0xfffff0ff
 8003ffc:	ffff8fff 	.word	0xffff8fff
 8004000:	0800a210 	.word	0x0800a210
 8004004:	20000004 	.word	0x20000004
 8004008:	20000008 	.word	0x20000008

0800400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004012:	4b3c      	ldr	r3, [pc, #240]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2238      	movs	r2, #56	; 0x38
 8004018:	4013      	ands	r3, r2
 800401a:	d10f      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800401c:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	0adb      	lsrs	r3, r3, #11
 8004022:	2207      	movs	r2, #7
 8004024:	4013      	ands	r3, r2
 8004026:	2201      	movs	r2, #1
 8004028:	409a      	lsls	r2, r3
 800402a:	0013      	movs	r3, r2
 800402c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800402e:	6839      	ldr	r1, [r7, #0]
 8004030:	4835      	ldr	r0, [pc, #212]	; (8004108 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004032:	f7fc f883 	bl	800013c <__udivsi3>
 8004036:	0003      	movs	r3, r0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e05d      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800403c:	4b31      	ldr	r3, [pc, #196]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	2238      	movs	r2, #56	; 0x38
 8004042:	4013      	ands	r3, r2
 8004044:	2b08      	cmp	r3, #8
 8004046:	d102      	bne.n	800404e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004048:	4b30      	ldr	r3, [pc, #192]	; (800410c <HAL_RCC_GetSysClockFreq+0x100>)
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	e054      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404e:	4b2d      	ldr	r3, [pc, #180]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2238      	movs	r2, #56	; 0x38
 8004054:	4013      	ands	r3, r2
 8004056:	2b10      	cmp	r3, #16
 8004058:	d138      	bne.n	80040cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	2203      	movs	r2, #3
 8004060:	4013      	ands	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004064:	4b27      	ldr	r3, [pc, #156]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	2207      	movs	r2, #7
 800406c:	4013      	ands	r3, r2
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d10d      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4824      	ldr	r0, [pc, #144]	; (800410c <HAL_RCC_GetSysClockFreq+0x100>)
 800407c:	f7fc f85e 	bl	800013c <__udivsi3>
 8004080:	0003      	movs	r3, r0
 8004082:	0019      	movs	r1, r3
 8004084:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	227f      	movs	r2, #127	; 0x7f
 800408c:	4013      	ands	r3, r2
 800408e:	434b      	muls	r3, r1
 8004090:	617b      	str	r3, [r7, #20]
        break;
 8004092:	e00d      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	481c      	ldr	r0, [pc, #112]	; (8004108 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004098:	f7fc f850 	bl	800013c <__udivsi3>
 800409c:	0003      	movs	r3, r0
 800409e:	0019      	movs	r1, r3
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	227f      	movs	r2, #127	; 0x7f
 80040a8:	4013      	ands	r3, r2
 80040aa:	434b      	muls	r3, r1
 80040ac:	617b      	str	r3, [r7, #20]
        break;
 80040ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80040b0:	4b14      	ldr	r3, [pc, #80]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	0f5b      	lsrs	r3, r3, #29
 80040b6:	2207      	movs	r2, #7
 80040b8:	4013      	ands	r3, r2
 80040ba:	3301      	adds	r3, #1
 80040bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f7fc f83b 	bl	800013c <__udivsi3>
 80040c6:	0003      	movs	r3, r0
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e015      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2238      	movs	r2, #56	; 0x38
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d103      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e00b      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2238      	movs	r2, #56	; 0x38
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b18      	cmp	r3, #24
 80040ea:	d103      	bne.n	80040f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80040ec:	23fa      	movs	r3, #250	; 0xfa
 80040ee:	01db      	lsls	r3, r3, #7
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e001      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040f8:	693b      	ldr	r3, [r7, #16]
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b006      	add	sp, #24
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	40021000 	.word	0x40021000
 8004108:	00f42400 	.word	0x00f42400
 800410c:	007a1200 	.word	0x007a1200

08004110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b02      	ldr	r3, [pc, #8]	; (8004120 <HAL_RCC_GetHCLKFreq+0x10>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	20000004 	.word	0x20000004

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b5b0      	push	{r4, r5, r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004128:	f7ff fff2 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 800412c:	0004      	movs	r4, r0
 800412e:	f7ff fb3f 	bl	80037b0 <LL_RCC_GetAPB1Prescaler>
 8004132:	0003      	movs	r3, r0
 8004134:	0b1a      	lsrs	r2, r3, #12
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004138:	0092      	lsls	r2, r2, #2
 800413a:	58d3      	ldr	r3, [r2, r3]
 800413c:	221f      	movs	r2, #31
 800413e:	4013      	ands	r3, r2
 8004140:	40dc      	lsrs	r4, r3
 8004142:	0023      	movs	r3, r4
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	bdb0      	pop	{r4, r5, r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	0800a250 	.word	0x0800a250

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004158:	2313      	movs	r3, #19
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004160:	2312      	movs	r3, #18
 8004162:	18fb      	adds	r3, r7, r3
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	029b      	lsls	r3, r3, #10
 8004170:	4013      	ands	r3, r2
 8004172:	d100      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004174:	e0a3      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004176:	2011      	movs	r0, #17
 8004178:	183b      	adds	r3, r7, r0
 800417a:	2200      	movs	r2, #0
 800417c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4ba5      	ldr	r3, [pc, #660]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	055b      	lsls	r3, r3, #21
 8004186:	4013      	ands	r3, r2
 8004188:	d110      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4ba2      	ldr	r3, [pc, #648]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800418c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800418e:	4ba1      	ldr	r3, [pc, #644]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0549      	lsls	r1, r1, #21
 8004194:	430a      	orrs	r2, r1
 8004196:	63da      	str	r2, [r3, #60]	; 0x3c
 8004198:	4b9e      	ldr	r3, [pc, #632]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800419a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	055b      	lsls	r3, r3, #21
 80041a0:	4013      	ands	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a6:	183b      	adds	r3, r7, r0
 80041a8:	2201      	movs	r2, #1
 80041aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ac:	4b9a      	ldr	r3, [pc, #616]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4b99      	ldr	r3, [pc, #612]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	0049      	lsls	r1, r1, #1
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041ba:	f7ff f801 	bl	80031c0 <HAL_GetTick>
 80041be:	0003      	movs	r3, r0
 80041c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041c2:	e00b      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c4:	f7fe fffc 	bl	80031c0 <HAL_GetTick>
 80041c8:	0002      	movs	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d904      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80041d2:	2313      	movs	r3, #19
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	2203      	movs	r2, #3
 80041d8:	701a      	strb	r2, [r3, #0]
        break;
 80041da:	e005      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80041dc:	4b8e      	ldr	r3, [pc, #568]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	d0ed      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80041e8:	2313      	movs	r3, #19
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d154      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80041f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80041f6:	23c0      	movs	r3, #192	; 0xc0
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4013      	ands	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d019      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	429a      	cmp	r2, r3
 800420c:	d014      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800420e:	4b81      	ldr	r3, [pc, #516]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	4a82      	ldr	r2, [pc, #520]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004214:	4013      	ands	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004218:	4b7e      	ldr	r3, [pc, #504]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800421a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800421c:	4b7d      	ldr	r3, [pc, #500]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	0249      	lsls	r1, r1, #9
 8004222:	430a      	orrs	r2, r1
 8004224:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004226:	4b7b      	ldr	r3, [pc, #492]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800422a:	4b7a      	ldr	r3, [pc, #488]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800422c:	497c      	ldr	r1, [pc, #496]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800422e:	400a      	ands	r2, r1
 8004230:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004232:	4b78      	ldr	r3, [pc, #480]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
 800423e:	d016      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe ffbe 	bl	80031c0 <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004248:	e00c      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fe ffb9 	bl	80031c0 <HAL_GetTick>
 800424e:	0002      	movs	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	4a73      	ldr	r2, [pc, #460]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d904      	bls.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800425a:	2313      	movs	r3, #19
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	2203      	movs	r2, #3
 8004260:	701a      	strb	r2, [r3, #0]
            break;
 8004262:	e004      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004264:	4b6b      	ldr	r3, [pc, #428]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	2202      	movs	r2, #2
 800426a:	4013      	ands	r3, r2
 800426c:	d0ed      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800426e:	2313      	movs	r3, #19
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004278:	4b66      	ldr	r3, [pc, #408]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800427a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427c:	4a67      	ldr	r2, [pc, #412]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800427e:	4013      	ands	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004286:	4b63      	ldr	r3, [pc, #396]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004288:	430a      	orrs	r2, r1
 800428a:	65da      	str	r2, [r3, #92]	; 0x5c
 800428c:	e00c      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428e:	2312      	movs	r3, #18
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	2213      	movs	r2, #19
 8004294:	18ba      	adds	r2, r7, r2
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e005      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	2312      	movs	r3, #18
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	2213      	movs	r2, #19
 80042a2:	18ba      	adds	r2, r7, r2
 80042a4:	7812      	ldrb	r2, [r2, #0]
 80042a6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042a8:	2311      	movs	r3, #17
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d105      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b6:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042b8:	495b      	ldr	r1, [pc, #364]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042ba:	400a      	ands	r2, r1
 80042bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2201      	movs	r2, #1
 80042c4:	4013      	ands	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c8:	4b52      	ldr	r3, [pc, #328]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042cc:	2203      	movs	r2, #3
 80042ce:	4393      	bics	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042d8:	430a      	orrs	r2, r1
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2210      	movs	r2, #16
 80042e2:	4013      	ands	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042e6:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	4a50      	ldr	r2, [pc, #320]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80042ec:	4013      	ands	r3, r2
 80042ee:	0019      	movs	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	4b47      	ldr	r3, [pc, #284]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f6:	430a      	orrs	r2, r1
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4013      	ands	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004306:	4b43      	ldr	r3, [pc, #268]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	4a49      	ldr	r2, [pc, #292]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800430c:	4013      	ands	r3, r2
 800430e:	0019      	movs	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004316:	430a      	orrs	r2, r1
 8004318:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	2380      	movs	r3, #128	; 0x80
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4013      	ands	r3, r2
 8004324:	d009      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004326:	4b3b      	ldr	r3, [pc, #236]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800432c:	4013      	ands	r3, r2
 800432e:	0019      	movs	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699a      	ldr	r2, [r3, #24]
 8004334:	4b37      	ldr	r3, [pc, #220]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004336:	430a      	orrs	r2, r1
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2220      	movs	r2, #32
 8004340:	4013      	ands	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004344:	4b33      	ldr	r3, [pc, #204]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	4a3b      	ldr	r2, [pc, #236]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800434a:	4013      	ands	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	4b30      	ldr	r3, [pc, #192]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004354:	430a      	orrs	r2, r1
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	4013      	ands	r3, r2
 8004362:	d015      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	0899      	lsrs	r1, r3, #2
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004372:	430a      	orrs	r2, r1
 8004374:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	05db      	lsls	r3, r3, #23
 800437e:	429a      	cmp	r2, r3
 8004380:	d106      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	0249      	lsls	r1, r1, #9
 800438c:	430a      	orrs	r2, r1
 800438e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	2380      	movs	r3, #128	; 0x80
 8004396:	039b      	lsls	r3, r3, #14
 8004398:	4013      	ands	r3, r2
 800439a:	d016      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800439c:	4b1d      	ldr	r3, [pc, #116]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	4a26      	ldr	r2, [pc, #152]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ac:	430a      	orrs	r2, r1
 80043ae:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1a      	ldr	r2, [r3, #32]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	03db      	lsls	r3, r3, #15
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d106      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043bc:	4b15      	ldr	r3, [pc, #84]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	430a      	orrs	r2, r1
 80043c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	4013      	ands	r3, r2
 80043d4:	d016      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80043dc:	4013      	ands	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e6:	430a      	orrs	r2, r1
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	01db      	lsls	r3, r3, #7
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d106      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	0249      	lsls	r1, r1, #9
 8004400:	430a      	orrs	r2, r1
 8004402:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004404:	2312      	movs	r3, #18
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	781b      	ldrb	r3, [r3, #0]
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b006      	add	sp, #24
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
 800441c:	fffffcff 	.word	0xfffffcff
 8004420:	fffeffff 	.word	0xfffeffff
 8004424:	00001388 	.word	0x00001388
 8004428:	efffffff 	.word	0xefffffff
 800442c:	fffff3ff 	.word	0xfffff3ff
 8004430:	fff3ffff 	.word	0xfff3ffff
 8004434:	ffcfffff 	.word	0xffcfffff
 8004438:	ffffcfff 	.word	0xffffcfff
 800443c:	ffbfffff 	.word	0xffbfffff
 8004440:	ffff3fff 	.word	0xffff3fff

08004444 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004444:	b5b0      	push	{r4, r5, r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800444c:	230f      	movs	r3, #15
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d100      	bne.n	800445c <HAL_RTC_Init+0x18>
 800445a:	e08c      	b.n	8004576 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2229      	movs	r2, #41	; 0x29
 8004460:	5c9b      	ldrb	r3, [r3, r2]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10b      	bne.n	8004480 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2228      	movs	r2, #40	; 0x28
 800446c:	2100      	movs	r1, #0
 800446e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2288      	movs	r2, #136	; 0x88
 8004474:	0212      	lsls	r2, r2, #8
 8004476:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	0018      	movs	r0, r3
 800447c:	f7fe fc98 	bl	8002db0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2229      	movs	r2, #41	; 0x29
 8004484:	2102      	movs	r1, #2
 8004486:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2210      	movs	r2, #16
 8004490:	4013      	ands	r3, r2
 8004492:	2b10      	cmp	r3, #16
 8004494:	d062      	beq.n	800455c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	22ca      	movs	r2, #202	; 0xca
 800449c:	625a      	str	r2, [r3, #36]	; 0x24
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2253      	movs	r2, #83	; 0x53
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80044a6:	250f      	movs	r5, #15
 80044a8:	197c      	adds	r4, r7, r5
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 fb9c 	bl	8004bea <RTC_EnterInitMode>
 80044b2:	0003      	movs	r3, r0
 80044b4:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80044b6:	0028      	movs	r0, r5
 80044b8:	183b      	adds	r3, r7, r0
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d12c      	bne.n	800451a <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	492e      	ldr	r1, [pc, #184]	; (8004584 <HAL_RTC_Init+0x140>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6999      	ldr	r1, [r3, #24]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689a      	ldr	r2, [r3, #8]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6912      	ldr	r2, [r2, #16]
 80044f6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6919      	ldr	r1, [r3, #16]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	041a      	lsls	r2, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800450c:	183c      	adds	r4, r7, r0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fbad 	bl	8004c70 <RTC_ExitInitMode>
 8004516:	0003      	movs	r3, r0
 8004518:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800451a:	230f      	movs	r3, #15
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d116      	bne.n	8004552 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	00d2      	lsls	r2, r2, #3
 8004530:	08d2      	lsrs	r2, r2, #3
 8004532:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	22ff      	movs	r2, #255	; 0xff
 8004558:	625a      	str	r2, [r3, #36]	; 0x24
 800455a:	e003      	b.n	8004564 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800455c:	230f      	movs	r3, #15
 800455e:	18fb      	adds	r3, r7, r3
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004564:	230f      	movs	r3, #15
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d103      	bne.n	8004576 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2229      	movs	r2, #41	; 0x29
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004576:	230f      	movs	r3, #15
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	781b      	ldrb	r3, [r3, #0]
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b004      	add	sp, #16
 8004582:	bdb0      	pop	{r4, r5, r7, pc}
 8004584:	fb8fffbf 	.word	0xfb8fffbf

08004588 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004588:	b5b0      	push	{r4, r5, r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2228      	movs	r2, #40	; 0x28
 8004598:	5c9b      	ldrb	r3, [r3, r2]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_RTC_SetTime+0x1a>
 800459e:	2302      	movs	r3, #2
 80045a0:	e092      	b.n	80046c8 <HAL_RTC_SetTime+0x140>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2228      	movs	r2, #40	; 0x28
 80045a6:	2101      	movs	r1, #1
 80045a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2229      	movs	r2, #41	; 0x29
 80045ae:	2102      	movs	r1, #2
 80045b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	22ca      	movs	r2, #202	; 0xca
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2253      	movs	r2, #83	; 0x53
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80045c2:	2513      	movs	r5, #19
 80045c4:	197c      	adds	r4, r7, r5
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f000 fb0e 	bl	8004bea <RTC_EnterInitMode>
 80045ce:	0003      	movs	r3, r0
 80045d0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80045d2:	197b      	adds	r3, r7, r5
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d162      	bne.n	80046a0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d125      	bne.n	800462c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	2240      	movs	r2, #64	; 0x40
 80045e8:	4013      	ands	r3, r2
 80045ea:	d102      	bne.n	80045f2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2200      	movs	r2, #0
 80045f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	0018      	movs	r0, r3
 80045f8:	f000 fb7e 	bl	8004cf8 <RTC_ByteToBcd2>
 80045fc:	0003      	movs	r3, r0
 80045fe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	0018      	movs	r0, r3
 8004606:	f000 fb77 	bl	8004cf8 <RTC_ByteToBcd2>
 800460a:	0003      	movs	r3, r0
 800460c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800460e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	789b      	ldrb	r3, [r3, #2]
 8004614:	0018      	movs	r0, r3
 8004616:	f000 fb6f 	bl	8004cf8 <RTC_ByteToBcd2>
 800461a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800461c:	0022      	movs	r2, r4
 800461e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	78db      	ldrb	r3, [r3, #3]
 8004624:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e017      	b.n	800465c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2240      	movs	r2, #64	; 0x40
 8004634:	4013      	ands	r3, r2
 8004636:	d102      	bne.n	800463e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2200      	movs	r2, #0
 800463c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800464a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004650:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	78db      	ldrb	r3, [r3, #3]
 8004656:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	491b      	ldr	r1, [pc, #108]	; (80046d0 <HAL_RTC_SetTime+0x148>)
 8004664:	400a      	ands	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699a      	ldr	r2, [r3, #24]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4918      	ldr	r1, [pc, #96]	; (80046d4 <HAL_RTC_SetTime+0x14c>)
 8004674:	400a      	ands	r2, r1
 8004676:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	431a      	orrs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004690:	2313      	movs	r3, #19
 8004692:	18fc      	adds	r4, r7, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	0018      	movs	r0, r3
 8004698:	f000 faea 	bl	8004c70 <RTC_ExitInitMode>
 800469c:	0003      	movs	r3, r0
 800469e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80046a8:	2313      	movs	r3, #19
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2229      	movs	r2, #41	; 0x29
 80046b6:	2101      	movs	r1, #1
 80046b8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2228      	movs	r2, #40	; 0x28
 80046be:	2100      	movs	r1, #0
 80046c0:	5499      	strb	r1, [r3, r2]

  return status;
 80046c2:	2313      	movs	r3, #19
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	781b      	ldrb	r3, [r3, #0]
}
 80046c8:	0018      	movs	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	b006      	add	sp, #24
 80046ce:	bdb0      	pop	{r4, r5, r7, pc}
 80046d0:	007f7f7f 	.word	0x007f7f7f
 80046d4:	fffbffff 	.word	0xfffbffff

080046d8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	045b      	lsls	r3, r3, #17
 80046f6:	0c5a      	lsrs	r2, r3, #17
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a22      	ldr	r2, [pc, #136]	; (800478c <HAL_RTC_GetTime+0xb4>)
 8004704:	4013      	ands	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	0c1b      	lsrs	r3, r3, #16
 800470c:	b2db      	uxtb	r3, r3
 800470e:	223f      	movs	r2, #63	; 0x3f
 8004710:	4013      	ands	r3, r2
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	b2db      	uxtb	r3, r3
 800471e:	227f      	movs	r2, #127	; 0x7f
 8004720:	4013      	ands	r3, r2
 8004722:	b2da      	uxtb	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	227f      	movs	r2, #127	; 0x7f
 800472e:	4013      	ands	r3, r2
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	0d9b      	lsrs	r3, r3, #22
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2201      	movs	r2, #1
 800473e:	4013      	ands	r3, r2
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d11a      	bne.n	8004782 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 faf9 	bl	8004d48 <RTC_Bcd2ToByte>
 8004756:	0003      	movs	r3, r0
 8004758:	001a      	movs	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	785b      	ldrb	r3, [r3, #1]
 8004762:	0018      	movs	r0, r3
 8004764:	f000 faf0 	bl	8004d48 <RTC_Bcd2ToByte>
 8004768:	0003      	movs	r3, r0
 800476a:	001a      	movs	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	789b      	ldrb	r3, [r3, #2]
 8004774:	0018      	movs	r0, r3
 8004776:	f000 fae7 	bl	8004d48 <RTC_Bcd2ToByte>
 800477a:	0003      	movs	r3, r0
 800477c:	001a      	movs	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b006      	add	sp, #24
 800478a:	bd80      	pop	{r7, pc}
 800478c:	007f7f7f 	.word	0x007f7f7f

08004790 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004790:	b5b0      	push	{r4, r5, r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2228      	movs	r2, #40	; 0x28
 80047a0:	5c9b      	ldrb	r3, [r3, r2]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_RTC_SetDate+0x1a>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e07e      	b.n	80048a8 <HAL_RTC_SetDate+0x118>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2228      	movs	r2, #40	; 0x28
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2229      	movs	r2, #41	; 0x29
 80047b6:	2102      	movs	r1, #2
 80047b8:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10e      	bne.n	80047de <HAL_RTC_SetDate+0x4e>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	001a      	movs	r2, r3
 80047c6:	2310      	movs	r3, #16
 80047c8:	4013      	ands	r3, r2
 80047ca:	d008      	beq.n	80047de <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	2210      	movs	r2, #16
 80047d2:	4393      	bics	r3, r2
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	330a      	adds	r3, #10
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11c      	bne.n	800481e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	78db      	ldrb	r3, [r3, #3]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 fa85 	bl	8004cf8 <RTC_ByteToBcd2>
 80047ee:	0003      	movs	r3, r0
 80047f0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	785b      	ldrb	r3, [r3, #1]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 fa7e 	bl	8004cf8 <RTC_ByteToBcd2>
 80047fc:	0003      	movs	r3, r0
 80047fe:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004800:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	789b      	ldrb	r3, [r3, #2]
 8004806:	0018      	movs	r0, r3
 8004808:	f000 fa76 	bl	8004cf8 <RTC_ByteToBcd2>
 800480c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800480e:	0022      	movs	r2, r4
 8004810:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e00e      	b.n	800483c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	78db      	ldrb	r3, [r3, #3]
 8004822:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800482a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004830:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	22ca      	movs	r2, #202	; 0xca
 8004842:	625a      	str	r2, [r3, #36]	; 0x24
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2253      	movs	r2, #83	; 0x53
 800484a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800484c:	2513      	movs	r5, #19
 800484e:	197c      	adds	r4, r7, r5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	0018      	movs	r0, r3
 8004854:	f000 f9c9 	bl	8004bea <RTC_EnterInitMode>
 8004858:	0003      	movs	r3, r0
 800485a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800485c:	0028      	movs	r0, r5
 800485e:	183b      	adds	r3, r7, r0
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10c      	bne.n	8004880 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4910      	ldr	r1, [pc, #64]	; (80048b0 <HAL_RTC_SetDate+0x120>)
 800486e:	400a      	ands	r2, r1
 8004870:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004872:	183c      	adds	r4, r7, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	0018      	movs	r0, r3
 8004878:	f000 f9fa 	bl	8004c70 <RTC_ExitInitMode>
 800487c:	0003      	movs	r3, r0
 800487e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	22ff      	movs	r2, #255	; 0xff
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004888:	2313      	movs	r3, #19
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2229      	movs	r2, #41	; 0x29
 8004896:	2101      	movs	r1, #1
 8004898:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2228      	movs	r2, #40	; 0x28
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]

  return status;
 80048a2:	2313      	movs	r3, #19
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	781b      	ldrb	r3, [r3, #0]
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b006      	add	sp, #24
 80048ae:	bdb0      	pop	{r4, r5, r7, pc}
 80048b0:	00ffff3f 	.word	0x00ffff3f

080048b4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4a21      	ldr	r2, [pc, #132]	; (800494c <HAL_RTC_GetDate+0x98>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	0c1b      	lsrs	r3, r3, #16
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	221f      	movs	r2, #31
 80048de:	4013      	ands	r3, r2
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	223f      	movs	r2, #63	; 0x3f
 80048ec:	4013      	ands	r3, r2
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	0b5b      	lsrs	r3, r3, #13
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2207      	movs	r2, #7
 80048fc:	4013      	ands	r3, r2
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11a      	bne.n	8004940 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	78db      	ldrb	r3, [r3, #3]
 800490e:	0018      	movs	r0, r3
 8004910:	f000 fa1a 	bl	8004d48 <RTC_Bcd2ToByte>
 8004914:	0003      	movs	r3, r0
 8004916:	001a      	movs	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	785b      	ldrb	r3, [r3, #1]
 8004920:	0018      	movs	r0, r3
 8004922:	f000 fa11 	bl	8004d48 <RTC_Bcd2ToByte>
 8004926:	0003      	movs	r3, r0
 8004928:	001a      	movs	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	789b      	ldrb	r3, [r3, #2]
 8004932:	0018      	movs	r0, r3
 8004934:	f000 fa08 	bl	8004d48 <RTC_Bcd2ToByte>
 8004938:	0003      	movs	r3, r0
 800493a:	001a      	movs	r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b006      	add	sp, #24
 8004948:	bd80      	pop	{r7, pc}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	00ffff3f 	.word	0x00ffff3f

08004950 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b089      	sub	sp, #36	; 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2228      	movs	r2, #40	; 0x28
 8004960:	5c9b      	ldrb	r3, [r3, r2]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_RTC_SetAlarm+0x1a>
 8004966:	2302      	movs	r3, #2
 8004968:	e10c      	b.n	8004b84 <HAL_RTC_SetAlarm+0x234>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2228      	movs	r2, #40	; 0x28
 800496e:	2101      	movs	r1, #1
 8004970:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2229      	movs	r2, #41	; 0x29
 8004976:	2102      	movs	r1, #2
 8004978:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d136      	bne.n	80049ee <HAL_RTC_SetAlarm+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2240      	movs	r2, #64	; 0x40
 8004988:	4013      	ands	r3, r2
 800498a:	d102      	bne.n	8004992 <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	2200      	movs	r2, #0
 8004990:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	0018      	movs	r0, r3
 8004998:	f000 f9ae 	bl	8004cf8 <RTC_ByteToBcd2>
 800499c:	0003      	movs	r3, r0
 800499e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f000 f9a7 	bl	8004cf8 <RTC_ByteToBcd2>
 80049aa:	0003      	movs	r3, r0
 80049ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049ae:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	789b      	ldrb	r3, [r3, #2]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 f99f 	bl	8004cf8 <RTC_ByteToBcd2>
 80049ba:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80049bc:	0022      	movs	r2, r4
 80049be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80049c6:	431a      	orrs	r2, r3
 80049c8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2220      	movs	r2, #32
 80049ce:	5c9b      	ldrb	r3, [r3, r2]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f000 f991 	bl	8004cf8 <RTC_ByteToBcd2>
 80049d6:	0003      	movs	r3, r0
 80049d8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80049da:	0022      	movs	r2, r4
 80049dc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80049e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e022      	b.n	8004a34 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2240      	movs	r2, #64	; 0x40
 80049f6:	4013      	ands	r3, r2
 80049f8:	d102      	bne.n	8004a00 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a0c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	78db      	ldrb	r3, [r3, #3]
 8004a18:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a1a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2120      	movs	r1, #32
 8004a20:	5c5b      	ldrb	r3, [r3, r1]
 8004a22:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a24:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a2a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	22ca      	movs	r2, #202	; 0xca
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2253      	movs	r2, #83	; 0x53
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d143      	bne.n	8004ae4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4949      	ldr	r1, [pc, #292]	; (8004b8c <HAL_RTC_SetAlarm+0x23c>)
 8004a68:	400a      	ands	r2, r1
 8004a6a:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4946      	ldr	r1, [pc, #280]	; (8004b90 <HAL_RTC_SetAlarm+0x240>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004a7c:	f7fe fba0 	bl	80031c0 <HAL_GetTick>
 8004a80:	0003      	movs	r3, r0
 8004a82:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004a84:	e016      	b.n	8004ab4 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a86:	f7fe fb9b 	bl	80031c0 <HAL_GetTick>
 8004a8a:	0002      	movs	r2, r0
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	23fa      	movs	r3, #250	; 0xfa
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d90d      	bls.n	8004ab4 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	22ff      	movs	r2, #255	; 0xff
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2229      	movs	r2, #41	; 0x29
 8004aa4:	2103      	movs	r1, #3
 8004aa6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2228      	movs	r2, #40	; 0x28
 8004aac:	2100      	movs	r1, #0
 8004aae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e067      	b.n	8004b84 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	4013      	ands	r3, r2
 8004abe:	d0e2      	beq.n	8004a86 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	0049      	lsls	r1, r1, #1
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	619a      	str	r2, [r3, #24]
 8004ae2:	e042      	b.n	8004b6a <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4929      	ldr	r1, [pc, #164]	; (8004b94 <HAL_RTC_SetAlarm+0x244>)
 8004af0:	400a      	ands	r2, r1
 8004af2:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4926      	ldr	r1, [pc, #152]	; (8004b98 <HAL_RTC_SetAlarm+0x248>)
 8004b00:	400a      	ands	r2, r1
 8004b02:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8004b04:	f7fe fb5c 	bl	80031c0 <HAL_GetTick>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004b0c:	e016      	b.n	8004b3c <HAL_RTC_SetAlarm+0x1ec>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b0e:	f7fe fb57 	bl	80031c0 <HAL_GetTick>
 8004b12:	0002      	movs	r2, r0
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1ad2      	subs	r2, r2, r3
 8004b18:	23fa      	movs	r3, #250	; 0xfa
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d90d      	bls.n	8004b3c <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2229      	movs	r2, #41	; 0x29
 8004b2c:	2103      	movs	r1, #3
 8004b2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2228      	movs	r2, #40	; 0x28
 8004b34:	2100      	movs	r1, #0
 8004b36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e023      	b.n	8004b84 <HAL_RTC_SetAlarm+0x234>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2202      	movs	r2, #2
 8004b44:	4013      	ands	r3, r2
 8004b46:	d0e2      	beq.n	8004b0e <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2180      	movs	r1, #128	; 0x80
 8004b64:	0089      	lsls	r1, r1, #2
 8004b66:	430a      	orrs	r2, r1
 8004b68:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	22ff      	movs	r2, #255	; 0xff
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2229      	movs	r2, #41	; 0x29
 8004b76:	2101      	movs	r1, #1
 8004b78:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2228      	movs	r2, #40	; 0x28
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b009      	add	sp, #36	; 0x24
 8004b8a:	bd90      	pop	{r4, r7, pc}
 8004b8c:	fffffeff 	.word	0xfffffeff
 8004b90:	ffffefff 	.word	0xffffefff
 8004b94:	fffffdff 	.word	0xfffffdff
 8004b98:	ffffdfff 	.word	0xffffdfff

08004b9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	21a0      	movs	r1, #160	; 0xa0
 8004bb0:	438a      	bics	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004bb4:	f7fe fb04 	bl	80031c0 <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bbe:	f7fe faff 	bl	80031c0 <HAL_GetTick>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	23fa      	movs	r3, #250	; 0xfa
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d901      	bls.n	8004bd4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e006      	b.n	8004be2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d0ee      	beq.n	8004bbe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b004      	add	sp, #16
 8004be8:	bd80      	pop	{r7, pc}

08004bea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b084      	sub	sp, #16
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	2240      	movs	r2, #64	; 0x40
 8004c02:	4013      	ands	r3, r2
 8004c04:	d12c      	bne.n	8004c60 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	430a      	orrs	r2, r1
 8004c14:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004c16:	f7fe fad3 	bl	80031c0 <HAL_GetTick>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c1e:	e014      	b.n	8004c4a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c20:	f7fe face 	bl	80031c0 <HAL_GetTick>
 8004c24:	0002      	movs	r2, r0
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	1ad2      	subs	r2, r2, r3
 8004c2a:	200f      	movs	r0, #15
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	1839      	adds	r1, r7, r0
 8004c30:	7809      	ldrb	r1, [r1, #0]
 8004c32:	7019      	strb	r1, [r3, #0]
 8004c34:	23fa      	movs	r3, #250	; 0xfa
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d906      	bls.n	8004c4a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004c3c:	183b      	adds	r3, r7, r0
 8004c3e:	2203      	movs	r2, #3
 8004c40:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2229      	movs	r2, #41	; 0x29
 8004c46:	2103      	movs	r1, #3
 8004c48:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2240      	movs	r2, #64	; 0x40
 8004c52:	4013      	ands	r3, r2
 8004c54:	d104      	bne.n	8004c60 <RTC_EnterInitMode+0x76>
 8004c56:	230f      	movs	r3, #15
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d1df      	bne.n	8004c20 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fb      	adds	r3, r7, r3
 8004c64:	781b      	ldrb	r3, [r3, #0]
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b004      	add	sp, #16
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c78:	240f      	movs	r4, #15
 8004c7a:	193b      	adds	r3, r7, r4
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004c80:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <RTC_ExitInitMode+0x84>)
 8004c82:	68da      	ldr	r2, [r3, #12]
 8004c84:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <RTC_ExitInitMode+0x84>)
 8004c86:	2180      	movs	r1, #128	; 0x80
 8004c88:	438a      	bics	r2, r1
 8004c8a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <RTC_ExitInitMode+0x84>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	2220      	movs	r2, #32
 8004c92:	4013      	ands	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff ff7f 	bl	8004b9c <HAL_RTC_WaitForSynchro>
 8004c9e:	1e03      	subs	r3, r0, #0
 8004ca0:	d021      	beq.n	8004ce6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2229      	movs	r2, #41	; 0x29
 8004ca6:	2103      	movs	r1, #3
 8004ca8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004caa:	193b      	adds	r3, r7, r4
 8004cac:	2203      	movs	r2, #3
 8004cae:	701a      	strb	r2, [r3, #0]
 8004cb0:	e019      	b.n	8004ce6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <RTC_ExitInitMode+0x84>)
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	; (8004cf4 <RTC_ExitInitMode+0x84>)
 8004cb8:	2120      	movs	r1, #32
 8004cba:	438a      	bics	r2, r1
 8004cbc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7ff ff6b 	bl	8004b9c <HAL_RTC_WaitForSynchro>
 8004cc6:	1e03      	subs	r3, r0, #0
 8004cc8:	d007      	beq.n	8004cda <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2229      	movs	r2, #41	; 0x29
 8004cce:	2103      	movs	r1, #3
 8004cd0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004cd2:	230f      	movs	r3, #15
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <RTC_ExitInitMode+0x84>)
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <RTC_ExitInitMode+0x84>)
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004ce6:	230f      	movs	r3, #15
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	781b      	ldrb	r3, [r3, #0]
}
 8004cec:	0018      	movs	r0, r3
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b005      	add	sp, #20
 8004cf2:	bd90      	pop	{r4, r7, pc}
 8004cf4:	40002800 	.word	0x40002800

08004cf8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	0002      	movs	r2, r0
 8004d00:	1dfb      	adds	r3, r7, #7
 8004d02:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004d08:	230b      	movs	r3, #11
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	1dfa      	adds	r2, r7, #7
 8004d0e:	7812      	ldrb	r2, [r2, #0]
 8004d10:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004d12:	e008      	b.n	8004d26 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004d1a:	220b      	movs	r2, #11
 8004d1c:	18bb      	adds	r3, r7, r2
 8004d1e:	18ba      	adds	r2, r7, r2
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	3a0a      	subs	r2, #10
 8004d24:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004d26:	210b      	movs	r1, #11
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b09      	cmp	r3, #9
 8004d2e:	d8f1      	bhi.n	8004d14 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	b2db      	uxtb	r3, r3
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b004      	add	sp, #16
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	0002      	movs	r2, r0
 8004d50:	1dfb      	adds	r3, r7, #7
 8004d52:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004d54:	1dfb      	adds	r3, r7, #7
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	091b      	lsrs	r3, r3, #4
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	0013      	movs	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	1dfb      	adds	r3, r7, #7
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	210f      	movs	r1, #15
 8004d72:	400b      	ands	r3, r1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	18d3      	adds	r3, r2, r3
 8004d78:	b2db      	uxtb	r3, r3
}
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e046      	b.n	8004e24 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2288      	movs	r2, #136	; 0x88
 8004d9a:	589b      	ldr	r3, [r3, r2]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2284      	movs	r2, #132	; 0x84
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	0018      	movs	r0, r3
 8004dac:	f7fe f83e 	bl	8002e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2288      	movs	r2, #136	; 0x88
 8004db4:	2124      	movs	r1, #36	; 0x24
 8004db6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	438a      	bics	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f000 f8cc 	bl	8004f68 <UART_SetConfig>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e024      	b.n	8004e24 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 fb37 	bl	8005458 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	490d      	ldr	r1, [pc, #52]	; (8004e2c <HAL_UART_Init+0xa8>)
 8004df6:	400a      	ands	r2, r1
 8004df8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	212a      	movs	r1, #42	; 0x2a
 8004e06:	438a      	bics	r2, r1
 8004e08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2101      	movs	r1, #1
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f000 fbcf 	bl	80055c0 <UART_CheckIdleState>
 8004e22:	0003      	movs	r3, r0
}
 8004e24:	0018      	movs	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b002      	add	sp, #8
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	ffffb7ff 	.word	0xffffb7ff

08004e30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	1dbb      	adds	r3, r7, #6
 8004e3e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2288      	movs	r2, #136	; 0x88
 8004e44:	589b      	ldr	r3, [r3, r2]
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d000      	beq.n	8004e4c <HAL_UART_Transmit+0x1c>
 8004e4a:	e088      	b.n	8004f5e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_UART_Transmit+0x2a>
 8004e52:	1dbb      	adds	r3, r7, #6
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e080      	b.n	8004f60 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	2380      	movs	r3, #128	; 0x80
 8004e64:	015b      	lsls	r3, r3, #5
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d109      	bne.n	8004e7e <HAL_UART_Transmit+0x4e>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d105      	bne.n	8004e7e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2201      	movs	r2, #1
 8004e76:	4013      	ands	r3, r2
 8004e78:	d001      	beq.n	8004e7e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e070      	b.n	8004f60 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2290      	movs	r2, #144	; 0x90
 8004e82:	2100      	movs	r1, #0
 8004e84:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2288      	movs	r2, #136	; 0x88
 8004e8a:	2121      	movs	r1, #33	; 0x21
 8004e8c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8e:	f7fe f997 	bl	80031c0 <HAL_GetTick>
 8004e92:	0003      	movs	r3, r0
 8004e94:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1dba      	adds	r2, r7, #6
 8004e9a:	2154      	movs	r1, #84	; 0x54
 8004e9c:	8812      	ldrh	r2, [r2, #0]
 8004e9e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	1dba      	adds	r2, r7, #6
 8004ea4:	2156      	movs	r1, #86	; 0x56
 8004ea6:	8812      	ldrh	r2, [r2, #0]
 8004ea8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	2380      	movs	r3, #128	; 0x80
 8004eb0:	015b      	lsls	r3, r3, #5
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d108      	bne.n	8004ec8 <HAL_UART_Transmit+0x98>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d104      	bne.n	8004ec8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	e003      	b.n	8004ed0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ed0:	e02c      	b.n	8004f2c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	0013      	movs	r3, r2
 8004edc:	2200      	movs	r2, #0
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	f000 fbbc 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8004ee4:	1e03      	subs	r3, r0, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e039      	b.n	8004f60 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10b      	bne.n	8004f0a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	05d2      	lsls	r2, r2, #23
 8004efe:	0dd2      	lsrs	r2, r2, #23
 8004f00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	3302      	adds	r3, #2
 8004f06:	61bb      	str	r3, [r7, #24]
 8004f08:	e007      	b.n	8004f1a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	781a      	ldrb	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	3301      	adds	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2256      	movs	r2, #86	; 0x56
 8004f1e:	5a9b      	ldrh	r3, [r3, r2]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	b299      	uxth	r1, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2256      	movs	r2, #86	; 0x56
 8004f2a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2256      	movs	r2, #86	; 0x56
 8004f30:	5a9b      	ldrh	r3, [r3, r2]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1cc      	bne.n	8004ed2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	0013      	movs	r3, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	2140      	movs	r1, #64	; 0x40
 8004f46:	f000 fb89 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8004f4a:	1e03      	subs	r3, r0, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e006      	b.n	8004f60 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2288      	movs	r2, #136	; 0x88
 8004f56:	2120      	movs	r1, #32
 8004f58:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e000      	b.n	8004f60 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
  }
}
 8004f60:	0018      	movs	r0, r3
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b008      	add	sp, #32
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f68:	b5b0      	push	{r4, r5, r7, lr}
 8004f6a:	b090      	sub	sp, #64	; 0x40
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f70:	231a      	movs	r3, #26
 8004f72:	2220      	movs	r2, #32
 8004f74:	189b      	adds	r3, r3, r2
 8004f76:	19db      	adds	r3, r3, r7
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	689a      	ldr	r2, [r3, #8]
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	431a      	orrs	r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4ac4      	ldr	r2, [pc, #784]	; (80052ac <UART_SetConfig+0x344>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4abf      	ldr	r2, [pc, #764]	; (80052b0 <UART_SetConfig+0x348>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb8:	68d9      	ldr	r1, [r3, #12]
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4ab9      	ldr	r2, [pc, #740]	; (80052b4 <UART_SetConfig+0x34c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4ab4      	ldr	r2, [pc, #720]	; (80052b8 <UART_SetConfig+0x350>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff0:	430b      	orrs	r3, r1
 8004ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	220f      	movs	r2, #15
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	0018      	movs	r0, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	0003      	movs	r3, r0
 800500a:	430b      	orrs	r3, r1
 800500c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4aaa      	ldr	r2, [pc, #680]	; (80052bc <UART_SetConfig+0x354>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d131      	bne.n	800507c <UART_SetConfig+0x114>
 8005018:	4ba9      	ldr	r3, [pc, #676]	; (80052c0 <UART_SetConfig+0x358>)
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	2203      	movs	r2, #3
 800501e:	4013      	ands	r3, r2
 8005020:	2b03      	cmp	r3, #3
 8005022:	d01d      	beq.n	8005060 <UART_SetConfig+0xf8>
 8005024:	d823      	bhi.n	800506e <UART_SetConfig+0x106>
 8005026:	2b02      	cmp	r3, #2
 8005028:	d00c      	beq.n	8005044 <UART_SetConfig+0xdc>
 800502a:	d820      	bhi.n	800506e <UART_SetConfig+0x106>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <UART_SetConfig+0xce>
 8005030:	2b01      	cmp	r3, #1
 8005032:	d00e      	beq.n	8005052 <UART_SetConfig+0xea>
 8005034:	e01b      	b.n	800506e <UART_SetConfig+0x106>
 8005036:	231b      	movs	r3, #27
 8005038:	2220      	movs	r2, #32
 800503a:	189b      	adds	r3, r3, r2
 800503c:	19db      	adds	r3, r3, r7
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e071      	b.n	8005128 <UART_SetConfig+0x1c0>
 8005044:	231b      	movs	r3, #27
 8005046:	2220      	movs	r2, #32
 8005048:	189b      	adds	r3, r3, r2
 800504a:	19db      	adds	r3, r3, r7
 800504c:	2202      	movs	r2, #2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	e06a      	b.n	8005128 <UART_SetConfig+0x1c0>
 8005052:	231b      	movs	r3, #27
 8005054:	2220      	movs	r2, #32
 8005056:	189b      	adds	r3, r3, r2
 8005058:	19db      	adds	r3, r3, r7
 800505a:	2204      	movs	r2, #4
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e063      	b.n	8005128 <UART_SetConfig+0x1c0>
 8005060:	231b      	movs	r3, #27
 8005062:	2220      	movs	r2, #32
 8005064:	189b      	adds	r3, r3, r2
 8005066:	19db      	adds	r3, r3, r7
 8005068:	2208      	movs	r2, #8
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	e05c      	b.n	8005128 <UART_SetConfig+0x1c0>
 800506e:	231b      	movs	r3, #27
 8005070:	2220      	movs	r2, #32
 8005072:	189b      	adds	r3, r3, r2
 8005074:	19db      	adds	r3, r3, r7
 8005076:	2210      	movs	r2, #16
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	e055      	b.n	8005128 <UART_SetConfig+0x1c0>
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a90      	ldr	r2, [pc, #576]	; (80052c4 <UART_SetConfig+0x35c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d106      	bne.n	8005094 <UART_SetConfig+0x12c>
 8005086:	231b      	movs	r3, #27
 8005088:	2220      	movs	r2, #32
 800508a:	189b      	adds	r3, r3, r2
 800508c:	19db      	adds	r3, r3, r7
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e049      	b.n	8005128 <UART_SetConfig+0x1c0>
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a86      	ldr	r2, [pc, #536]	; (80052b4 <UART_SetConfig+0x34c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d13e      	bne.n	800511c <UART_SetConfig+0x1b4>
 800509e:	4b88      	ldr	r3, [pc, #544]	; (80052c0 <UART_SetConfig+0x358>)
 80050a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050a2:	23c0      	movs	r3, #192	; 0xc0
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	4013      	ands	r3, r2
 80050a8:	22c0      	movs	r2, #192	; 0xc0
 80050aa:	0112      	lsls	r2, r2, #4
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d027      	beq.n	8005100 <UART_SetConfig+0x198>
 80050b0:	22c0      	movs	r2, #192	; 0xc0
 80050b2:	0112      	lsls	r2, r2, #4
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d82a      	bhi.n	800510e <UART_SetConfig+0x1a6>
 80050b8:	2280      	movs	r2, #128	; 0x80
 80050ba:	0112      	lsls	r2, r2, #4
 80050bc:	4293      	cmp	r3, r2
 80050be:	d011      	beq.n	80050e4 <UART_SetConfig+0x17c>
 80050c0:	2280      	movs	r2, #128	; 0x80
 80050c2:	0112      	lsls	r2, r2, #4
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d822      	bhi.n	800510e <UART_SetConfig+0x1a6>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <UART_SetConfig+0x16e>
 80050cc:	2280      	movs	r2, #128	; 0x80
 80050ce:	00d2      	lsls	r2, r2, #3
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <UART_SetConfig+0x18a>
 80050d4:	e01b      	b.n	800510e <UART_SetConfig+0x1a6>
 80050d6:	231b      	movs	r3, #27
 80050d8:	2220      	movs	r2, #32
 80050da:	189b      	adds	r3, r3, r2
 80050dc:	19db      	adds	r3, r3, r7
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
 80050e2:	e021      	b.n	8005128 <UART_SetConfig+0x1c0>
 80050e4:	231b      	movs	r3, #27
 80050e6:	2220      	movs	r2, #32
 80050e8:	189b      	adds	r3, r3, r2
 80050ea:	19db      	adds	r3, r3, r7
 80050ec:	2202      	movs	r2, #2
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e01a      	b.n	8005128 <UART_SetConfig+0x1c0>
 80050f2:	231b      	movs	r3, #27
 80050f4:	2220      	movs	r2, #32
 80050f6:	189b      	adds	r3, r3, r2
 80050f8:	19db      	adds	r3, r3, r7
 80050fa:	2204      	movs	r2, #4
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e013      	b.n	8005128 <UART_SetConfig+0x1c0>
 8005100:	231b      	movs	r3, #27
 8005102:	2220      	movs	r2, #32
 8005104:	189b      	adds	r3, r3, r2
 8005106:	19db      	adds	r3, r3, r7
 8005108:	2208      	movs	r2, #8
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e00c      	b.n	8005128 <UART_SetConfig+0x1c0>
 800510e:	231b      	movs	r3, #27
 8005110:	2220      	movs	r2, #32
 8005112:	189b      	adds	r3, r3, r2
 8005114:	19db      	adds	r3, r3, r7
 8005116:	2210      	movs	r2, #16
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	e005      	b.n	8005128 <UART_SetConfig+0x1c0>
 800511c:	231b      	movs	r3, #27
 800511e:	2220      	movs	r2, #32
 8005120:	189b      	adds	r3, r3, r2
 8005122:	19db      	adds	r3, r3, r7
 8005124:	2210      	movs	r2, #16
 8005126:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a61      	ldr	r2, [pc, #388]	; (80052b4 <UART_SetConfig+0x34c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d000      	beq.n	8005134 <UART_SetConfig+0x1cc>
 8005132:	e092      	b.n	800525a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005134:	231b      	movs	r3, #27
 8005136:	2220      	movs	r2, #32
 8005138:	189b      	adds	r3, r3, r2
 800513a:	19db      	adds	r3, r3, r7
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b08      	cmp	r3, #8
 8005140:	d015      	beq.n	800516e <UART_SetConfig+0x206>
 8005142:	dc18      	bgt.n	8005176 <UART_SetConfig+0x20e>
 8005144:	2b04      	cmp	r3, #4
 8005146:	d00d      	beq.n	8005164 <UART_SetConfig+0x1fc>
 8005148:	dc15      	bgt.n	8005176 <UART_SetConfig+0x20e>
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <UART_SetConfig+0x1ec>
 800514e:	2b02      	cmp	r3, #2
 8005150:	d005      	beq.n	800515e <UART_SetConfig+0x1f6>
 8005152:	e010      	b.n	8005176 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7fe ffe6 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005158:	0003      	movs	r3, r0
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800515c:	e014      	b.n	8005188 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800515e:	4b5a      	ldr	r3, [pc, #360]	; (80052c8 <UART_SetConfig+0x360>)
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005162:	e011      	b.n	8005188 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005164:	f7fe ff52 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8005168:	0003      	movs	r3, r0
 800516a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800516c:	e00c      	b.n	8005188 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005174:	e008      	b.n	8005188 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800517a:	231a      	movs	r3, #26
 800517c:	2220      	movs	r2, #32
 800517e:	189b      	adds	r3, r3, r2
 8005180:	19db      	adds	r3, r3, r7
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
        break;
 8005186:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800518a:	2b00      	cmp	r3, #0
 800518c:	d100      	bne.n	8005190 <UART_SetConfig+0x228>
 800518e:	e147      	b.n	8005420 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005194:	4b4d      	ldr	r3, [pc, #308]	; (80052cc <UART_SetConfig+0x364>)
 8005196:	0052      	lsls	r2, r2, #1
 8005198:	5ad3      	ldrh	r3, [r2, r3]
 800519a:	0019      	movs	r1, r3
 800519c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800519e:	f7fa ffcd 	bl	800013c <__udivsi3>
 80051a2:	0003      	movs	r3, r0
 80051a4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	0013      	movs	r3, r2
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	189b      	adds	r3, r3, r2
 80051b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d305      	bcc.n	80051c2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051be:	429a      	cmp	r2, r3
 80051c0:	d906      	bls.n	80051d0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 80051c2:	231a      	movs	r3, #26
 80051c4:	2220      	movs	r2, #32
 80051c6:	189b      	adds	r3, r3, r2
 80051c8:	19db      	adds	r3, r3, r7
 80051ca:	2201      	movs	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e127      	b.n	8005420 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051dc:	4b3b      	ldr	r3, [pc, #236]	; (80052cc <UART_SetConfig+0x364>)
 80051de:	0052      	lsls	r2, r2, #1
 80051e0:	5ad3      	ldrh	r3, [r2, r3]
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	69b8      	ldr	r0, [r7, #24]
 80051ee:	69f9      	ldr	r1, [r7, #28]
 80051f0:	f7fb f958 	bl	80004a4 <__aeabi_uldivmod>
 80051f4:	0002      	movs	r2, r0
 80051f6:	000b      	movs	r3, r1
 80051f8:	0e11      	lsrs	r1, r2, #24
 80051fa:	021d      	lsls	r5, r3, #8
 80051fc:	430d      	orrs	r5, r1
 80051fe:	0214      	lsls	r4, r2, #8
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	68f9      	ldr	r1, [r7, #12]
 8005210:	1900      	adds	r0, r0, r4
 8005212:	4169      	adcs	r1, r5
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	2300      	movs	r3, #0
 800521c:	607b      	str	r3, [r7, #4]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f7fb f93f 	bl	80004a4 <__aeabi_uldivmod>
 8005226:	0002      	movs	r2, r0
 8005228:	000b      	movs	r3, r1
 800522a:	0013      	movs	r3, r2
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800522e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005230:	23c0      	movs	r3, #192	; 0xc0
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	429a      	cmp	r2, r3
 8005236:	d309      	bcc.n	800524c <UART_SetConfig+0x2e4>
 8005238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	035b      	lsls	r3, r3, #13
 800523e:	429a      	cmp	r2, r3
 8005240:	d204      	bcs.n	800524c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	e0e9      	b.n	8005420 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800524c:	231a      	movs	r3, #26
 800524e:	2220      	movs	r2, #32
 8005250:	189b      	adds	r3, r3, r2
 8005252:	19db      	adds	r3, r3, r7
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e0e2      	b.n	8005420 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	429a      	cmp	r2, r3
 8005264:	d000      	beq.n	8005268 <UART_SetConfig+0x300>
 8005266:	e083      	b.n	8005370 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005268:	231b      	movs	r3, #27
 800526a:	2220      	movs	r2, #32
 800526c:	189b      	adds	r3, r3, r2
 800526e:	19db      	adds	r3, r3, r7
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b08      	cmp	r3, #8
 8005274:	d015      	beq.n	80052a2 <UART_SetConfig+0x33a>
 8005276:	dc2b      	bgt.n	80052d0 <UART_SetConfig+0x368>
 8005278:	2b04      	cmp	r3, #4
 800527a:	d00d      	beq.n	8005298 <UART_SetConfig+0x330>
 800527c:	dc28      	bgt.n	80052d0 <UART_SetConfig+0x368>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <UART_SetConfig+0x320>
 8005282:	2b02      	cmp	r3, #2
 8005284:	d005      	beq.n	8005292 <UART_SetConfig+0x32a>
 8005286:	e023      	b.n	80052d0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005288:	f7fe ff4c 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 800528c:	0003      	movs	r3, r0
 800528e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005290:	e027      	b.n	80052e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005292:	4b0d      	ldr	r3, [pc, #52]	; (80052c8 <UART_SetConfig+0x360>)
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005296:	e024      	b.n	80052e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005298:	f7fe feb8 	bl	800400c <HAL_RCC_GetSysClockFreq>
 800529c:	0003      	movs	r3, r0
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052a0:	e01f      	b.n	80052e2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052a8:	e01b      	b.n	80052e2 <UART_SetConfig+0x37a>
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	cfff69f3 	.word	0xcfff69f3
 80052b0:	ffffcfff 	.word	0xffffcfff
 80052b4:	40008000 	.word	0x40008000
 80052b8:	11fff4ff 	.word	0x11fff4ff
 80052bc:	40013800 	.word	0x40013800
 80052c0:	40021000 	.word	0x40021000
 80052c4:	40004400 	.word	0x40004400
 80052c8:	00f42400 	.word	0x00f42400
 80052cc:	0800a270 	.word	0x0800a270
      default:
        pclk = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80052d4:	231a      	movs	r3, #26
 80052d6:	2220      	movs	r2, #32
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	19db      	adds	r3, r3, r7
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
        break;
 80052e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d100      	bne.n	80052ea <UART_SetConfig+0x382>
 80052e8:	e09a      	b.n	8005420 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ee:	4b58      	ldr	r3, [pc, #352]	; (8005450 <UART_SetConfig+0x4e8>)
 80052f0:	0052      	lsls	r2, r2, #1
 80052f2:	5ad3      	ldrh	r3, [r2, r3]
 80052f4:	0019      	movs	r1, r3
 80052f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052f8:	f7fa ff20 	bl	800013c <__udivsi3>
 80052fc:	0003      	movs	r3, r0
 80052fe:	005a      	lsls	r2, r3, #1
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	18d2      	adds	r2, r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	0019      	movs	r1, r3
 800530e:	0010      	movs	r0, r2
 8005310:	f7fa ff14 	bl	800013c <__udivsi3>
 8005314:	0003      	movs	r3, r0
 8005316:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	2b0f      	cmp	r3, #15
 800531c:	d921      	bls.n	8005362 <UART_SetConfig+0x3fa>
 800531e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	025b      	lsls	r3, r3, #9
 8005324:	429a      	cmp	r2, r3
 8005326:	d21c      	bcs.n	8005362 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	b29a      	uxth	r2, r3
 800532c:	200e      	movs	r0, #14
 800532e:	2420      	movs	r4, #32
 8005330:	1903      	adds	r3, r0, r4
 8005332:	19db      	adds	r3, r3, r7
 8005334:	210f      	movs	r1, #15
 8005336:	438a      	bics	r2, r1
 8005338:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	085b      	lsrs	r3, r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	2207      	movs	r2, #7
 8005342:	4013      	ands	r3, r2
 8005344:	b299      	uxth	r1, r3
 8005346:	1903      	adds	r3, r0, r4
 8005348:	19db      	adds	r3, r3, r7
 800534a:	1902      	adds	r2, r0, r4
 800534c:	19d2      	adds	r2, r2, r7
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	1902      	adds	r2, r0, r4
 800535a:	19d2      	adds	r2, r2, r7
 800535c:	8812      	ldrh	r2, [r2, #0]
 800535e:	60da      	str	r2, [r3, #12]
 8005360:	e05e      	b.n	8005420 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005362:	231a      	movs	r3, #26
 8005364:	2220      	movs	r2, #32
 8005366:	189b      	adds	r3, r3, r2
 8005368:	19db      	adds	r3, r3, r7
 800536a:	2201      	movs	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e057      	b.n	8005420 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005370:	231b      	movs	r3, #27
 8005372:	2220      	movs	r2, #32
 8005374:	189b      	adds	r3, r3, r2
 8005376:	19db      	adds	r3, r3, r7
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b08      	cmp	r3, #8
 800537c:	d015      	beq.n	80053aa <UART_SetConfig+0x442>
 800537e:	dc18      	bgt.n	80053b2 <UART_SetConfig+0x44a>
 8005380:	2b04      	cmp	r3, #4
 8005382:	d00d      	beq.n	80053a0 <UART_SetConfig+0x438>
 8005384:	dc15      	bgt.n	80053b2 <UART_SetConfig+0x44a>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <UART_SetConfig+0x428>
 800538a:	2b02      	cmp	r3, #2
 800538c:	d005      	beq.n	800539a <UART_SetConfig+0x432>
 800538e:	e010      	b.n	80053b2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005390:	f7fe fec8 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005394:	0003      	movs	r3, r0
 8005396:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005398:	e014      	b.n	80053c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800539a:	4b2e      	ldr	r3, [pc, #184]	; (8005454 <UART_SetConfig+0x4ec>)
 800539c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800539e:	e011      	b.n	80053c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053a0:	f7fe fe34 	bl	800400c <HAL_RCC_GetSysClockFreq>
 80053a4:	0003      	movs	r3, r0
 80053a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053a8:	e00c      	b.n	80053c4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053b0:	e008      	b.n	80053c4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80053b6:	231a      	movs	r3, #26
 80053b8:	2220      	movs	r2, #32
 80053ba:	189b      	adds	r3, r3, r2
 80053bc:	19db      	adds	r3, r3, r7
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
        break;
 80053c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d02a      	beq.n	8005420 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ce:	4b20      	ldr	r3, [pc, #128]	; (8005450 <UART_SetConfig+0x4e8>)
 80053d0:	0052      	lsls	r2, r2, #1
 80053d2:	5ad3      	ldrh	r3, [r2, r3]
 80053d4:	0019      	movs	r1, r3
 80053d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053d8:	f7fa feb0 	bl	800013c <__udivsi3>
 80053dc:	0003      	movs	r3, r0
 80053de:	001a      	movs	r2, r3
 80053e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	085b      	lsrs	r3, r3, #1
 80053e6:	18d2      	adds	r2, r2, r3
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	0019      	movs	r1, r3
 80053ee:	0010      	movs	r0, r2
 80053f0:	f7fa fea4 	bl	800013c <__udivsi3>
 80053f4:	0003      	movs	r3, r0
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d90a      	bls.n	8005414 <UART_SetConfig+0x4ac>
 80053fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005400:	2380      	movs	r3, #128	; 0x80
 8005402:	025b      	lsls	r3, r3, #9
 8005404:	429a      	cmp	r2, r3
 8005406:	d205      	bcs.n	8005414 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540a:	b29a      	uxth	r2, r3
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60da      	str	r2, [r3, #12]
 8005412:	e005      	b.n	8005420 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005414:	231a      	movs	r3, #26
 8005416:	2220      	movs	r2, #32
 8005418:	189b      	adds	r3, r3, r2
 800541a:	19db      	adds	r3, r3, r7
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	226a      	movs	r2, #106	; 0x6a
 8005424:	2101      	movs	r1, #1
 8005426:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	2268      	movs	r2, #104	; 0x68
 800542c:	2101      	movs	r1, #1
 800542e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	2200      	movs	r2, #0
 8005434:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2200      	movs	r2, #0
 800543a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800543c:	231a      	movs	r3, #26
 800543e:	2220      	movs	r2, #32
 8005440:	189b      	adds	r3, r3, r2
 8005442:	19db      	adds	r3, r3, r7
 8005444:	781b      	ldrb	r3, [r3, #0]
}
 8005446:	0018      	movs	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	b010      	add	sp, #64	; 0x40
 800544c:	bdb0      	pop	{r4, r5, r7, pc}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	0800a270 	.word	0x0800a270
 8005454:	00f42400 	.word	0x00f42400

08005458 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	2201      	movs	r2, #1
 8005466:	4013      	ands	r3, r2
 8005468:	d00b      	beq.n	8005482 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4a4a      	ldr	r2, [pc, #296]	; (800559c <UART_AdvFeatureConfig+0x144>)
 8005472:	4013      	ands	r3, r2
 8005474:	0019      	movs	r1, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005486:	2202      	movs	r2, #2
 8005488:	4013      	ands	r3, r2
 800548a:	d00b      	beq.n	80054a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4a43      	ldr	r2, [pc, #268]	; (80055a0 <UART_AdvFeatureConfig+0x148>)
 8005494:	4013      	ands	r3, r2
 8005496:	0019      	movs	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a8:	2204      	movs	r2, #4
 80054aa:	4013      	ands	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4a3b      	ldr	r2, [pc, #236]	; (80055a4 <UART_AdvFeatureConfig+0x14c>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	0019      	movs	r1, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ca:	2208      	movs	r2, #8
 80054cc:	4013      	ands	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4a34      	ldr	r2, [pc, #208]	; (80055a8 <UART_AdvFeatureConfig+0x150>)
 80054d8:	4013      	ands	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	2210      	movs	r2, #16
 80054ee:	4013      	ands	r3, r2
 80054f0:	d00b      	beq.n	800550a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <UART_AdvFeatureConfig+0x154>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	0019      	movs	r1, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	2220      	movs	r2, #32
 8005510:	4013      	ands	r3, r2
 8005512:	d00b      	beq.n	800552c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <UART_AdvFeatureConfig+0x158>)
 800551c:	4013      	ands	r3, r2
 800551e:	0019      	movs	r1, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	4013      	ands	r3, r2
 8005534:	d01d      	beq.n	8005572 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4a1d      	ldr	r2, [pc, #116]	; (80055b4 <UART_AdvFeatureConfig+0x15c>)
 800553e:	4013      	ands	r3, r2
 8005540:	0019      	movs	r1, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005552:	2380      	movs	r3, #128	; 0x80
 8005554:	035b      	lsls	r3, r3, #13
 8005556:	429a      	cmp	r2, r3
 8005558:	d10b      	bne.n	8005572 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <UART_AdvFeatureConfig+0x160>)
 8005562:	4013      	ands	r3, r2
 8005564:	0019      	movs	r1, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	2280      	movs	r2, #128	; 0x80
 8005578:	4013      	ands	r3, r2
 800557a:	d00b      	beq.n	8005594 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	4a0e      	ldr	r2, [pc, #56]	; (80055bc <UART_AdvFeatureConfig+0x164>)
 8005584:	4013      	ands	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	605a      	str	r2, [r3, #4]
  }
}
 8005594:	46c0      	nop			; (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	b002      	add	sp, #8
 800559a:	bd80      	pop	{r7, pc}
 800559c:	fffdffff 	.word	0xfffdffff
 80055a0:	fffeffff 	.word	0xfffeffff
 80055a4:	fffbffff 	.word	0xfffbffff
 80055a8:	ffff7fff 	.word	0xffff7fff
 80055ac:	ffffefff 	.word	0xffffefff
 80055b0:	ffffdfff 	.word	0xffffdfff
 80055b4:	ffefffff 	.word	0xffefffff
 80055b8:	ff9fffff 	.word	0xff9fffff
 80055bc:	fff7ffff 	.word	0xfff7ffff

080055c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2290      	movs	r2, #144	; 0x90
 80055cc:	2100      	movs	r1, #0
 80055ce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055d0:	f7fd fdf6 	bl	80031c0 <HAL_GetTick>
 80055d4:	0003      	movs	r3, r0
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2208      	movs	r2, #8
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b08      	cmp	r3, #8
 80055e4:	d10c      	bne.n	8005600 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	0391      	lsls	r1, r2, #14
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	4a1a      	ldr	r2, [pc, #104]	; (8005658 <UART_CheckIdleState+0x98>)
 80055f0:	9200      	str	r2, [sp, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f000 f832 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 80055f8:	1e03      	subs	r3, r0, #0
 80055fa:	d001      	beq.n	8005600 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e026      	b.n	800564e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
 800560a:	2b04      	cmp	r3, #4
 800560c:	d10c      	bne.n	8005628 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2280      	movs	r2, #128	; 0x80
 8005612:	03d1      	lsls	r1, r2, #15
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4a10      	ldr	r2, [pc, #64]	; (8005658 <UART_CheckIdleState+0x98>)
 8005618:	9200      	str	r2, [sp, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	f000 f81e 	bl	800565c <UART_WaitOnFlagUntilTimeout>
 8005620:	1e03      	subs	r3, r0, #0
 8005622:	d001      	beq.n	8005628 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e012      	b.n	800564e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2288      	movs	r2, #136	; 0x88
 800562c:	2120      	movs	r1, #32
 800562e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	228c      	movs	r2, #140	; 0x8c
 8005634:	2120      	movs	r1, #32
 8005636:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2284      	movs	r2, #132	; 0x84
 8005648:	2100      	movs	r1, #0
 800564a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b004      	add	sp, #16
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	01ffffff 	.word	0x01ffffff

0800565c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b094      	sub	sp, #80	; 0x50
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566c:	e0a7      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800566e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005670:	3301      	adds	r3, #1
 8005672:	d100      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005674:	e0a3      	b.n	80057be <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005676:	f7fd fda3 	bl	80031c0 <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <UART_WaitOnFlagUntilTimeout+0x30>
 8005686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005688:	2b00      	cmp	r3, #0
 800568a:	d13f      	bne.n	800570c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568c:	f3ef 8310 	mrs	r3, PRIMASK
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005694:	647b      	str	r3, [r7, #68]	; 0x44
 8005696:	2301      	movs	r3, #1
 8005698:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	f383 8810 	msr	PRIMASK, r3
}
 80056a0:	46c0      	nop			; (mov r8, r8)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	494e      	ldr	r1, [pc, #312]	; (80057e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80056ae:	400a      	ands	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b8:	f383 8810 	msr	PRIMASK, r3
}
 80056bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056be:	f3ef 8310 	mrs	r3, PRIMASK
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c6:	643b      	str	r3, [r7, #64]	; 0x40
 80056c8:	2301      	movs	r3, #1
 80056ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	f383 8810 	msr	PRIMASK, r3
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2101      	movs	r1, #1
 80056e0:	438a      	bics	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	f383 8810 	msr	PRIMASK, r3
}
 80056ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2288      	movs	r2, #136	; 0x88
 80056f4:	2120      	movs	r1, #32
 80056f6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	228c      	movs	r2, #140	; 0x8c
 80056fc:	2120      	movs	r1, #32
 80056fe:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2284      	movs	r2, #132	; 0x84
 8005704:	2100      	movs	r1, #0
 8005706:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e069      	b.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2204      	movs	r2, #4
 8005714:	4013      	ands	r3, r2
 8005716:	d052      	beq.n	80057be <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69da      	ldr	r2, [r3, #28]
 800571e:	2380      	movs	r3, #128	; 0x80
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	401a      	ands	r2, r3
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	429a      	cmp	r2, r3
 800572a:	d148      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	613b      	str	r3, [r7, #16]
  return(result);
 800573c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800573e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4924      	ldr	r1, [pc, #144]	; (80057e8 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005758:	400a      	ands	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f383 8810 	msr	PRIMASK, r3
}
 8005766:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005768:	f3ef 8310 	mrs	r3, PRIMASK
 800576c:	61fb      	str	r3, [r7, #28]
  return(result);
 800576e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005770:	64bb      	str	r3, [r7, #72]	; 0x48
 8005772:	2301      	movs	r3, #1
 8005774:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f383 8810 	msr	PRIMASK, r3
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	438a      	bics	r2, r1
 800578c:	609a      	str	r2, [r3, #8]
 800578e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2288      	movs	r2, #136	; 0x88
 800579e:	2120      	movs	r1, #32
 80057a0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	228c      	movs	r2, #140	; 0x8c
 80057a6:	2120      	movs	r1, #32
 80057a8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2290      	movs	r2, #144	; 0x90
 80057ae:	2120      	movs	r1, #32
 80057b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2284      	movs	r2, #132	; 0x84
 80057b6:	2100      	movs	r1, #0
 80057b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e010      	b.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	425a      	negs	r2, r3
 80057ce:	4153      	adcs	r3, r2
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	001a      	movs	r2, r3
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d100      	bne.n	80057de <UART_WaitOnFlagUntilTimeout+0x182>
 80057dc:	e747      	b.n	800566e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b014      	add	sp, #80	; 0x50
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	fffffe5f 	.word	0xfffffe5f

080057ec <sulp>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	0016      	movs	r6, r2
 80057f0:	000d      	movs	r5, r1
 80057f2:	f003 fd2d 	bl	8009250 <__ulp>
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	d00d      	beq.n	8005816 <sulp+0x2a>
 80057fa:	236b      	movs	r3, #107	; 0x6b
 80057fc:	006a      	lsls	r2, r5, #1
 80057fe:	0d52      	lsrs	r2, r2, #21
 8005800:	1a9b      	subs	r3, r3, r2
 8005802:	2b00      	cmp	r3, #0
 8005804:	dd07      	ble.n	8005816 <sulp+0x2a>
 8005806:	2400      	movs	r4, #0
 8005808:	4a03      	ldr	r2, [pc, #12]	; (8005818 <sulp+0x2c>)
 800580a:	051b      	lsls	r3, r3, #20
 800580c:	189d      	adds	r5, r3, r2
 800580e:	002b      	movs	r3, r5
 8005810:	0022      	movs	r2, r4
 8005812:	f7fb fefd 	bl	8001610 <__aeabi_dmul>
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	3ff00000 	.word	0x3ff00000

0800581c <_strtod_l>:
 800581c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581e:	b0a1      	sub	sp, #132	; 0x84
 8005820:	9219      	str	r2, [sp, #100]	; 0x64
 8005822:	2200      	movs	r2, #0
 8005824:	2600      	movs	r6, #0
 8005826:	2700      	movs	r7, #0
 8005828:	9004      	str	r0, [sp, #16]
 800582a:	9107      	str	r1, [sp, #28]
 800582c:	921c      	str	r2, [sp, #112]	; 0x70
 800582e:	911b      	str	r1, [sp, #108]	; 0x6c
 8005830:	780a      	ldrb	r2, [r1, #0]
 8005832:	2a2b      	cmp	r2, #43	; 0x2b
 8005834:	d055      	beq.n	80058e2 <_strtod_l+0xc6>
 8005836:	d841      	bhi.n	80058bc <_strtod_l+0xa0>
 8005838:	2a0d      	cmp	r2, #13
 800583a:	d83b      	bhi.n	80058b4 <_strtod_l+0x98>
 800583c:	2a08      	cmp	r2, #8
 800583e:	d83b      	bhi.n	80058b8 <_strtod_l+0x9c>
 8005840:	2a00      	cmp	r2, #0
 8005842:	d044      	beq.n	80058ce <_strtod_l+0xb2>
 8005844:	2200      	movs	r2, #0
 8005846:	920f      	str	r2, [sp, #60]	; 0x3c
 8005848:	2100      	movs	r1, #0
 800584a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800584c:	9109      	str	r1, [sp, #36]	; 0x24
 800584e:	782a      	ldrb	r2, [r5, #0]
 8005850:	2a30      	cmp	r2, #48	; 0x30
 8005852:	d000      	beq.n	8005856 <_strtod_l+0x3a>
 8005854:	e085      	b.n	8005962 <_strtod_l+0x146>
 8005856:	786a      	ldrb	r2, [r5, #1]
 8005858:	3120      	adds	r1, #32
 800585a:	438a      	bics	r2, r1
 800585c:	2a58      	cmp	r2, #88	; 0x58
 800585e:	d000      	beq.n	8005862 <_strtod_l+0x46>
 8005860:	e075      	b.n	800594e <_strtod_l+0x132>
 8005862:	9302      	str	r3, [sp, #8]
 8005864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005866:	4a97      	ldr	r2, [pc, #604]	; (8005ac4 <_strtod_l+0x2a8>)
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	ab1c      	add	r3, sp, #112	; 0x70
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	9804      	ldr	r0, [sp, #16]
 8005870:	ab1d      	add	r3, sp, #116	; 0x74
 8005872:	a91b      	add	r1, sp, #108	; 0x6c
 8005874:	f002 fda4 	bl	80083c0 <__gethex>
 8005878:	230f      	movs	r3, #15
 800587a:	0002      	movs	r2, r0
 800587c:	401a      	ands	r2, r3
 800587e:	0004      	movs	r4, r0
 8005880:	9205      	str	r2, [sp, #20]
 8005882:	4218      	tst	r0, r3
 8005884:	d005      	beq.n	8005892 <_strtod_l+0x76>
 8005886:	2a06      	cmp	r2, #6
 8005888:	d12d      	bne.n	80058e6 <_strtod_l+0xca>
 800588a:	1c6b      	adds	r3, r5, #1
 800588c:	931b      	str	r3, [sp, #108]	; 0x6c
 800588e:	2300      	movs	r3, #0
 8005890:	930f      	str	r3, [sp, #60]	; 0x3c
 8005892:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005894:	2b00      	cmp	r3, #0
 8005896:	d002      	beq.n	800589e <_strtod_l+0x82>
 8005898:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800589a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01b      	beq.n	80058dc <_strtod_l+0xc0>
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	0032      	movs	r2, r6
 80058a8:	061b      	lsls	r3, r3, #24
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	0010      	movs	r0, r2
 80058ae:	0019      	movs	r1, r3
 80058b0:	b021      	add	sp, #132	; 0x84
 80058b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b4:	2a20      	cmp	r2, #32
 80058b6:	d1c5      	bne.n	8005844 <_strtod_l+0x28>
 80058b8:	3101      	adds	r1, #1
 80058ba:	e7b8      	b.n	800582e <_strtod_l+0x12>
 80058bc:	2a2d      	cmp	r2, #45	; 0x2d
 80058be:	d1c1      	bne.n	8005844 <_strtod_l+0x28>
 80058c0:	3a2c      	subs	r2, #44	; 0x2c
 80058c2:	920f      	str	r2, [sp, #60]	; 0x3c
 80058c4:	1c4a      	adds	r2, r1, #1
 80058c6:	921b      	str	r2, [sp, #108]	; 0x6c
 80058c8:	784a      	ldrb	r2, [r1, #1]
 80058ca:	2a00      	cmp	r2, #0
 80058cc:	d1bc      	bne.n	8005848 <_strtod_l+0x2c>
 80058ce:	9b07      	ldr	r3, [sp, #28]
 80058d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80058d2:	2300      	movs	r3, #0
 80058d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80058d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1dd      	bne.n	8005898 <_strtod_l+0x7c>
 80058dc:	0032      	movs	r2, r6
 80058de:	003b      	movs	r3, r7
 80058e0:	e7e4      	b.n	80058ac <_strtod_l+0x90>
 80058e2:	2200      	movs	r2, #0
 80058e4:	e7ed      	b.n	80058c2 <_strtod_l+0xa6>
 80058e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80058e8:	2a00      	cmp	r2, #0
 80058ea:	d007      	beq.n	80058fc <_strtod_l+0xe0>
 80058ec:	2135      	movs	r1, #53	; 0x35
 80058ee:	a81e      	add	r0, sp, #120	; 0x78
 80058f0:	f003 fd9f 	bl	8009432 <__copybits>
 80058f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80058f6:	9804      	ldr	r0, [sp, #16]
 80058f8:	f003 f968 	bl	8008bcc <_Bfree>
 80058fc:	9805      	ldr	r0, [sp, #20]
 80058fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005900:	3801      	subs	r0, #1
 8005902:	2804      	cmp	r0, #4
 8005904:	d806      	bhi.n	8005914 <_strtod_l+0xf8>
 8005906:	f7fa fc05 	bl	8000114 <__gnu_thumb1_case_uqi>
 800590a:	0312      	.short	0x0312
 800590c:	1e1c      	.short	0x1e1c
 800590e:	12          	.byte	0x12
 800590f:	00          	.byte	0x00
 8005910:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8005912:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8005914:	05e4      	lsls	r4, r4, #23
 8005916:	d502      	bpl.n	800591e <_strtod_l+0x102>
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	431f      	orrs	r7, r3
 800591e:	4b6a      	ldr	r3, [pc, #424]	; (8005ac8 <_strtod_l+0x2ac>)
 8005920:	423b      	tst	r3, r7
 8005922:	d1b6      	bne.n	8005892 <_strtod_l+0x76>
 8005924:	f001 fdae 	bl	8007484 <__errno>
 8005928:	2322      	movs	r3, #34	; 0x22
 800592a:	6003      	str	r3, [r0, #0]
 800592c:	e7b1      	b.n	8005892 <_strtod_l+0x76>
 800592e:	4967      	ldr	r1, [pc, #412]	; (8005acc <_strtod_l+0x2b0>)
 8005930:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005932:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8005934:	400a      	ands	r2, r1
 8005936:	4966      	ldr	r1, [pc, #408]	; (8005ad0 <_strtod_l+0x2b4>)
 8005938:	185b      	adds	r3, r3, r1
 800593a:	051b      	lsls	r3, r3, #20
 800593c:	431a      	orrs	r2, r3
 800593e:	0017      	movs	r7, r2
 8005940:	e7e8      	b.n	8005914 <_strtod_l+0xf8>
 8005942:	4f61      	ldr	r7, [pc, #388]	; (8005ac8 <_strtod_l+0x2ac>)
 8005944:	e7e6      	b.n	8005914 <_strtod_l+0xf8>
 8005946:	2601      	movs	r6, #1
 8005948:	4f62      	ldr	r7, [pc, #392]	; (8005ad4 <_strtod_l+0x2b8>)
 800594a:	4276      	negs	r6, r6
 800594c:	e7e2      	b.n	8005914 <_strtod_l+0xf8>
 800594e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	921b      	str	r2, [sp, #108]	; 0x6c
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	2b30      	cmp	r3, #48	; 0x30
 8005958:	d0f9      	beq.n	800594e <_strtod_l+0x132>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d099      	beq.n	8005892 <_strtod_l+0x76>
 800595e:	2301      	movs	r3, #1
 8005960:	9309      	str	r3, [sp, #36]	; 0x24
 8005962:	2500      	movs	r5, #0
 8005964:	220a      	movs	r2, #10
 8005966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005968:	950d      	str	r5, [sp, #52]	; 0x34
 800596a:	9310      	str	r3, [sp, #64]	; 0x40
 800596c:	9508      	str	r5, [sp, #32]
 800596e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005970:	7804      	ldrb	r4, [r0, #0]
 8005972:	0023      	movs	r3, r4
 8005974:	3b30      	subs	r3, #48	; 0x30
 8005976:	b2d9      	uxtb	r1, r3
 8005978:	2909      	cmp	r1, #9
 800597a:	d927      	bls.n	80059cc <_strtod_l+0x1b0>
 800597c:	2201      	movs	r2, #1
 800597e:	4956      	ldr	r1, [pc, #344]	; (8005ad8 <_strtod_l+0x2bc>)
 8005980:	f001 fd1c 	bl	80073bc <strncmp>
 8005984:	2800      	cmp	r0, #0
 8005986:	d031      	beq.n	80059ec <_strtod_l+0x1d0>
 8005988:	2000      	movs	r0, #0
 800598a:	0023      	movs	r3, r4
 800598c:	4684      	mov	ip, r0
 800598e:	9a08      	ldr	r2, [sp, #32]
 8005990:	900c      	str	r0, [sp, #48]	; 0x30
 8005992:	9205      	str	r2, [sp, #20]
 8005994:	2220      	movs	r2, #32
 8005996:	0019      	movs	r1, r3
 8005998:	4391      	bics	r1, r2
 800599a:	000a      	movs	r2, r1
 800599c:	2100      	movs	r1, #0
 800599e:	9106      	str	r1, [sp, #24]
 80059a0:	2a45      	cmp	r2, #69	; 0x45
 80059a2:	d000      	beq.n	80059a6 <_strtod_l+0x18a>
 80059a4:	e0c2      	b.n	8005b2c <_strtod_l+0x310>
 80059a6:	9b05      	ldr	r3, [sp, #20]
 80059a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059aa:	4303      	orrs	r3, r0
 80059ac:	4313      	orrs	r3, r2
 80059ae:	428b      	cmp	r3, r1
 80059b0:	d08d      	beq.n	80058ce <_strtod_l+0xb2>
 80059b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059b4:	9307      	str	r3, [sp, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80059ba:	9b07      	ldr	r3, [sp, #28]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b2b      	cmp	r3, #43	; 0x2b
 80059c0:	d071      	beq.n	8005aa6 <_strtod_l+0x28a>
 80059c2:	000c      	movs	r4, r1
 80059c4:	2b2d      	cmp	r3, #45	; 0x2d
 80059c6:	d174      	bne.n	8005ab2 <_strtod_l+0x296>
 80059c8:	2401      	movs	r4, #1
 80059ca:	e06d      	b.n	8005aa8 <_strtod_l+0x28c>
 80059cc:	9908      	ldr	r1, [sp, #32]
 80059ce:	2908      	cmp	r1, #8
 80059d0:	dc09      	bgt.n	80059e6 <_strtod_l+0x1ca>
 80059d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059d4:	4351      	muls	r1, r2
 80059d6:	185b      	adds	r3, r3, r1
 80059d8:	930d      	str	r3, [sp, #52]	; 0x34
 80059da:	9b08      	ldr	r3, [sp, #32]
 80059dc:	3001      	adds	r0, #1
 80059de:	3301      	adds	r3, #1
 80059e0:	9308      	str	r3, [sp, #32]
 80059e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80059e4:	e7c3      	b.n	800596e <_strtod_l+0x152>
 80059e6:	4355      	muls	r5, r2
 80059e8:	195d      	adds	r5, r3, r5
 80059ea:	e7f6      	b.n	80059da <_strtod_l+0x1be>
 80059ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80059f2:	9a08      	ldr	r2, [sp, #32]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	d03a      	beq.n	8005a70 <_strtod_l+0x254>
 80059fa:	900c      	str	r0, [sp, #48]	; 0x30
 80059fc:	9205      	str	r2, [sp, #20]
 80059fe:	001a      	movs	r2, r3
 8005a00:	3a30      	subs	r2, #48	; 0x30
 8005a02:	2a09      	cmp	r2, #9
 8005a04:	d912      	bls.n	8005a2c <_strtod_l+0x210>
 8005a06:	2201      	movs	r2, #1
 8005a08:	4694      	mov	ip, r2
 8005a0a:	e7c3      	b.n	8005994 <_strtod_l+0x178>
 8005a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a0e:	3001      	adds	r0, #1
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b30      	cmp	r3, #48	; 0x30
 8005a18:	d0f8      	beq.n	8005a0c <_strtod_l+0x1f0>
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	3a31      	subs	r2, #49	; 0x31
 8005a1e:	2a08      	cmp	r2, #8
 8005a20:	d83c      	bhi.n	8005a9c <_strtod_l+0x280>
 8005a22:	900c      	str	r0, [sp, #48]	; 0x30
 8005a24:	2000      	movs	r0, #0
 8005a26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a28:	9005      	str	r0, [sp, #20]
 8005a2a:	9210      	str	r2, [sp, #64]	; 0x40
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	1c41      	adds	r1, r0, #1
 8005a30:	3a30      	subs	r2, #48	; 0x30
 8005a32:	2b30      	cmp	r3, #48	; 0x30
 8005a34:	d016      	beq.n	8005a64 <_strtod_l+0x248>
 8005a36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a38:	185b      	adds	r3, r3, r1
 8005a3a:	930c      	str	r3, [sp, #48]	; 0x30
 8005a3c:	9b05      	ldr	r3, [sp, #20]
 8005a3e:	210a      	movs	r1, #10
 8005a40:	469c      	mov	ip, r3
 8005a42:	4484      	add	ip, r0
 8005a44:	4563      	cmp	r3, ip
 8005a46:	d115      	bne.n	8005a74 <_strtod_l+0x258>
 8005a48:	9905      	ldr	r1, [sp, #20]
 8005a4a:	9b05      	ldr	r3, [sp, #20]
 8005a4c:	3101      	adds	r1, #1
 8005a4e:	1809      	adds	r1, r1, r0
 8005a50:	181b      	adds	r3, r3, r0
 8005a52:	9105      	str	r1, [sp, #20]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	dc19      	bgt.n	8005a8c <_strtod_l+0x270>
 8005a58:	230a      	movs	r3, #10
 8005a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a5c:	434b      	muls	r3, r1
 8005a5e:	2100      	movs	r1, #0
 8005a60:	18d3      	adds	r3, r2, r3
 8005a62:	930d      	str	r3, [sp, #52]	; 0x34
 8005a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a66:	0008      	movs	r0, r1
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	e7c6      	b.n	80059fe <_strtod_l+0x1e2>
 8005a70:	9808      	ldr	r0, [sp, #32]
 8005a72:	e7d0      	b.n	8005a16 <_strtod_l+0x1fa>
 8005a74:	1c5c      	adds	r4, r3, #1
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	dc04      	bgt.n	8005a84 <_strtod_l+0x268>
 8005a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a7c:	434b      	muls	r3, r1
 8005a7e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a80:	0023      	movs	r3, r4
 8005a82:	e7df      	b.n	8005a44 <_strtod_l+0x228>
 8005a84:	2c10      	cmp	r4, #16
 8005a86:	dcfb      	bgt.n	8005a80 <_strtod_l+0x264>
 8005a88:	434d      	muls	r5, r1
 8005a8a:	e7f9      	b.n	8005a80 <_strtod_l+0x264>
 8005a8c:	9b05      	ldr	r3, [sp, #20]
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	dce7      	bgt.n	8005a64 <_strtod_l+0x248>
 8005a94:	230a      	movs	r3, #10
 8005a96:	435d      	muls	r5, r3
 8005a98:	1955      	adds	r5, r2, r5
 8005a9a:	e7e3      	b.n	8005a64 <_strtod_l+0x248>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	920c      	str	r2, [sp, #48]	; 0x30
 8005aa0:	9205      	str	r2, [sp, #20]
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	e7b0      	b.n	8005a08 <_strtod_l+0x1ec>
 8005aa6:	2400      	movs	r4, #0
 8005aa8:	9b07      	ldr	r3, [sp, #28]
 8005aaa:	3302      	adds	r3, #2
 8005aac:	931b      	str	r3, [sp, #108]	; 0x6c
 8005aae:	9b07      	ldr	r3, [sp, #28]
 8005ab0:	789b      	ldrb	r3, [r3, #2]
 8005ab2:	001a      	movs	r2, r3
 8005ab4:	3a30      	subs	r2, #48	; 0x30
 8005ab6:	2a09      	cmp	r2, #9
 8005ab8:	d914      	bls.n	8005ae4 <_strtod_l+0x2c8>
 8005aba:	9a07      	ldr	r2, [sp, #28]
 8005abc:	921b      	str	r2, [sp, #108]	; 0x6c
 8005abe:	2200      	movs	r2, #0
 8005ac0:	e033      	b.n	8005b2a <_strtod_l+0x30e>
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	0800a28c 	.word	0x0800a28c
 8005ac8:	7ff00000 	.word	0x7ff00000
 8005acc:	ffefffff 	.word	0xffefffff
 8005ad0:	00000433 	.word	0x00000433
 8005ad4:	7fffffff 	.word	0x7fffffff
 8005ad8:	0800a288 	.word	0x0800a288
 8005adc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ae2:	785b      	ldrb	r3, [r3, #1]
 8005ae4:	2b30      	cmp	r3, #48	; 0x30
 8005ae6:	d0f9      	beq.n	8005adc <_strtod_l+0x2c0>
 8005ae8:	2200      	movs	r2, #0
 8005aea:	9206      	str	r2, [sp, #24]
 8005aec:	001a      	movs	r2, r3
 8005aee:	3a31      	subs	r2, #49	; 0x31
 8005af0:	2a08      	cmp	r2, #8
 8005af2:	d81b      	bhi.n	8005b2c <_strtod_l+0x310>
 8005af4:	3b30      	subs	r3, #48	; 0x30
 8005af6:	930e      	str	r3, [sp, #56]	; 0x38
 8005af8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005afa:	9306      	str	r3, [sp, #24]
 8005afc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	911b      	str	r1, [sp, #108]	; 0x6c
 8005b02:	785b      	ldrb	r3, [r3, #1]
 8005b04:	001a      	movs	r2, r3
 8005b06:	3a30      	subs	r2, #48	; 0x30
 8005b08:	2a09      	cmp	r2, #9
 8005b0a:	d93a      	bls.n	8005b82 <_strtod_l+0x366>
 8005b0c:	9a06      	ldr	r2, [sp, #24]
 8005b0e:	1a8a      	subs	r2, r1, r2
 8005b10:	49b2      	ldr	r1, [pc, #712]	; (8005ddc <_strtod_l+0x5c0>)
 8005b12:	9106      	str	r1, [sp, #24]
 8005b14:	2a08      	cmp	r2, #8
 8005b16:	dc04      	bgt.n	8005b22 <_strtod_l+0x306>
 8005b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b1a:	9206      	str	r2, [sp, #24]
 8005b1c:	428a      	cmp	r2, r1
 8005b1e:	dd00      	ble.n	8005b22 <_strtod_l+0x306>
 8005b20:	9106      	str	r1, [sp, #24]
 8005b22:	2c00      	cmp	r4, #0
 8005b24:	d002      	beq.n	8005b2c <_strtod_l+0x310>
 8005b26:	9a06      	ldr	r2, [sp, #24]
 8005b28:	4252      	negs	r2, r2
 8005b2a:	9206      	str	r2, [sp, #24]
 8005b2c:	9a05      	ldr	r2, [sp, #20]
 8005b2e:	2a00      	cmp	r2, #0
 8005b30:	d14d      	bne.n	8005bce <_strtod_l+0x3b2>
 8005b32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b34:	4310      	orrs	r0, r2
 8005b36:	d000      	beq.n	8005b3a <_strtod_l+0x31e>
 8005b38:	e6ab      	b.n	8005892 <_strtod_l+0x76>
 8005b3a:	4662      	mov	r2, ip
 8005b3c:	2a00      	cmp	r2, #0
 8005b3e:	d000      	beq.n	8005b42 <_strtod_l+0x326>
 8005b40:	e6c5      	b.n	80058ce <_strtod_l+0xb2>
 8005b42:	2b69      	cmp	r3, #105	; 0x69
 8005b44:	d027      	beq.n	8005b96 <_strtod_l+0x37a>
 8005b46:	dc23      	bgt.n	8005b90 <_strtod_l+0x374>
 8005b48:	2b49      	cmp	r3, #73	; 0x49
 8005b4a:	d024      	beq.n	8005b96 <_strtod_l+0x37a>
 8005b4c:	2b4e      	cmp	r3, #78	; 0x4e
 8005b4e:	d000      	beq.n	8005b52 <_strtod_l+0x336>
 8005b50:	e6bd      	b.n	80058ce <_strtod_l+0xb2>
 8005b52:	49a3      	ldr	r1, [pc, #652]	; (8005de0 <_strtod_l+0x5c4>)
 8005b54:	a81b      	add	r0, sp, #108	; 0x6c
 8005b56:	f002 fe69 	bl	800882c <__match>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d100      	bne.n	8005b60 <_strtod_l+0x344>
 8005b5e:	e6b6      	b.n	80058ce <_strtod_l+0xb2>
 8005b60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b28      	cmp	r3, #40	; 0x28
 8005b66:	d12c      	bne.n	8005bc2 <_strtod_l+0x3a6>
 8005b68:	499e      	ldr	r1, [pc, #632]	; (8005de4 <_strtod_l+0x5c8>)
 8005b6a:	aa1e      	add	r2, sp, #120	; 0x78
 8005b6c:	a81b      	add	r0, sp, #108	; 0x6c
 8005b6e:	f002 fe71 	bl	8008854 <__hexnan>
 8005b72:	2805      	cmp	r0, #5
 8005b74:	d125      	bne.n	8005bc2 <_strtod_l+0x3a6>
 8005b76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b78:	4a9b      	ldr	r2, [pc, #620]	; (8005de8 <_strtod_l+0x5cc>)
 8005b7a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	0017      	movs	r7, r2
 8005b80:	e687      	b.n	8005892 <_strtod_l+0x76>
 8005b82:	220a      	movs	r2, #10
 8005b84:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005b86:	434a      	muls	r2, r1
 8005b88:	18d2      	adds	r2, r2, r3
 8005b8a:	3a30      	subs	r2, #48	; 0x30
 8005b8c:	920e      	str	r2, [sp, #56]	; 0x38
 8005b8e:	e7b5      	b.n	8005afc <_strtod_l+0x2e0>
 8005b90:	2b6e      	cmp	r3, #110	; 0x6e
 8005b92:	d0de      	beq.n	8005b52 <_strtod_l+0x336>
 8005b94:	e69b      	b.n	80058ce <_strtod_l+0xb2>
 8005b96:	4995      	ldr	r1, [pc, #596]	; (8005dec <_strtod_l+0x5d0>)
 8005b98:	a81b      	add	r0, sp, #108	; 0x6c
 8005b9a:	f002 fe47 	bl	800882c <__match>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d100      	bne.n	8005ba4 <_strtod_l+0x388>
 8005ba2:	e694      	b.n	80058ce <_strtod_l+0xb2>
 8005ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ba6:	4992      	ldr	r1, [pc, #584]	; (8005df0 <_strtod_l+0x5d4>)
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	a81b      	add	r0, sp, #108	; 0x6c
 8005bac:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bae:	f002 fe3d 	bl	800882c <__match>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d102      	bne.n	8005bbc <_strtod_l+0x3a0>
 8005bb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bb8:	3301      	adds	r3, #1
 8005bba:	931b      	str	r3, [sp, #108]	; 0x6c
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	4f8a      	ldr	r7, [pc, #552]	; (8005de8 <_strtod_l+0x5cc>)
 8005bc0:	e667      	b.n	8005892 <_strtod_l+0x76>
 8005bc2:	488c      	ldr	r0, [pc, #560]	; (8005df4 <_strtod_l+0x5d8>)
 8005bc4:	f001 fca0 	bl	8007508 <nan>
 8005bc8:	0006      	movs	r6, r0
 8005bca:	000f      	movs	r7, r1
 8005bcc:	e661      	b.n	8005892 <_strtod_l+0x76>
 8005bce:	9b06      	ldr	r3, [sp, #24]
 8005bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd6:	9b08      	ldr	r3, [sp, #32]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <_strtod_l+0x3c4>
 8005bdc:	9b05      	ldr	r3, [sp, #20]
 8005bde:	9308      	str	r3, [sp, #32]
 8005be0:	9c05      	ldr	r4, [sp, #20]
 8005be2:	2c10      	cmp	r4, #16
 8005be4:	dd00      	ble.n	8005be8 <_strtod_l+0x3cc>
 8005be6:	2410      	movs	r4, #16
 8005be8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005bea:	f7fc fbd9 	bl	80023a0 <__aeabi_ui2d>
 8005bee:	9b05      	ldr	r3, [sp, #20]
 8005bf0:	0006      	movs	r6, r0
 8005bf2:	000f      	movs	r7, r1
 8005bf4:	2b09      	cmp	r3, #9
 8005bf6:	dd15      	ble.n	8005c24 <_strtod_l+0x408>
 8005bf8:	0022      	movs	r2, r4
 8005bfa:	4b7f      	ldr	r3, [pc, #508]	; (8005df8 <_strtod_l+0x5dc>)
 8005bfc:	3a09      	subs	r2, #9
 8005bfe:	00d2      	lsls	r2, r2, #3
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f7fb fd03 	bl	8001610 <__aeabi_dmul>
 8005c0a:	0006      	movs	r6, r0
 8005c0c:	0028      	movs	r0, r5
 8005c0e:	000f      	movs	r7, r1
 8005c10:	f7fc fbc6 	bl	80023a0 <__aeabi_ui2d>
 8005c14:	0002      	movs	r2, r0
 8005c16:	000b      	movs	r3, r1
 8005c18:	0030      	movs	r0, r6
 8005c1a:	0039      	movs	r1, r7
 8005c1c:	f7fa fd9e 	bl	800075c <__aeabi_dadd>
 8005c20:	0006      	movs	r6, r0
 8005c22:	000f      	movs	r7, r1
 8005c24:	9b05      	ldr	r3, [sp, #20]
 8005c26:	2b0f      	cmp	r3, #15
 8005c28:	dc39      	bgt.n	8005c9e <_strtod_l+0x482>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d100      	bne.n	8005c32 <_strtod_l+0x416>
 8005c30:	e62f      	b.n	8005892 <_strtod_l+0x76>
 8005c32:	dd24      	ble.n	8005c7e <_strtod_l+0x462>
 8005c34:	2b16      	cmp	r3, #22
 8005c36:	dc09      	bgt.n	8005c4c <_strtod_l+0x430>
 8005c38:	496f      	ldr	r1, [pc, #444]	; (8005df8 <_strtod_l+0x5dc>)
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	18c9      	adds	r1, r1, r3
 8005c3e:	0032      	movs	r2, r6
 8005c40:	6808      	ldr	r0, [r1, #0]
 8005c42:	6849      	ldr	r1, [r1, #4]
 8005c44:	003b      	movs	r3, r7
 8005c46:	f7fb fce3 	bl	8001610 <__aeabi_dmul>
 8005c4a:	e7bd      	b.n	8005bc8 <_strtod_l+0x3ac>
 8005c4c:	2325      	movs	r3, #37	; 0x25
 8005c4e:	9a05      	ldr	r2, [sp, #20]
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c54:	4293      	cmp	r3, r2
 8005c56:	db22      	blt.n	8005c9e <_strtod_l+0x482>
 8005c58:	240f      	movs	r4, #15
 8005c5a:	9b05      	ldr	r3, [sp, #20]
 8005c5c:	4d66      	ldr	r5, [pc, #408]	; (8005df8 <_strtod_l+0x5dc>)
 8005c5e:	1ae4      	subs	r4, r4, r3
 8005c60:	00e1      	lsls	r1, r4, #3
 8005c62:	1869      	adds	r1, r5, r1
 8005c64:	0032      	movs	r2, r6
 8005c66:	6808      	ldr	r0, [r1, #0]
 8005c68:	6849      	ldr	r1, [r1, #4]
 8005c6a:	003b      	movs	r3, r7
 8005c6c:	f7fb fcd0 	bl	8001610 <__aeabi_dmul>
 8005c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c72:	1b1c      	subs	r4, r3, r4
 8005c74:	00e4      	lsls	r4, r4, #3
 8005c76:	192d      	adds	r5, r5, r4
 8005c78:	682a      	ldr	r2, [r5, #0]
 8005c7a:	686b      	ldr	r3, [r5, #4]
 8005c7c:	e7e3      	b.n	8005c46 <_strtod_l+0x42a>
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	3316      	adds	r3, #22
 8005c82:	db0c      	blt.n	8005c9e <_strtod_l+0x482>
 8005c84:	9906      	ldr	r1, [sp, #24]
 8005c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c88:	4b5b      	ldr	r3, [pc, #364]	; (8005df8 <_strtod_l+0x5dc>)
 8005c8a:	1a52      	subs	r2, r2, r1
 8005c8c:	00d2      	lsls	r2, r2, #3
 8005c8e:	189b      	adds	r3, r3, r2
 8005c90:	0030      	movs	r0, r6
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	0039      	movs	r1, r7
 8005c98:	f7fb f8c0 	bl	8000e1c <__aeabi_ddiv>
 8005c9c:	e794      	b.n	8005bc8 <_strtod_l+0x3ac>
 8005c9e:	9b05      	ldr	r3, [sp, #20]
 8005ca0:	1b1c      	subs	r4, r3, r4
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	18e4      	adds	r4, r4, r3
 8005ca6:	2c00      	cmp	r4, #0
 8005ca8:	dd72      	ble.n	8005d90 <_strtod_l+0x574>
 8005caa:	220f      	movs	r2, #15
 8005cac:	0023      	movs	r3, r4
 8005cae:	4013      	ands	r3, r2
 8005cb0:	4214      	tst	r4, r2
 8005cb2:	d00a      	beq.n	8005cca <_strtod_l+0x4ae>
 8005cb4:	4950      	ldr	r1, [pc, #320]	; (8005df8 <_strtod_l+0x5dc>)
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	18c9      	adds	r1, r1, r3
 8005cba:	0032      	movs	r2, r6
 8005cbc:	6808      	ldr	r0, [r1, #0]
 8005cbe:	6849      	ldr	r1, [r1, #4]
 8005cc0:	003b      	movs	r3, r7
 8005cc2:	f7fb fca5 	bl	8001610 <__aeabi_dmul>
 8005cc6:	0006      	movs	r6, r0
 8005cc8:	000f      	movs	r7, r1
 8005cca:	230f      	movs	r3, #15
 8005ccc:	439c      	bics	r4, r3
 8005cce:	d04a      	beq.n	8005d66 <_strtod_l+0x54a>
 8005cd0:	3326      	adds	r3, #38	; 0x26
 8005cd2:	33ff      	adds	r3, #255	; 0xff
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	dd22      	ble.n	8005d1e <_strtod_l+0x502>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	9306      	str	r3, [sp, #24]
 8005cde:	930d      	str	r3, [sp, #52]	; 0x34
 8005ce0:	9308      	str	r3, [sp, #32]
 8005ce2:	2322      	movs	r3, #34	; 0x22
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	9a04      	ldr	r2, [sp, #16]
 8005ce8:	4f3f      	ldr	r7, [pc, #252]	; (8005de8 <_strtod_l+0x5cc>)
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cee:	42b3      	cmp	r3, r6
 8005cf0:	d100      	bne.n	8005cf4 <_strtod_l+0x4d8>
 8005cf2:	e5ce      	b.n	8005892 <_strtod_l+0x76>
 8005cf4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005cf6:	9804      	ldr	r0, [sp, #16]
 8005cf8:	f002 ff68 	bl	8008bcc <_Bfree>
 8005cfc:	9908      	ldr	r1, [sp, #32]
 8005cfe:	9804      	ldr	r0, [sp, #16]
 8005d00:	f002 ff64 	bl	8008bcc <_Bfree>
 8005d04:	9906      	ldr	r1, [sp, #24]
 8005d06:	9804      	ldr	r0, [sp, #16]
 8005d08:	f002 ff60 	bl	8008bcc <_Bfree>
 8005d0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d0e:	9804      	ldr	r0, [sp, #16]
 8005d10:	f002 ff5c 	bl	8008bcc <_Bfree>
 8005d14:	9905      	ldr	r1, [sp, #20]
 8005d16:	9804      	ldr	r0, [sp, #16]
 8005d18:	f002 ff58 	bl	8008bcc <_Bfree>
 8005d1c:	e5b9      	b.n	8005892 <_strtod_l+0x76>
 8005d1e:	2300      	movs	r3, #0
 8005d20:	0030      	movs	r0, r6
 8005d22:	0039      	movs	r1, r7
 8005d24:	4d35      	ldr	r5, [pc, #212]	; (8005dfc <_strtod_l+0x5e0>)
 8005d26:	1124      	asrs	r4, r4, #4
 8005d28:	9307      	str	r3, [sp, #28]
 8005d2a:	2c01      	cmp	r4, #1
 8005d2c:	dc1e      	bgt.n	8005d6c <_strtod_l+0x550>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <_strtod_l+0x51a>
 8005d32:	0006      	movs	r6, r0
 8005d34:	000f      	movs	r7, r1
 8005d36:	4b32      	ldr	r3, [pc, #200]	; (8005e00 <_strtod_l+0x5e4>)
 8005d38:	9a07      	ldr	r2, [sp, #28]
 8005d3a:	18ff      	adds	r7, r7, r3
 8005d3c:	4b2f      	ldr	r3, [pc, #188]	; (8005dfc <_strtod_l+0x5e0>)
 8005d3e:	00d2      	lsls	r2, r2, #3
 8005d40:	189d      	adds	r5, r3, r2
 8005d42:	6828      	ldr	r0, [r5, #0]
 8005d44:	6869      	ldr	r1, [r5, #4]
 8005d46:	0032      	movs	r2, r6
 8005d48:	003b      	movs	r3, r7
 8005d4a:	f7fb fc61 	bl	8001610 <__aeabi_dmul>
 8005d4e:	4b26      	ldr	r3, [pc, #152]	; (8005de8 <_strtod_l+0x5cc>)
 8005d50:	4a2c      	ldr	r2, [pc, #176]	; (8005e04 <_strtod_l+0x5e8>)
 8005d52:	0006      	movs	r6, r0
 8005d54:	400b      	ands	r3, r1
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d8be      	bhi.n	8005cd8 <_strtod_l+0x4bc>
 8005d5a:	4a2b      	ldr	r2, [pc, #172]	; (8005e08 <_strtod_l+0x5ec>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d913      	bls.n	8005d88 <_strtod_l+0x56c>
 8005d60:	2601      	movs	r6, #1
 8005d62:	4f2a      	ldr	r7, [pc, #168]	; (8005e0c <_strtod_l+0x5f0>)
 8005d64:	4276      	negs	r6, r6
 8005d66:	2300      	movs	r3, #0
 8005d68:	9307      	str	r3, [sp, #28]
 8005d6a:	e088      	b.n	8005e7e <_strtod_l+0x662>
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	4214      	tst	r4, r2
 8005d70:	d004      	beq.n	8005d7c <_strtod_l+0x560>
 8005d72:	682a      	ldr	r2, [r5, #0]
 8005d74:	686b      	ldr	r3, [r5, #4]
 8005d76:	f7fb fc4b 	bl	8001610 <__aeabi_dmul>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	9a07      	ldr	r2, [sp, #28]
 8005d7e:	1064      	asrs	r4, r4, #1
 8005d80:	3201      	adds	r2, #1
 8005d82:	9207      	str	r2, [sp, #28]
 8005d84:	3508      	adds	r5, #8
 8005d86:	e7d0      	b.n	8005d2a <_strtod_l+0x50e>
 8005d88:	23d4      	movs	r3, #212	; 0xd4
 8005d8a:	049b      	lsls	r3, r3, #18
 8005d8c:	18cf      	adds	r7, r1, r3
 8005d8e:	e7ea      	b.n	8005d66 <_strtod_l+0x54a>
 8005d90:	2c00      	cmp	r4, #0
 8005d92:	d0e8      	beq.n	8005d66 <_strtod_l+0x54a>
 8005d94:	4264      	negs	r4, r4
 8005d96:	230f      	movs	r3, #15
 8005d98:	0022      	movs	r2, r4
 8005d9a:	401a      	ands	r2, r3
 8005d9c:	421c      	tst	r4, r3
 8005d9e:	d00a      	beq.n	8005db6 <_strtod_l+0x59a>
 8005da0:	4b15      	ldr	r3, [pc, #84]	; (8005df8 <_strtod_l+0x5dc>)
 8005da2:	00d2      	lsls	r2, r2, #3
 8005da4:	189b      	adds	r3, r3, r2
 8005da6:	0030      	movs	r0, r6
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	0039      	movs	r1, r7
 8005dae:	f7fb f835 	bl	8000e1c <__aeabi_ddiv>
 8005db2:	0006      	movs	r6, r0
 8005db4:	000f      	movs	r7, r1
 8005db6:	1124      	asrs	r4, r4, #4
 8005db8:	d0d5      	beq.n	8005d66 <_strtod_l+0x54a>
 8005dba:	2c1f      	cmp	r4, #31
 8005dbc:	dd28      	ble.n	8005e10 <_strtod_l+0x5f4>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	9305      	str	r3, [sp, #20]
 8005dc2:	9306      	str	r3, [sp, #24]
 8005dc4:	930d      	str	r3, [sp, #52]	; 0x34
 8005dc6:	9308      	str	r3, [sp, #32]
 8005dc8:	2322      	movs	r3, #34	; 0x22
 8005dca:	9a04      	ldr	r2, [sp, #16]
 8005dcc:	2600      	movs	r6, #0
 8005dce:	6013      	str	r3, [r2, #0]
 8005dd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dd2:	2700      	movs	r7, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d18d      	bne.n	8005cf4 <_strtod_l+0x4d8>
 8005dd8:	e55b      	b.n	8005892 <_strtod_l+0x76>
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	00004e1f 	.word	0x00004e1f
 8005de0:	0800a2ed 	.word	0x0800a2ed
 8005de4:	0800a2a0 	.word	0x0800a2a0
 8005de8:	7ff00000 	.word	0x7ff00000
 8005dec:	0800a2e5 	.word	0x0800a2e5
 8005df0:	0800a324 	.word	0x0800a324
 8005df4:	0800a6b1 	.word	0x0800a6b1
 8005df8:	0800a490 	.word	0x0800a490
 8005dfc:	0800a468 	.word	0x0800a468
 8005e00:	fcb00000 	.word	0xfcb00000
 8005e04:	7ca00000 	.word	0x7ca00000
 8005e08:	7c900000 	.word	0x7c900000
 8005e0c:	7fefffff 	.word	0x7fefffff
 8005e10:	2310      	movs	r3, #16
 8005e12:	0022      	movs	r2, r4
 8005e14:	401a      	ands	r2, r3
 8005e16:	9207      	str	r2, [sp, #28]
 8005e18:	421c      	tst	r4, r3
 8005e1a:	d001      	beq.n	8005e20 <_strtod_l+0x604>
 8005e1c:	335a      	adds	r3, #90	; 0x5a
 8005e1e:	9307      	str	r3, [sp, #28]
 8005e20:	0030      	movs	r0, r6
 8005e22:	0039      	movs	r1, r7
 8005e24:	2300      	movs	r3, #0
 8005e26:	4dc4      	ldr	r5, [pc, #784]	; (8006138 <_strtod_l+0x91c>)
 8005e28:	2201      	movs	r2, #1
 8005e2a:	4214      	tst	r4, r2
 8005e2c:	d004      	beq.n	8005e38 <_strtod_l+0x61c>
 8005e2e:	682a      	ldr	r2, [r5, #0]
 8005e30:	686b      	ldr	r3, [r5, #4]
 8005e32:	f7fb fbed 	bl	8001610 <__aeabi_dmul>
 8005e36:	2301      	movs	r3, #1
 8005e38:	1064      	asrs	r4, r4, #1
 8005e3a:	3508      	adds	r5, #8
 8005e3c:	2c00      	cmp	r4, #0
 8005e3e:	d1f3      	bne.n	8005e28 <_strtod_l+0x60c>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <_strtod_l+0x62c>
 8005e44:	0006      	movs	r6, r0
 8005e46:	000f      	movs	r7, r1
 8005e48:	9b07      	ldr	r3, [sp, #28]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00f      	beq.n	8005e6e <_strtod_l+0x652>
 8005e4e:	236b      	movs	r3, #107	; 0x6b
 8005e50:	007a      	lsls	r2, r7, #1
 8005e52:	0d52      	lsrs	r2, r2, #21
 8005e54:	0039      	movs	r1, r7
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dd08      	ble.n	8005e6e <_strtod_l+0x652>
 8005e5c:	2b1f      	cmp	r3, #31
 8005e5e:	dc00      	bgt.n	8005e62 <_strtod_l+0x646>
 8005e60:	e121      	b.n	80060a6 <_strtod_l+0x88a>
 8005e62:	2600      	movs	r6, #0
 8005e64:	2b34      	cmp	r3, #52	; 0x34
 8005e66:	dc00      	bgt.n	8005e6a <_strtod_l+0x64e>
 8005e68:	e116      	b.n	8006098 <_strtod_l+0x87c>
 8005e6a:	27dc      	movs	r7, #220	; 0xdc
 8005e6c:	04bf      	lsls	r7, r7, #18
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	0030      	movs	r0, r6
 8005e74:	0039      	movs	r1, r7
 8005e76:	f7fa fae7 	bl	8000448 <__aeabi_dcmpeq>
 8005e7a:	2800      	cmp	r0, #0
 8005e7c:	d19f      	bne.n	8005dbe <_strtod_l+0x5a2>
 8005e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e80:	9a08      	ldr	r2, [sp, #32]
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005e86:	9b05      	ldr	r3, [sp, #20]
 8005e88:	9804      	ldr	r0, [sp, #16]
 8005e8a:	f002 ff07 	bl	8008c9c <__s2b>
 8005e8e:	900d      	str	r0, [sp, #52]	; 0x34
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d100      	bne.n	8005e96 <_strtod_l+0x67a>
 8005e94:	e720      	b.n	8005cd8 <_strtod_l+0x4bc>
 8005e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e98:	9906      	ldr	r1, [sp, #24]
 8005e9a:	17da      	asrs	r2, r3, #31
 8005e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e9e:	1a5b      	subs	r3, r3, r1
 8005ea0:	401a      	ands	r2, r3
 8005ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea4:	9215      	str	r2, [sp, #84]	; 0x54
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eaa:	17db      	asrs	r3, r3, #31
 8005eac:	401a      	ands	r2, r3
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9218      	str	r2, [sp, #96]	; 0x60
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	9306      	str	r3, [sp, #24]
 8005eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb8:	9804      	ldr	r0, [sp, #16]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	f002 fe42 	bl	8008b44 <_Balloc>
 8005ec0:	9008      	str	r0, [sp, #32]
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d100      	bne.n	8005ec8 <_strtod_l+0x6ac>
 8005ec6:	e70c      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005ec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eca:	300c      	adds	r0, #12
 8005ecc:	0019      	movs	r1, r3
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	310c      	adds	r1, #12
 8005ed2:	3202      	adds	r2, #2
 8005ed4:	0092      	lsls	r2, r2, #2
 8005ed6:	f001 fb0d 	bl	80074f4 <memcpy>
 8005eda:	ab1e      	add	r3, sp, #120	; 0x78
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	ab1d      	add	r3, sp, #116	; 0x74
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	0032      	movs	r2, r6
 8005ee4:	003b      	movs	r3, r7
 8005ee6:	9804      	ldr	r0, [sp, #16]
 8005ee8:	9610      	str	r6, [sp, #64]	; 0x40
 8005eea:	9711      	str	r7, [sp, #68]	; 0x44
 8005eec:	f003 fa18 	bl	8009320 <__d2b>
 8005ef0:	901c      	str	r0, [sp, #112]	; 0x70
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d100      	bne.n	8005ef8 <_strtod_l+0x6dc>
 8005ef6:	e6f4      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005ef8:	2101      	movs	r1, #1
 8005efa:	9804      	ldr	r0, [sp, #16]
 8005efc:	f002 ff62 	bl	8008dc4 <__i2b>
 8005f00:	9006      	str	r0, [sp, #24]
 8005f02:	2800      	cmp	r0, #0
 8005f04:	d100      	bne.n	8005f08 <_strtod_l+0x6ec>
 8005f06:	e6ec      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005f08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f0c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005f0e:	1ad4      	subs	r4, r2, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	db01      	blt.n	8005f18 <_strtod_l+0x6fc>
 8005f14:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005f16:	195d      	adds	r5, r3, r5
 8005f18:	9907      	ldr	r1, [sp, #28]
 8005f1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005f1c:	1a5b      	subs	r3, r3, r1
 8005f1e:	2136      	movs	r1, #54	; 0x36
 8005f20:	189b      	adds	r3, r3, r2
 8005f22:	1a8a      	subs	r2, r1, r2
 8005f24:	4985      	ldr	r1, [pc, #532]	; (800613c <_strtod_l+0x920>)
 8005f26:	2001      	movs	r0, #1
 8005f28:	468c      	mov	ip, r1
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	9114      	str	r1, [sp, #80]	; 0x50
 8005f30:	9012      	str	r0, [sp, #72]	; 0x48
 8005f32:	4563      	cmp	r3, ip
 8005f34:	da07      	bge.n	8005f46 <_strtod_l+0x72a>
 8005f36:	4661      	mov	r1, ip
 8005f38:	1ac9      	subs	r1, r1, r3
 8005f3a:	1a52      	subs	r2, r2, r1
 8005f3c:	291f      	cmp	r1, #31
 8005f3e:	dd00      	ble.n	8005f42 <_strtod_l+0x726>
 8005f40:	e0b6      	b.n	80060b0 <_strtod_l+0x894>
 8005f42:	4088      	lsls	r0, r1
 8005f44:	9012      	str	r0, [sp, #72]	; 0x48
 8005f46:	18ab      	adds	r3, r5, r2
 8005f48:	930c      	str	r3, [sp, #48]	; 0x30
 8005f4a:	18a4      	adds	r4, r4, r2
 8005f4c:	9b07      	ldr	r3, [sp, #28]
 8005f4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f50:	191c      	adds	r4, r3, r4
 8005f52:	002b      	movs	r3, r5
 8005f54:	4295      	cmp	r5, r2
 8005f56:	dd00      	ble.n	8005f5a <_strtod_l+0x73e>
 8005f58:	0013      	movs	r3, r2
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	dd00      	ble.n	8005f60 <_strtod_l+0x744>
 8005f5e:	0023      	movs	r3, r4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dd04      	ble.n	8005f6e <_strtod_l+0x752>
 8005f64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f66:	1ae4      	subs	r4, r4, r3
 8005f68:	1ad2      	subs	r2, r2, r3
 8005f6a:	920c      	str	r2, [sp, #48]	; 0x30
 8005f6c:	1aed      	subs	r5, r5, r3
 8005f6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dd17      	ble.n	8005fa4 <_strtod_l+0x788>
 8005f74:	001a      	movs	r2, r3
 8005f76:	9906      	ldr	r1, [sp, #24]
 8005f78:	9804      	ldr	r0, [sp, #16]
 8005f7a:	f002 ffeb 	bl	8008f54 <__pow5mult>
 8005f7e:	9006      	str	r0, [sp, #24]
 8005f80:	2800      	cmp	r0, #0
 8005f82:	d100      	bne.n	8005f86 <_strtod_l+0x76a>
 8005f84:	e6ad      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005f86:	0001      	movs	r1, r0
 8005f88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005f8a:	9804      	ldr	r0, [sp, #16]
 8005f8c:	f002 ff32 	bl	8008df4 <__multiply>
 8005f90:	900e      	str	r0, [sp, #56]	; 0x38
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d100      	bne.n	8005f98 <_strtod_l+0x77c>
 8005f96:	e6a4      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005f98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005f9a:	9804      	ldr	r0, [sp, #16]
 8005f9c:	f002 fe16 	bl	8008bcc <_Bfree>
 8005fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fa2:	931c      	str	r3, [sp, #112]	; 0x70
 8005fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dd00      	ble.n	8005fac <_strtod_l+0x790>
 8005faa:	e087      	b.n	80060bc <_strtod_l+0x8a0>
 8005fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dd08      	ble.n	8005fc4 <_strtod_l+0x7a8>
 8005fb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005fb4:	9908      	ldr	r1, [sp, #32]
 8005fb6:	9804      	ldr	r0, [sp, #16]
 8005fb8:	f002 ffcc 	bl	8008f54 <__pow5mult>
 8005fbc:	9008      	str	r0, [sp, #32]
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d100      	bne.n	8005fc4 <_strtod_l+0x7a8>
 8005fc2:	e68e      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	dd08      	ble.n	8005fda <_strtod_l+0x7be>
 8005fc8:	0022      	movs	r2, r4
 8005fca:	9908      	ldr	r1, [sp, #32]
 8005fcc:	9804      	ldr	r0, [sp, #16]
 8005fce:	f003 f81d 	bl	800900c <__lshift>
 8005fd2:	9008      	str	r0, [sp, #32]
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d100      	bne.n	8005fda <_strtod_l+0x7be>
 8005fd8:	e683      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005fda:	2d00      	cmp	r5, #0
 8005fdc:	dd08      	ble.n	8005ff0 <_strtod_l+0x7d4>
 8005fde:	002a      	movs	r2, r5
 8005fe0:	9906      	ldr	r1, [sp, #24]
 8005fe2:	9804      	ldr	r0, [sp, #16]
 8005fe4:	f003 f812 	bl	800900c <__lshift>
 8005fe8:	9006      	str	r0, [sp, #24]
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d100      	bne.n	8005ff0 <_strtod_l+0x7d4>
 8005fee:	e678      	b.n	8005ce2 <_strtod_l+0x4c6>
 8005ff0:	9a08      	ldr	r2, [sp, #32]
 8005ff2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ff4:	9804      	ldr	r0, [sp, #16]
 8005ff6:	f003 f893 	bl	8009120 <__mdiff>
 8005ffa:	9005      	str	r0, [sp, #20]
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d100      	bne.n	8006002 <_strtod_l+0x7e6>
 8006000:	e66f      	b.n	8005ce2 <_strtod_l+0x4c6>
 8006002:	2200      	movs	r2, #0
 8006004:	68c3      	ldr	r3, [r0, #12]
 8006006:	9906      	ldr	r1, [sp, #24]
 8006008:	60c2      	str	r2, [r0, #12]
 800600a:	930c      	str	r3, [sp, #48]	; 0x30
 800600c:	f003 f86c 	bl	80090e8 <__mcmp>
 8006010:	2800      	cmp	r0, #0
 8006012:	da5d      	bge.n	80060d0 <_strtod_l+0x8b4>
 8006014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006016:	4333      	orrs	r3, r6
 8006018:	d000      	beq.n	800601c <_strtod_l+0x800>
 800601a:	e088      	b.n	800612e <_strtod_l+0x912>
 800601c:	033b      	lsls	r3, r7, #12
 800601e:	d000      	beq.n	8006022 <_strtod_l+0x806>
 8006020:	e085      	b.n	800612e <_strtod_l+0x912>
 8006022:	22d6      	movs	r2, #214	; 0xd6
 8006024:	4b46      	ldr	r3, [pc, #280]	; (8006140 <_strtod_l+0x924>)
 8006026:	04d2      	lsls	r2, r2, #19
 8006028:	403b      	ands	r3, r7
 800602a:	4293      	cmp	r3, r2
 800602c:	d97f      	bls.n	800612e <_strtod_l+0x912>
 800602e:	9b05      	ldr	r3, [sp, #20]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <_strtod_l+0x822>
 8006036:	9b05      	ldr	r3, [sp, #20]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b01      	cmp	r3, #1
 800603c:	dd77      	ble.n	800612e <_strtod_l+0x912>
 800603e:	9905      	ldr	r1, [sp, #20]
 8006040:	2201      	movs	r2, #1
 8006042:	9804      	ldr	r0, [sp, #16]
 8006044:	f002 ffe2 	bl	800900c <__lshift>
 8006048:	9906      	ldr	r1, [sp, #24]
 800604a:	9005      	str	r0, [sp, #20]
 800604c:	f003 f84c 	bl	80090e8 <__mcmp>
 8006050:	2800      	cmp	r0, #0
 8006052:	dd6c      	ble.n	800612e <_strtod_l+0x912>
 8006054:	9907      	ldr	r1, [sp, #28]
 8006056:	003b      	movs	r3, r7
 8006058:	4a39      	ldr	r2, [pc, #228]	; (8006140 <_strtod_l+0x924>)
 800605a:	2900      	cmp	r1, #0
 800605c:	d100      	bne.n	8006060 <_strtod_l+0x844>
 800605e:	e094      	b.n	800618a <_strtod_l+0x96e>
 8006060:	0011      	movs	r1, r2
 8006062:	20d6      	movs	r0, #214	; 0xd6
 8006064:	4039      	ands	r1, r7
 8006066:	04c0      	lsls	r0, r0, #19
 8006068:	4281      	cmp	r1, r0
 800606a:	dd00      	ble.n	800606e <_strtod_l+0x852>
 800606c:	e08d      	b.n	800618a <_strtod_l+0x96e>
 800606e:	23dc      	movs	r3, #220	; 0xdc
 8006070:	049b      	lsls	r3, r3, #18
 8006072:	4299      	cmp	r1, r3
 8006074:	dc00      	bgt.n	8006078 <_strtod_l+0x85c>
 8006076:	e6a7      	b.n	8005dc8 <_strtod_l+0x5ac>
 8006078:	0030      	movs	r0, r6
 800607a:	0039      	movs	r1, r7
 800607c:	4b31      	ldr	r3, [pc, #196]	; (8006144 <_strtod_l+0x928>)
 800607e:	2200      	movs	r2, #0
 8006080:	f7fb fac6 	bl	8001610 <__aeabi_dmul>
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <_strtod_l+0x924>)
 8006086:	0006      	movs	r6, r0
 8006088:	000f      	movs	r7, r1
 800608a:	420b      	tst	r3, r1
 800608c:	d000      	beq.n	8006090 <_strtod_l+0x874>
 800608e:	e631      	b.n	8005cf4 <_strtod_l+0x4d8>
 8006090:	2322      	movs	r3, #34	; 0x22
 8006092:	9a04      	ldr	r2, [sp, #16]
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	e62d      	b.n	8005cf4 <_strtod_l+0x4d8>
 8006098:	234b      	movs	r3, #75	; 0x4b
 800609a:	1a9a      	subs	r2, r3, r2
 800609c:	3b4c      	subs	r3, #76	; 0x4c
 800609e:	4093      	lsls	r3, r2
 80060a0:	4019      	ands	r1, r3
 80060a2:	000f      	movs	r7, r1
 80060a4:	e6e3      	b.n	8005e6e <_strtod_l+0x652>
 80060a6:	2201      	movs	r2, #1
 80060a8:	4252      	negs	r2, r2
 80060aa:	409a      	lsls	r2, r3
 80060ac:	4016      	ands	r6, r2
 80060ae:	e6de      	b.n	8005e6e <_strtod_l+0x652>
 80060b0:	4925      	ldr	r1, [pc, #148]	; (8006148 <_strtod_l+0x92c>)
 80060b2:	1acb      	subs	r3, r1, r3
 80060b4:	0001      	movs	r1, r0
 80060b6:	4099      	lsls	r1, r3
 80060b8:	9114      	str	r1, [sp, #80]	; 0x50
 80060ba:	e743      	b.n	8005f44 <_strtod_l+0x728>
 80060bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80060c0:	9804      	ldr	r0, [sp, #16]
 80060c2:	f002 ffa3 	bl	800900c <__lshift>
 80060c6:	901c      	str	r0, [sp, #112]	; 0x70
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d000      	beq.n	80060ce <_strtod_l+0x8b2>
 80060cc:	e76e      	b.n	8005fac <_strtod_l+0x790>
 80060ce:	e608      	b.n	8005ce2 <_strtod_l+0x4c6>
 80060d0:	970e      	str	r7, [sp, #56]	; 0x38
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d177      	bne.n	80061c6 <_strtod_l+0x9aa>
 80060d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060d8:	033b      	lsls	r3, r7, #12
 80060da:	0b1b      	lsrs	r3, r3, #12
 80060dc:	2a00      	cmp	r2, #0
 80060de:	d039      	beq.n	8006154 <_strtod_l+0x938>
 80060e0:	4a1a      	ldr	r2, [pc, #104]	; (800614c <_strtod_l+0x930>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d139      	bne.n	800615a <_strtod_l+0x93e>
 80060e6:	2101      	movs	r1, #1
 80060e8:	9b07      	ldr	r3, [sp, #28]
 80060ea:	4249      	negs	r1, r1
 80060ec:	0032      	movs	r2, r6
 80060ee:	0008      	movs	r0, r1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00b      	beq.n	800610c <_strtod_l+0x8f0>
 80060f4:	24d4      	movs	r4, #212	; 0xd4
 80060f6:	4b12      	ldr	r3, [pc, #72]	; (8006140 <_strtod_l+0x924>)
 80060f8:	0008      	movs	r0, r1
 80060fa:	403b      	ands	r3, r7
 80060fc:	04e4      	lsls	r4, r4, #19
 80060fe:	42a3      	cmp	r3, r4
 8006100:	d804      	bhi.n	800610c <_strtod_l+0x8f0>
 8006102:	306c      	adds	r0, #108	; 0x6c
 8006104:	0d1b      	lsrs	r3, r3, #20
 8006106:	1ac3      	subs	r3, r0, r3
 8006108:	4099      	lsls	r1, r3
 800610a:	0008      	movs	r0, r1
 800610c:	4282      	cmp	r2, r0
 800610e:	d124      	bne.n	800615a <_strtod_l+0x93e>
 8006110:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <_strtod_l+0x934>)
 8006112:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006114:	4299      	cmp	r1, r3
 8006116:	d102      	bne.n	800611e <_strtod_l+0x902>
 8006118:	3201      	adds	r2, #1
 800611a:	d100      	bne.n	800611e <_strtod_l+0x902>
 800611c:	e5e1      	b.n	8005ce2 <_strtod_l+0x4c6>
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <_strtod_l+0x924>)
 8006120:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006122:	2600      	movs	r6, #0
 8006124:	401a      	ands	r2, r3
 8006126:	0013      	movs	r3, r2
 8006128:	2280      	movs	r2, #128	; 0x80
 800612a:	0352      	lsls	r2, r2, #13
 800612c:	189f      	adds	r7, r3, r2
 800612e:	9b07      	ldr	r3, [sp, #28]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1a1      	bne.n	8006078 <_strtod_l+0x85c>
 8006134:	e5de      	b.n	8005cf4 <_strtod_l+0x4d8>
 8006136:	46c0      	nop			; (mov r8, r8)
 8006138:	0800a2b8 	.word	0x0800a2b8
 800613c:	fffffc02 	.word	0xfffffc02
 8006140:	7ff00000 	.word	0x7ff00000
 8006144:	39500000 	.word	0x39500000
 8006148:	fffffbe2 	.word	0xfffffbe2
 800614c:	000fffff 	.word	0x000fffff
 8006150:	7fefffff 	.word	0x7fefffff
 8006154:	4333      	orrs	r3, r6
 8006156:	d100      	bne.n	800615a <_strtod_l+0x93e>
 8006158:	e77c      	b.n	8006054 <_strtod_l+0x838>
 800615a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01d      	beq.n	800619c <_strtod_l+0x980>
 8006160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006162:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006164:	4213      	tst	r3, r2
 8006166:	d0e2      	beq.n	800612e <_strtod_l+0x912>
 8006168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800616a:	0030      	movs	r0, r6
 800616c:	0039      	movs	r1, r7
 800616e:	9a07      	ldr	r2, [sp, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d017      	beq.n	80061a4 <_strtod_l+0x988>
 8006174:	f7ff fb3a 	bl	80057ec <sulp>
 8006178:	0002      	movs	r2, r0
 800617a:	000b      	movs	r3, r1
 800617c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800617e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006180:	f7fa faec 	bl	800075c <__aeabi_dadd>
 8006184:	0006      	movs	r6, r0
 8006186:	000f      	movs	r7, r1
 8006188:	e7d1      	b.n	800612e <_strtod_l+0x912>
 800618a:	2601      	movs	r6, #1
 800618c:	4013      	ands	r3, r2
 800618e:	4a98      	ldr	r2, [pc, #608]	; (80063f0 <_strtod_l+0xbd4>)
 8006190:	4276      	negs	r6, r6
 8006192:	189b      	adds	r3, r3, r2
 8006194:	4a97      	ldr	r2, [pc, #604]	; (80063f4 <_strtod_l+0xbd8>)
 8006196:	431a      	orrs	r2, r3
 8006198:	0017      	movs	r7, r2
 800619a:	e7c8      	b.n	800612e <_strtod_l+0x912>
 800619c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800619e:	4233      	tst	r3, r6
 80061a0:	d0c5      	beq.n	800612e <_strtod_l+0x912>
 80061a2:	e7e1      	b.n	8006168 <_strtod_l+0x94c>
 80061a4:	f7ff fb22 	bl	80057ec <sulp>
 80061a8:	0002      	movs	r2, r0
 80061aa:	000b      	movs	r3, r1
 80061ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80061ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80061b0:	f7fb fcf0 	bl	8001b94 <__aeabi_dsub>
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	0006      	movs	r6, r0
 80061ba:	000f      	movs	r7, r1
 80061bc:	f7fa f944 	bl	8000448 <__aeabi_dcmpeq>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	d0b4      	beq.n	800612e <_strtod_l+0x912>
 80061c4:	e600      	b.n	8005dc8 <_strtod_l+0x5ac>
 80061c6:	9906      	ldr	r1, [sp, #24]
 80061c8:	9805      	ldr	r0, [sp, #20]
 80061ca:	f003 f909 	bl	80093e0 <__ratio>
 80061ce:	2380      	movs	r3, #128	; 0x80
 80061d0:	2200      	movs	r2, #0
 80061d2:	05db      	lsls	r3, r3, #23
 80061d4:	0004      	movs	r4, r0
 80061d6:	000d      	movs	r5, r1
 80061d8:	f7fa f946 	bl	8000468 <__aeabi_dcmple>
 80061dc:	2800      	cmp	r0, #0
 80061de:	d06d      	beq.n	80062bc <_strtod_l+0xaa0>
 80061e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d000      	beq.n	80061e8 <_strtod_l+0x9cc>
 80061e6:	e07e      	b.n	80062e6 <_strtod_l+0xaca>
 80061e8:	2e00      	cmp	r6, #0
 80061ea:	d158      	bne.n	800629e <_strtod_l+0xa82>
 80061ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061ee:	031b      	lsls	r3, r3, #12
 80061f0:	d000      	beq.n	80061f4 <_strtod_l+0x9d8>
 80061f2:	e07f      	b.n	80062f4 <_strtod_l+0xad8>
 80061f4:	2200      	movs	r2, #0
 80061f6:	0020      	movs	r0, r4
 80061f8:	0029      	movs	r1, r5
 80061fa:	4b7f      	ldr	r3, [pc, #508]	; (80063f8 <_strtod_l+0xbdc>)
 80061fc:	f7fa f92a 	bl	8000454 <__aeabi_dcmplt>
 8006200:	2800      	cmp	r0, #0
 8006202:	d158      	bne.n	80062b6 <_strtod_l+0xa9a>
 8006204:	0020      	movs	r0, r4
 8006206:	0029      	movs	r1, r5
 8006208:	2200      	movs	r2, #0
 800620a:	4b7c      	ldr	r3, [pc, #496]	; (80063fc <_strtod_l+0xbe0>)
 800620c:	f7fb fa00 	bl	8001610 <__aeabi_dmul>
 8006210:	0004      	movs	r4, r0
 8006212:	000d      	movs	r5, r1
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	940a      	str	r4, [sp, #40]	; 0x28
 800621a:	18eb      	adds	r3, r5, r3
 800621c:	930b      	str	r3, [sp, #44]	; 0x2c
 800621e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006222:	9212      	str	r2, [sp, #72]	; 0x48
 8006224:	9313      	str	r3, [sp, #76]	; 0x4c
 8006226:	4a76      	ldr	r2, [pc, #472]	; (8006400 <_strtod_l+0xbe4>)
 8006228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800622a:	4013      	ands	r3, r2
 800622c:	9314      	str	r3, [sp, #80]	; 0x50
 800622e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006230:	4b74      	ldr	r3, [pc, #464]	; (8006404 <_strtod_l+0xbe8>)
 8006232:	429a      	cmp	r2, r3
 8006234:	d000      	beq.n	8006238 <_strtod_l+0xa1c>
 8006236:	e091      	b.n	800635c <_strtod_l+0xb40>
 8006238:	4a73      	ldr	r2, [pc, #460]	; (8006408 <_strtod_l+0xbec>)
 800623a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800623c:	4694      	mov	ip, r2
 800623e:	4463      	add	r3, ip
 8006240:	001f      	movs	r7, r3
 8006242:	0030      	movs	r0, r6
 8006244:	0019      	movs	r1, r3
 8006246:	f003 f803 	bl	8009250 <__ulp>
 800624a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800624c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624e:	f7fb f9df 	bl	8001610 <__aeabi_dmul>
 8006252:	0032      	movs	r2, r6
 8006254:	003b      	movs	r3, r7
 8006256:	f7fa fa81 	bl	800075c <__aeabi_dadd>
 800625a:	4a69      	ldr	r2, [pc, #420]	; (8006400 <_strtod_l+0xbe4>)
 800625c:	4b6b      	ldr	r3, [pc, #428]	; (800640c <_strtod_l+0xbf0>)
 800625e:	0006      	movs	r6, r0
 8006260:	400a      	ands	r2, r1
 8006262:	429a      	cmp	r2, r3
 8006264:	d949      	bls.n	80062fa <_strtod_l+0xade>
 8006266:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006268:	4b69      	ldr	r3, [pc, #420]	; (8006410 <_strtod_l+0xbf4>)
 800626a:	429a      	cmp	r2, r3
 800626c:	d103      	bne.n	8006276 <_strtod_l+0xa5a>
 800626e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006270:	3301      	adds	r3, #1
 8006272:	d100      	bne.n	8006276 <_strtod_l+0xa5a>
 8006274:	e535      	b.n	8005ce2 <_strtod_l+0x4c6>
 8006276:	2601      	movs	r6, #1
 8006278:	4f65      	ldr	r7, [pc, #404]	; (8006410 <_strtod_l+0xbf4>)
 800627a:	4276      	negs	r6, r6
 800627c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800627e:	9804      	ldr	r0, [sp, #16]
 8006280:	f002 fca4 	bl	8008bcc <_Bfree>
 8006284:	9908      	ldr	r1, [sp, #32]
 8006286:	9804      	ldr	r0, [sp, #16]
 8006288:	f002 fca0 	bl	8008bcc <_Bfree>
 800628c:	9906      	ldr	r1, [sp, #24]
 800628e:	9804      	ldr	r0, [sp, #16]
 8006290:	f002 fc9c 	bl	8008bcc <_Bfree>
 8006294:	9905      	ldr	r1, [sp, #20]
 8006296:	9804      	ldr	r0, [sp, #16]
 8006298:	f002 fc98 	bl	8008bcc <_Bfree>
 800629c:	e60b      	b.n	8005eb6 <_strtod_l+0x69a>
 800629e:	2e01      	cmp	r6, #1
 80062a0:	d103      	bne.n	80062aa <_strtod_l+0xa8e>
 80062a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d100      	bne.n	80062aa <_strtod_l+0xa8e>
 80062a8:	e58e      	b.n	8005dc8 <_strtod_l+0x5ac>
 80062aa:	2300      	movs	r3, #0
 80062ac:	4c59      	ldr	r4, [pc, #356]	; (8006414 <_strtod_l+0xbf8>)
 80062ae:	930a      	str	r3, [sp, #40]	; 0x28
 80062b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80062b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80062b4:	e01c      	b.n	80062f0 <_strtod_l+0xad4>
 80062b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80062b8:	4d50      	ldr	r5, [pc, #320]	; (80063fc <_strtod_l+0xbe0>)
 80062ba:	e7ab      	b.n	8006214 <_strtod_l+0x9f8>
 80062bc:	2200      	movs	r2, #0
 80062be:	0020      	movs	r0, r4
 80062c0:	0029      	movs	r1, r5
 80062c2:	4b4e      	ldr	r3, [pc, #312]	; (80063fc <_strtod_l+0xbe0>)
 80062c4:	f7fb f9a4 	bl	8001610 <__aeabi_dmul>
 80062c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062ca:	0004      	movs	r4, r0
 80062cc:	000b      	movs	r3, r1
 80062ce:	000d      	movs	r5, r1
 80062d0:	2a00      	cmp	r2, #0
 80062d2:	d104      	bne.n	80062de <_strtod_l+0xac2>
 80062d4:	2280      	movs	r2, #128	; 0x80
 80062d6:	0612      	lsls	r2, r2, #24
 80062d8:	900a      	str	r0, [sp, #40]	; 0x28
 80062da:	188b      	adds	r3, r1, r2
 80062dc:	e79e      	b.n	800621c <_strtod_l+0xa00>
 80062de:	0002      	movs	r2, r0
 80062e0:	920a      	str	r2, [sp, #40]	; 0x28
 80062e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062e4:	e79b      	b.n	800621e <_strtod_l+0xa02>
 80062e6:	2300      	movs	r3, #0
 80062e8:	4c43      	ldr	r4, [pc, #268]	; (80063f8 <_strtod_l+0xbdc>)
 80062ea:	930a      	str	r3, [sp, #40]	; 0x28
 80062ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80062ee:	2400      	movs	r4, #0
 80062f0:	4d41      	ldr	r5, [pc, #260]	; (80063f8 <_strtod_l+0xbdc>)
 80062f2:	e794      	b.n	800621e <_strtod_l+0xa02>
 80062f4:	2300      	movs	r3, #0
 80062f6:	4c47      	ldr	r4, [pc, #284]	; (8006414 <_strtod_l+0xbf8>)
 80062f8:	e7f7      	b.n	80062ea <_strtod_l+0xace>
 80062fa:	23d4      	movs	r3, #212	; 0xd4
 80062fc:	049b      	lsls	r3, r3, #18
 80062fe:	18cf      	adds	r7, r1, r3
 8006300:	9b07      	ldr	r3, [sp, #28]
 8006302:	970e      	str	r7, [sp, #56]	; 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1b9      	bne.n	800627c <_strtod_l+0xa60>
 8006308:	4b3d      	ldr	r3, [pc, #244]	; (8006400 <_strtod_l+0xbe4>)
 800630a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800630c:	403b      	ands	r3, r7
 800630e:	429a      	cmp	r2, r3
 8006310:	d1b4      	bne.n	800627c <_strtod_l+0xa60>
 8006312:	0020      	movs	r0, r4
 8006314:	0029      	movs	r1, r5
 8006316:	f7fa f903 	bl	8000520 <__aeabi_d2lz>
 800631a:	f7fa f93d 	bl	8000598 <__aeabi_l2d>
 800631e:	0002      	movs	r2, r0
 8006320:	000b      	movs	r3, r1
 8006322:	0020      	movs	r0, r4
 8006324:	0029      	movs	r1, r5
 8006326:	f7fb fc35 	bl	8001b94 <__aeabi_dsub>
 800632a:	033b      	lsls	r3, r7, #12
 800632c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800632e:	0b1b      	lsrs	r3, r3, #12
 8006330:	4333      	orrs	r3, r6
 8006332:	4313      	orrs	r3, r2
 8006334:	0004      	movs	r4, r0
 8006336:	000d      	movs	r5, r1
 8006338:	4a37      	ldr	r2, [pc, #220]	; (8006418 <_strtod_l+0xbfc>)
 800633a:	2b00      	cmp	r3, #0
 800633c:	d054      	beq.n	80063e8 <_strtod_l+0xbcc>
 800633e:	4b37      	ldr	r3, [pc, #220]	; (800641c <_strtod_l+0xc00>)
 8006340:	f7fa f888 	bl	8000454 <__aeabi_dcmplt>
 8006344:	2800      	cmp	r0, #0
 8006346:	d000      	beq.n	800634a <_strtod_l+0xb2e>
 8006348:	e4d4      	b.n	8005cf4 <_strtod_l+0x4d8>
 800634a:	0020      	movs	r0, r4
 800634c:	0029      	movs	r1, r5
 800634e:	4a34      	ldr	r2, [pc, #208]	; (8006420 <_strtod_l+0xc04>)
 8006350:	4b2a      	ldr	r3, [pc, #168]	; (80063fc <_strtod_l+0xbe0>)
 8006352:	f7fa f893 	bl	800047c <__aeabi_dcmpgt>
 8006356:	2800      	cmp	r0, #0
 8006358:	d090      	beq.n	800627c <_strtod_l+0xa60>
 800635a:	e4cb      	b.n	8005cf4 <_strtod_l+0x4d8>
 800635c:	9b07      	ldr	r3, [sp, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d02b      	beq.n	80063ba <_strtod_l+0xb9e>
 8006362:	23d4      	movs	r3, #212	; 0xd4
 8006364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006366:	04db      	lsls	r3, r3, #19
 8006368:	429a      	cmp	r2, r3
 800636a:	d826      	bhi.n	80063ba <_strtod_l+0xb9e>
 800636c:	0020      	movs	r0, r4
 800636e:	0029      	movs	r1, r5
 8006370:	4a2c      	ldr	r2, [pc, #176]	; (8006424 <_strtod_l+0xc08>)
 8006372:	4b2d      	ldr	r3, [pc, #180]	; (8006428 <_strtod_l+0xc0c>)
 8006374:	f7fa f878 	bl	8000468 <__aeabi_dcmple>
 8006378:	2800      	cmp	r0, #0
 800637a:	d017      	beq.n	80063ac <_strtod_l+0xb90>
 800637c:	0020      	movs	r0, r4
 800637e:	0029      	movs	r1, r5
 8006380:	f7fa f8b0 	bl	80004e4 <__aeabi_d2uiz>
 8006384:	2800      	cmp	r0, #0
 8006386:	d100      	bne.n	800638a <_strtod_l+0xb6e>
 8006388:	3001      	adds	r0, #1
 800638a:	f7fc f809 	bl	80023a0 <__aeabi_ui2d>
 800638e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006390:	0004      	movs	r4, r0
 8006392:	000b      	movs	r3, r1
 8006394:	000d      	movs	r5, r1
 8006396:	2a00      	cmp	r2, #0
 8006398:	d122      	bne.n	80063e0 <_strtod_l+0xbc4>
 800639a:	2280      	movs	r2, #128	; 0x80
 800639c:	0612      	lsls	r2, r2, #24
 800639e:	188b      	adds	r3, r1, r2
 80063a0:	9016      	str	r0, [sp, #88]	; 0x58
 80063a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80063a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80063a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063a8:	9212      	str	r2, [sp, #72]	; 0x48
 80063aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80063ac:	22d6      	movs	r2, #214	; 0xd6
 80063ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063b0:	04d2      	lsls	r2, r2, #19
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80063ba:	9810      	ldr	r0, [sp, #64]	; 0x40
 80063bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80063be:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80063c0:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80063c2:	f002 ff45 	bl	8009250 <__ulp>
 80063c6:	0002      	movs	r2, r0
 80063c8:	000b      	movs	r3, r1
 80063ca:	0030      	movs	r0, r6
 80063cc:	0039      	movs	r1, r7
 80063ce:	f7fb f91f 	bl	8001610 <__aeabi_dmul>
 80063d2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063d6:	f7fa f9c1 	bl	800075c <__aeabi_dadd>
 80063da:	0006      	movs	r6, r0
 80063dc:	000f      	movs	r7, r1
 80063de:	e78f      	b.n	8006300 <_strtod_l+0xae4>
 80063e0:	0002      	movs	r2, r0
 80063e2:	9216      	str	r2, [sp, #88]	; 0x58
 80063e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80063e6:	e7dd      	b.n	80063a4 <_strtod_l+0xb88>
 80063e8:	4b10      	ldr	r3, [pc, #64]	; (800642c <_strtod_l+0xc10>)
 80063ea:	f7fa f833 	bl	8000454 <__aeabi_dcmplt>
 80063ee:	e7b2      	b.n	8006356 <_strtod_l+0xb3a>
 80063f0:	fff00000 	.word	0xfff00000
 80063f4:	000fffff 	.word	0x000fffff
 80063f8:	3ff00000 	.word	0x3ff00000
 80063fc:	3fe00000 	.word	0x3fe00000
 8006400:	7ff00000 	.word	0x7ff00000
 8006404:	7fe00000 	.word	0x7fe00000
 8006408:	fcb00000 	.word	0xfcb00000
 800640c:	7c9fffff 	.word	0x7c9fffff
 8006410:	7fefffff 	.word	0x7fefffff
 8006414:	bff00000 	.word	0xbff00000
 8006418:	94a03595 	.word	0x94a03595
 800641c:	3fdfffff 	.word	0x3fdfffff
 8006420:	35afe535 	.word	0x35afe535
 8006424:	ffc00000 	.word	0xffc00000
 8006428:	41dfffff 	.word	0x41dfffff
 800642c:	3fcfffff 	.word	0x3fcfffff

08006430 <_strtod_r>:
 8006430:	b510      	push	{r4, lr}
 8006432:	4b02      	ldr	r3, [pc, #8]	; (800643c <_strtod_r+0xc>)
 8006434:	f7ff f9f2 	bl	800581c <_strtod_l>
 8006438:	bd10      	pop	{r4, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	2000001c 	.word	0x2000001c

08006440 <__cvt>:
 8006440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006442:	001e      	movs	r6, r3
 8006444:	2300      	movs	r3, #0
 8006446:	0014      	movs	r4, r2
 8006448:	b08b      	sub	sp, #44	; 0x2c
 800644a:	429e      	cmp	r6, r3
 800644c:	da04      	bge.n	8006458 <__cvt+0x18>
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	0609      	lsls	r1, r1, #24
 8006452:	1873      	adds	r3, r6, r1
 8006454:	001e      	movs	r6, r3
 8006456:	232d      	movs	r3, #45	; 0x2d
 8006458:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800645a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800645c:	7013      	strb	r3, [r2, #0]
 800645e:	2320      	movs	r3, #32
 8006460:	2203      	movs	r2, #3
 8006462:	439f      	bics	r7, r3
 8006464:	2f46      	cmp	r7, #70	; 0x46
 8006466:	d007      	beq.n	8006478 <__cvt+0x38>
 8006468:	003b      	movs	r3, r7
 800646a:	3b45      	subs	r3, #69	; 0x45
 800646c:	4259      	negs	r1, r3
 800646e:	414b      	adcs	r3, r1
 8006470:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006472:	3a01      	subs	r2, #1
 8006474:	18cb      	adds	r3, r1, r3
 8006476:	9310      	str	r3, [sp, #64]	; 0x40
 8006478:	ab09      	add	r3, sp, #36	; 0x24
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	ab08      	add	r3, sp, #32
 800647e:	9303      	str	r3, [sp, #12]
 8006480:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006482:	9200      	str	r2, [sp, #0]
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006488:	0022      	movs	r2, r4
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	0033      	movs	r3, r6
 800648e:	f001 f8d5 	bl	800763c <_dtoa_r>
 8006492:	0005      	movs	r5, r0
 8006494:	2f47      	cmp	r7, #71	; 0x47
 8006496:	d102      	bne.n	800649e <__cvt+0x5e>
 8006498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800649a:	07db      	lsls	r3, r3, #31
 800649c:	d528      	bpl.n	80064f0 <__cvt+0xb0>
 800649e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064a0:	18eb      	adds	r3, r5, r3
 80064a2:	9307      	str	r3, [sp, #28]
 80064a4:	2f46      	cmp	r7, #70	; 0x46
 80064a6:	d114      	bne.n	80064d2 <__cvt+0x92>
 80064a8:	782b      	ldrb	r3, [r5, #0]
 80064aa:	2b30      	cmp	r3, #48	; 0x30
 80064ac:	d10c      	bne.n	80064c8 <__cvt+0x88>
 80064ae:	2200      	movs	r2, #0
 80064b0:	2300      	movs	r3, #0
 80064b2:	0020      	movs	r0, r4
 80064b4:	0031      	movs	r1, r6
 80064b6:	f7f9 ffc7 	bl	8000448 <__aeabi_dcmpeq>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	d104      	bne.n	80064c8 <__cvt+0x88>
 80064be:	2301      	movs	r3, #1
 80064c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064ca:	9a07      	ldr	r2, [sp, #28]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	18d3      	adds	r3, r2, r3
 80064d0:	9307      	str	r3, [sp, #28]
 80064d2:	2200      	movs	r2, #0
 80064d4:	2300      	movs	r3, #0
 80064d6:	0020      	movs	r0, r4
 80064d8:	0031      	movs	r1, r6
 80064da:	f7f9 ffb5 	bl	8000448 <__aeabi_dcmpeq>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d001      	beq.n	80064e6 <__cvt+0xa6>
 80064e2:	9b07      	ldr	r3, [sp, #28]
 80064e4:	9309      	str	r3, [sp, #36]	; 0x24
 80064e6:	2230      	movs	r2, #48	; 0x30
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	9907      	ldr	r1, [sp, #28]
 80064ec:	428b      	cmp	r3, r1
 80064ee:	d306      	bcc.n	80064fe <__cvt+0xbe>
 80064f0:	0028      	movs	r0, r5
 80064f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80064f6:	1b5b      	subs	r3, r3, r5
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	b00b      	add	sp, #44	; 0x2c
 80064fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	9109      	str	r1, [sp, #36]	; 0x24
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e7f0      	b.n	80064e8 <__cvt+0xa8>

08006506 <__exponent>:
 8006506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006508:	1c83      	adds	r3, r0, #2
 800650a:	b087      	sub	sp, #28
 800650c:	9303      	str	r3, [sp, #12]
 800650e:	0005      	movs	r5, r0
 8006510:	000c      	movs	r4, r1
 8006512:	232b      	movs	r3, #43	; 0x2b
 8006514:	7002      	strb	r2, [r0, #0]
 8006516:	2900      	cmp	r1, #0
 8006518:	da01      	bge.n	800651e <__exponent+0x18>
 800651a:	424c      	negs	r4, r1
 800651c:	3302      	adds	r3, #2
 800651e:	706b      	strb	r3, [r5, #1]
 8006520:	2c09      	cmp	r4, #9
 8006522:	dd2f      	ble.n	8006584 <__exponent+0x7e>
 8006524:	270a      	movs	r7, #10
 8006526:	ab04      	add	r3, sp, #16
 8006528:	1dde      	adds	r6, r3, #7
 800652a:	0020      	movs	r0, r4
 800652c:	0039      	movs	r1, r7
 800652e:	9601      	str	r6, [sp, #4]
 8006530:	f7f9 ff74 	bl	800041c <__aeabi_idivmod>
 8006534:	3e01      	subs	r6, #1
 8006536:	3130      	adds	r1, #48	; 0x30
 8006538:	0020      	movs	r0, r4
 800653a:	7031      	strb	r1, [r6, #0]
 800653c:	0039      	movs	r1, r7
 800653e:	9402      	str	r4, [sp, #8]
 8006540:	f7f9 fe86 	bl	8000250 <__divsi3>
 8006544:	9b02      	ldr	r3, [sp, #8]
 8006546:	0004      	movs	r4, r0
 8006548:	2b63      	cmp	r3, #99	; 0x63
 800654a:	dcee      	bgt.n	800652a <__exponent+0x24>
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	3430      	adds	r4, #48	; 0x30
 8006550:	1e9a      	subs	r2, r3, #2
 8006552:	0013      	movs	r3, r2
 8006554:	9903      	ldr	r1, [sp, #12]
 8006556:	7014      	strb	r4, [r2, #0]
 8006558:	a804      	add	r0, sp, #16
 800655a:	3007      	adds	r0, #7
 800655c:	4298      	cmp	r0, r3
 800655e:	d80c      	bhi.n	800657a <__exponent+0x74>
 8006560:	2300      	movs	r3, #0
 8006562:	4282      	cmp	r2, r0
 8006564:	d804      	bhi.n	8006570 <__exponent+0x6a>
 8006566:	aa04      	add	r2, sp, #16
 8006568:	3309      	adds	r3, #9
 800656a:	189b      	adds	r3, r3, r2
 800656c:	9a01      	ldr	r2, [sp, #4]
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	9a03      	ldr	r2, [sp, #12]
 8006572:	18d3      	adds	r3, r2, r3
 8006574:	1b58      	subs	r0, r3, r5
 8006576:	b007      	add	sp, #28
 8006578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800657a:	7818      	ldrb	r0, [r3, #0]
 800657c:	3301      	adds	r3, #1
 800657e:	7008      	strb	r0, [r1, #0]
 8006580:	3101      	adds	r1, #1
 8006582:	e7e9      	b.n	8006558 <__exponent+0x52>
 8006584:	2330      	movs	r3, #48	; 0x30
 8006586:	3430      	adds	r4, #48	; 0x30
 8006588:	70ab      	strb	r3, [r5, #2]
 800658a:	70ec      	strb	r4, [r5, #3]
 800658c:	1d2b      	adds	r3, r5, #4
 800658e:	e7f1      	b.n	8006574 <__exponent+0x6e>

08006590 <_printf_float>:
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	b095      	sub	sp, #84	; 0x54
 8006594:	000c      	movs	r4, r1
 8006596:	9208      	str	r2, [sp, #32]
 8006598:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800659a:	9309      	str	r3, [sp, #36]	; 0x24
 800659c:	0007      	movs	r7, r0
 800659e:	f000 ff1f 	bl	80073e0 <_localeconv_r>
 80065a2:	6803      	ldr	r3, [r0, #0]
 80065a4:	0018      	movs	r0, r3
 80065a6:	930c      	str	r3, [sp, #48]	; 0x30
 80065a8:	f7f9 fdac 	bl	8000104 <strlen>
 80065ac:	2300      	movs	r3, #0
 80065ae:	9312      	str	r3, [sp, #72]	; 0x48
 80065b0:	7e23      	ldrb	r3, [r4, #24]
 80065b2:	2207      	movs	r2, #7
 80065b4:	930a      	str	r3, [sp, #40]	; 0x28
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	900d      	str	r0, [sp, #52]	; 0x34
 80065ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80065bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	05c9      	lsls	r1, r1, #23
 80065c2:	d547      	bpl.n	8006654 <_printf_float+0xc4>
 80065c4:	189b      	adds	r3, r3, r2
 80065c6:	4393      	bics	r3, r2
 80065c8:	001a      	movs	r2, r3
 80065ca:	3208      	adds	r2, #8
 80065cc:	602a      	str	r2, [r5, #0]
 80065ce:	681e      	ldr	r6, [r3, #0]
 80065d0:	685d      	ldr	r5, [r3, #4]
 80065d2:	0032      	movs	r2, r6
 80065d4:	002b      	movs	r3, r5
 80065d6:	64a2      	str	r2, [r4, #72]	; 0x48
 80065d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80065da:	2201      	movs	r2, #1
 80065dc:	006b      	lsls	r3, r5, #1
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	930e      	str	r3, [sp, #56]	; 0x38
 80065e2:	0030      	movs	r0, r6
 80065e4:	4bab      	ldr	r3, [pc, #684]	; (8006894 <_printf_float+0x304>)
 80065e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80065e8:	4252      	negs	r2, r2
 80065ea:	f7fb fe55 	bl	8002298 <__aeabi_dcmpun>
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d132      	bne.n	8006658 <_printf_float+0xc8>
 80065f2:	2201      	movs	r2, #1
 80065f4:	0030      	movs	r0, r6
 80065f6:	4ba7      	ldr	r3, [pc, #668]	; (8006894 <_printf_float+0x304>)
 80065f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80065fa:	4252      	negs	r2, r2
 80065fc:	f7f9 ff34 	bl	8000468 <__aeabi_dcmple>
 8006600:	2800      	cmp	r0, #0
 8006602:	d129      	bne.n	8006658 <_printf_float+0xc8>
 8006604:	2200      	movs	r2, #0
 8006606:	2300      	movs	r3, #0
 8006608:	0030      	movs	r0, r6
 800660a:	0029      	movs	r1, r5
 800660c:	f7f9 ff22 	bl	8000454 <__aeabi_dcmplt>
 8006610:	2800      	cmp	r0, #0
 8006612:	d003      	beq.n	800661c <_printf_float+0x8c>
 8006614:	0023      	movs	r3, r4
 8006616:	222d      	movs	r2, #45	; 0x2d
 8006618:	3343      	adds	r3, #67	; 0x43
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800661e:	4d9e      	ldr	r5, [pc, #632]	; (8006898 <_printf_float+0x308>)
 8006620:	2b47      	cmp	r3, #71	; 0x47
 8006622:	d900      	bls.n	8006626 <_printf_float+0x96>
 8006624:	4d9d      	ldr	r5, [pc, #628]	; (800689c <_printf_float+0x30c>)
 8006626:	2303      	movs	r3, #3
 8006628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800662a:	6123      	str	r3, [r4, #16]
 800662c:	3301      	adds	r3, #1
 800662e:	439a      	bics	r2, r3
 8006630:	2300      	movs	r3, #0
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	930b      	str	r3, [sp, #44]	; 0x2c
 8006636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006638:	0021      	movs	r1, r4
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	0038      	movs	r0, r7
 800663e:	9b08      	ldr	r3, [sp, #32]
 8006640:	aa13      	add	r2, sp, #76	; 0x4c
 8006642:	f000 f9fb 	bl	8006a3c <_printf_common>
 8006646:	3001      	adds	r0, #1
 8006648:	d000      	beq.n	800664c <_printf_float+0xbc>
 800664a:	e0a3      	b.n	8006794 <_printf_float+0x204>
 800664c:	2001      	movs	r0, #1
 800664e:	4240      	negs	r0, r0
 8006650:	b015      	add	sp, #84	; 0x54
 8006652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006654:	3307      	adds	r3, #7
 8006656:	e7b6      	b.n	80065c6 <_printf_float+0x36>
 8006658:	0032      	movs	r2, r6
 800665a:	002b      	movs	r3, r5
 800665c:	0030      	movs	r0, r6
 800665e:	0029      	movs	r1, r5
 8006660:	f7fb fe1a 	bl	8002298 <__aeabi_dcmpun>
 8006664:	2800      	cmp	r0, #0
 8006666:	d00b      	beq.n	8006680 <_printf_float+0xf0>
 8006668:	2d00      	cmp	r5, #0
 800666a:	da03      	bge.n	8006674 <_printf_float+0xe4>
 800666c:	0023      	movs	r3, r4
 800666e:	222d      	movs	r2, #45	; 0x2d
 8006670:	3343      	adds	r3, #67	; 0x43
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006676:	4d8a      	ldr	r5, [pc, #552]	; (80068a0 <_printf_float+0x310>)
 8006678:	2b47      	cmp	r3, #71	; 0x47
 800667a:	d9d4      	bls.n	8006626 <_printf_float+0x96>
 800667c:	4d89      	ldr	r5, [pc, #548]	; (80068a4 <_printf_float+0x314>)
 800667e:	e7d2      	b.n	8006626 <_printf_float+0x96>
 8006680:	2220      	movs	r2, #32
 8006682:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	4391      	bics	r1, r2
 8006688:	910e      	str	r1, [sp, #56]	; 0x38
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	d14a      	bne.n	8006724 <_printf_float+0x194>
 800668e:	3307      	adds	r3, #7
 8006690:	6063      	str	r3, [r4, #4]
 8006692:	2380      	movs	r3, #128	; 0x80
 8006694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4313      	orrs	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	9206      	str	r2, [sp, #24]
 800669e:	aa12      	add	r2, sp, #72	; 0x48
 80066a0:	9205      	str	r2, [sp, #20]
 80066a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	9204      	str	r2, [sp, #16]
 80066a8:	aa11      	add	r2, sp, #68	; 0x44
 80066aa:	9203      	str	r2, [sp, #12]
 80066ac:	2223      	movs	r2, #35	; 0x23
 80066ae:	a908      	add	r1, sp, #32
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	6863      	ldr	r3, [r4, #4]
 80066b4:	1852      	adds	r2, r2, r1
 80066b6:	9202      	str	r2, [sp, #8]
 80066b8:	9300      	str	r3, [sp, #0]
 80066ba:	0032      	movs	r2, r6
 80066bc:	002b      	movs	r3, r5
 80066be:	0038      	movs	r0, r7
 80066c0:	f7ff febe 	bl	8006440 <__cvt>
 80066c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066c6:	0005      	movs	r5, r0
 80066c8:	2b47      	cmp	r3, #71	; 0x47
 80066ca:	d109      	bne.n	80066e0 <_printf_float+0x150>
 80066cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066ce:	1cda      	adds	r2, r3, #3
 80066d0:	db02      	blt.n	80066d8 <_printf_float+0x148>
 80066d2:	6862      	ldr	r2, [r4, #4]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	dd49      	ble.n	800676c <_printf_float+0x1dc>
 80066d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066da:	3b02      	subs	r3, #2
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	930a      	str	r3, [sp, #40]	; 0x28
 80066e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066e4:	2b65      	cmp	r3, #101	; 0x65
 80066e6:	d824      	bhi.n	8006732 <_printf_float+0x1a2>
 80066e8:	0020      	movs	r0, r4
 80066ea:	001a      	movs	r2, r3
 80066ec:	3901      	subs	r1, #1
 80066ee:	3050      	adds	r0, #80	; 0x50
 80066f0:	9111      	str	r1, [sp, #68]	; 0x44
 80066f2:	f7ff ff08 	bl	8006506 <__exponent>
 80066f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80066fa:	1813      	adds	r3, r2, r0
 80066fc:	6123      	str	r3, [r4, #16]
 80066fe:	2a01      	cmp	r2, #1
 8006700:	dc02      	bgt.n	8006708 <_printf_float+0x178>
 8006702:	6822      	ldr	r2, [r4, #0]
 8006704:	07d2      	lsls	r2, r2, #31
 8006706:	d501      	bpl.n	800670c <_printf_float+0x17c>
 8006708:	3301      	adds	r3, #1
 800670a:	6123      	str	r3, [r4, #16]
 800670c:	2323      	movs	r3, #35	; 0x23
 800670e:	aa08      	add	r2, sp, #32
 8006710:	189b      	adds	r3, r3, r2
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d100      	bne.n	800671a <_printf_float+0x18a>
 8006718:	e78d      	b.n	8006636 <_printf_float+0xa6>
 800671a:	0023      	movs	r3, r4
 800671c:	222d      	movs	r2, #45	; 0x2d
 800671e:	3343      	adds	r3, #67	; 0x43
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	e788      	b.n	8006636 <_printf_float+0xa6>
 8006724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006726:	2a47      	cmp	r2, #71	; 0x47
 8006728:	d1b3      	bne.n	8006692 <_printf_float+0x102>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1b1      	bne.n	8006692 <_printf_float+0x102>
 800672e:	3301      	adds	r3, #1
 8006730:	e7ae      	b.n	8006690 <_printf_float+0x100>
 8006732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006734:	2b66      	cmp	r3, #102	; 0x66
 8006736:	d11b      	bne.n	8006770 <_printf_float+0x1e0>
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	2900      	cmp	r1, #0
 800673c:	dd09      	ble.n	8006752 <_printf_float+0x1c2>
 800673e:	6121      	str	r1, [r4, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <_printf_float+0x1ba>
 8006744:	6822      	ldr	r2, [r4, #0]
 8006746:	07d2      	lsls	r2, r2, #31
 8006748:	d50b      	bpl.n	8006762 <_printf_float+0x1d2>
 800674a:	3301      	adds	r3, #1
 800674c:	185b      	adds	r3, r3, r1
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	e007      	b.n	8006762 <_printf_float+0x1d2>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d103      	bne.n	800675e <_printf_float+0x1ce>
 8006756:	2201      	movs	r2, #1
 8006758:	6821      	ldr	r1, [r4, #0]
 800675a:	4211      	tst	r1, r2
 800675c:	d000      	beq.n	8006760 <_printf_float+0x1d0>
 800675e:	1c9a      	adds	r2, r3, #2
 8006760:	6122      	str	r2, [r4, #16]
 8006762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006764:	65a3      	str	r3, [r4, #88]	; 0x58
 8006766:	2300      	movs	r3, #0
 8006768:	930b      	str	r3, [sp, #44]	; 0x2c
 800676a:	e7cf      	b.n	800670c <_printf_float+0x17c>
 800676c:	2367      	movs	r3, #103	; 0x67
 800676e:	930a      	str	r3, [sp, #40]	; 0x28
 8006770:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006774:	4299      	cmp	r1, r3
 8006776:	db06      	blt.n	8006786 <_printf_float+0x1f6>
 8006778:	6823      	ldr	r3, [r4, #0]
 800677a:	6121      	str	r1, [r4, #16]
 800677c:	07db      	lsls	r3, r3, #31
 800677e:	d5f0      	bpl.n	8006762 <_printf_float+0x1d2>
 8006780:	3101      	adds	r1, #1
 8006782:	6121      	str	r1, [r4, #16]
 8006784:	e7ed      	b.n	8006762 <_printf_float+0x1d2>
 8006786:	2201      	movs	r2, #1
 8006788:	2900      	cmp	r1, #0
 800678a:	dc01      	bgt.n	8006790 <_printf_float+0x200>
 800678c:	1892      	adds	r2, r2, r2
 800678e:	1a52      	subs	r2, r2, r1
 8006790:	189b      	adds	r3, r3, r2
 8006792:	e7dc      	b.n	800674e <_printf_float+0x1be>
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	0553      	lsls	r3, r2, #21
 8006798:	d408      	bmi.n	80067ac <_printf_float+0x21c>
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	002a      	movs	r2, r5
 800679e:	0038      	movs	r0, r7
 80067a0:	9908      	ldr	r1, [sp, #32]
 80067a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067a4:	47a8      	blx	r5
 80067a6:	3001      	adds	r0, #1
 80067a8:	d12a      	bne.n	8006800 <_printf_float+0x270>
 80067aa:	e74f      	b.n	800664c <_printf_float+0xbc>
 80067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ae:	2b65      	cmp	r3, #101	; 0x65
 80067b0:	d800      	bhi.n	80067b4 <_printf_float+0x224>
 80067b2:	e0ec      	b.n	800698e <_printf_float+0x3fe>
 80067b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80067b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80067b8:	2200      	movs	r2, #0
 80067ba:	2300      	movs	r3, #0
 80067bc:	f7f9 fe44 	bl	8000448 <__aeabi_dcmpeq>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d034      	beq.n	800682e <_printf_float+0x29e>
 80067c4:	2301      	movs	r3, #1
 80067c6:	0038      	movs	r0, r7
 80067c8:	4a37      	ldr	r2, [pc, #220]	; (80068a8 <_printf_float+0x318>)
 80067ca:	9908      	ldr	r1, [sp, #32]
 80067cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067ce:	47a8      	blx	r5
 80067d0:	3001      	adds	r0, #1
 80067d2:	d100      	bne.n	80067d6 <_printf_float+0x246>
 80067d4:	e73a      	b.n	800664c <_printf_float+0xbc>
 80067d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80067d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067da:	429a      	cmp	r2, r3
 80067dc:	db02      	blt.n	80067e4 <_printf_float+0x254>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	07db      	lsls	r3, r3, #31
 80067e2:	d50d      	bpl.n	8006800 <_printf_float+0x270>
 80067e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80067e6:	0038      	movs	r0, r7
 80067e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067ec:	9908      	ldr	r1, [sp, #32]
 80067ee:	47a8      	blx	r5
 80067f0:	2500      	movs	r5, #0
 80067f2:	3001      	adds	r0, #1
 80067f4:	d100      	bne.n	80067f8 <_printf_float+0x268>
 80067f6:	e729      	b.n	800664c <_printf_float+0xbc>
 80067f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067fa:	3b01      	subs	r3, #1
 80067fc:	42ab      	cmp	r3, r5
 80067fe:	dc0a      	bgt.n	8006816 <_printf_float+0x286>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	079b      	lsls	r3, r3, #30
 8006804:	d500      	bpl.n	8006808 <_printf_float+0x278>
 8006806:	e116      	b.n	8006a36 <_printf_float+0x4a6>
 8006808:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800680a:	68e0      	ldr	r0, [r4, #12]
 800680c:	4298      	cmp	r0, r3
 800680e:	db00      	blt.n	8006812 <_printf_float+0x282>
 8006810:	e71e      	b.n	8006650 <_printf_float+0xc0>
 8006812:	0018      	movs	r0, r3
 8006814:	e71c      	b.n	8006650 <_printf_float+0xc0>
 8006816:	0022      	movs	r2, r4
 8006818:	2301      	movs	r3, #1
 800681a:	0038      	movs	r0, r7
 800681c:	9908      	ldr	r1, [sp, #32]
 800681e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006820:	321a      	adds	r2, #26
 8006822:	47b0      	blx	r6
 8006824:	3001      	adds	r0, #1
 8006826:	d100      	bne.n	800682a <_printf_float+0x29a>
 8006828:	e710      	b.n	800664c <_printf_float+0xbc>
 800682a:	3501      	adds	r5, #1
 800682c:	e7e4      	b.n	80067f8 <_printf_float+0x268>
 800682e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006830:	2b00      	cmp	r3, #0
 8006832:	dc3b      	bgt.n	80068ac <_printf_float+0x31c>
 8006834:	2301      	movs	r3, #1
 8006836:	0038      	movs	r0, r7
 8006838:	4a1b      	ldr	r2, [pc, #108]	; (80068a8 <_printf_float+0x318>)
 800683a:	9908      	ldr	r1, [sp, #32]
 800683c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800683e:	47b0      	blx	r6
 8006840:	3001      	adds	r0, #1
 8006842:	d100      	bne.n	8006846 <_printf_float+0x2b6>
 8006844:	e702      	b.n	800664c <_printf_float+0xbc>
 8006846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006848:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800684a:	4313      	orrs	r3, r2
 800684c:	d102      	bne.n	8006854 <_printf_float+0x2c4>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	07db      	lsls	r3, r3, #31
 8006852:	d5d5      	bpl.n	8006800 <_printf_float+0x270>
 8006854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006856:	0038      	movs	r0, r7
 8006858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800685a:	9908      	ldr	r1, [sp, #32]
 800685c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800685e:	47b0      	blx	r6
 8006860:	2300      	movs	r3, #0
 8006862:	3001      	adds	r0, #1
 8006864:	d100      	bne.n	8006868 <_printf_float+0x2d8>
 8006866:	e6f1      	b.n	800664c <_printf_float+0xbc>
 8006868:	930a      	str	r3, [sp, #40]	; 0x28
 800686a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800686c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686e:	425b      	negs	r3, r3
 8006870:	4293      	cmp	r3, r2
 8006872:	dc01      	bgt.n	8006878 <_printf_float+0x2e8>
 8006874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006876:	e791      	b.n	800679c <_printf_float+0x20c>
 8006878:	0022      	movs	r2, r4
 800687a:	2301      	movs	r3, #1
 800687c:	0038      	movs	r0, r7
 800687e:	9908      	ldr	r1, [sp, #32]
 8006880:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006882:	321a      	adds	r2, #26
 8006884:	47b0      	blx	r6
 8006886:	3001      	adds	r0, #1
 8006888:	d100      	bne.n	800688c <_printf_float+0x2fc>
 800688a:	e6df      	b.n	800664c <_printf_float+0xbc>
 800688c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800688e:	3301      	adds	r3, #1
 8006890:	e7ea      	b.n	8006868 <_printf_float+0x2d8>
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	7fefffff 	.word	0x7fefffff
 8006898:	0800a2e0 	.word	0x0800a2e0
 800689c:	0800a2e4 	.word	0x0800a2e4
 80068a0:	0800a2e8 	.word	0x0800a2e8
 80068a4:	0800a2ec 	.word	0x0800a2ec
 80068a8:	0800a2f0 	.word	0x0800a2f0
 80068ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80068ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068b0:	920a      	str	r2, [sp, #40]	; 0x28
 80068b2:	429a      	cmp	r2, r3
 80068b4:	dd00      	ble.n	80068b8 <_printf_float+0x328>
 80068b6:	930a      	str	r3, [sp, #40]	; 0x28
 80068b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dc3d      	bgt.n	800693a <_printf_float+0x3aa>
 80068be:	2300      	movs	r3, #0
 80068c0:	930e      	str	r3, [sp, #56]	; 0x38
 80068c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c4:	43db      	mvns	r3, r3
 80068c6:	17db      	asrs	r3, r3, #31
 80068c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80068ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80068d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068d2:	4013      	ands	r3, r2
 80068d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068da:	4293      	cmp	r3, r2
 80068dc:	dc36      	bgt.n	800694c <_printf_float+0x3bc>
 80068de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068e2:	429a      	cmp	r2, r3
 80068e4:	db40      	blt.n	8006968 <_printf_float+0x3d8>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	07db      	lsls	r3, r3, #31
 80068ea:	d43d      	bmi.n	8006968 <_printf_float+0x3d8>
 80068ec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80068ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f2:	1af3      	subs	r3, r6, r3
 80068f4:	1ab6      	subs	r6, r6, r2
 80068f6:	429e      	cmp	r6, r3
 80068f8:	dd00      	ble.n	80068fc <_printf_float+0x36c>
 80068fa:	001e      	movs	r6, r3
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	dc3c      	bgt.n	800697a <_printf_float+0x3ea>
 8006900:	2300      	movs	r3, #0
 8006902:	930a      	str	r3, [sp, #40]	; 0x28
 8006904:	43f3      	mvns	r3, r6
 8006906:	17db      	asrs	r3, r3, #31
 8006908:	930b      	str	r3, [sp, #44]	; 0x2c
 800690a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800690c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006912:	4032      	ands	r2, r6
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006918:	4293      	cmp	r3, r2
 800691a:	dc00      	bgt.n	800691e <_printf_float+0x38e>
 800691c:	e770      	b.n	8006800 <_printf_float+0x270>
 800691e:	0022      	movs	r2, r4
 8006920:	2301      	movs	r3, #1
 8006922:	0038      	movs	r0, r7
 8006924:	9908      	ldr	r1, [sp, #32]
 8006926:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006928:	321a      	adds	r2, #26
 800692a:	47a8      	blx	r5
 800692c:	3001      	adds	r0, #1
 800692e:	d100      	bne.n	8006932 <_printf_float+0x3a2>
 8006930:	e68c      	b.n	800664c <_printf_float+0xbc>
 8006932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006934:	3301      	adds	r3, #1
 8006936:	930a      	str	r3, [sp, #40]	; 0x28
 8006938:	e7e7      	b.n	800690a <_printf_float+0x37a>
 800693a:	002a      	movs	r2, r5
 800693c:	0038      	movs	r0, r7
 800693e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006940:	9908      	ldr	r1, [sp, #32]
 8006942:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006944:	47b0      	blx	r6
 8006946:	3001      	adds	r0, #1
 8006948:	d1b9      	bne.n	80068be <_printf_float+0x32e>
 800694a:	e67f      	b.n	800664c <_printf_float+0xbc>
 800694c:	0022      	movs	r2, r4
 800694e:	2301      	movs	r3, #1
 8006950:	0038      	movs	r0, r7
 8006952:	9908      	ldr	r1, [sp, #32]
 8006954:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006956:	321a      	adds	r2, #26
 8006958:	47b0      	blx	r6
 800695a:	3001      	adds	r0, #1
 800695c:	d100      	bne.n	8006960 <_printf_float+0x3d0>
 800695e:	e675      	b.n	800664c <_printf_float+0xbc>
 8006960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006962:	3301      	adds	r3, #1
 8006964:	930e      	str	r3, [sp, #56]	; 0x38
 8006966:	e7b0      	b.n	80068ca <_printf_float+0x33a>
 8006968:	0038      	movs	r0, r7
 800696a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800696c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800696e:	9908      	ldr	r1, [sp, #32]
 8006970:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006972:	47b0      	blx	r6
 8006974:	3001      	adds	r0, #1
 8006976:	d1b9      	bne.n	80068ec <_printf_float+0x35c>
 8006978:	e668      	b.n	800664c <_printf_float+0xbc>
 800697a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800697c:	0038      	movs	r0, r7
 800697e:	18ea      	adds	r2, r5, r3
 8006980:	9908      	ldr	r1, [sp, #32]
 8006982:	0033      	movs	r3, r6
 8006984:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006986:	47a8      	blx	r5
 8006988:	3001      	adds	r0, #1
 800698a:	d1b9      	bne.n	8006900 <_printf_float+0x370>
 800698c:	e65e      	b.n	800664c <_printf_float+0xbc>
 800698e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006990:	2b01      	cmp	r3, #1
 8006992:	dc02      	bgt.n	800699a <_printf_float+0x40a>
 8006994:	2301      	movs	r3, #1
 8006996:	421a      	tst	r2, r3
 8006998:	d03a      	beq.n	8006a10 <_printf_float+0x480>
 800699a:	2301      	movs	r3, #1
 800699c:	002a      	movs	r2, r5
 800699e:	0038      	movs	r0, r7
 80069a0:	9908      	ldr	r1, [sp, #32]
 80069a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80069a4:	47b0      	blx	r6
 80069a6:	3001      	adds	r0, #1
 80069a8:	d100      	bne.n	80069ac <_printf_float+0x41c>
 80069aa:	e64f      	b.n	800664c <_printf_float+0xbc>
 80069ac:	0038      	movs	r0, r7
 80069ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069b2:	9908      	ldr	r1, [sp, #32]
 80069b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80069b6:	47b0      	blx	r6
 80069b8:	3001      	adds	r0, #1
 80069ba:	d100      	bne.n	80069be <_printf_float+0x42e>
 80069bc:	e646      	b.n	800664c <_printf_float+0xbc>
 80069be:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80069c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80069c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069c4:	2200      	movs	r2, #0
 80069c6:	001e      	movs	r6, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	f7f9 fd3d 	bl	8000448 <__aeabi_dcmpeq>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d11c      	bne.n	8006a0c <_printf_float+0x47c>
 80069d2:	0033      	movs	r3, r6
 80069d4:	1c6a      	adds	r2, r5, #1
 80069d6:	3b01      	subs	r3, #1
 80069d8:	0038      	movs	r0, r7
 80069da:	9908      	ldr	r1, [sp, #32]
 80069dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80069de:	47a8      	blx	r5
 80069e0:	3001      	adds	r0, #1
 80069e2:	d10f      	bne.n	8006a04 <_printf_float+0x474>
 80069e4:	e632      	b.n	800664c <_printf_float+0xbc>
 80069e6:	0022      	movs	r2, r4
 80069e8:	2301      	movs	r3, #1
 80069ea:	0038      	movs	r0, r7
 80069ec:	9908      	ldr	r1, [sp, #32]
 80069ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80069f0:	321a      	adds	r2, #26
 80069f2:	47b0      	blx	r6
 80069f4:	3001      	adds	r0, #1
 80069f6:	d100      	bne.n	80069fa <_printf_float+0x46a>
 80069f8:	e628      	b.n	800664c <_printf_float+0xbc>
 80069fa:	3501      	adds	r5, #1
 80069fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069fe:	3b01      	subs	r3, #1
 8006a00:	42ab      	cmp	r3, r5
 8006a02:	dcf0      	bgt.n	80069e6 <_printf_float+0x456>
 8006a04:	0022      	movs	r2, r4
 8006a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a08:	3250      	adds	r2, #80	; 0x50
 8006a0a:	e6c8      	b.n	800679e <_printf_float+0x20e>
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	e7f5      	b.n	80069fc <_printf_float+0x46c>
 8006a10:	002a      	movs	r2, r5
 8006a12:	e7e1      	b.n	80069d8 <_printf_float+0x448>
 8006a14:	0022      	movs	r2, r4
 8006a16:	2301      	movs	r3, #1
 8006a18:	0038      	movs	r0, r7
 8006a1a:	9908      	ldr	r1, [sp, #32]
 8006a1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006a1e:	3219      	adds	r2, #25
 8006a20:	47b0      	blx	r6
 8006a22:	3001      	adds	r0, #1
 8006a24:	d100      	bne.n	8006a28 <_printf_float+0x498>
 8006a26:	e611      	b.n	800664c <_printf_float+0xbc>
 8006a28:	3501      	adds	r5, #1
 8006a2a:	68e3      	ldr	r3, [r4, #12]
 8006a2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a2e:	1a9b      	subs	r3, r3, r2
 8006a30:	42ab      	cmp	r3, r5
 8006a32:	dcef      	bgt.n	8006a14 <_printf_float+0x484>
 8006a34:	e6e8      	b.n	8006808 <_printf_float+0x278>
 8006a36:	2500      	movs	r5, #0
 8006a38:	e7f7      	b.n	8006a2a <_printf_float+0x49a>
 8006a3a:	46c0      	nop			; (mov r8, r8)

08006a3c <_printf_common>:
 8006a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a3e:	0016      	movs	r6, r2
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	688a      	ldr	r2, [r1, #8]
 8006a44:	690b      	ldr	r3, [r1, #16]
 8006a46:	000c      	movs	r4, r1
 8006a48:	9000      	str	r0, [sp, #0]
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	da00      	bge.n	8006a50 <_printf_common+0x14>
 8006a4e:	0013      	movs	r3, r2
 8006a50:	0022      	movs	r2, r4
 8006a52:	6033      	str	r3, [r6, #0]
 8006a54:	3243      	adds	r2, #67	; 0x43
 8006a56:	7812      	ldrb	r2, [r2, #0]
 8006a58:	2a00      	cmp	r2, #0
 8006a5a:	d001      	beq.n	8006a60 <_printf_common+0x24>
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	6033      	str	r3, [r6, #0]
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	069b      	lsls	r3, r3, #26
 8006a64:	d502      	bpl.n	8006a6c <_printf_common+0x30>
 8006a66:	6833      	ldr	r3, [r6, #0]
 8006a68:	3302      	adds	r3, #2
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	2306      	movs	r3, #6
 8006a70:	0015      	movs	r5, r2
 8006a72:	401d      	ands	r5, r3
 8006a74:	421a      	tst	r2, r3
 8006a76:	d027      	beq.n	8006ac8 <_printf_common+0x8c>
 8006a78:	0023      	movs	r3, r4
 8006a7a:	3343      	adds	r3, #67	; 0x43
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	1e5a      	subs	r2, r3, #1
 8006a80:	4193      	sbcs	r3, r2
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	0692      	lsls	r2, r2, #26
 8006a86:	d430      	bmi.n	8006aea <_printf_common+0xae>
 8006a88:	0022      	movs	r2, r4
 8006a8a:	9901      	ldr	r1, [sp, #4]
 8006a8c:	9800      	ldr	r0, [sp, #0]
 8006a8e:	9d08      	ldr	r5, [sp, #32]
 8006a90:	3243      	adds	r2, #67	; 0x43
 8006a92:	47a8      	blx	r5
 8006a94:	3001      	adds	r0, #1
 8006a96:	d025      	beq.n	8006ae4 <_printf_common+0xa8>
 8006a98:	2206      	movs	r2, #6
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	2500      	movs	r5, #0
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d105      	bne.n	8006ab0 <_printf_common+0x74>
 8006aa4:	6833      	ldr	r3, [r6, #0]
 8006aa6:	68e5      	ldr	r5, [r4, #12]
 8006aa8:	1aed      	subs	r5, r5, r3
 8006aaa:	43eb      	mvns	r3, r5
 8006aac:	17db      	asrs	r3, r3, #31
 8006aae:	401d      	ands	r5, r3
 8006ab0:	68a3      	ldr	r3, [r4, #8]
 8006ab2:	6922      	ldr	r2, [r4, #16]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	dd01      	ble.n	8006abc <_printf_common+0x80>
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	18ed      	adds	r5, r5, r3
 8006abc:	2600      	movs	r6, #0
 8006abe:	42b5      	cmp	r5, r6
 8006ac0:	d120      	bne.n	8006b04 <_printf_common+0xc8>
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	e010      	b.n	8006ae8 <_printf_common+0xac>
 8006ac6:	3501      	adds	r5, #1
 8006ac8:	68e3      	ldr	r3, [r4, #12]
 8006aca:	6832      	ldr	r2, [r6, #0]
 8006acc:	1a9b      	subs	r3, r3, r2
 8006ace:	42ab      	cmp	r3, r5
 8006ad0:	ddd2      	ble.n	8006a78 <_printf_common+0x3c>
 8006ad2:	0022      	movs	r2, r4
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	9901      	ldr	r1, [sp, #4]
 8006ad8:	9800      	ldr	r0, [sp, #0]
 8006ada:	9f08      	ldr	r7, [sp, #32]
 8006adc:	3219      	adds	r2, #25
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d1f0      	bne.n	8006ac6 <_printf_common+0x8a>
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	4240      	negs	r0, r0
 8006ae8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aea:	2030      	movs	r0, #48	; 0x30
 8006aec:	18e1      	adds	r1, r4, r3
 8006aee:	3143      	adds	r1, #67	; 0x43
 8006af0:	7008      	strb	r0, [r1, #0]
 8006af2:	0021      	movs	r1, r4
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	3145      	adds	r1, #69	; 0x45
 8006af8:	7809      	ldrb	r1, [r1, #0]
 8006afa:	18a2      	adds	r2, r4, r2
 8006afc:	3243      	adds	r2, #67	; 0x43
 8006afe:	3302      	adds	r3, #2
 8006b00:	7011      	strb	r1, [r2, #0]
 8006b02:	e7c1      	b.n	8006a88 <_printf_common+0x4c>
 8006b04:	0022      	movs	r2, r4
 8006b06:	2301      	movs	r3, #1
 8006b08:	9901      	ldr	r1, [sp, #4]
 8006b0a:	9800      	ldr	r0, [sp, #0]
 8006b0c:	9f08      	ldr	r7, [sp, #32]
 8006b0e:	321a      	adds	r2, #26
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa8>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d1      	b.n	8006abe <_printf_common+0x82>
	...

08006b1c <_printf_i>:
 8006b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1e:	b08b      	sub	sp, #44	; 0x2c
 8006b20:	9206      	str	r2, [sp, #24]
 8006b22:	000a      	movs	r2, r1
 8006b24:	3243      	adds	r2, #67	; 0x43
 8006b26:	9307      	str	r3, [sp, #28]
 8006b28:	9005      	str	r0, [sp, #20]
 8006b2a:	9204      	str	r2, [sp, #16]
 8006b2c:	7e0a      	ldrb	r2, [r1, #24]
 8006b2e:	000c      	movs	r4, r1
 8006b30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b32:	2a78      	cmp	r2, #120	; 0x78
 8006b34:	d809      	bhi.n	8006b4a <_printf_i+0x2e>
 8006b36:	2a62      	cmp	r2, #98	; 0x62
 8006b38:	d80b      	bhi.n	8006b52 <_printf_i+0x36>
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d100      	bne.n	8006b40 <_printf_i+0x24>
 8006b3e:	e0be      	b.n	8006cbe <_printf_i+0x1a2>
 8006b40:	497c      	ldr	r1, [pc, #496]	; (8006d34 <_printf_i+0x218>)
 8006b42:	9103      	str	r1, [sp, #12]
 8006b44:	2a58      	cmp	r2, #88	; 0x58
 8006b46:	d100      	bne.n	8006b4a <_printf_i+0x2e>
 8006b48:	e093      	b.n	8006c72 <_printf_i+0x156>
 8006b4a:	0026      	movs	r6, r4
 8006b4c:	3642      	adds	r6, #66	; 0x42
 8006b4e:	7032      	strb	r2, [r6, #0]
 8006b50:	e022      	b.n	8006b98 <_printf_i+0x7c>
 8006b52:	0010      	movs	r0, r2
 8006b54:	3863      	subs	r0, #99	; 0x63
 8006b56:	2815      	cmp	r0, #21
 8006b58:	d8f7      	bhi.n	8006b4a <_printf_i+0x2e>
 8006b5a:	f7f9 fae5 	bl	8000128 <__gnu_thumb1_case_shi>
 8006b5e:	0016      	.short	0x0016
 8006b60:	fff6001f 	.word	0xfff6001f
 8006b64:	fff6fff6 	.word	0xfff6fff6
 8006b68:	001ffff6 	.word	0x001ffff6
 8006b6c:	fff6fff6 	.word	0xfff6fff6
 8006b70:	fff6fff6 	.word	0xfff6fff6
 8006b74:	003600a3 	.word	0x003600a3
 8006b78:	fff60083 	.word	0xfff60083
 8006b7c:	00b4fff6 	.word	0x00b4fff6
 8006b80:	0036fff6 	.word	0x0036fff6
 8006b84:	fff6fff6 	.word	0xfff6fff6
 8006b88:	0087      	.short	0x0087
 8006b8a:	0026      	movs	r6, r4
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	3642      	adds	r6, #66	; 0x42
 8006b90:	1d11      	adds	r1, r2, #4
 8006b92:	6019      	str	r1, [r3, #0]
 8006b94:	6813      	ldr	r3, [r2, #0]
 8006b96:	7033      	strb	r3, [r6, #0]
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e0a2      	b.n	8006ce2 <_printf_i+0x1c6>
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	6809      	ldr	r1, [r1, #0]
 8006ba0:	1d02      	adds	r2, r0, #4
 8006ba2:	060d      	lsls	r5, r1, #24
 8006ba4:	d50b      	bpl.n	8006bbe <_printf_i+0xa2>
 8006ba6:	6805      	ldr	r5, [r0, #0]
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	2d00      	cmp	r5, #0
 8006bac:	da03      	bge.n	8006bb6 <_printf_i+0x9a>
 8006bae:	232d      	movs	r3, #45	; 0x2d
 8006bb0:	9a04      	ldr	r2, [sp, #16]
 8006bb2:	426d      	negs	r5, r5
 8006bb4:	7013      	strb	r3, [r2, #0]
 8006bb6:	4b5f      	ldr	r3, [pc, #380]	; (8006d34 <_printf_i+0x218>)
 8006bb8:	270a      	movs	r7, #10
 8006bba:	9303      	str	r3, [sp, #12]
 8006bbc:	e01b      	b.n	8006bf6 <_printf_i+0xda>
 8006bbe:	6805      	ldr	r5, [r0, #0]
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	0649      	lsls	r1, r1, #25
 8006bc4:	d5f1      	bpl.n	8006baa <_printf_i+0x8e>
 8006bc6:	b22d      	sxth	r5, r5
 8006bc8:	e7ef      	b.n	8006baa <_printf_i+0x8e>
 8006bca:	680d      	ldr	r5, [r1, #0]
 8006bcc:	6819      	ldr	r1, [r3, #0]
 8006bce:	1d08      	adds	r0, r1, #4
 8006bd0:	6018      	str	r0, [r3, #0]
 8006bd2:	062e      	lsls	r6, r5, #24
 8006bd4:	d501      	bpl.n	8006bda <_printf_i+0xbe>
 8006bd6:	680d      	ldr	r5, [r1, #0]
 8006bd8:	e003      	b.n	8006be2 <_printf_i+0xc6>
 8006bda:	066d      	lsls	r5, r5, #25
 8006bdc:	d5fb      	bpl.n	8006bd6 <_printf_i+0xba>
 8006bde:	680d      	ldr	r5, [r1, #0]
 8006be0:	b2ad      	uxth	r5, r5
 8006be2:	4b54      	ldr	r3, [pc, #336]	; (8006d34 <_printf_i+0x218>)
 8006be4:	2708      	movs	r7, #8
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	2a6f      	cmp	r2, #111	; 0x6f
 8006bea:	d000      	beq.n	8006bee <_printf_i+0xd2>
 8006bec:	3702      	adds	r7, #2
 8006bee:	0023      	movs	r3, r4
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	3343      	adds	r3, #67	; 0x43
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	6863      	ldr	r3, [r4, #4]
 8006bf8:	60a3      	str	r3, [r4, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	db03      	blt.n	8006c06 <_printf_i+0xea>
 8006bfe:	2104      	movs	r1, #4
 8006c00:	6822      	ldr	r2, [r4, #0]
 8006c02:	438a      	bics	r2, r1
 8006c04:	6022      	str	r2, [r4, #0]
 8006c06:	2d00      	cmp	r5, #0
 8006c08:	d102      	bne.n	8006c10 <_printf_i+0xf4>
 8006c0a:	9e04      	ldr	r6, [sp, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <_printf_i+0x10e>
 8006c10:	9e04      	ldr	r6, [sp, #16]
 8006c12:	0028      	movs	r0, r5
 8006c14:	0039      	movs	r1, r7
 8006c16:	f7f9 fb17 	bl	8000248 <__aeabi_uidivmod>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	3e01      	subs	r6, #1
 8006c1e:	5c5b      	ldrb	r3, [r3, r1]
 8006c20:	7033      	strb	r3, [r6, #0]
 8006c22:	002b      	movs	r3, r5
 8006c24:	0005      	movs	r5, r0
 8006c26:	429f      	cmp	r7, r3
 8006c28:	d9f3      	bls.n	8006c12 <_printf_i+0xf6>
 8006c2a:	2f08      	cmp	r7, #8
 8006c2c:	d109      	bne.n	8006c42 <_printf_i+0x126>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	07db      	lsls	r3, r3, #31
 8006c32:	d506      	bpl.n	8006c42 <_printf_i+0x126>
 8006c34:	6862      	ldr	r2, [r4, #4]
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	dc02      	bgt.n	8006c42 <_printf_i+0x126>
 8006c3c:	2330      	movs	r3, #48	; 0x30
 8006c3e:	3e01      	subs	r6, #1
 8006c40:	7033      	strb	r3, [r6, #0]
 8006c42:	9b04      	ldr	r3, [sp, #16]
 8006c44:	1b9b      	subs	r3, r3, r6
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	0021      	movs	r1, r4
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	9805      	ldr	r0, [sp, #20]
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	aa09      	add	r2, sp, #36	; 0x24
 8006c54:	f7ff fef2 	bl	8006a3c <_printf_common>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d147      	bne.n	8006cec <_printf_i+0x1d0>
 8006c5c:	2001      	movs	r0, #1
 8006c5e:	4240      	negs	r0, r0
 8006c60:	b00b      	add	sp, #44	; 0x2c
 8006c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c64:	2220      	movs	r2, #32
 8006c66:	6809      	ldr	r1, [r1, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	2278      	movs	r2, #120	; 0x78
 8006c6e:	4932      	ldr	r1, [pc, #200]	; (8006d38 <_printf_i+0x21c>)
 8006c70:	9103      	str	r1, [sp, #12]
 8006c72:	0021      	movs	r1, r4
 8006c74:	3145      	adds	r1, #69	; 0x45
 8006c76:	700a      	strb	r2, [r1, #0]
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	c920      	ldmia	r1!, {r5}
 8006c7e:	0610      	lsls	r0, r2, #24
 8006c80:	d402      	bmi.n	8006c88 <_printf_i+0x16c>
 8006c82:	0650      	lsls	r0, r2, #25
 8006c84:	d500      	bpl.n	8006c88 <_printf_i+0x16c>
 8006c86:	b2ad      	uxth	r5, r5
 8006c88:	6019      	str	r1, [r3, #0]
 8006c8a:	07d3      	lsls	r3, r2, #31
 8006c8c:	d502      	bpl.n	8006c94 <_printf_i+0x178>
 8006c8e:	2320      	movs	r3, #32
 8006c90:	4313      	orrs	r3, r2
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	2710      	movs	r7, #16
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	d1a9      	bne.n	8006bee <_printf_i+0xd2>
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	4393      	bics	r3, r2
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	e7a4      	b.n	8006bee <_printf_i+0xd2>
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	680d      	ldr	r5, [r1, #0]
 8006ca8:	1d10      	adds	r0, r2, #4
 8006caa:	6949      	ldr	r1, [r1, #20]
 8006cac:	6018      	str	r0, [r3, #0]
 8006cae:	6813      	ldr	r3, [r2, #0]
 8006cb0:	062e      	lsls	r6, r5, #24
 8006cb2:	d501      	bpl.n	8006cb8 <_printf_i+0x19c>
 8006cb4:	6019      	str	r1, [r3, #0]
 8006cb6:	e002      	b.n	8006cbe <_printf_i+0x1a2>
 8006cb8:	066d      	lsls	r5, r5, #25
 8006cba:	d5fb      	bpl.n	8006cb4 <_printf_i+0x198>
 8006cbc:	8019      	strh	r1, [r3, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9e04      	ldr	r6, [sp, #16]
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	e7c0      	b.n	8006c48 <_printf_i+0x12c>
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	1d11      	adds	r1, r2, #4
 8006cca:	6019      	str	r1, [r3, #0]
 8006ccc:	6816      	ldr	r6, [r2, #0]
 8006cce:	2100      	movs	r1, #0
 8006cd0:	0030      	movs	r0, r6
 8006cd2:	6862      	ldr	r2, [r4, #4]
 8006cd4:	f000 fc03 	bl	80074de <memchr>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d001      	beq.n	8006ce0 <_printf_i+0x1c4>
 8006cdc:	1b80      	subs	r0, r0, r6
 8006cde:	6060      	str	r0, [r4, #4]
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	6123      	str	r3, [r4, #16]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9a04      	ldr	r2, [sp, #16]
 8006ce8:	7013      	strb	r3, [r2, #0]
 8006cea:	e7ad      	b.n	8006c48 <_printf_i+0x12c>
 8006cec:	0032      	movs	r2, r6
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	9906      	ldr	r1, [sp, #24]
 8006cf2:	9805      	ldr	r0, [sp, #20]
 8006cf4:	9d07      	ldr	r5, [sp, #28]
 8006cf6:	47a8      	blx	r5
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d0af      	beq.n	8006c5c <_printf_i+0x140>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	079b      	lsls	r3, r3, #30
 8006d00:	d415      	bmi.n	8006d2e <_printf_i+0x212>
 8006d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d04:	68e0      	ldr	r0, [r4, #12]
 8006d06:	4298      	cmp	r0, r3
 8006d08:	daaa      	bge.n	8006c60 <_printf_i+0x144>
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	e7a8      	b.n	8006c60 <_printf_i+0x144>
 8006d0e:	0022      	movs	r2, r4
 8006d10:	2301      	movs	r3, #1
 8006d12:	9906      	ldr	r1, [sp, #24]
 8006d14:	9805      	ldr	r0, [sp, #20]
 8006d16:	9e07      	ldr	r6, [sp, #28]
 8006d18:	3219      	adds	r2, #25
 8006d1a:	47b0      	blx	r6
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d09d      	beq.n	8006c5c <_printf_i+0x140>
 8006d20:	3501      	adds	r5, #1
 8006d22:	68e3      	ldr	r3, [r4, #12]
 8006d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d26:	1a9b      	subs	r3, r3, r2
 8006d28:	42ab      	cmp	r3, r5
 8006d2a:	dcf0      	bgt.n	8006d0e <_printf_i+0x1f2>
 8006d2c:	e7e9      	b.n	8006d02 <_printf_i+0x1e6>
 8006d2e:	2500      	movs	r5, #0
 8006d30:	e7f7      	b.n	8006d22 <_printf_i+0x206>
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	0800a2f2 	.word	0x0800a2f2
 8006d38:	0800a303 	.word	0x0800a303

08006d3c <_scanf_float>:
 8006d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3e:	b08b      	sub	sp, #44	; 0x2c
 8006d40:	0016      	movs	r6, r2
 8006d42:	9002      	str	r0, [sp, #8]
 8006d44:	22ae      	movs	r2, #174	; 0xae
 8006d46:	2000      	movs	r0, #0
 8006d48:	9307      	str	r3, [sp, #28]
 8006d4a:	688b      	ldr	r3, [r1, #8]
 8006d4c:	000f      	movs	r7, r1
 8006d4e:	1e59      	subs	r1, r3, #1
 8006d50:	0052      	lsls	r2, r2, #1
 8006d52:	9006      	str	r0, [sp, #24]
 8006d54:	4291      	cmp	r1, r2
 8006d56:	d905      	bls.n	8006d64 <_scanf_float+0x28>
 8006d58:	3b5e      	subs	r3, #94	; 0x5e
 8006d5a:	3bff      	subs	r3, #255	; 0xff
 8006d5c:	9306      	str	r3, [sp, #24]
 8006d5e:	235e      	movs	r3, #94	; 0x5e
 8006d60:	33ff      	adds	r3, #255	; 0xff
 8006d62:	60bb      	str	r3, [r7, #8]
 8006d64:	23f0      	movs	r3, #240	; 0xf0
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	003b      	movs	r3, r7
 8006d70:	2400      	movs	r4, #0
 8006d72:	331c      	adds	r3, #28
 8006d74:	001d      	movs	r5, r3
 8006d76:	9304      	str	r3, [sp, #16]
 8006d78:	9403      	str	r4, [sp, #12]
 8006d7a:	9409      	str	r4, [sp, #36]	; 0x24
 8006d7c:	9408      	str	r4, [sp, #32]
 8006d7e:	9401      	str	r4, [sp, #4]
 8006d80:	9405      	str	r4, [sp, #20]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	d00a      	beq.n	8006d9e <_scanf_float+0x62>
 8006d88:	6833      	ldr	r3, [r6, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b4e      	cmp	r3, #78	; 0x4e
 8006d8e:	d844      	bhi.n	8006e1a <_scanf_float+0xde>
 8006d90:	0018      	movs	r0, r3
 8006d92:	2b40      	cmp	r3, #64	; 0x40
 8006d94:	d82c      	bhi.n	8006df0 <_scanf_float+0xb4>
 8006d96:	382b      	subs	r0, #43	; 0x2b
 8006d98:	b2c1      	uxtb	r1, r0
 8006d9a:	290e      	cmp	r1, #14
 8006d9c:	d92a      	bls.n	8006df4 <_scanf_float+0xb8>
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <_scanf_float+0x70>
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	4aa3      	ldr	r2, [pc, #652]	; (8007034 <_scanf_float+0x2f8>)
 8006da8:	4013      	ands	r3, r2
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d900      	bls.n	8006db6 <_scanf_float+0x7a>
 8006db4:	e0f9      	b.n	8006faa <_scanf_float+0x26e>
 8006db6:	24be      	movs	r4, #190	; 0xbe
 8006db8:	0064      	lsls	r4, r4, #1
 8006dba:	9b04      	ldr	r3, [sp, #16]
 8006dbc:	429d      	cmp	r5, r3
 8006dbe:	d900      	bls.n	8006dc2 <_scanf_float+0x86>
 8006dc0:	e0e9      	b.n	8006f96 <_scanf_float+0x25a>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	9303      	str	r3, [sp, #12]
 8006dc6:	e183      	b.n	80070d0 <_scanf_float+0x394>
 8006dc8:	0018      	movs	r0, r3
 8006dca:	3861      	subs	r0, #97	; 0x61
 8006dcc:	280d      	cmp	r0, #13
 8006dce:	d8e6      	bhi.n	8006d9e <_scanf_float+0x62>
 8006dd0:	f7f9 f9aa 	bl	8000128 <__gnu_thumb1_case_shi>
 8006dd4:	ffe50083 	.word	0xffe50083
 8006dd8:	ffe5ffe5 	.word	0xffe5ffe5
 8006ddc:	00a200b6 	.word	0x00a200b6
 8006de0:	ffe5ffe5 	.word	0xffe5ffe5
 8006de4:	ffe50089 	.word	0xffe50089
 8006de8:	ffe5ffe5 	.word	0xffe5ffe5
 8006dec:	0065ffe5 	.word	0x0065ffe5
 8006df0:	3841      	subs	r0, #65	; 0x41
 8006df2:	e7eb      	b.n	8006dcc <_scanf_float+0x90>
 8006df4:	280e      	cmp	r0, #14
 8006df6:	d8d2      	bhi.n	8006d9e <_scanf_float+0x62>
 8006df8:	f7f9 f996 	bl	8000128 <__gnu_thumb1_case_shi>
 8006dfc:	ffd1004b 	.word	0xffd1004b
 8006e00:	0098004b 	.word	0x0098004b
 8006e04:	0020ffd1 	.word	0x0020ffd1
 8006e08:	00400040 	.word	0x00400040
 8006e0c:	00400040 	.word	0x00400040
 8006e10:	00400040 	.word	0x00400040
 8006e14:	00400040 	.word	0x00400040
 8006e18:	0040      	.short	0x0040
 8006e1a:	2b6e      	cmp	r3, #110	; 0x6e
 8006e1c:	d809      	bhi.n	8006e32 <_scanf_float+0xf6>
 8006e1e:	2b60      	cmp	r3, #96	; 0x60
 8006e20:	d8d2      	bhi.n	8006dc8 <_scanf_float+0x8c>
 8006e22:	2b54      	cmp	r3, #84	; 0x54
 8006e24:	d07d      	beq.n	8006f22 <_scanf_float+0x1e6>
 8006e26:	2b59      	cmp	r3, #89	; 0x59
 8006e28:	d1b9      	bne.n	8006d9e <_scanf_float+0x62>
 8006e2a:	2c07      	cmp	r4, #7
 8006e2c:	d1b7      	bne.n	8006d9e <_scanf_float+0x62>
 8006e2e:	2408      	movs	r4, #8
 8006e30:	e02c      	b.n	8006e8c <_scanf_float+0x150>
 8006e32:	2b74      	cmp	r3, #116	; 0x74
 8006e34:	d075      	beq.n	8006f22 <_scanf_float+0x1e6>
 8006e36:	2b79      	cmp	r3, #121	; 0x79
 8006e38:	d0f7      	beq.n	8006e2a <_scanf_float+0xee>
 8006e3a:	e7b0      	b.n	8006d9e <_scanf_float+0x62>
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	05c8      	lsls	r0, r1, #23
 8006e40:	d51c      	bpl.n	8006e7c <_scanf_float+0x140>
 8006e42:	2380      	movs	r3, #128	; 0x80
 8006e44:	4399      	bics	r1, r3
 8006e46:	9b01      	ldr	r3, [sp, #4]
 8006e48:	6039      	str	r1, [r7, #0]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <_scanf_float+0x120>
 8006e54:	3b01      	subs	r3, #1
 8006e56:	3201      	adds	r2, #1
 8006e58:	9306      	str	r3, [sp, #24]
 8006e5a:	60ba      	str	r2, [r7, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	6873      	ldr	r3, [r6, #4]
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	6073      	str	r3, [r6, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dc00      	bgt.n	8006e74 <_scanf_float+0x138>
 8006e72:	e086      	b.n	8006f82 <_scanf_float+0x246>
 8006e74:	6833      	ldr	r3, [r6, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	6033      	str	r3, [r6, #0]
 8006e7a:	e782      	b.n	8006d82 <_scanf_float+0x46>
 8006e7c:	9a03      	ldr	r2, [sp, #12]
 8006e7e:	1912      	adds	r2, r2, r4
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	d18c      	bne.n	8006d9e <_scanf_float+0x62>
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	496c      	ldr	r1, [pc, #432]	; (8007038 <_scanf_float+0x2fc>)
 8006e88:	400a      	ands	r2, r1
 8006e8a:	603a      	str	r2, [r7, #0]
 8006e8c:	702b      	strb	r3, [r5, #0]
 8006e8e:	3501      	adds	r5, #1
 8006e90:	e7e4      	b.n	8006e5c <_scanf_float+0x120>
 8006e92:	2180      	movs	r1, #128	; 0x80
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	420a      	tst	r2, r1
 8006e98:	d081      	beq.n	8006d9e <_scanf_float+0x62>
 8006e9a:	438a      	bics	r2, r1
 8006e9c:	e7f5      	b.n	8006e8a <_scanf_float+0x14e>
 8006e9e:	9a03      	ldr	r2, [sp, #12]
 8006ea0:	2a00      	cmp	r2, #0
 8006ea2:	d10f      	bne.n	8006ec4 <_scanf_float+0x188>
 8006ea4:	9a01      	ldr	r2, [sp, #4]
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	d10f      	bne.n	8006eca <_scanf_float+0x18e>
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	21e0      	movs	r1, #224	; 0xe0
 8006eae:	0010      	movs	r0, r2
 8006eb0:	00c9      	lsls	r1, r1, #3
 8006eb2:	4008      	ands	r0, r1
 8006eb4:	4288      	cmp	r0, r1
 8006eb6:	d108      	bne.n	8006eca <_scanf_float+0x18e>
 8006eb8:	4960      	ldr	r1, [pc, #384]	; (800703c <_scanf_float+0x300>)
 8006eba:	400a      	ands	r2, r1
 8006ebc:	603a      	str	r2, [r7, #0]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	9203      	str	r2, [sp, #12]
 8006ec2:	e7e3      	b.n	8006e8c <_scanf_float+0x150>
 8006ec4:	9a03      	ldr	r2, [sp, #12]
 8006ec6:	2a02      	cmp	r2, #2
 8006ec8:	d059      	beq.n	8006f7e <_scanf_float+0x242>
 8006eca:	2c01      	cmp	r4, #1
 8006ecc:	d002      	beq.n	8006ed4 <_scanf_float+0x198>
 8006ece:	2c04      	cmp	r4, #4
 8006ed0:	d000      	beq.n	8006ed4 <_scanf_float+0x198>
 8006ed2:	e764      	b.n	8006d9e <_scanf_float+0x62>
 8006ed4:	3401      	adds	r4, #1
 8006ed6:	b2e4      	uxtb	r4, r4
 8006ed8:	e7d8      	b.n	8006e8c <_scanf_float+0x150>
 8006eda:	9a03      	ldr	r2, [sp, #12]
 8006edc:	2a01      	cmp	r2, #1
 8006ede:	d000      	beq.n	8006ee2 <_scanf_float+0x1a6>
 8006ee0:	e75d      	b.n	8006d9e <_scanf_float+0x62>
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	e7ec      	b.n	8006ec0 <_scanf_float+0x184>
 8006ee6:	2c00      	cmp	r4, #0
 8006ee8:	d110      	bne.n	8006f0c <_scanf_float+0x1d0>
 8006eea:	9a01      	ldr	r2, [sp, #4]
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d000      	beq.n	8006ef2 <_scanf_float+0x1b6>
 8006ef0:	e758      	b.n	8006da4 <_scanf_float+0x68>
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	21e0      	movs	r1, #224	; 0xe0
 8006ef6:	0010      	movs	r0, r2
 8006ef8:	00c9      	lsls	r1, r1, #3
 8006efa:	4008      	ands	r0, r1
 8006efc:	4288      	cmp	r0, r1
 8006efe:	d000      	beq.n	8006f02 <_scanf_float+0x1c6>
 8006f00:	e754      	b.n	8006dac <_scanf_float+0x70>
 8006f02:	494e      	ldr	r1, [pc, #312]	; (800703c <_scanf_float+0x300>)
 8006f04:	3401      	adds	r4, #1
 8006f06:	400a      	ands	r2, r1
 8006f08:	603a      	str	r2, [r7, #0]
 8006f0a:	e7bf      	b.n	8006e8c <_scanf_float+0x150>
 8006f0c:	21fd      	movs	r1, #253	; 0xfd
 8006f0e:	1ee2      	subs	r2, r4, #3
 8006f10:	420a      	tst	r2, r1
 8006f12:	d000      	beq.n	8006f16 <_scanf_float+0x1da>
 8006f14:	e743      	b.n	8006d9e <_scanf_float+0x62>
 8006f16:	e7dd      	b.n	8006ed4 <_scanf_float+0x198>
 8006f18:	2c02      	cmp	r4, #2
 8006f1a:	d000      	beq.n	8006f1e <_scanf_float+0x1e2>
 8006f1c:	e73f      	b.n	8006d9e <_scanf_float+0x62>
 8006f1e:	2403      	movs	r4, #3
 8006f20:	e7b4      	b.n	8006e8c <_scanf_float+0x150>
 8006f22:	2c06      	cmp	r4, #6
 8006f24:	d000      	beq.n	8006f28 <_scanf_float+0x1ec>
 8006f26:	e73a      	b.n	8006d9e <_scanf_float+0x62>
 8006f28:	2407      	movs	r4, #7
 8006f2a:	e7af      	b.n	8006e8c <_scanf_float+0x150>
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	0591      	lsls	r1, r2, #22
 8006f30:	d400      	bmi.n	8006f34 <_scanf_float+0x1f8>
 8006f32:	e734      	b.n	8006d9e <_scanf_float+0x62>
 8006f34:	4942      	ldr	r1, [pc, #264]	; (8007040 <_scanf_float+0x304>)
 8006f36:	400a      	ands	r2, r1
 8006f38:	603a      	str	r2, [r7, #0]
 8006f3a:	9a01      	ldr	r2, [sp, #4]
 8006f3c:	9205      	str	r2, [sp, #20]
 8006f3e:	e7a5      	b.n	8006e8c <_scanf_float+0x150>
 8006f40:	21a0      	movs	r1, #160	; 0xa0
 8006f42:	2080      	movs	r0, #128	; 0x80
 8006f44:	683a      	ldr	r2, [r7, #0]
 8006f46:	00c9      	lsls	r1, r1, #3
 8006f48:	4011      	ands	r1, r2
 8006f4a:	00c0      	lsls	r0, r0, #3
 8006f4c:	4281      	cmp	r1, r0
 8006f4e:	d006      	beq.n	8006f5e <_scanf_float+0x222>
 8006f50:	4202      	tst	r2, r0
 8006f52:	d100      	bne.n	8006f56 <_scanf_float+0x21a>
 8006f54:	e723      	b.n	8006d9e <_scanf_float+0x62>
 8006f56:	9901      	ldr	r1, [sp, #4]
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	d100      	bne.n	8006f5e <_scanf_float+0x222>
 8006f5c:	e726      	b.n	8006dac <_scanf_float+0x70>
 8006f5e:	0591      	lsls	r1, r2, #22
 8006f60:	d404      	bmi.n	8006f6c <_scanf_float+0x230>
 8006f62:	9901      	ldr	r1, [sp, #4]
 8006f64:	9805      	ldr	r0, [sp, #20]
 8006f66:	9509      	str	r5, [sp, #36]	; 0x24
 8006f68:	1a09      	subs	r1, r1, r0
 8006f6a:	9108      	str	r1, [sp, #32]
 8006f6c:	4933      	ldr	r1, [pc, #204]	; (800703c <_scanf_float+0x300>)
 8006f6e:	400a      	ands	r2, r1
 8006f70:	21c0      	movs	r1, #192	; 0xc0
 8006f72:	0049      	lsls	r1, r1, #1
 8006f74:	430a      	orrs	r2, r1
 8006f76:	603a      	str	r2, [r7, #0]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	9201      	str	r2, [sp, #4]
 8006f7c:	e786      	b.n	8006e8c <_scanf_float+0x150>
 8006f7e:	2203      	movs	r2, #3
 8006f80:	e79e      	b.n	8006ec0 <_scanf_float+0x184>
 8006f82:	23c0      	movs	r3, #192	; 0xc0
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	0031      	movs	r1, r6
 8006f88:	58fb      	ldr	r3, [r7, r3]
 8006f8a:	9802      	ldr	r0, [sp, #8]
 8006f8c:	4798      	blx	r3
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d100      	bne.n	8006f94 <_scanf_float+0x258>
 8006f92:	e6f6      	b.n	8006d82 <_scanf_float+0x46>
 8006f94:	e703      	b.n	8006d9e <_scanf_float+0x62>
 8006f96:	3d01      	subs	r5, #1
 8006f98:	593b      	ldr	r3, [r7, r4]
 8006f9a:	0032      	movs	r2, r6
 8006f9c:	7829      	ldrb	r1, [r5, #0]
 8006f9e:	9802      	ldr	r0, [sp, #8]
 8006fa0:	4798      	blx	r3
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	e707      	b.n	8006dba <_scanf_float+0x7e>
 8006faa:	1e63      	subs	r3, r4, #1
 8006fac:	2b06      	cmp	r3, #6
 8006fae:	d80e      	bhi.n	8006fce <_scanf_float+0x292>
 8006fb0:	9503      	str	r5, [sp, #12]
 8006fb2:	2c02      	cmp	r4, #2
 8006fb4:	d920      	bls.n	8006ff8 <_scanf_float+0x2bc>
 8006fb6:	1b63      	subs	r3, r4, r5
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	9306      	str	r3, [sp, #24]
 8006fbc:	9b03      	ldr	r3, [sp, #12]
 8006fbe:	9a06      	ldr	r2, [sp, #24]
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d827      	bhi.n	8007018 <_scanf_float+0x2dc>
 8006fc8:	3c03      	subs	r4, #3
 8006fca:	b2e4      	uxtb	r4, r4
 8006fcc:	1b2d      	subs	r5, r5, r4
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	05da      	lsls	r2, r3, #23
 8006fd2:	d552      	bpl.n	800707a <_scanf_float+0x33e>
 8006fd4:	055b      	lsls	r3, r3, #21
 8006fd6:	d535      	bpl.n	8007044 <_scanf_float+0x308>
 8006fd8:	24be      	movs	r4, #190	; 0xbe
 8006fda:	0064      	lsls	r4, r4, #1
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	429d      	cmp	r5, r3
 8006fe0:	d800      	bhi.n	8006fe4 <_scanf_float+0x2a8>
 8006fe2:	e6ee      	b.n	8006dc2 <_scanf_float+0x86>
 8006fe4:	3d01      	subs	r5, #1
 8006fe6:	593b      	ldr	r3, [r7, r4]
 8006fe8:	0032      	movs	r2, r6
 8006fea:	7829      	ldrb	r1, [r5, #0]
 8006fec:	9802      	ldr	r0, [sp, #8]
 8006fee:	4798      	blx	r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	e7f1      	b.n	8006fdc <_scanf_float+0x2a0>
 8006ff8:	24be      	movs	r4, #190	; 0xbe
 8006ffa:	0064      	lsls	r4, r4, #1
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	429d      	cmp	r5, r3
 8007000:	d800      	bhi.n	8007004 <_scanf_float+0x2c8>
 8007002:	e6de      	b.n	8006dc2 <_scanf_float+0x86>
 8007004:	3d01      	subs	r5, #1
 8007006:	593b      	ldr	r3, [r7, r4]
 8007008:	0032      	movs	r2, r6
 800700a:	7829      	ldrb	r1, [r5, #0]
 800700c:	9802      	ldr	r0, [sp, #8]
 800700e:	4798      	blx	r3
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	3b01      	subs	r3, #1
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	e7f1      	b.n	8006ffc <_scanf_float+0x2c0>
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	0032      	movs	r2, r6
 800701c:	3b01      	subs	r3, #1
 800701e:	7819      	ldrb	r1, [r3, #0]
 8007020:	9303      	str	r3, [sp, #12]
 8007022:	23be      	movs	r3, #190	; 0xbe
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	58fb      	ldr	r3, [r7, r3]
 8007028:	9802      	ldr	r0, [sp, #8]
 800702a:	4798      	blx	r3
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	3b01      	subs	r3, #1
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	e7c3      	b.n	8006fbc <_scanf_float+0x280>
 8007034:	fffffeff 	.word	0xfffffeff
 8007038:	fffffe7f 	.word	0xfffffe7f
 800703c:	fffff87f 	.word	0xfffff87f
 8007040:	fffffd7f 	.word	0xfffffd7f
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1e6c      	subs	r4, r5, #1
 8007048:	7821      	ldrb	r1, [r4, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	2965      	cmp	r1, #101	; 0x65
 8007050:	d00c      	beq.n	800706c <_scanf_float+0x330>
 8007052:	2945      	cmp	r1, #69	; 0x45
 8007054:	d00a      	beq.n	800706c <_scanf_float+0x330>
 8007056:	23be      	movs	r3, #190	; 0xbe
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	58fb      	ldr	r3, [r7, r3]
 800705c:	0032      	movs	r2, r6
 800705e:	9802      	ldr	r0, [sp, #8]
 8007060:	4798      	blx	r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1eac      	subs	r4, r5, #2
 8007066:	3b01      	subs	r3, #1
 8007068:	7821      	ldrb	r1, [r4, #0]
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	23be      	movs	r3, #190	; 0xbe
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	0032      	movs	r2, r6
 8007072:	58fb      	ldr	r3, [r7, r3]
 8007074:	9802      	ldr	r0, [sp, #8]
 8007076:	4798      	blx	r3
 8007078:	0025      	movs	r5, r4
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	2310      	movs	r3, #16
 800707e:	0011      	movs	r1, r2
 8007080:	4019      	ands	r1, r3
 8007082:	9103      	str	r1, [sp, #12]
 8007084:	421a      	tst	r2, r3
 8007086:	d15b      	bne.n	8007140 <_scanf_float+0x404>
 8007088:	22c0      	movs	r2, #192	; 0xc0
 800708a:	7029      	strb	r1, [r5, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	00d2      	lsls	r2, r2, #3
 8007090:	4013      	ands	r3, r2
 8007092:	2280      	movs	r2, #128	; 0x80
 8007094:	00d2      	lsls	r2, r2, #3
 8007096:	4293      	cmp	r3, r2
 8007098:	d11d      	bne.n	80070d6 <_scanf_float+0x39a>
 800709a:	9b05      	ldr	r3, [sp, #20]
 800709c:	9a01      	ldr	r2, [sp, #4]
 800709e:	9901      	ldr	r1, [sp, #4]
 80070a0:	1a9a      	subs	r2, r3, r2
 80070a2:	428b      	cmp	r3, r1
 80070a4:	d124      	bne.n	80070f0 <_scanf_float+0x3b4>
 80070a6:	2200      	movs	r2, #0
 80070a8:	9904      	ldr	r1, [sp, #16]
 80070aa:	9802      	ldr	r0, [sp, #8]
 80070ac:	f7ff f9c0 	bl	8006430 <_strtod_r>
 80070b0:	9b07      	ldr	r3, [sp, #28]
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	0004      	movs	r4, r0
 80070b6:	000d      	movs	r5, r1
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	0791      	lsls	r1, r2, #30
 80070bc:	d525      	bpl.n	800710a <_scanf_float+0x3ce>
 80070be:	9907      	ldr	r1, [sp, #28]
 80070c0:	1d1a      	adds	r2, r3, #4
 80070c2:	600a      	str	r2, [r1, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	601c      	str	r4, [r3, #0]
 80070c8:	605d      	str	r5, [r3, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	9803      	ldr	r0, [sp, #12]
 80070d2:	b00b      	add	sp, #44	; 0x2c
 80070d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d6:	9b08      	ldr	r3, [sp, #32]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0e4      	beq.n	80070a6 <_scanf_float+0x36a>
 80070dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070de:	9a03      	ldr	r2, [sp, #12]
 80070e0:	1c59      	adds	r1, r3, #1
 80070e2:	9802      	ldr	r0, [sp, #8]
 80070e4:	230a      	movs	r3, #10
 80070e6:	f002 fa6f 	bl	80095c8 <_strtol_r>
 80070ea:	9b08      	ldr	r3, [sp, #32]
 80070ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80070ee:	1ac2      	subs	r2, r0, r3
 80070f0:	003b      	movs	r3, r7
 80070f2:	3370      	adds	r3, #112	; 0x70
 80070f4:	33ff      	adds	r3, #255	; 0xff
 80070f6:	429d      	cmp	r5, r3
 80070f8:	d302      	bcc.n	8007100 <_scanf_float+0x3c4>
 80070fa:	003d      	movs	r5, r7
 80070fc:	356f      	adds	r5, #111	; 0x6f
 80070fe:	35ff      	adds	r5, #255	; 0xff
 8007100:	0028      	movs	r0, r5
 8007102:	4910      	ldr	r1, [pc, #64]	; (8007144 <_scanf_float+0x408>)
 8007104:	f000 f8e6 	bl	80072d4 <siprintf>
 8007108:	e7cd      	b.n	80070a6 <_scanf_float+0x36a>
 800710a:	1d19      	adds	r1, r3, #4
 800710c:	0752      	lsls	r2, r2, #29
 800710e:	d502      	bpl.n	8007116 <_scanf_float+0x3da>
 8007110:	9a07      	ldr	r2, [sp, #28]
 8007112:	6011      	str	r1, [r2, #0]
 8007114:	e7d6      	b.n	80070c4 <_scanf_float+0x388>
 8007116:	9a07      	ldr	r2, [sp, #28]
 8007118:	0020      	movs	r0, r4
 800711a:	6011      	str	r1, [r2, #0]
 800711c:	681e      	ldr	r6, [r3, #0]
 800711e:	0022      	movs	r2, r4
 8007120:	002b      	movs	r3, r5
 8007122:	0029      	movs	r1, r5
 8007124:	f7fb f8b8 	bl	8002298 <__aeabi_dcmpun>
 8007128:	2800      	cmp	r0, #0
 800712a:	d004      	beq.n	8007136 <_scanf_float+0x3fa>
 800712c:	4806      	ldr	r0, [pc, #24]	; (8007148 <_scanf_float+0x40c>)
 800712e:	f000 f9f1 	bl	8007514 <nanf>
 8007132:	6030      	str	r0, [r6, #0]
 8007134:	e7c9      	b.n	80070ca <_scanf_float+0x38e>
 8007136:	0020      	movs	r0, r4
 8007138:	0029      	movs	r1, r5
 800713a:	f7fb f957 	bl	80023ec <__aeabi_d2f>
 800713e:	e7f8      	b.n	8007132 <_scanf_float+0x3f6>
 8007140:	2300      	movs	r3, #0
 8007142:	e63f      	b.n	8006dc4 <_scanf_float+0x88>
 8007144:	0800a314 	.word	0x0800a314
 8007148:	0800a6b1 	.word	0x0800a6b1

0800714c <std>:
 800714c:	2300      	movs	r3, #0
 800714e:	b510      	push	{r4, lr}
 8007150:	0004      	movs	r4, r0
 8007152:	6003      	str	r3, [r0, #0]
 8007154:	6043      	str	r3, [r0, #4]
 8007156:	6083      	str	r3, [r0, #8]
 8007158:	8181      	strh	r1, [r0, #12]
 800715a:	6643      	str	r3, [r0, #100]	; 0x64
 800715c:	81c2      	strh	r2, [r0, #14]
 800715e:	6103      	str	r3, [r0, #16]
 8007160:	6143      	str	r3, [r0, #20]
 8007162:	6183      	str	r3, [r0, #24]
 8007164:	0019      	movs	r1, r3
 8007166:	2208      	movs	r2, #8
 8007168:	305c      	adds	r0, #92	; 0x5c
 800716a:	f000 f91f 	bl	80073ac <memset>
 800716e:	4b0b      	ldr	r3, [pc, #44]	; (800719c <std+0x50>)
 8007170:	6224      	str	r4, [r4, #32]
 8007172:	6263      	str	r3, [r4, #36]	; 0x24
 8007174:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <std+0x54>)
 8007176:	62a3      	str	r3, [r4, #40]	; 0x28
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <std+0x58>)
 800717a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <std+0x5c>)
 800717e:	6323      	str	r3, [r4, #48]	; 0x30
 8007180:	4b0a      	ldr	r3, [pc, #40]	; (80071ac <std+0x60>)
 8007182:	429c      	cmp	r4, r3
 8007184:	d005      	beq.n	8007192 <std+0x46>
 8007186:	4b0a      	ldr	r3, [pc, #40]	; (80071b0 <std+0x64>)
 8007188:	429c      	cmp	r4, r3
 800718a:	d002      	beq.n	8007192 <std+0x46>
 800718c:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <std+0x68>)
 800718e:	429c      	cmp	r4, r3
 8007190:	d103      	bne.n	800719a <std+0x4e>
 8007192:	0020      	movs	r0, r4
 8007194:	3058      	adds	r0, #88	; 0x58
 8007196:	f000 f99f 	bl	80074d8 <__retarget_lock_init_recursive>
 800719a:	bd10      	pop	{r4, pc}
 800719c:	08007315 	.word	0x08007315
 80071a0:	0800733d 	.word	0x0800733d
 80071a4:	08007375 	.word	0x08007375
 80071a8:	080073a1 	.word	0x080073a1
 80071ac:	200002d0 	.word	0x200002d0
 80071b0:	20000338 	.word	0x20000338
 80071b4:	200003a0 	.word	0x200003a0

080071b8 <stdio_exit_handler>:
 80071b8:	b510      	push	{r4, lr}
 80071ba:	4a03      	ldr	r2, [pc, #12]	; (80071c8 <stdio_exit_handler+0x10>)
 80071bc:	4903      	ldr	r1, [pc, #12]	; (80071cc <stdio_exit_handler+0x14>)
 80071be:	4804      	ldr	r0, [pc, #16]	; (80071d0 <stdio_exit_handler+0x18>)
 80071c0:	f000 f86c 	bl	800729c <_fwalk_sglue>
 80071c4:	bd10      	pop	{r4, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	20000010 	.word	0x20000010
 80071cc:	080099c5 	.word	0x080099c5
 80071d0:	20000188 	.word	0x20000188

080071d4 <cleanup_stdio>:
 80071d4:	6841      	ldr	r1, [r0, #4]
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <cleanup_stdio+0x30>)
 80071d8:	b510      	push	{r4, lr}
 80071da:	0004      	movs	r4, r0
 80071dc:	4299      	cmp	r1, r3
 80071de:	d001      	beq.n	80071e4 <cleanup_stdio+0x10>
 80071e0:	f002 fbf0 	bl	80099c4 <_fflush_r>
 80071e4:	68a1      	ldr	r1, [r4, #8]
 80071e6:	4b08      	ldr	r3, [pc, #32]	; (8007208 <cleanup_stdio+0x34>)
 80071e8:	4299      	cmp	r1, r3
 80071ea:	d002      	beq.n	80071f2 <cleanup_stdio+0x1e>
 80071ec:	0020      	movs	r0, r4
 80071ee:	f002 fbe9 	bl	80099c4 <_fflush_r>
 80071f2:	68e1      	ldr	r1, [r4, #12]
 80071f4:	4b05      	ldr	r3, [pc, #20]	; (800720c <cleanup_stdio+0x38>)
 80071f6:	4299      	cmp	r1, r3
 80071f8:	d002      	beq.n	8007200 <cleanup_stdio+0x2c>
 80071fa:	0020      	movs	r0, r4
 80071fc:	f002 fbe2 	bl	80099c4 <_fflush_r>
 8007200:	bd10      	pop	{r4, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	200002d0 	.word	0x200002d0
 8007208:	20000338 	.word	0x20000338
 800720c:	200003a0 	.word	0x200003a0

08007210 <global_stdio_init.part.0>:
 8007210:	b510      	push	{r4, lr}
 8007212:	4b09      	ldr	r3, [pc, #36]	; (8007238 <global_stdio_init.part.0+0x28>)
 8007214:	4a09      	ldr	r2, [pc, #36]	; (800723c <global_stdio_init.part.0+0x2c>)
 8007216:	2104      	movs	r1, #4
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	4809      	ldr	r0, [pc, #36]	; (8007240 <global_stdio_init.part.0+0x30>)
 800721c:	2200      	movs	r2, #0
 800721e:	f7ff ff95 	bl	800714c <std>
 8007222:	2201      	movs	r2, #1
 8007224:	2109      	movs	r1, #9
 8007226:	4807      	ldr	r0, [pc, #28]	; (8007244 <global_stdio_init.part.0+0x34>)
 8007228:	f7ff ff90 	bl	800714c <std>
 800722c:	2202      	movs	r2, #2
 800722e:	2112      	movs	r1, #18
 8007230:	4805      	ldr	r0, [pc, #20]	; (8007248 <global_stdio_init.part.0+0x38>)
 8007232:	f7ff ff8b 	bl	800714c <std>
 8007236:	bd10      	pop	{r4, pc}
 8007238:	20000408 	.word	0x20000408
 800723c:	080071b9 	.word	0x080071b9
 8007240:	200002d0 	.word	0x200002d0
 8007244:	20000338 	.word	0x20000338
 8007248:	200003a0 	.word	0x200003a0

0800724c <__sfp_lock_acquire>:
 800724c:	b510      	push	{r4, lr}
 800724e:	4802      	ldr	r0, [pc, #8]	; (8007258 <__sfp_lock_acquire+0xc>)
 8007250:	f000 f943 	bl	80074da <__retarget_lock_acquire_recursive>
 8007254:	bd10      	pop	{r4, pc}
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	20000411 	.word	0x20000411

0800725c <__sfp_lock_release>:
 800725c:	b510      	push	{r4, lr}
 800725e:	4802      	ldr	r0, [pc, #8]	; (8007268 <__sfp_lock_release+0xc>)
 8007260:	f000 f93c 	bl	80074dc <__retarget_lock_release_recursive>
 8007264:	bd10      	pop	{r4, pc}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	20000411 	.word	0x20000411

0800726c <__sinit>:
 800726c:	b510      	push	{r4, lr}
 800726e:	0004      	movs	r4, r0
 8007270:	f7ff ffec 	bl	800724c <__sfp_lock_acquire>
 8007274:	6a23      	ldr	r3, [r4, #32]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <__sinit+0x14>
 800727a:	f7ff ffef 	bl	800725c <__sfp_lock_release>
 800727e:	bd10      	pop	{r4, pc}
 8007280:	4b04      	ldr	r3, [pc, #16]	; (8007294 <__sinit+0x28>)
 8007282:	6223      	str	r3, [r4, #32]
 8007284:	4b04      	ldr	r3, [pc, #16]	; (8007298 <__sinit+0x2c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d1f6      	bne.n	800727a <__sinit+0xe>
 800728c:	f7ff ffc0 	bl	8007210 <global_stdio_init.part.0>
 8007290:	e7f3      	b.n	800727a <__sinit+0xe>
 8007292:	46c0      	nop			; (mov r8, r8)
 8007294:	080071d5 	.word	0x080071d5
 8007298:	20000408 	.word	0x20000408

0800729c <_fwalk_sglue>:
 800729c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800729e:	0014      	movs	r4, r2
 80072a0:	2600      	movs	r6, #0
 80072a2:	9000      	str	r0, [sp, #0]
 80072a4:	9101      	str	r1, [sp, #4]
 80072a6:	68a5      	ldr	r5, [r4, #8]
 80072a8:	6867      	ldr	r7, [r4, #4]
 80072aa:	3f01      	subs	r7, #1
 80072ac:	d504      	bpl.n	80072b8 <_fwalk_sglue+0x1c>
 80072ae:	6824      	ldr	r4, [r4, #0]
 80072b0:	2c00      	cmp	r4, #0
 80072b2:	d1f8      	bne.n	80072a6 <_fwalk_sglue+0xa>
 80072b4:	0030      	movs	r0, r6
 80072b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072b8:	89ab      	ldrh	r3, [r5, #12]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d908      	bls.n	80072d0 <_fwalk_sglue+0x34>
 80072be:	220e      	movs	r2, #14
 80072c0:	5eab      	ldrsh	r3, [r5, r2]
 80072c2:	3301      	adds	r3, #1
 80072c4:	d004      	beq.n	80072d0 <_fwalk_sglue+0x34>
 80072c6:	0029      	movs	r1, r5
 80072c8:	9800      	ldr	r0, [sp, #0]
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	4798      	blx	r3
 80072ce:	4306      	orrs	r6, r0
 80072d0:	3568      	adds	r5, #104	; 0x68
 80072d2:	e7ea      	b.n	80072aa <_fwalk_sglue+0xe>

080072d4 <siprintf>:
 80072d4:	b40e      	push	{r1, r2, r3}
 80072d6:	b500      	push	{lr}
 80072d8:	490b      	ldr	r1, [pc, #44]	; (8007308 <siprintf+0x34>)
 80072da:	b09c      	sub	sp, #112	; 0x70
 80072dc:	ab1d      	add	r3, sp, #116	; 0x74
 80072de:	9002      	str	r0, [sp, #8]
 80072e0:	9006      	str	r0, [sp, #24]
 80072e2:	9107      	str	r1, [sp, #28]
 80072e4:	9104      	str	r1, [sp, #16]
 80072e6:	4809      	ldr	r0, [pc, #36]	; (800730c <siprintf+0x38>)
 80072e8:	4909      	ldr	r1, [pc, #36]	; (8007310 <siprintf+0x3c>)
 80072ea:	cb04      	ldmia	r3!, {r2}
 80072ec:	9105      	str	r1, [sp, #20]
 80072ee:	6800      	ldr	r0, [r0, #0]
 80072f0:	a902      	add	r1, sp, #8
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	f002 f9dc 	bl	80096b0 <_svfiprintf_r>
 80072f8:	2200      	movs	r2, #0
 80072fa:	9b02      	ldr	r3, [sp, #8]
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	b01c      	add	sp, #112	; 0x70
 8007300:	bc08      	pop	{r3}
 8007302:	b003      	add	sp, #12
 8007304:	4718      	bx	r3
 8007306:	46c0      	nop			; (mov r8, r8)
 8007308:	7fffffff 	.word	0x7fffffff
 800730c:	200001d4 	.word	0x200001d4
 8007310:	ffff0208 	.word	0xffff0208

08007314 <__sread>:
 8007314:	b570      	push	{r4, r5, r6, lr}
 8007316:	000c      	movs	r4, r1
 8007318:	250e      	movs	r5, #14
 800731a:	5f49      	ldrsh	r1, [r1, r5]
 800731c:	f000 f88a 	bl	8007434 <_read_r>
 8007320:	2800      	cmp	r0, #0
 8007322:	db03      	blt.n	800732c <__sread+0x18>
 8007324:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007326:	181b      	adds	r3, r3, r0
 8007328:	6563      	str	r3, [r4, #84]	; 0x54
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	4a02      	ldr	r2, [pc, #8]	; (8007338 <__sread+0x24>)
 8007330:	4013      	ands	r3, r2
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	e7f9      	b.n	800732a <__sread+0x16>
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	ffffefff 	.word	0xffffefff

0800733c <__swrite>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	001f      	movs	r7, r3
 8007340:	898b      	ldrh	r3, [r1, #12]
 8007342:	0005      	movs	r5, r0
 8007344:	000c      	movs	r4, r1
 8007346:	0016      	movs	r6, r2
 8007348:	05db      	lsls	r3, r3, #23
 800734a:	d505      	bpl.n	8007358 <__swrite+0x1c>
 800734c:	230e      	movs	r3, #14
 800734e:	5ec9      	ldrsh	r1, [r1, r3]
 8007350:	2200      	movs	r2, #0
 8007352:	2302      	movs	r3, #2
 8007354:	f000 f85a 	bl	800740c <_lseek_r>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	4a05      	ldr	r2, [pc, #20]	; (8007370 <__swrite+0x34>)
 800735c:	0028      	movs	r0, r5
 800735e:	4013      	ands	r3, r2
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	0032      	movs	r2, r6
 8007364:	230e      	movs	r3, #14
 8007366:	5ee1      	ldrsh	r1, [r4, r3]
 8007368:	003b      	movs	r3, r7
 800736a:	f000 f877 	bl	800745c <_write_r>
 800736e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007370:	ffffefff 	.word	0xffffefff

08007374 <__sseek>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	000c      	movs	r4, r1
 8007378:	250e      	movs	r5, #14
 800737a:	5f49      	ldrsh	r1, [r1, r5]
 800737c:	f000 f846 	bl	800740c <_lseek_r>
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	1c42      	adds	r2, r0, #1
 8007384:	d103      	bne.n	800738e <__sseek+0x1a>
 8007386:	4a05      	ldr	r2, [pc, #20]	; (800739c <__sseek+0x28>)
 8007388:	4013      	ands	r3, r2
 800738a:	81a3      	strh	r3, [r4, #12]
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	2280      	movs	r2, #128	; 0x80
 8007390:	0152      	lsls	r2, r2, #5
 8007392:	4313      	orrs	r3, r2
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	6560      	str	r0, [r4, #84]	; 0x54
 8007398:	e7f8      	b.n	800738c <__sseek+0x18>
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	ffffefff 	.word	0xffffefff

080073a0 <__sclose>:
 80073a0:	b510      	push	{r4, lr}
 80073a2:	230e      	movs	r3, #14
 80073a4:	5ec9      	ldrsh	r1, [r1, r3]
 80073a6:	f000 f81f 	bl	80073e8 <_close_r>
 80073aa:	bd10      	pop	{r4, pc}

080073ac <memset>:
 80073ac:	0003      	movs	r3, r0
 80073ae:	1882      	adds	r2, r0, r2
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d100      	bne.n	80073b6 <memset+0xa>
 80073b4:	4770      	bx	lr
 80073b6:	7019      	strb	r1, [r3, #0]
 80073b8:	3301      	adds	r3, #1
 80073ba:	e7f9      	b.n	80073b0 <memset+0x4>

080073bc <strncmp>:
 80073bc:	b530      	push	{r4, r5, lr}
 80073be:	0005      	movs	r5, r0
 80073c0:	1e10      	subs	r0, r2, #0
 80073c2:	d00b      	beq.n	80073dc <strncmp+0x20>
 80073c4:	2400      	movs	r4, #0
 80073c6:	3a01      	subs	r2, #1
 80073c8:	5d2b      	ldrb	r3, [r5, r4]
 80073ca:	5d08      	ldrb	r0, [r1, r4]
 80073cc:	4283      	cmp	r3, r0
 80073ce:	d104      	bne.n	80073da <strncmp+0x1e>
 80073d0:	42a2      	cmp	r2, r4
 80073d2:	d002      	beq.n	80073da <strncmp+0x1e>
 80073d4:	3401      	adds	r4, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1f6      	bne.n	80073c8 <strncmp+0xc>
 80073da:	1a18      	subs	r0, r3, r0
 80073dc:	bd30      	pop	{r4, r5, pc}
	...

080073e0 <_localeconv_r>:
 80073e0:	4800      	ldr	r0, [pc, #0]	; (80073e4 <_localeconv_r+0x4>)
 80073e2:	4770      	bx	lr
 80073e4:	2000010c 	.word	0x2000010c

080073e8 <_close_r>:
 80073e8:	2300      	movs	r3, #0
 80073ea:	b570      	push	{r4, r5, r6, lr}
 80073ec:	4d06      	ldr	r5, [pc, #24]	; (8007408 <_close_r+0x20>)
 80073ee:	0004      	movs	r4, r0
 80073f0:	0008      	movs	r0, r1
 80073f2:	602b      	str	r3, [r5, #0]
 80073f4:	f7fb fdd6 	bl	8002fa4 <_close>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d103      	bne.n	8007404 <_close_r+0x1c>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d000      	beq.n	8007404 <_close_r+0x1c>
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	bd70      	pop	{r4, r5, r6, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	2000040c 	.word	0x2000040c

0800740c <_lseek_r>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	0004      	movs	r4, r0
 8007410:	0008      	movs	r0, r1
 8007412:	0011      	movs	r1, r2
 8007414:	001a      	movs	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	4d05      	ldr	r5, [pc, #20]	; (8007430 <_lseek_r+0x24>)
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fb fde3 	bl	8002fe6 <_lseek>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d103      	bne.n	800742c <_lseek_r+0x20>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d000      	beq.n	800742c <_lseek_r+0x20>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	2000040c 	.word	0x2000040c

08007434 <_read_r>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	0004      	movs	r4, r0
 8007438:	0008      	movs	r0, r1
 800743a:	0011      	movs	r1, r2
 800743c:	001a      	movs	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	4d05      	ldr	r5, [pc, #20]	; (8007458 <_read_r+0x24>)
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7fb fd75 	bl	8002f32 <_read>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d103      	bne.n	8007454 <_read_r+0x20>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d000      	beq.n	8007454 <_read_r+0x20>
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd70      	pop	{r4, r5, r6, pc}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	2000040c 	.word	0x2000040c

0800745c <_write_r>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	0004      	movs	r4, r0
 8007460:	0008      	movs	r0, r1
 8007462:	0011      	movs	r1, r2
 8007464:	001a      	movs	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	4d05      	ldr	r5, [pc, #20]	; (8007480 <_write_r+0x24>)
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	f7fb fd7e 	bl	8002f6c <_write>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d103      	bne.n	800747c <_write_r+0x20>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d000      	beq.n	800747c <_write_r+0x20>
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	bd70      	pop	{r4, r5, r6, pc}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	2000040c 	.word	0x2000040c

08007484 <__errno>:
 8007484:	4b01      	ldr	r3, [pc, #4]	; (800748c <__errno+0x8>)
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	4770      	bx	lr
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	200001d4 	.word	0x200001d4

08007490 <__libc_init_array>:
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	2600      	movs	r6, #0
 8007494:	4c0c      	ldr	r4, [pc, #48]	; (80074c8 <__libc_init_array+0x38>)
 8007496:	4d0d      	ldr	r5, [pc, #52]	; (80074cc <__libc_init_array+0x3c>)
 8007498:	1b64      	subs	r4, r4, r5
 800749a:	10a4      	asrs	r4, r4, #2
 800749c:	42a6      	cmp	r6, r4
 800749e:	d109      	bne.n	80074b4 <__libc_init_array+0x24>
 80074a0:	2600      	movs	r6, #0
 80074a2:	f002 fe35 	bl	800a110 <_init>
 80074a6:	4c0a      	ldr	r4, [pc, #40]	; (80074d0 <__libc_init_array+0x40>)
 80074a8:	4d0a      	ldr	r5, [pc, #40]	; (80074d4 <__libc_init_array+0x44>)
 80074aa:	1b64      	subs	r4, r4, r5
 80074ac:	10a4      	asrs	r4, r4, #2
 80074ae:	42a6      	cmp	r6, r4
 80074b0:	d105      	bne.n	80074be <__libc_init_array+0x2e>
 80074b2:	bd70      	pop	{r4, r5, r6, pc}
 80074b4:	00b3      	lsls	r3, r6, #2
 80074b6:	58eb      	ldr	r3, [r5, r3]
 80074b8:	4798      	blx	r3
 80074ba:	3601      	adds	r6, #1
 80074bc:	e7ee      	b.n	800749c <__libc_init_array+0xc>
 80074be:	00b3      	lsls	r3, r6, #2
 80074c0:	58eb      	ldr	r3, [r5, r3]
 80074c2:	4798      	blx	r3
 80074c4:	3601      	adds	r6, #1
 80074c6:	e7f2      	b.n	80074ae <__libc_init_array+0x1e>
 80074c8:	0800a6bc 	.word	0x0800a6bc
 80074cc:	0800a6bc 	.word	0x0800a6bc
 80074d0:	0800a6c0 	.word	0x0800a6c0
 80074d4:	0800a6bc 	.word	0x0800a6bc

080074d8 <__retarget_lock_init_recursive>:
 80074d8:	4770      	bx	lr

080074da <__retarget_lock_acquire_recursive>:
 80074da:	4770      	bx	lr

080074dc <__retarget_lock_release_recursive>:
 80074dc:	4770      	bx	lr

080074de <memchr>:
 80074de:	b2c9      	uxtb	r1, r1
 80074e0:	1882      	adds	r2, r0, r2
 80074e2:	4290      	cmp	r0, r2
 80074e4:	d101      	bne.n	80074ea <memchr+0xc>
 80074e6:	2000      	movs	r0, #0
 80074e8:	4770      	bx	lr
 80074ea:	7803      	ldrb	r3, [r0, #0]
 80074ec:	428b      	cmp	r3, r1
 80074ee:	d0fb      	beq.n	80074e8 <memchr+0xa>
 80074f0:	3001      	adds	r0, #1
 80074f2:	e7f6      	b.n	80074e2 <memchr+0x4>

080074f4 <memcpy>:
 80074f4:	2300      	movs	r3, #0
 80074f6:	b510      	push	{r4, lr}
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d100      	bne.n	80074fe <memcpy+0xa>
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	5ccc      	ldrb	r4, [r1, r3]
 8007500:	54c4      	strb	r4, [r0, r3]
 8007502:	3301      	adds	r3, #1
 8007504:	e7f8      	b.n	80074f8 <memcpy+0x4>
	...

08007508 <nan>:
 8007508:	2000      	movs	r0, #0
 800750a:	4901      	ldr	r1, [pc, #4]	; (8007510 <nan+0x8>)
 800750c:	4770      	bx	lr
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	7ff80000 	.word	0x7ff80000

08007514 <nanf>:
 8007514:	4800      	ldr	r0, [pc, #0]	; (8007518 <nanf+0x4>)
 8007516:	4770      	bx	lr
 8007518:	7fc00000 	.word	0x7fc00000

0800751c <quorem>:
 800751c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751e:	6902      	ldr	r2, [r0, #16]
 8007520:	690b      	ldr	r3, [r1, #16]
 8007522:	b089      	sub	sp, #36	; 0x24
 8007524:	0007      	movs	r7, r0
 8007526:	9104      	str	r1, [sp, #16]
 8007528:	2000      	movs	r0, #0
 800752a:	429a      	cmp	r2, r3
 800752c:	db69      	blt.n	8007602 <quorem+0xe6>
 800752e:	3b01      	subs	r3, #1
 8007530:	009c      	lsls	r4, r3, #2
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	000b      	movs	r3, r1
 8007536:	3314      	adds	r3, #20
 8007538:	9306      	str	r3, [sp, #24]
 800753a:	191b      	adds	r3, r3, r4
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	003b      	movs	r3, r7
 8007540:	3314      	adds	r3, #20
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	191c      	adds	r4, r3, r4
 8007546:	9b05      	ldr	r3, [sp, #20]
 8007548:	6826      	ldr	r6, [r4, #0]
 800754a:	681d      	ldr	r5, [r3, #0]
 800754c:	0030      	movs	r0, r6
 800754e:	3501      	adds	r5, #1
 8007550:	0029      	movs	r1, r5
 8007552:	f7f8 fdf3 	bl	800013c <__udivsi3>
 8007556:	9002      	str	r0, [sp, #8]
 8007558:	42ae      	cmp	r6, r5
 800755a:	d329      	bcc.n	80075b0 <quorem+0x94>
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	2600      	movs	r6, #0
 8007560:	469c      	mov	ip, r3
 8007562:	9d03      	ldr	r5, [sp, #12]
 8007564:	9606      	str	r6, [sp, #24]
 8007566:	4662      	mov	r2, ip
 8007568:	ca08      	ldmia	r2!, {r3}
 800756a:	6828      	ldr	r0, [r5, #0]
 800756c:	4694      	mov	ip, r2
 800756e:	9a02      	ldr	r2, [sp, #8]
 8007570:	b299      	uxth	r1, r3
 8007572:	4351      	muls	r1, r2
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	4353      	muls	r3, r2
 8007578:	1989      	adds	r1, r1, r6
 800757a:	0c0a      	lsrs	r2, r1, #16
 800757c:	189b      	adds	r3, r3, r2
 800757e:	9307      	str	r3, [sp, #28]
 8007580:	0c1e      	lsrs	r6, r3, #16
 8007582:	9b06      	ldr	r3, [sp, #24]
 8007584:	b282      	uxth	r2, r0
 8007586:	18d2      	adds	r2, r2, r3
 8007588:	466b      	mov	r3, sp
 800758a:	b289      	uxth	r1, r1
 800758c:	8b9b      	ldrh	r3, [r3, #28]
 800758e:	1a52      	subs	r2, r2, r1
 8007590:	0c01      	lsrs	r1, r0, #16
 8007592:	1ac9      	subs	r1, r1, r3
 8007594:	1413      	asrs	r3, r2, #16
 8007596:	18cb      	adds	r3, r1, r3
 8007598:	1419      	asrs	r1, r3, #16
 800759a:	b292      	uxth	r2, r2
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	4313      	orrs	r3, r2
 80075a0:	c508      	stmia	r5!, {r3}
 80075a2:	9b05      	ldr	r3, [sp, #20]
 80075a4:	9106      	str	r1, [sp, #24]
 80075a6:	4563      	cmp	r3, ip
 80075a8:	d2dd      	bcs.n	8007566 <quorem+0x4a>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d030      	beq.n	8007612 <quorem+0xf6>
 80075b0:	0038      	movs	r0, r7
 80075b2:	9904      	ldr	r1, [sp, #16]
 80075b4:	f001 fd98 	bl	80090e8 <__mcmp>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	db21      	blt.n	8007600 <quorem+0xe4>
 80075bc:	0038      	movs	r0, r7
 80075be:	2600      	movs	r6, #0
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	9c04      	ldr	r4, [sp, #16]
 80075c4:	3301      	adds	r3, #1
 80075c6:	9302      	str	r3, [sp, #8]
 80075c8:	3014      	adds	r0, #20
 80075ca:	3414      	adds	r4, #20
 80075cc:	6803      	ldr	r3, [r0, #0]
 80075ce:	cc02      	ldmia	r4!, {r1}
 80075d0:	b29d      	uxth	r5, r3
 80075d2:	19ad      	adds	r5, r5, r6
 80075d4:	b28a      	uxth	r2, r1
 80075d6:	1aaa      	subs	r2, r5, r2
 80075d8:	0c09      	lsrs	r1, r1, #16
 80075da:	0c1b      	lsrs	r3, r3, #16
 80075dc:	1a5b      	subs	r3, r3, r1
 80075de:	1411      	asrs	r1, r2, #16
 80075e0:	185b      	adds	r3, r3, r1
 80075e2:	141e      	asrs	r6, r3, #16
 80075e4:	b292      	uxth	r2, r2
 80075e6:	041b      	lsls	r3, r3, #16
 80075e8:	4313      	orrs	r3, r2
 80075ea:	c008      	stmia	r0!, {r3}
 80075ec:	9b05      	ldr	r3, [sp, #20]
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	d2ec      	bcs.n	80075cc <quorem+0xb0>
 80075f2:	9b01      	ldr	r3, [sp, #4]
 80075f4:	9a03      	ldr	r2, [sp, #12]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	18d3      	adds	r3, r2, r3
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	2a00      	cmp	r2, #0
 80075fe:	d015      	beq.n	800762c <quorem+0x110>
 8007600:	9802      	ldr	r0, [sp, #8]
 8007602:	b009      	add	sp, #36	; 0x24
 8007604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <quorem+0xfe>
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	3b01      	subs	r3, #1
 8007610:	9301      	str	r3, [sp, #4]
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	3c04      	subs	r4, #4
 8007616:	42a3      	cmp	r3, r4
 8007618:	d3f5      	bcc.n	8007606 <quorem+0xea>
 800761a:	9b01      	ldr	r3, [sp, #4]
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	e7c7      	b.n	80075b0 <quorem+0x94>
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	2a00      	cmp	r2, #0
 8007624:	d106      	bne.n	8007634 <quorem+0x118>
 8007626:	9a01      	ldr	r2, [sp, #4]
 8007628:	3a01      	subs	r2, #1
 800762a:	9201      	str	r2, [sp, #4]
 800762c:	9a03      	ldr	r2, [sp, #12]
 800762e:	3b04      	subs	r3, #4
 8007630:	429a      	cmp	r2, r3
 8007632:	d3f5      	bcc.n	8007620 <quorem+0x104>
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	e7e2      	b.n	8007600 <quorem+0xe4>
	...

0800763c <_dtoa_r>:
 800763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763e:	0014      	movs	r4, r2
 8007640:	001d      	movs	r5, r3
 8007642:	69c6      	ldr	r6, [r0, #28]
 8007644:	b09d      	sub	sp, #116	; 0x74
 8007646:	9408      	str	r4, [sp, #32]
 8007648:	9509      	str	r5, [sp, #36]	; 0x24
 800764a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800764c:	9004      	str	r0, [sp, #16]
 800764e:	2e00      	cmp	r6, #0
 8007650:	d10f      	bne.n	8007672 <_dtoa_r+0x36>
 8007652:	2010      	movs	r0, #16
 8007654:	f001 f9a6 	bl	80089a4 <malloc>
 8007658:	9b04      	ldr	r3, [sp, #16]
 800765a:	1e02      	subs	r2, r0, #0
 800765c:	61d8      	str	r0, [r3, #28]
 800765e:	d104      	bne.n	800766a <_dtoa_r+0x2e>
 8007660:	21ef      	movs	r1, #239	; 0xef
 8007662:	4bc6      	ldr	r3, [pc, #792]	; (800797c <_dtoa_r+0x340>)
 8007664:	48c6      	ldr	r0, [pc, #792]	; (8007980 <_dtoa_r+0x344>)
 8007666:	f002 f9fd 	bl	8009a64 <__assert_func>
 800766a:	6046      	str	r6, [r0, #4]
 800766c:	6086      	str	r6, [r0, #8]
 800766e:	6006      	str	r6, [r0, #0]
 8007670:	60c6      	str	r6, [r0, #12]
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	6819      	ldr	r1, [r3, #0]
 8007678:	2900      	cmp	r1, #0
 800767a:	d00b      	beq.n	8007694 <_dtoa_r+0x58>
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	2301      	movs	r3, #1
 8007680:	4093      	lsls	r3, r2
 8007682:	604a      	str	r2, [r1, #4]
 8007684:	608b      	str	r3, [r1, #8]
 8007686:	9804      	ldr	r0, [sp, #16]
 8007688:	f001 faa0 	bl	8008bcc <_Bfree>
 800768c:	2200      	movs	r2, #0
 800768e:	9b04      	ldr	r3, [sp, #16]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	2d00      	cmp	r5, #0
 8007696:	da1e      	bge.n	80076d6 <_dtoa_r+0x9a>
 8007698:	2301      	movs	r3, #1
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	006b      	lsls	r3, r5, #1
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	9309      	str	r3, [sp, #36]	; 0x24
 80076a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80076a4:	4bb7      	ldr	r3, [pc, #732]	; (8007984 <_dtoa_r+0x348>)
 80076a6:	4ab7      	ldr	r2, [pc, #732]	; (8007984 <_dtoa_r+0x348>)
 80076a8:	403b      	ands	r3, r7
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d116      	bne.n	80076dc <_dtoa_r+0xa0>
 80076ae:	4bb6      	ldr	r3, [pc, #728]	; (8007988 <_dtoa_r+0x34c>)
 80076b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	033b      	lsls	r3, r7, #12
 80076b6:	0b1b      	lsrs	r3, r3, #12
 80076b8:	4323      	orrs	r3, r4
 80076ba:	d101      	bne.n	80076c0 <_dtoa_r+0x84>
 80076bc:	f000 fdb5 	bl	800822a <_dtoa_r+0xbee>
 80076c0:	4bb2      	ldr	r3, [pc, #712]	; (800798c <_dtoa_r+0x350>)
 80076c2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076c4:	9306      	str	r3, [sp, #24]
 80076c6:	2a00      	cmp	r2, #0
 80076c8:	d002      	beq.n	80076d0 <_dtoa_r+0x94>
 80076ca:	4bb1      	ldr	r3, [pc, #708]	; (8007990 <_dtoa_r+0x354>)
 80076cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	9806      	ldr	r0, [sp, #24]
 80076d2:	b01d      	add	sp, #116	; 0x74
 80076d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d6:	2300      	movs	r3, #0
 80076d8:	603b      	str	r3, [r7, #0]
 80076da:	e7e2      	b.n	80076a2 <_dtoa_r+0x66>
 80076dc:	9a08      	ldr	r2, [sp, #32]
 80076de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e0:	9210      	str	r2, [sp, #64]	; 0x40
 80076e2:	9311      	str	r3, [sp, #68]	; 0x44
 80076e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80076e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80076e8:	2200      	movs	r2, #0
 80076ea:	2300      	movs	r3, #0
 80076ec:	f7f8 feac 	bl	8000448 <__aeabi_dcmpeq>
 80076f0:	1e06      	subs	r6, r0, #0
 80076f2:	d009      	beq.n	8007708 <_dtoa_r+0xcc>
 80076f4:	2301      	movs	r3, #1
 80076f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4ba6      	ldr	r3, [pc, #664]	; (8007994 <_dtoa_r+0x358>)
 80076fc:	9306      	str	r3, [sp, #24]
 80076fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0e5      	beq.n	80076d0 <_dtoa_r+0x94>
 8007704:	4ba4      	ldr	r3, [pc, #656]	; (8007998 <_dtoa_r+0x35c>)
 8007706:	e7e1      	b.n	80076cc <_dtoa_r+0x90>
 8007708:	ab1a      	add	r3, sp, #104	; 0x68
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	ab1b      	add	r3, sp, #108	; 0x6c
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	9804      	ldr	r0, [sp, #16]
 8007712:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007714:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007716:	f001 fe03 	bl	8009320 <__d2b>
 800771a:	007a      	lsls	r2, r7, #1
 800771c:	9005      	str	r0, [sp, #20]
 800771e:	0d52      	lsrs	r2, r2, #21
 8007720:	d100      	bne.n	8007724 <_dtoa_r+0xe8>
 8007722:	e07b      	b.n	800781c <_dtoa_r+0x1e0>
 8007724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007726:	9617      	str	r6, [sp, #92]	; 0x5c
 8007728:	0319      	lsls	r1, r3, #12
 800772a:	4b9c      	ldr	r3, [pc, #624]	; (800799c <_dtoa_r+0x360>)
 800772c:	0b09      	lsrs	r1, r1, #12
 800772e:	430b      	orrs	r3, r1
 8007730:	499b      	ldr	r1, [pc, #620]	; (80079a0 <_dtoa_r+0x364>)
 8007732:	1857      	adds	r7, r2, r1
 8007734:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007736:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007738:	0019      	movs	r1, r3
 800773a:	2200      	movs	r2, #0
 800773c:	4b99      	ldr	r3, [pc, #612]	; (80079a4 <_dtoa_r+0x368>)
 800773e:	f7fa fa29 	bl	8001b94 <__aeabi_dsub>
 8007742:	4a99      	ldr	r2, [pc, #612]	; (80079a8 <_dtoa_r+0x36c>)
 8007744:	4b99      	ldr	r3, [pc, #612]	; (80079ac <_dtoa_r+0x370>)
 8007746:	f7f9 ff63 	bl	8001610 <__aeabi_dmul>
 800774a:	4a99      	ldr	r2, [pc, #612]	; (80079b0 <_dtoa_r+0x374>)
 800774c:	4b99      	ldr	r3, [pc, #612]	; (80079b4 <_dtoa_r+0x378>)
 800774e:	f7f9 f805 	bl	800075c <__aeabi_dadd>
 8007752:	0004      	movs	r4, r0
 8007754:	0038      	movs	r0, r7
 8007756:	000d      	movs	r5, r1
 8007758:	f7fa fdf2 	bl	8002340 <__aeabi_i2d>
 800775c:	4a96      	ldr	r2, [pc, #600]	; (80079b8 <_dtoa_r+0x37c>)
 800775e:	4b97      	ldr	r3, [pc, #604]	; (80079bc <_dtoa_r+0x380>)
 8007760:	f7f9 ff56 	bl	8001610 <__aeabi_dmul>
 8007764:	0002      	movs	r2, r0
 8007766:	000b      	movs	r3, r1
 8007768:	0020      	movs	r0, r4
 800776a:	0029      	movs	r1, r5
 800776c:	f7f8 fff6 	bl	800075c <__aeabi_dadd>
 8007770:	0004      	movs	r4, r0
 8007772:	000d      	movs	r5, r1
 8007774:	f7fa fdae 	bl	80022d4 <__aeabi_d2iz>
 8007778:	2200      	movs	r2, #0
 800777a:	9003      	str	r0, [sp, #12]
 800777c:	2300      	movs	r3, #0
 800777e:	0020      	movs	r0, r4
 8007780:	0029      	movs	r1, r5
 8007782:	f7f8 fe67 	bl	8000454 <__aeabi_dcmplt>
 8007786:	2800      	cmp	r0, #0
 8007788:	d00b      	beq.n	80077a2 <_dtoa_r+0x166>
 800778a:	9803      	ldr	r0, [sp, #12]
 800778c:	f7fa fdd8 	bl	8002340 <__aeabi_i2d>
 8007790:	002b      	movs	r3, r5
 8007792:	0022      	movs	r2, r4
 8007794:	f7f8 fe58 	bl	8000448 <__aeabi_dcmpeq>
 8007798:	4243      	negs	r3, r0
 800779a:	4158      	adcs	r0, r3
 800779c:	9b03      	ldr	r3, [sp, #12]
 800779e:	1a1b      	subs	r3, r3, r0
 80077a0:	9303      	str	r3, [sp, #12]
 80077a2:	2301      	movs	r3, #1
 80077a4:	9316      	str	r3, [sp, #88]	; 0x58
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	2b16      	cmp	r3, #22
 80077aa:	d810      	bhi.n	80077ce <_dtoa_r+0x192>
 80077ac:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077b0:	9a03      	ldr	r2, [sp, #12]
 80077b2:	4b83      	ldr	r3, [pc, #524]	; (80079c0 <_dtoa_r+0x384>)
 80077b4:	00d2      	lsls	r2, r2, #3
 80077b6:	189b      	adds	r3, r3, r2
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f7f8 fe4a 	bl	8000454 <__aeabi_dcmplt>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d047      	beq.n	8007854 <_dtoa_r+0x218>
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	3b01      	subs	r3, #1
 80077c8:	9303      	str	r3, [sp, #12]
 80077ca:	2300      	movs	r3, #0
 80077cc:	9316      	str	r3, [sp, #88]	; 0x58
 80077ce:	2200      	movs	r2, #0
 80077d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80077d2:	920a      	str	r2, [sp, #40]	; 0x28
 80077d4:	1bdb      	subs	r3, r3, r7
 80077d6:	1e5a      	subs	r2, r3, #1
 80077d8:	d53e      	bpl.n	8007858 <_dtoa_r+0x21c>
 80077da:	2201      	movs	r2, #1
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	930a      	str	r3, [sp, #40]	; 0x28
 80077e0:	2300      	movs	r3, #0
 80077e2:	930c      	str	r3, [sp, #48]	; 0x30
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	db38      	blt.n	800785c <_dtoa_r+0x220>
 80077ea:	9a03      	ldr	r2, [sp, #12]
 80077ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ee:	4694      	mov	ip, r2
 80077f0:	4463      	add	r3, ip
 80077f2:	930c      	str	r3, [sp, #48]	; 0x30
 80077f4:	2300      	movs	r3, #0
 80077f6:	9213      	str	r2, [sp, #76]	; 0x4c
 80077f8:	930d      	str	r3, [sp, #52]	; 0x34
 80077fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077fc:	2401      	movs	r4, #1
 80077fe:	2b09      	cmp	r3, #9
 8007800:	d867      	bhi.n	80078d2 <_dtoa_r+0x296>
 8007802:	2b05      	cmp	r3, #5
 8007804:	dd02      	ble.n	800780c <_dtoa_r+0x1d0>
 8007806:	2400      	movs	r4, #0
 8007808:	3b04      	subs	r3, #4
 800780a:	9322      	str	r3, [sp, #136]	; 0x88
 800780c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800780e:	1e98      	subs	r0, r3, #2
 8007810:	2803      	cmp	r0, #3
 8007812:	d867      	bhi.n	80078e4 <_dtoa_r+0x2a8>
 8007814:	f7f8 fc7e 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007818:	5b383a2b 	.word	0x5b383a2b
 800781c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800781e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8007820:	18f6      	adds	r6, r6, r3
 8007822:	4b68      	ldr	r3, [pc, #416]	; (80079c4 <_dtoa_r+0x388>)
 8007824:	18f2      	adds	r2, r6, r3
 8007826:	2a20      	cmp	r2, #32
 8007828:	dd0f      	ble.n	800784a <_dtoa_r+0x20e>
 800782a:	2340      	movs	r3, #64	; 0x40
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	409f      	lsls	r7, r3
 8007830:	4b65      	ldr	r3, [pc, #404]	; (80079c8 <_dtoa_r+0x38c>)
 8007832:	0038      	movs	r0, r7
 8007834:	18f3      	adds	r3, r6, r3
 8007836:	40dc      	lsrs	r4, r3
 8007838:	4320      	orrs	r0, r4
 800783a:	f7fa fdb1 	bl	80023a0 <__aeabi_ui2d>
 800783e:	2201      	movs	r2, #1
 8007840:	4b62      	ldr	r3, [pc, #392]	; (80079cc <_dtoa_r+0x390>)
 8007842:	1e77      	subs	r7, r6, #1
 8007844:	18cb      	adds	r3, r1, r3
 8007846:	9217      	str	r2, [sp, #92]	; 0x5c
 8007848:	e776      	b.n	8007738 <_dtoa_r+0xfc>
 800784a:	2320      	movs	r3, #32
 800784c:	0020      	movs	r0, r4
 800784e:	1a9b      	subs	r3, r3, r2
 8007850:	4098      	lsls	r0, r3
 8007852:	e7f2      	b.n	800783a <_dtoa_r+0x1fe>
 8007854:	9016      	str	r0, [sp, #88]	; 0x58
 8007856:	e7ba      	b.n	80077ce <_dtoa_r+0x192>
 8007858:	920c      	str	r2, [sp, #48]	; 0x30
 800785a:	e7c3      	b.n	80077e4 <_dtoa_r+0x1a8>
 800785c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785e:	9a03      	ldr	r2, [sp, #12]
 8007860:	1a9b      	subs	r3, r3, r2
 8007862:	930a      	str	r3, [sp, #40]	; 0x28
 8007864:	4253      	negs	r3, r2
 8007866:	930d      	str	r3, [sp, #52]	; 0x34
 8007868:	2300      	movs	r3, #0
 800786a:	9313      	str	r3, [sp, #76]	; 0x4c
 800786c:	e7c5      	b.n	80077fa <_dtoa_r+0x1be>
 800786e:	2300      	movs	r3, #0
 8007870:	930f      	str	r3, [sp, #60]	; 0x3c
 8007872:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007874:	930b      	str	r3, [sp, #44]	; 0x2c
 8007876:	9307      	str	r3, [sp, #28]
 8007878:	2b00      	cmp	r3, #0
 800787a:	dc13      	bgt.n	80078a4 <_dtoa_r+0x268>
 800787c:	2301      	movs	r3, #1
 800787e:	001a      	movs	r2, r3
 8007880:	930b      	str	r3, [sp, #44]	; 0x2c
 8007882:	9307      	str	r3, [sp, #28]
 8007884:	9223      	str	r2, [sp, #140]	; 0x8c
 8007886:	e00d      	b.n	80078a4 <_dtoa_r+0x268>
 8007888:	2301      	movs	r3, #1
 800788a:	e7f1      	b.n	8007870 <_dtoa_r+0x234>
 800788c:	2300      	movs	r3, #0
 800788e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007890:	930f      	str	r3, [sp, #60]	; 0x3c
 8007892:	4694      	mov	ip, r2
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	4463      	add	r3, ip
 8007898:	930b      	str	r3, [sp, #44]	; 0x2c
 800789a:	3301      	adds	r3, #1
 800789c:	9307      	str	r3, [sp, #28]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	dc00      	bgt.n	80078a4 <_dtoa_r+0x268>
 80078a2:	2301      	movs	r3, #1
 80078a4:	9a04      	ldr	r2, [sp, #16]
 80078a6:	2100      	movs	r1, #0
 80078a8:	69d0      	ldr	r0, [r2, #28]
 80078aa:	2204      	movs	r2, #4
 80078ac:	0015      	movs	r5, r2
 80078ae:	3514      	adds	r5, #20
 80078b0:	429d      	cmp	r5, r3
 80078b2:	d91b      	bls.n	80078ec <_dtoa_r+0x2b0>
 80078b4:	6041      	str	r1, [r0, #4]
 80078b6:	9804      	ldr	r0, [sp, #16]
 80078b8:	f001 f944 	bl	8008b44 <_Balloc>
 80078bc:	9006      	str	r0, [sp, #24]
 80078be:	2800      	cmp	r0, #0
 80078c0:	d117      	bne.n	80078f2 <_dtoa_r+0x2b6>
 80078c2:	21b0      	movs	r1, #176	; 0xb0
 80078c4:	4b42      	ldr	r3, [pc, #264]	; (80079d0 <_dtoa_r+0x394>)
 80078c6:	482e      	ldr	r0, [pc, #184]	; (8007980 <_dtoa_r+0x344>)
 80078c8:	9a06      	ldr	r2, [sp, #24]
 80078ca:	31ff      	adds	r1, #255	; 0xff
 80078cc:	e6cb      	b.n	8007666 <_dtoa_r+0x2a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e7dd      	b.n	800788e <_dtoa_r+0x252>
 80078d2:	2300      	movs	r3, #0
 80078d4:	940f      	str	r4, [sp, #60]	; 0x3c
 80078d6:	9322      	str	r3, [sp, #136]	; 0x88
 80078d8:	3b01      	subs	r3, #1
 80078da:	930b      	str	r3, [sp, #44]	; 0x2c
 80078dc:	9307      	str	r3, [sp, #28]
 80078de:	2200      	movs	r2, #0
 80078e0:	3313      	adds	r3, #19
 80078e2:	e7cf      	b.n	8007884 <_dtoa_r+0x248>
 80078e4:	2301      	movs	r3, #1
 80078e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80078e8:	3b02      	subs	r3, #2
 80078ea:	e7f6      	b.n	80078da <_dtoa_r+0x29e>
 80078ec:	3101      	adds	r1, #1
 80078ee:	0052      	lsls	r2, r2, #1
 80078f0:	e7dc      	b.n	80078ac <_dtoa_r+0x270>
 80078f2:	9b04      	ldr	r3, [sp, #16]
 80078f4:	9a06      	ldr	r2, [sp, #24]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	601a      	str	r2, [r3, #0]
 80078fa:	9b07      	ldr	r3, [sp, #28]
 80078fc:	2b0e      	cmp	r3, #14
 80078fe:	d900      	bls.n	8007902 <_dtoa_r+0x2c6>
 8007900:	e0e5      	b.n	8007ace <_dtoa_r+0x492>
 8007902:	2c00      	cmp	r4, #0
 8007904:	d100      	bne.n	8007908 <_dtoa_r+0x2cc>
 8007906:	e0e2      	b.n	8007ace <_dtoa_r+0x492>
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	dd64      	ble.n	80079d8 <_dtoa_r+0x39c>
 800790e:	210f      	movs	r1, #15
 8007910:	9a03      	ldr	r2, [sp, #12]
 8007912:	4b2b      	ldr	r3, [pc, #172]	; (80079c0 <_dtoa_r+0x384>)
 8007914:	400a      	ands	r2, r1
 8007916:	00d2      	lsls	r2, r2, #3
 8007918:	189b      	adds	r3, r3, r2
 800791a:	681e      	ldr	r6, [r3, #0]
 800791c:	685f      	ldr	r7, [r3, #4]
 800791e:	9b03      	ldr	r3, [sp, #12]
 8007920:	2402      	movs	r4, #2
 8007922:	111d      	asrs	r5, r3, #4
 8007924:	05db      	lsls	r3, r3, #23
 8007926:	d50a      	bpl.n	800793e <_dtoa_r+0x302>
 8007928:	4b2a      	ldr	r3, [pc, #168]	; (80079d4 <_dtoa_r+0x398>)
 800792a:	400d      	ands	r5, r1
 800792c:	6a1a      	ldr	r2, [r3, #32]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007932:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007934:	f7f9 fa72 	bl	8000e1c <__aeabi_ddiv>
 8007938:	9008      	str	r0, [sp, #32]
 800793a:	9109      	str	r1, [sp, #36]	; 0x24
 800793c:	3401      	adds	r4, #1
 800793e:	4b25      	ldr	r3, [pc, #148]	; (80079d4 <_dtoa_r+0x398>)
 8007940:	930e      	str	r3, [sp, #56]	; 0x38
 8007942:	2d00      	cmp	r5, #0
 8007944:	d108      	bne.n	8007958 <_dtoa_r+0x31c>
 8007946:	9808      	ldr	r0, [sp, #32]
 8007948:	9909      	ldr	r1, [sp, #36]	; 0x24
 800794a:	0032      	movs	r2, r6
 800794c:	003b      	movs	r3, r7
 800794e:	f7f9 fa65 	bl	8000e1c <__aeabi_ddiv>
 8007952:	9008      	str	r0, [sp, #32]
 8007954:	9109      	str	r1, [sp, #36]	; 0x24
 8007956:	e05a      	b.n	8007a0e <_dtoa_r+0x3d2>
 8007958:	2301      	movs	r3, #1
 800795a:	421d      	tst	r5, r3
 800795c:	d009      	beq.n	8007972 <_dtoa_r+0x336>
 800795e:	18e4      	adds	r4, r4, r3
 8007960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007962:	0030      	movs	r0, r6
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	0039      	movs	r1, r7
 800796a:	f7f9 fe51 	bl	8001610 <__aeabi_dmul>
 800796e:	0006      	movs	r6, r0
 8007970:	000f      	movs	r7, r1
 8007972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007974:	106d      	asrs	r5, r5, #1
 8007976:	3308      	adds	r3, #8
 8007978:	e7e2      	b.n	8007940 <_dtoa_r+0x304>
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	0800a32e 	.word	0x0800a32e
 8007980:	0800a345 	.word	0x0800a345
 8007984:	7ff00000 	.word	0x7ff00000
 8007988:	0000270f 	.word	0x0000270f
 800798c:	0800a32a 	.word	0x0800a32a
 8007990:	0800a32d 	.word	0x0800a32d
 8007994:	0800a2f0 	.word	0x0800a2f0
 8007998:	0800a2f1 	.word	0x0800a2f1
 800799c:	3ff00000 	.word	0x3ff00000
 80079a0:	fffffc01 	.word	0xfffffc01
 80079a4:	3ff80000 	.word	0x3ff80000
 80079a8:	636f4361 	.word	0x636f4361
 80079ac:	3fd287a7 	.word	0x3fd287a7
 80079b0:	8b60c8b3 	.word	0x8b60c8b3
 80079b4:	3fc68a28 	.word	0x3fc68a28
 80079b8:	509f79fb 	.word	0x509f79fb
 80079bc:	3fd34413 	.word	0x3fd34413
 80079c0:	0800a490 	.word	0x0800a490
 80079c4:	00000432 	.word	0x00000432
 80079c8:	00000412 	.word	0x00000412
 80079cc:	fe100000 	.word	0xfe100000
 80079d0:	0800a39d 	.word	0x0800a39d
 80079d4:	0800a468 	.word	0x0800a468
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	2402      	movs	r4, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d016      	beq.n	8007a0e <_dtoa_r+0x3d2>
 80079e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80079e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80079e4:	220f      	movs	r2, #15
 80079e6:	425d      	negs	r5, r3
 80079e8:	402a      	ands	r2, r5
 80079ea:	4bdd      	ldr	r3, [pc, #884]	; (8007d60 <_dtoa_r+0x724>)
 80079ec:	00d2      	lsls	r2, r2, #3
 80079ee:	189b      	adds	r3, r3, r2
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f7f9 fe0c 	bl	8001610 <__aeabi_dmul>
 80079f8:	2701      	movs	r7, #1
 80079fa:	2300      	movs	r3, #0
 80079fc:	9008      	str	r0, [sp, #32]
 80079fe:	9109      	str	r1, [sp, #36]	; 0x24
 8007a00:	4ed8      	ldr	r6, [pc, #864]	; (8007d64 <_dtoa_r+0x728>)
 8007a02:	112d      	asrs	r5, r5, #4
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	d000      	beq.n	8007a0a <_dtoa_r+0x3ce>
 8007a08:	e091      	b.n	8007b2e <_dtoa_r+0x4f2>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1a1      	bne.n	8007952 <_dtoa_r+0x316>
 8007a0e:	9e08      	ldr	r6, [sp, #32]
 8007a10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d100      	bne.n	8007a1a <_dtoa_r+0x3de>
 8007a18:	e094      	b.n	8007b44 <_dtoa_r+0x508>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	0030      	movs	r0, r6
 8007a1e:	0039      	movs	r1, r7
 8007a20:	4bd1      	ldr	r3, [pc, #836]	; (8007d68 <_dtoa_r+0x72c>)
 8007a22:	f7f8 fd17 	bl	8000454 <__aeabi_dcmplt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d100      	bne.n	8007a2c <_dtoa_r+0x3f0>
 8007a2a:	e08b      	b.n	8007b44 <_dtoa_r+0x508>
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d100      	bne.n	8007a34 <_dtoa_r+0x3f8>
 8007a32:	e087      	b.n	8007b44 <_dtoa_r+0x508>
 8007a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dd45      	ble.n	8007ac6 <_dtoa_r+0x48a>
 8007a3a:	9b03      	ldr	r3, [sp, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	930e      	str	r3, [sp, #56]	; 0x38
 8007a42:	0030      	movs	r0, r6
 8007a44:	4bc9      	ldr	r3, [pc, #804]	; (8007d6c <_dtoa_r+0x730>)
 8007a46:	0039      	movs	r1, r7
 8007a48:	f7f9 fde2 	bl	8001610 <__aeabi_dmul>
 8007a4c:	9008      	str	r0, [sp, #32]
 8007a4e:	9109      	str	r1, [sp, #36]	; 0x24
 8007a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a52:	3401      	adds	r4, #1
 8007a54:	0020      	movs	r0, r4
 8007a56:	9e08      	ldr	r6, [sp, #32]
 8007a58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007a5a:	9312      	str	r3, [sp, #72]	; 0x48
 8007a5c:	f7fa fc70 	bl	8002340 <__aeabi_i2d>
 8007a60:	0032      	movs	r2, r6
 8007a62:	003b      	movs	r3, r7
 8007a64:	f7f9 fdd4 	bl	8001610 <__aeabi_dmul>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4bc1      	ldr	r3, [pc, #772]	; (8007d70 <_dtoa_r+0x734>)
 8007a6c:	f7f8 fe76 	bl	800075c <__aeabi_dadd>
 8007a70:	4ac0      	ldr	r2, [pc, #768]	; (8007d74 <_dtoa_r+0x738>)
 8007a72:	9014      	str	r0, [sp, #80]	; 0x50
 8007a74:	9115      	str	r1, [sp, #84]	; 0x54
 8007a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a78:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007a7a:	4694      	mov	ip, r2
 8007a7c:	9308      	str	r3, [sp, #32]
 8007a7e:	9409      	str	r4, [sp, #36]	; 0x24
 8007a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a82:	4463      	add	r3, ip
 8007a84:	9318      	str	r3, [sp, #96]	; 0x60
 8007a86:	9309      	str	r3, [sp, #36]	; 0x24
 8007a88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d15e      	bne.n	8007b4c <_dtoa_r+0x510>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4bb9      	ldr	r3, [pc, #740]	; (8007d78 <_dtoa_r+0x73c>)
 8007a92:	0030      	movs	r0, r6
 8007a94:	0039      	movs	r1, r7
 8007a96:	f7fa f87d 	bl	8001b94 <__aeabi_dsub>
 8007a9a:	9a08      	ldr	r2, [sp, #32]
 8007a9c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007a9e:	0004      	movs	r4, r0
 8007aa0:	000d      	movs	r5, r1
 8007aa2:	f7f8 fceb 	bl	800047c <__aeabi_dcmpgt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d000      	beq.n	8007aac <_dtoa_r+0x470>
 8007aaa:	e2b3      	b.n	8008014 <_dtoa_r+0x9d8>
 8007aac:	48b3      	ldr	r0, [pc, #716]	; (8007d7c <_dtoa_r+0x740>)
 8007aae:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007ab0:	4684      	mov	ip, r0
 8007ab2:	4461      	add	r1, ip
 8007ab4:	000b      	movs	r3, r1
 8007ab6:	0020      	movs	r0, r4
 8007ab8:	0029      	movs	r1, r5
 8007aba:	9a08      	ldr	r2, [sp, #32]
 8007abc:	f7f8 fcca 	bl	8000454 <__aeabi_dcmplt>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d000      	beq.n	8007ac6 <_dtoa_r+0x48a>
 8007ac4:	e2a3      	b.n	800800e <_dtoa_r+0x9d2>
 8007ac6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ac8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007aca:	9308      	str	r3, [sp, #32]
 8007acc:	9409      	str	r4, [sp, #36]	; 0x24
 8007ace:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	da00      	bge.n	8007ad6 <_dtoa_r+0x49a>
 8007ad4:	e179      	b.n	8007dca <_dtoa_r+0x78e>
 8007ad6:	9a03      	ldr	r2, [sp, #12]
 8007ad8:	2a0e      	cmp	r2, #14
 8007ada:	dd00      	ble.n	8007ade <_dtoa_r+0x4a2>
 8007adc:	e175      	b.n	8007dca <_dtoa_r+0x78e>
 8007ade:	4ba0      	ldr	r3, [pc, #640]	; (8007d60 <_dtoa_r+0x724>)
 8007ae0:	00d2      	lsls	r2, r2, #3
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	681e      	ldr	r6, [r3, #0]
 8007ae6:	685f      	ldr	r7, [r3, #4]
 8007ae8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	db00      	blt.n	8007af0 <_dtoa_r+0x4b4>
 8007aee:	e0e5      	b.n	8007cbc <_dtoa_r+0x680>
 8007af0:	9b07      	ldr	r3, [sp, #28]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dd00      	ble.n	8007af8 <_dtoa_r+0x4bc>
 8007af6:	e0e1      	b.n	8007cbc <_dtoa_r+0x680>
 8007af8:	d000      	beq.n	8007afc <_dtoa_r+0x4c0>
 8007afa:	e288      	b.n	800800e <_dtoa_r+0x9d2>
 8007afc:	2200      	movs	r2, #0
 8007afe:	0030      	movs	r0, r6
 8007b00:	0039      	movs	r1, r7
 8007b02:	4b9d      	ldr	r3, [pc, #628]	; (8007d78 <_dtoa_r+0x73c>)
 8007b04:	f7f9 fd84 	bl	8001610 <__aeabi_dmul>
 8007b08:	9a08      	ldr	r2, [sp, #32]
 8007b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b0c:	f7f8 fcc0 	bl	8000490 <__aeabi_dcmpge>
 8007b10:	9e07      	ldr	r6, [sp, #28]
 8007b12:	0037      	movs	r7, r6
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d000      	beq.n	8007b1a <_dtoa_r+0x4de>
 8007b18:	e25f      	b.n	8007fda <_dtoa_r+0x99e>
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	9a06      	ldr	r2, [sp, #24]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	9308      	str	r3, [sp, #32]
 8007b22:	2331      	movs	r3, #49	; 0x31
 8007b24:	7013      	strb	r3, [r2, #0]
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	9303      	str	r3, [sp, #12]
 8007b2c:	e25a      	b.n	8007fe4 <_dtoa_r+0x9a8>
 8007b2e:	423d      	tst	r5, r7
 8007b30:	d005      	beq.n	8007b3e <_dtoa_r+0x502>
 8007b32:	6832      	ldr	r2, [r6, #0]
 8007b34:	6873      	ldr	r3, [r6, #4]
 8007b36:	f7f9 fd6b 	bl	8001610 <__aeabi_dmul>
 8007b3a:	003b      	movs	r3, r7
 8007b3c:	3401      	adds	r4, #1
 8007b3e:	106d      	asrs	r5, r5, #1
 8007b40:	3608      	adds	r6, #8
 8007b42:	e75f      	b.n	8007a04 <_dtoa_r+0x3c8>
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	930e      	str	r3, [sp, #56]	; 0x38
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	e783      	b.n	8007a54 <_dtoa_r+0x418>
 8007b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b4e:	4b84      	ldr	r3, [pc, #528]	; (8007d60 <_dtoa_r+0x724>)
 8007b50:	3a01      	subs	r2, #1
 8007b52:	00d2      	lsls	r2, r2, #3
 8007b54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b56:	189b      	adds	r3, r3, r2
 8007b58:	9c08      	ldr	r4, [sp, #32]
 8007b5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d051      	beq.n	8007c08 <_dtoa_r+0x5cc>
 8007b64:	2000      	movs	r0, #0
 8007b66:	4986      	ldr	r1, [pc, #536]	; (8007d80 <_dtoa_r+0x744>)
 8007b68:	f7f9 f958 	bl	8000e1c <__aeabi_ddiv>
 8007b6c:	0022      	movs	r2, r4
 8007b6e:	002b      	movs	r3, r5
 8007b70:	f7fa f810 	bl	8001b94 <__aeabi_dsub>
 8007b74:	9a06      	ldr	r2, [sp, #24]
 8007b76:	0004      	movs	r4, r0
 8007b78:	4694      	mov	ip, r2
 8007b7a:	000d      	movs	r5, r1
 8007b7c:	9b06      	ldr	r3, [sp, #24]
 8007b7e:	9314      	str	r3, [sp, #80]	; 0x50
 8007b80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b82:	4463      	add	r3, ip
 8007b84:	9318      	str	r3, [sp, #96]	; 0x60
 8007b86:	0039      	movs	r1, r7
 8007b88:	0030      	movs	r0, r6
 8007b8a:	f7fa fba3 	bl	80022d4 <__aeabi_d2iz>
 8007b8e:	9012      	str	r0, [sp, #72]	; 0x48
 8007b90:	f7fa fbd6 	bl	8002340 <__aeabi_i2d>
 8007b94:	0002      	movs	r2, r0
 8007b96:	000b      	movs	r3, r1
 8007b98:	0030      	movs	r0, r6
 8007b9a:	0039      	movs	r1, r7
 8007b9c:	f7f9 fffa 	bl	8001b94 <__aeabi_dsub>
 8007ba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ba2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	9308      	str	r3, [sp, #32]
 8007ba8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007baa:	0006      	movs	r6, r0
 8007bac:	3330      	adds	r3, #48	; 0x30
 8007bae:	7013      	strb	r3, [r2, #0]
 8007bb0:	0022      	movs	r2, r4
 8007bb2:	002b      	movs	r3, r5
 8007bb4:	000f      	movs	r7, r1
 8007bb6:	f7f8 fc4d 	bl	8000454 <__aeabi_dcmplt>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d174      	bne.n	8007ca8 <_dtoa_r+0x66c>
 8007bbe:	0032      	movs	r2, r6
 8007bc0:	003b      	movs	r3, r7
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	4968      	ldr	r1, [pc, #416]	; (8007d68 <_dtoa_r+0x72c>)
 8007bc6:	f7f9 ffe5 	bl	8001b94 <__aeabi_dsub>
 8007bca:	0022      	movs	r2, r4
 8007bcc:	002b      	movs	r3, r5
 8007bce:	f7f8 fc41 	bl	8000454 <__aeabi_dcmplt>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d000      	beq.n	8007bd8 <_dtoa_r+0x59c>
 8007bd6:	e0d7      	b.n	8007d88 <_dtoa_r+0x74c>
 8007bd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007bda:	9a08      	ldr	r2, [sp, #32]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d100      	bne.n	8007be2 <_dtoa_r+0x5a6>
 8007be0:	e771      	b.n	8007ac6 <_dtoa_r+0x48a>
 8007be2:	2200      	movs	r2, #0
 8007be4:	0020      	movs	r0, r4
 8007be6:	0029      	movs	r1, r5
 8007be8:	4b60      	ldr	r3, [pc, #384]	; (8007d6c <_dtoa_r+0x730>)
 8007bea:	f7f9 fd11 	bl	8001610 <__aeabi_dmul>
 8007bee:	4b5f      	ldr	r3, [pc, #380]	; (8007d6c <_dtoa_r+0x730>)
 8007bf0:	0004      	movs	r4, r0
 8007bf2:	000d      	movs	r5, r1
 8007bf4:	0030      	movs	r0, r6
 8007bf6:	0039      	movs	r1, r7
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f7f9 fd09 	bl	8001610 <__aeabi_dmul>
 8007bfe:	9b08      	ldr	r3, [sp, #32]
 8007c00:	0006      	movs	r6, r0
 8007c02:	000f      	movs	r7, r1
 8007c04:	9314      	str	r3, [sp, #80]	; 0x50
 8007c06:	e7be      	b.n	8007b86 <_dtoa_r+0x54a>
 8007c08:	0020      	movs	r0, r4
 8007c0a:	0029      	movs	r1, r5
 8007c0c:	f7f9 fd00 	bl	8001610 <__aeabi_dmul>
 8007c10:	9a06      	ldr	r2, [sp, #24]
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	4694      	mov	ip, r2
 8007c16:	9308      	str	r3, [sp, #32]
 8007c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c1a:	9014      	str	r0, [sp, #80]	; 0x50
 8007c1c:	9115      	str	r1, [sp, #84]	; 0x54
 8007c1e:	4463      	add	r3, ip
 8007c20:	9319      	str	r3, [sp, #100]	; 0x64
 8007c22:	0030      	movs	r0, r6
 8007c24:	0039      	movs	r1, r7
 8007c26:	f7fa fb55 	bl	80022d4 <__aeabi_d2iz>
 8007c2a:	9018      	str	r0, [sp, #96]	; 0x60
 8007c2c:	f7fa fb88 	bl	8002340 <__aeabi_i2d>
 8007c30:	0002      	movs	r2, r0
 8007c32:	000b      	movs	r3, r1
 8007c34:	0030      	movs	r0, r6
 8007c36:	0039      	movs	r1, r7
 8007c38:	f7f9 ffac 	bl	8001b94 <__aeabi_dsub>
 8007c3c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007c3e:	9b08      	ldr	r3, [sp, #32]
 8007c40:	3630      	adds	r6, #48	; 0x30
 8007c42:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c44:	701e      	strb	r6, [r3, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	0004      	movs	r4, r0
 8007c4a:	000d      	movs	r5, r1
 8007c4c:	9308      	str	r3, [sp, #32]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d12d      	bne.n	8007cae <_dtoa_r+0x672>
 8007c52:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007c54:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007c56:	9a06      	ldr	r2, [sp, #24]
 8007c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c5a:	4694      	mov	ip, r2
 8007c5c:	4463      	add	r3, ip
 8007c5e:	2200      	movs	r2, #0
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	4b47      	ldr	r3, [pc, #284]	; (8007d80 <_dtoa_r+0x744>)
 8007c64:	f7f8 fd7a 	bl	800075c <__aeabi_dadd>
 8007c68:	0002      	movs	r2, r0
 8007c6a:	000b      	movs	r3, r1
 8007c6c:	0020      	movs	r0, r4
 8007c6e:	0029      	movs	r1, r5
 8007c70:	f7f8 fc04 	bl	800047c <__aeabi_dcmpgt>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d000      	beq.n	8007c7a <_dtoa_r+0x63e>
 8007c78:	e086      	b.n	8007d88 <_dtoa_r+0x74c>
 8007c7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c7e:	2000      	movs	r0, #0
 8007c80:	493f      	ldr	r1, [pc, #252]	; (8007d80 <_dtoa_r+0x744>)
 8007c82:	f7f9 ff87 	bl	8001b94 <__aeabi_dsub>
 8007c86:	0002      	movs	r2, r0
 8007c88:	000b      	movs	r3, r1
 8007c8a:	0020      	movs	r0, r4
 8007c8c:	0029      	movs	r1, r5
 8007c8e:	f7f8 fbe1 	bl	8000454 <__aeabi_dcmplt>
 8007c92:	2800      	cmp	r0, #0
 8007c94:	d100      	bne.n	8007c98 <_dtoa_r+0x65c>
 8007c96:	e716      	b.n	8007ac6 <_dtoa_r+0x48a>
 8007c98:	9b08      	ldr	r3, [sp, #32]
 8007c9a:	001a      	movs	r2, r3
 8007c9c:	3a01      	subs	r2, #1
 8007c9e:	9208      	str	r2, [sp, #32]
 8007ca0:	7812      	ldrb	r2, [r2, #0]
 8007ca2:	2a30      	cmp	r2, #48	; 0x30
 8007ca4:	d0f8      	beq.n	8007c98 <_dtoa_r+0x65c>
 8007ca6:	9308      	str	r3, [sp, #32]
 8007ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007caa:	9303      	str	r3, [sp, #12]
 8007cac:	e046      	b.n	8007d3c <_dtoa_r+0x700>
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4b2e      	ldr	r3, [pc, #184]	; (8007d6c <_dtoa_r+0x730>)
 8007cb2:	f7f9 fcad 	bl	8001610 <__aeabi_dmul>
 8007cb6:	0006      	movs	r6, r0
 8007cb8:	000f      	movs	r7, r1
 8007cba:	e7b2      	b.n	8007c22 <_dtoa_r+0x5e6>
 8007cbc:	9b06      	ldr	r3, [sp, #24]
 8007cbe:	9a06      	ldr	r2, [sp, #24]
 8007cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc2:	9b07      	ldr	r3, [sp, #28]
 8007cc4:	9c08      	ldr	r4, [sp, #32]
 8007cc6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cce:	0032      	movs	r2, r6
 8007cd0:	003b      	movs	r3, r7
 8007cd2:	0020      	movs	r0, r4
 8007cd4:	0029      	movs	r1, r5
 8007cd6:	f7f9 f8a1 	bl	8000e1c <__aeabi_ddiv>
 8007cda:	f7fa fafb 	bl	80022d4 <__aeabi_d2iz>
 8007cde:	9007      	str	r0, [sp, #28]
 8007ce0:	f7fa fb2e 	bl	8002340 <__aeabi_i2d>
 8007ce4:	0032      	movs	r2, r6
 8007ce6:	003b      	movs	r3, r7
 8007ce8:	f7f9 fc92 	bl	8001610 <__aeabi_dmul>
 8007cec:	0002      	movs	r2, r0
 8007cee:	000b      	movs	r3, r1
 8007cf0:	0020      	movs	r0, r4
 8007cf2:	0029      	movs	r1, r5
 8007cf4:	f7f9 ff4e 	bl	8001b94 <__aeabi_dsub>
 8007cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	3201      	adds	r2, #1
 8007cfe:	920a      	str	r2, [sp, #40]	; 0x28
 8007d00:	9208      	str	r2, [sp, #32]
 8007d02:	9a07      	ldr	r2, [sp, #28]
 8007d04:	3230      	adds	r2, #48	; 0x30
 8007d06:	701a      	strb	r2, [r3, #0]
 8007d08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d14f      	bne.n	8007dae <_dtoa_r+0x772>
 8007d0e:	0002      	movs	r2, r0
 8007d10:	000b      	movs	r3, r1
 8007d12:	f7f8 fd23 	bl	800075c <__aeabi_dadd>
 8007d16:	0032      	movs	r2, r6
 8007d18:	003b      	movs	r3, r7
 8007d1a:	0004      	movs	r4, r0
 8007d1c:	000d      	movs	r5, r1
 8007d1e:	f7f8 fbad 	bl	800047c <__aeabi_dcmpgt>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d12e      	bne.n	8007d84 <_dtoa_r+0x748>
 8007d26:	0032      	movs	r2, r6
 8007d28:	003b      	movs	r3, r7
 8007d2a:	0020      	movs	r0, r4
 8007d2c:	0029      	movs	r1, r5
 8007d2e:	f7f8 fb8b 	bl	8000448 <__aeabi_dcmpeq>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d002      	beq.n	8007d3c <_dtoa_r+0x700>
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	07de      	lsls	r6, r3, #31
 8007d3a:	d423      	bmi.n	8007d84 <_dtoa_r+0x748>
 8007d3c:	9905      	ldr	r1, [sp, #20]
 8007d3e:	9804      	ldr	r0, [sp, #16]
 8007d40:	f000 ff44 	bl	8008bcc <_Bfree>
 8007d44:	2300      	movs	r3, #0
 8007d46:	9a08      	ldr	r2, [sp, #32]
 8007d48:	7013      	strb	r3, [r2, #0]
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d4e:	3301      	adds	r3, #1
 8007d50:	6013      	str	r3, [r2, #0]
 8007d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d100      	bne.n	8007d5a <_dtoa_r+0x71e>
 8007d58:	e4ba      	b.n	80076d0 <_dtoa_r+0x94>
 8007d5a:	9a08      	ldr	r2, [sp, #32]
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	e4b7      	b.n	80076d0 <_dtoa_r+0x94>
 8007d60:	0800a490 	.word	0x0800a490
 8007d64:	0800a468 	.word	0x0800a468
 8007d68:	3ff00000 	.word	0x3ff00000
 8007d6c:	40240000 	.word	0x40240000
 8007d70:	401c0000 	.word	0x401c0000
 8007d74:	fcc00000 	.word	0xfcc00000
 8007d78:	40140000 	.word	0x40140000
 8007d7c:	7cc00000 	.word	0x7cc00000
 8007d80:	3fe00000 	.word	0x3fe00000
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	930e      	str	r3, [sp, #56]	; 0x38
 8007d88:	9b08      	ldr	r3, [sp, #32]
 8007d8a:	9308      	str	r3, [sp, #32]
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	2a39      	cmp	r2, #57	; 0x39
 8007d92:	d108      	bne.n	8007da6 <_dtoa_r+0x76a>
 8007d94:	9a06      	ldr	r2, [sp, #24]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d1f7      	bne.n	8007d8a <_dtoa_r+0x74e>
 8007d9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d9c:	9906      	ldr	r1, [sp, #24]
 8007d9e:	3201      	adds	r2, #1
 8007da0:	920e      	str	r2, [sp, #56]	; 0x38
 8007da2:	2230      	movs	r2, #48	; 0x30
 8007da4:	700a      	strb	r2, [r1, #0]
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	3201      	adds	r2, #1
 8007daa:	701a      	strb	r2, [r3, #0]
 8007dac:	e77c      	b.n	8007ca8 <_dtoa_r+0x66c>
 8007dae:	2200      	movs	r2, #0
 8007db0:	4ba9      	ldr	r3, [pc, #676]	; (8008058 <_dtoa_r+0xa1c>)
 8007db2:	f7f9 fc2d 	bl	8001610 <__aeabi_dmul>
 8007db6:	2200      	movs	r2, #0
 8007db8:	2300      	movs	r3, #0
 8007dba:	0004      	movs	r4, r0
 8007dbc:	000d      	movs	r5, r1
 8007dbe:	f7f8 fb43 	bl	8000448 <__aeabi_dcmpeq>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d100      	bne.n	8007dc8 <_dtoa_r+0x78c>
 8007dc6:	e782      	b.n	8007cce <_dtoa_r+0x692>
 8007dc8:	e7b8      	b.n	8007d3c <_dtoa_r+0x700>
 8007dca:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007dcc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007dce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007dd0:	2f00      	cmp	r7, #0
 8007dd2:	d012      	beq.n	8007dfa <_dtoa_r+0x7be>
 8007dd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007dd6:	2a01      	cmp	r2, #1
 8007dd8:	dc6e      	bgt.n	8007eb8 <_dtoa_r+0x87c>
 8007dda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ddc:	2a00      	cmp	r2, #0
 8007dde:	d065      	beq.n	8007eac <_dtoa_r+0x870>
 8007de0:	4a9e      	ldr	r2, [pc, #632]	; (800805c <_dtoa_r+0xa20>)
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de6:	2101      	movs	r1, #1
 8007de8:	18d2      	adds	r2, r2, r3
 8007dea:	920a      	str	r2, [sp, #40]	; 0x28
 8007dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dee:	9804      	ldr	r0, [sp, #16]
 8007df0:	18d3      	adds	r3, r2, r3
 8007df2:	930c      	str	r3, [sp, #48]	; 0x30
 8007df4:	f000 ffe6 	bl	8008dc4 <__i2b>
 8007df8:	0007      	movs	r7, r0
 8007dfa:	2c00      	cmp	r4, #0
 8007dfc:	d00e      	beq.n	8007e1c <_dtoa_r+0x7e0>
 8007dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dd0b      	ble.n	8007e1c <_dtoa_r+0x7e0>
 8007e04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e06:	0023      	movs	r3, r4
 8007e08:	4294      	cmp	r4, r2
 8007e0a:	dd00      	ble.n	8007e0e <_dtoa_r+0x7d2>
 8007e0c:	0013      	movs	r3, r2
 8007e0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e10:	1ae4      	subs	r4, r4, r3
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	920a      	str	r2, [sp, #40]	; 0x28
 8007e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01e      	beq.n	8007e60 <_dtoa_r+0x824>
 8007e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d05c      	beq.n	8007ee2 <_dtoa_r+0x8a6>
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	dd10      	ble.n	8007e4e <_dtoa_r+0x812>
 8007e2c:	0039      	movs	r1, r7
 8007e2e:	002a      	movs	r2, r5
 8007e30:	9804      	ldr	r0, [sp, #16]
 8007e32:	f001 f88f 	bl	8008f54 <__pow5mult>
 8007e36:	9a05      	ldr	r2, [sp, #20]
 8007e38:	0001      	movs	r1, r0
 8007e3a:	0007      	movs	r7, r0
 8007e3c:	9804      	ldr	r0, [sp, #16]
 8007e3e:	f000 ffd9 	bl	8008df4 <__multiply>
 8007e42:	0006      	movs	r6, r0
 8007e44:	9905      	ldr	r1, [sp, #20]
 8007e46:	9804      	ldr	r0, [sp, #16]
 8007e48:	f000 fec0 	bl	8008bcc <_Bfree>
 8007e4c:	9605      	str	r6, [sp, #20]
 8007e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e50:	1b5a      	subs	r2, r3, r5
 8007e52:	42ab      	cmp	r3, r5
 8007e54:	d004      	beq.n	8007e60 <_dtoa_r+0x824>
 8007e56:	9905      	ldr	r1, [sp, #20]
 8007e58:	9804      	ldr	r0, [sp, #16]
 8007e5a:	f001 f87b 	bl	8008f54 <__pow5mult>
 8007e5e:	9005      	str	r0, [sp, #20]
 8007e60:	2101      	movs	r1, #1
 8007e62:	9804      	ldr	r0, [sp, #16]
 8007e64:	f000 ffae 	bl	8008dc4 <__i2b>
 8007e68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e6a:	0006      	movs	r6, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dd3a      	ble.n	8007ee6 <_dtoa_r+0x8aa>
 8007e70:	001a      	movs	r2, r3
 8007e72:	0001      	movs	r1, r0
 8007e74:	9804      	ldr	r0, [sp, #16]
 8007e76:	f001 f86d 	bl	8008f54 <__pow5mult>
 8007e7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e7c:	0006      	movs	r6, r0
 8007e7e:	2500      	movs	r5, #0
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	dc38      	bgt.n	8007ef6 <_dtoa_r+0x8ba>
 8007e84:	2500      	movs	r5, #0
 8007e86:	9b08      	ldr	r3, [sp, #32]
 8007e88:	42ab      	cmp	r3, r5
 8007e8a:	d130      	bne.n	8007eee <_dtoa_r+0x8b2>
 8007e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8e:	031b      	lsls	r3, r3, #12
 8007e90:	42ab      	cmp	r3, r5
 8007e92:	d12c      	bne.n	8007eee <_dtoa_r+0x8b2>
 8007e94:	4b72      	ldr	r3, [pc, #456]	; (8008060 <_dtoa_r+0xa24>)
 8007e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e98:	4213      	tst	r3, r2
 8007e9a:	d028      	beq.n	8007eee <_dtoa_r+0x8b2>
 8007e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9e:	3501      	adds	r5, #1
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	930c      	str	r3, [sp, #48]	; 0x30
 8007eaa:	e020      	b.n	8007eee <_dtoa_r+0x8b2>
 8007eac:	2336      	movs	r3, #54	; 0x36
 8007eae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007eb0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007eb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	e795      	b.n	8007de4 <_dtoa_r+0x7a8>
 8007eb8:	9b07      	ldr	r3, [sp, #28]
 8007eba:	1e5d      	subs	r5, r3, #1
 8007ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ebe:	42ab      	cmp	r3, r5
 8007ec0:	db07      	blt.n	8007ed2 <_dtoa_r+0x896>
 8007ec2:	1b5d      	subs	r5, r3, r5
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	da8b      	bge.n	8007de4 <_dtoa_r+0x7a8>
 8007ecc:	1ae4      	subs	r4, r4, r3
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e788      	b.n	8007de4 <_dtoa_r+0x7a8>
 8007ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ed6:	1aeb      	subs	r3, r5, r3
 8007ed8:	18d3      	adds	r3, r2, r3
 8007eda:	950d      	str	r5, [sp, #52]	; 0x34
 8007edc:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ede:	2500      	movs	r5, #0
 8007ee0:	e7f0      	b.n	8007ec4 <_dtoa_r+0x888>
 8007ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ee4:	e7b7      	b.n	8007e56 <_dtoa_r+0x81a>
 8007ee6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ee8:	2500      	movs	r5, #0
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	ddca      	ble.n	8007e84 <_dtoa_r+0x848>
 8007eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d008      	beq.n	8007f08 <_dtoa_r+0x8cc>
 8007ef6:	6933      	ldr	r3, [r6, #16]
 8007ef8:	3303      	adds	r3, #3
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	18f3      	adds	r3, r6, r3
 8007efe:	6858      	ldr	r0, [r3, #4]
 8007f00:	f000 ff18 	bl	8008d34 <__hi0bits>
 8007f04:	2320      	movs	r3, #32
 8007f06:	1a18      	subs	r0, r3, r0
 8007f08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f0a:	1818      	adds	r0, r3, r0
 8007f0c:	0002      	movs	r2, r0
 8007f0e:	231f      	movs	r3, #31
 8007f10:	401a      	ands	r2, r3
 8007f12:	4218      	tst	r0, r3
 8007f14:	d047      	beq.n	8007fa6 <_dtoa_r+0x96a>
 8007f16:	3301      	adds	r3, #1
 8007f18:	1a9b      	subs	r3, r3, r2
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	dd3f      	ble.n	8007f9e <_dtoa_r+0x962>
 8007f1e:	231c      	movs	r3, #28
 8007f20:	1a9b      	subs	r3, r3, r2
 8007f22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f24:	18e4      	adds	r4, r4, r3
 8007f26:	18d2      	adds	r2, r2, r3
 8007f28:	920a      	str	r2, [sp, #40]	; 0x28
 8007f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f2c:	18d3      	adds	r3, r2, r3
 8007f2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	dd05      	ble.n	8007f42 <_dtoa_r+0x906>
 8007f36:	001a      	movs	r2, r3
 8007f38:	9905      	ldr	r1, [sp, #20]
 8007f3a:	9804      	ldr	r0, [sp, #16]
 8007f3c:	f001 f866 	bl	800900c <__lshift>
 8007f40:	9005      	str	r0, [sp, #20]
 8007f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dd05      	ble.n	8007f54 <_dtoa_r+0x918>
 8007f48:	0031      	movs	r1, r6
 8007f4a:	001a      	movs	r2, r3
 8007f4c:	9804      	ldr	r0, [sp, #16]
 8007f4e:	f001 f85d 	bl	800900c <__lshift>
 8007f52:	0006      	movs	r6, r0
 8007f54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d027      	beq.n	8007faa <_dtoa_r+0x96e>
 8007f5a:	0031      	movs	r1, r6
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	f001 f8c3 	bl	80090e8 <__mcmp>
 8007f62:	2800      	cmp	r0, #0
 8007f64:	da21      	bge.n	8007faa <_dtoa_r+0x96e>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	220a      	movs	r2, #10
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	9303      	str	r3, [sp, #12]
 8007f6e:	9905      	ldr	r1, [sp, #20]
 8007f70:	2300      	movs	r3, #0
 8007f72:	9804      	ldr	r0, [sp, #16]
 8007f74:	f000 fe4e 	bl	8008c14 <__multadd>
 8007f78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f7a:	9005      	str	r0, [sp, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d100      	bne.n	8007f82 <_dtoa_r+0x946>
 8007f80:	e15d      	b.n	800823e <_dtoa_r+0xc02>
 8007f82:	2300      	movs	r3, #0
 8007f84:	0039      	movs	r1, r7
 8007f86:	220a      	movs	r2, #10
 8007f88:	9804      	ldr	r0, [sp, #16]
 8007f8a:	f000 fe43 	bl	8008c14 <__multadd>
 8007f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f90:	0007      	movs	r7, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dc49      	bgt.n	800802a <_dtoa_r+0x9ee>
 8007f96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	dc0e      	bgt.n	8007fba <_dtoa_r+0x97e>
 8007f9c:	e045      	b.n	800802a <_dtoa_r+0x9ee>
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d0c6      	beq.n	8007f30 <_dtoa_r+0x8f4>
 8007fa2:	331c      	adds	r3, #28
 8007fa4:	e7bd      	b.n	8007f22 <_dtoa_r+0x8e6>
 8007fa6:	0013      	movs	r3, r2
 8007fa8:	e7fb      	b.n	8007fa2 <_dtoa_r+0x966>
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	dc36      	bgt.n	800801e <_dtoa_r+0x9e2>
 8007fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	dd33      	ble.n	800801e <_dtoa_r+0x9e2>
 8007fb6:	9b07      	ldr	r3, [sp, #28]
 8007fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10c      	bne.n	8007fda <_dtoa_r+0x99e>
 8007fc0:	0031      	movs	r1, r6
 8007fc2:	2205      	movs	r2, #5
 8007fc4:	9804      	ldr	r0, [sp, #16]
 8007fc6:	f000 fe25 	bl	8008c14 <__multadd>
 8007fca:	0006      	movs	r6, r0
 8007fcc:	0001      	movs	r1, r0
 8007fce:	9805      	ldr	r0, [sp, #20]
 8007fd0:	f001 f88a 	bl	80090e8 <__mcmp>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	dd00      	ble.n	8007fda <_dtoa_r+0x99e>
 8007fd8:	e59f      	b.n	8007b1a <_dtoa_r+0x4de>
 8007fda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	9b06      	ldr	r3, [sp, #24]
 8007fe2:	9308      	str	r3, [sp, #32]
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	0031      	movs	r1, r6
 8007fe8:	9804      	ldr	r0, [sp, #16]
 8007fea:	f000 fdef 	bl	8008bcc <_Bfree>
 8007fee:	2f00      	cmp	r7, #0
 8007ff0:	d100      	bne.n	8007ff4 <_dtoa_r+0x9b8>
 8007ff2:	e6a3      	b.n	8007d3c <_dtoa_r+0x700>
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	d005      	beq.n	8008004 <_dtoa_r+0x9c8>
 8007ff8:	42bd      	cmp	r5, r7
 8007ffa:	d003      	beq.n	8008004 <_dtoa_r+0x9c8>
 8007ffc:	0029      	movs	r1, r5
 8007ffe:	9804      	ldr	r0, [sp, #16]
 8008000:	f000 fde4 	bl	8008bcc <_Bfree>
 8008004:	0039      	movs	r1, r7
 8008006:	9804      	ldr	r0, [sp, #16]
 8008008:	f000 fde0 	bl	8008bcc <_Bfree>
 800800c:	e696      	b.n	8007d3c <_dtoa_r+0x700>
 800800e:	2600      	movs	r6, #0
 8008010:	0037      	movs	r7, r6
 8008012:	e7e2      	b.n	8007fda <_dtoa_r+0x99e>
 8008014:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008016:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008018:	9303      	str	r3, [sp, #12]
 800801a:	0037      	movs	r7, r6
 800801c:	e57d      	b.n	8007b1a <_dtoa_r+0x4de>
 800801e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d100      	bne.n	8008026 <_dtoa_r+0x9ea>
 8008024:	e0c3      	b.n	80081ae <_dtoa_r+0xb72>
 8008026:	9b07      	ldr	r3, [sp, #28]
 8008028:	930b      	str	r3, [sp, #44]	; 0x2c
 800802a:	2c00      	cmp	r4, #0
 800802c:	dd05      	ble.n	800803a <_dtoa_r+0x9fe>
 800802e:	0039      	movs	r1, r7
 8008030:	0022      	movs	r2, r4
 8008032:	9804      	ldr	r0, [sp, #16]
 8008034:	f000 ffea 	bl	800900c <__lshift>
 8008038:	0007      	movs	r7, r0
 800803a:	0038      	movs	r0, r7
 800803c:	2d00      	cmp	r5, #0
 800803e:	d024      	beq.n	800808a <_dtoa_r+0xa4e>
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	9804      	ldr	r0, [sp, #16]
 8008044:	f000 fd7e 	bl	8008b44 <_Balloc>
 8008048:	1e04      	subs	r4, r0, #0
 800804a:	d111      	bne.n	8008070 <_dtoa_r+0xa34>
 800804c:	0022      	movs	r2, r4
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <_dtoa_r+0xa28>)
 8008050:	4805      	ldr	r0, [pc, #20]	; (8008068 <_dtoa_r+0xa2c>)
 8008052:	4906      	ldr	r1, [pc, #24]	; (800806c <_dtoa_r+0xa30>)
 8008054:	f7ff fb07 	bl	8007666 <_dtoa_r+0x2a>
 8008058:	40240000 	.word	0x40240000
 800805c:	00000433 	.word	0x00000433
 8008060:	7ff00000 	.word	0x7ff00000
 8008064:	0800a39d 	.word	0x0800a39d
 8008068:	0800a345 	.word	0x0800a345
 800806c:	000002ef 	.word	0x000002ef
 8008070:	0039      	movs	r1, r7
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	310c      	adds	r1, #12
 8008076:	3202      	adds	r2, #2
 8008078:	0092      	lsls	r2, r2, #2
 800807a:	300c      	adds	r0, #12
 800807c:	f7ff fa3a 	bl	80074f4 <memcpy>
 8008080:	2201      	movs	r2, #1
 8008082:	0021      	movs	r1, r4
 8008084:	9804      	ldr	r0, [sp, #16]
 8008086:	f000 ffc1 	bl	800900c <__lshift>
 800808a:	9b06      	ldr	r3, [sp, #24]
 800808c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800808e:	9307      	str	r3, [sp, #28]
 8008090:	3b01      	subs	r3, #1
 8008092:	189b      	adds	r3, r3, r2
 8008094:	2201      	movs	r2, #1
 8008096:	003d      	movs	r5, r7
 8008098:	0007      	movs	r7, r0
 800809a:	930e      	str	r3, [sp, #56]	; 0x38
 800809c:	9b08      	ldr	r3, [sp, #32]
 800809e:	4013      	ands	r3, r2
 80080a0:	930d      	str	r3, [sp, #52]	; 0x34
 80080a2:	0031      	movs	r1, r6
 80080a4:	9805      	ldr	r0, [sp, #20]
 80080a6:	f7ff fa39 	bl	800751c <quorem>
 80080aa:	0029      	movs	r1, r5
 80080ac:	0004      	movs	r4, r0
 80080ae:	900b      	str	r0, [sp, #44]	; 0x2c
 80080b0:	9805      	ldr	r0, [sp, #20]
 80080b2:	f001 f819 	bl	80090e8 <__mcmp>
 80080b6:	003a      	movs	r2, r7
 80080b8:	900c      	str	r0, [sp, #48]	; 0x30
 80080ba:	0031      	movs	r1, r6
 80080bc:	9804      	ldr	r0, [sp, #16]
 80080be:	f001 f82f 	bl	8009120 <__mdiff>
 80080c2:	2201      	movs	r2, #1
 80080c4:	68c3      	ldr	r3, [r0, #12]
 80080c6:	3430      	adds	r4, #48	; 0x30
 80080c8:	9008      	str	r0, [sp, #32]
 80080ca:	920a      	str	r2, [sp, #40]	; 0x28
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <_dtoa_r+0xa9e>
 80080d0:	0001      	movs	r1, r0
 80080d2:	9805      	ldr	r0, [sp, #20]
 80080d4:	f001 f808 	bl	80090e8 <__mcmp>
 80080d8:	900a      	str	r0, [sp, #40]	; 0x28
 80080da:	9908      	ldr	r1, [sp, #32]
 80080dc:	9804      	ldr	r0, [sp, #16]
 80080de:	f000 fd75 	bl	8008bcc <_Bfree>
 80080e2:	9b07      	ldr	r3, [sp, #28]
 80080e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e6:	3301      	adds	r3, #1
 80080e8:	9308      	str	r3, [sp, #32]
 80080ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ec:	4313      	orrs	r3, r2
 80080ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080f0:	4313      	orrs	r3, r2
 80080f2:	d109      	bne.n	8008108 <_dtoa_r+0xacc>
 80080f4:	2c39      	cmp	r4, #57	; 0x39
 80080f6:	d022      	beq.n	800813e <_dtoa_r+0xb02>
 80080f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	dd01      	ble.n	8008102 <_dtoa_r+0xac6>
 80080fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008100:	3431      	adds	r4, #49	; 0x31
 8008102:	9b07      	ldr	r3, [sp, #28]
 8008104:	701c      	strb	r4, [r3, #0]
 8008106:	e76e      	b.n	8007fe6 <_dtoa_r+0x9aa>
 8008108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800810a:	2b00      	cmp	r3, #0
 800810c:	db04      	blt.n	8008118 <_dtoa_r+0xadc>
 800810e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008110:	4313      	orrs	r3, r2
 8008112:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008114:	4313      	orrs	r3, r2
 8008116:	d11e      	bne.n	8008156 <_dtoa_r+0xb1a>
 8008118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811a:	2b00      	cmp	r3, #0
 800811c:	ddf1      	ble.n	8008102 <_dtoa_r+0xac6>
 800811e:	9905      	ldr	r1, [sp, #20]
 8008120:	2201      	movs	r2, #1
 8008122:	9804      	ldr	r0, [sp, #16]
 8008124:	f000 ff72 	bl	800900c <__lshift>
 8008128:	0031      	movs	r1, r6
 800812a:	9005      	str	r0, [sp, #20]
 800812c:	f000 ffdc 	bl	80090e8 <__mcmp>
 8008130:	2800      	cmp	r0, #0
 8008132:	dc02      	bgt.n	800813a <_dtoa_r+0xafe>
 8008134:	d1e5      	bne.n	8008102 <_dtoa_r+0xac6>
 8008136:	07e3      	lsls	r3, r4, #31
 8008138:	d5e3      	bpl.n	8008102 <_dtoa_r+0xac6>
 800813a:	2c39      	cmp	r4, #57	; 0x39
 800813c:	d1df      	bne.n	80080fe <_dtoa_r+0xac2>
 800813e:	2339      	movs	r3, #57	; 0x39
 8008140:	9a07      	ldr	r2, [sp, #28]
 8008142:	7013      	strb	r3, [r2, #0]
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	9308      	str	r3, [sp, #32]
 8008148:	3b01      	subs	r3, #1
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	2a39      	cmp	r2, #57	; 0x39
 800814e:	d063      	beq.n	8008218 <_dtoa_r+0xbdc>
 8008150:	3201      	adds	r2, #1
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	e747      	b.n	8007fe6 <_dtoa_r+0x9aa>
 8008156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008158:	2b00      	cmp	r3, #0
 800815a:	dd03      	ble.n	8008164 <_dtoa_r+0xb28>
 800815c:	2c39      	cmp	r4, #57	; 0x39
 800815e:	d0ee      	beq.n	800813e <_dtoa_r+0xb02>
 8008160:	3401      	adds	r4, #1
 8008162:	e7ce      	b.n	8008102 <_dtoa_r+0xac6>
 8008164:	9b07      	ldr	r3, [sp, #28]
 8008166:	9a07      	ldr	r2, [sp, #28]
 8008168:	701c      	strb	r4, [r3, #0]
 800816a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800816c:	4293      	cmp	r3, r2
 800816e:	d03e      	beq.n	80081ee <_dtoa_r+0xbb2>
 8008170:	2300      	movs	r3, #0
 8008172:	220a      	movs	r2, #10
 8008174:	9905      	ldr	r1, [sp, #20]
 8008176:	9804      	ldr	r0, [sp, #16]
 8008178:	f000 fd4c 	bl	8008c14 <__multadd>
 800817c:	2300      	movs	r3, #0
 800817e:	9005      	str	r0, [sp, #20]
 8008180:	220a      	movs	r2, #10
 8008182:	0029      	movs	r1, r5
 8008184:	9804      	ldr	r0, [sp, #16]
 8008186:	42bd      	cmp	r5, r7
 8008188:	d106      	bne.n	8008198 <_dtoa_r+0xb5c>
 800818a:	f000 fd43 	bl	8008c14 <__multadd>
 800818e:	0005      	movs	r5, r0
 8008190:	0007      	movs	r7, r0
 8008192:	9b08      	ldr	r3, [sp, #32]
 8008194:	9307      	str	r3, [sp, #28]
 8008196:	e784      	b.n	80080a2 <_dtoa_r+0xa66>
 8008198:	f000 fd3c 	bl	8008c14 <__multadd>
 800819c:	0039      	movs	r1, r7
 800819e:	0005      	movs	r5, r0
 80081a0:	2300      	movs	r3, #0
 80081a2:	220a      	movs	r2, #10
 80081a4:	9804      	ldr	r0, [sp, #16]
 80081a6:	f000 fd35 	bl	8008c14 <__multadd>
 80081aa:	0007      	movs	r7, r0
 80081ac:	e7f1      	b.n	8008192 <_dtoa_r+0xb56>
 80081ae:	9b07      	ldr	r3, [sp, #28]
 80081b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80081b2:	2500      	movs	r5, #0
 80081b4:	0031      	movs	r1, r6
 80081b6:	9805      	ldr	r0, [sp, #20]
 80081b8:	f7ff f9b0 	bl	800751c <quorem>
 80081bc:	9b06      	ldr	r3, [sp, #24]
 80081be:	3030      	adds	r0, #48	; 0x30
 80081c0:	5558      	strb	r0, [r3, r5]
 80081c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c4:	3501      	adds	r5, #1
 80081c6:	0004      	movs	r4, r0
 80081c8:	42ab      	cmp	r3, r5
 80081ca:	dd07      	ble.n	80081dc <_dtoa_r+0xba0>
 80081cc:	2300      	movs	r3, #0
 80081ce:	220a      	movs	r2, #10
 80081d0:	9905      	ldr	r1, [sp, #20]
 80081d2:	9804      	ldr	r0, [sp, #16]
 80081d4:	f000 fd1e 	bl	8008c14 <__multadd>
 80081d8:	9005      	str	r0, [sp, #20]
 80081da:	e7eb      	b.n	80081b4 <_dtoa_r+0xb78>
 80081dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081de:	2301      	movs	r3, #1
 80081e0:	2a00      	cmp	r2, #0
 80081e2:	dd00      	ble.n	80081e6 <_dtoa_r+0xbaa>
 80081e4:	0013      	movs	r3, r2
 80081e6:	2500      	movs	r5, #0
 80081e8:	9a06      	ldr	r2, [sp, #24]
 80081ea:	18d3      	adds	r3, r2, r3
 80081ec:	9308      	str	r3, [sp, #32]
 80081ee:	9905      	ldr	r1, [sp, #20]
 80081f0:	2201      	movs	r2, #1
 80081f2:	9804      	ldr	r0, [sp, #16]
 80081f4:	f000 ff0a 	bl	800900c <__lshift>
 80081f8:	0031      	movs	r1, r6
 80081fa:	9005      	str	r0, [sp, #20]
 80081fc:	f000 ff74 	bl	80090e8 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	dc9f      	bgt.n	8008144 <_dtoa_r+0xb08>
 8008204:	d101      	bne.n	800820a <_dtoa_r+0xbce>
 8008206:	07e4      	lsls	r4, r4, #31
 8008208:	d49c      	bmi.n	8008144 <_dtoa_r+0xb08>
 800820a:	9b08      	ldr	r3, [sp, #32]
 800820c:	9308      	str	r3, [sp, #32]
 800820e:	3b01      	subs	r3, #1
 8008210:	781a      	ldrb	r2, [r3, #0]
 8008212:	2a30      	cmp	r2, #48	; 0x30
 8008214:	d0fa      	beq.n	800820c <_dtoa_r+0xbd0>
 8008216:	e6e6      	b.n	8007fe6 <_dtoa_r+0x9aa>
 8008218:	9a06      	ldr	r2, [sp, #24]
 800821a:	429a      	cmp	r2, r3
 800821c:	d193      	bne.n	8008146 <_dtoa_r+0xb0a>
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	9303      	str	r3, [sp, #12]
 8008224:	2331      	movs	r3, #49	; 0x31
 8008226:	7013      	strb	r3, [r2, #0]
 8008228:	e6dd      	b.n	8007fe6 <_dtoa_r+0x9aa>
 800822a:	4b09      	ldr	r3, [pc, #36]	; (8008250 <_dtoa_r+0xc14>)
 800822c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800822e:	9306      	str	r3, [sp, #24]
 8008230:	4b08      	ldr	r3, [pc, #32]	; (8008254 <_dtoa_r+0xc18>)
 8008232:	2a00      	cmp	r2, #0
 8008234:	d001      	beq.n	800823a <_dtoa_r+0xbfe>
 8008236:	f7ff fa49 	bl	80076cc <_dtoa_r+0x90>
 800823a:	f7ff fa49 	bl	80076d0 <_dtoa_r+0x94>
 800823e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008240:	2b00      	cmp	r3, #0
 8008242:	dcb6      	bgt.n	80081b2 <_dtoa_r+0xb76>
 8008244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008246:	2b02      	cmp	r3, #2
 8008248:	dd00      	ble.n	800824c <_dtoa_r+0xc10>
 800824a:	e6b6      	b.n	8007fba <_dtoa_r+0x97e>
 800824c:	e7b1      	b.n	80081b2 <_dtoa_r+0xb76>
 800824e:	46c0      	nop			; (mov r8, r8)
 8008250:	0800a321 	.word	0x0800a321
 8008254:	0800a329 	.word	0x0800a329

08008258 <_free_r>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	0005      	movs	r5, r0
 800825c:	2900      	cmp	r1, #0
 800825e:	d010      	beq.n	8008282 <_free_r+0x2a>
 8008260:	1f0c      	subs	r4, r1, #4
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	da00      	bge.n	800826a <_free_r+0x12>
 8008268:	18e4      	adds	r4, r4, r3
 800826a:	0028      	movs	r0, r5
 800826c:	f000 fc5a 	bl	8008b24 <__malloc_lock>
 8008270:	4a1d      	ldr	r2, [pc, #116]	; (80082e8 <_free_r+0x90>)
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d105      	bne.n	8008284 <_free_r+0x2c>
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	6014      	str	r4, [r2, #0]
 800827c:	0028      	movs	r0, r5
 800827e:	f000 fc59 	bl	8008b34 <__malloc_unlock>
 8008282:	bd70      	pop	{r4, r5, r6, pc}
 8008284:	42a3      	cmp	r3, r4
 8008286:	d908      	bls.n	800829a <_free_r+0x42>
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	1821      	adds	r1, r4, r0
 800828c:	428b      	cmp	r3, r1
 800828e:	d1f3      	bne.n	8008278 <_free_r+0x20>
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	1809      	adds	r1, r1, r0
 8008296:	6021      	str	r1, [r4, #0]
 8008298:	e7ee      	b.n	8008278 <_free_r+0x20>
 800829a:	001a      	movs	r2, r3
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <_free_r+0x4e>
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	d9f9      	bls.n	800829a <_free_r+0x42>
 80082a6:	6811      	ldr	r1, [r2, #0]
 80082a8:	1850      	adds	r0, r2, r1
 80082aa:	42a0      	cmp	r0, r4
 80082ac:	d10b      	bne.n	80082c6 <_free_r+0x6e>
 80082ae:	6820      	ldr	r0, [r4, #0]
 80082b0:	1809      	adds	r1, r1, r0
 80082b2:	1850      	adds	r0, r2, r1
 80082b4:	6011      	str	r1, [r2, #0]
 80082b6:	4283      	cmp	r3, r0
 80082b8:	d1e0      	bne.n	800827c <_free_r+0x24>
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	1841      	adds	r1, r0, r1
 80082c0:	6011      	str	r1, [r2, #0]
 80082c2:	6053      	str	r3, [r2, #4]
 80082c4:	e7da      	b.n	800827c <_free_r+0x24>
 80082c6:	42a0      	cmp	r0, r4
 80082c8:	d902      	bls.n	80082d0 <_free_r+0x78>
 80082ca:	230c      	movs	r3, #12
 80082cc:	602b      	str	r3, [r5, #0]
 80082ce:	e7d5      	b.n	800827c <_free_r+0x24>
 80082d0:	6820      	ldr	r0, [r4, #0]
 80082d2:	1821      	adds	r1, r4, r0
 80082d4:	428b      	cmp	r3, r1
 80082d6:	d103      	bne.n	80082e0 <_free_r+0x88>
 80082d8:	6819      	ldr	r1, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	1809      	adds	r1, r1, r0
 80082de:	6021      	str	r1, [r4, #0]
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	6054      	str	r4, [r2, #4]
 80082e4:	e7ca      	b.n	800827c <_free_r+0x24>
 80082e6:	46c0      	nop			; (mov r8, r8)
 80082e8:	20000414 	.word	0x20000414

080082ec <rshift>:
 80082ec:	0002      	movs	r2, r0
 80082ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f0:	6904      	ldr	r4, [r0, #16]
 80082f2:	114b      	asrs	r3, r1, #5
 80082f4:	b085      	sub	sp, #20
 80082f6:	3214      	adds	r2, #20
 80082f8:	9302      	str	r3, [sp, #8]
 80082fa:	114d      	asrs	r5, r1, #5
 80082fc:	0013      	movs	r3, r2
 80082fe:	42ac      	cmp	r4, r5
 8008300:	dd32      	ble.n	8008368 <rshift+0x7c>
 8008302:	261f      	movs	r6, #31
 8008304:	000f      	movs	r7, r1
 8008306:	114b      	asrs	r3, r1, #5
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	00a5      	lsls	r5, r4, #2
 800830c:	18d3      	adds	r3, r2, r3
 800830e:	4037      	ands	r7, r6
 8008310:	1955      	adds	r5, r2, r5
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	9701      	str	r7, [sp, #4]
 8008316:	4231      	tst	r1, r6
 8008318:	d10d      	bne.n	8008336 <rshift+0x4a>
 800831a:	0016      	movs	r6, r2
 800831c:	0019      	movs	r1, r3
 800831e:	428d      	cmp	r5, r1
 8008320:	d836      	bhi.n	8008390 <rshift+0xa4>
 8008322:	9900      	ldr	r1, [sp, #0]
 8008324:	2300      	movs	r3, #0
 8008326:	3903      	subs	r1, #3
 8008328:	428d      	cmp	r5, r1
 800832a:	d302      	bcc.n	8008332 <rshift+0x46>
 800832c:	9b02      	ldr	r3, [sp, #8]
 800832e:	1ae4      	subs	r4, r4, r3
 8008330:	00a3      	lsls	r3, r4, #2
 8008332:	18d3      	adds	r3, r2, r3
 8008334:	e018      	b.n	8008368 <rshift+0x7c>
 8008336:	2120      	movs	r1, #32
 8008338:	9e01      	ldr	r6, [sp, #4]
 800833a:	9f01      	ldr	r7, [sp, #4]
 800833c:	1b89      	subs	r1, r1, r6
 800833e:	9e00      	ldr	r6, [sp, #0]
 8008340:	9103      	str	r1, [sp, #12]
 8008342:	ce02      	ldmia	r6!, {r1}
 8008344:	4694      	mov	ip, r2
 8008346:	40f9      	lsrs	r1, r7
 8008348:	42b5      	cmp	r5, r6
 800834a:	d816      	bhi.n	800837a <rshift+0x8e>
 800834c:	9e00      	ldr	r6, [sp, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	3601      	adds	r6, #1
 8008352:	42b5      	cmp	r5, r6
 8008354:	d303      	bcc.n	800835e <rshift+0x72>
 8008356:	9b02      	ldr	r3, [sp, #8]
 8008358:	1ae3      	subs	r3, r4, r3
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	3b04      	subs	r3, #4
 800835e:	18d3      	adds	r3, r2, r3
 8008360:	6019      	str	r1, [r3, #0]
 8008362:	2900      	cmp	r1, #0
 8008364:	d000      	beq.n	8008368 <rshift+0x7c>
 8008366:	3304      	adds	r3, #4
 8008368:	1a99      	subs	r1, r3, r2
 800836a:	1089      	asrs	r1, r1, #2
 800836c:	6101      	str	r1, [r0, #16]
 800836e:	4293      	cmp	r3, r2
 8008370:	d101      	bne.n	8008376 <rshift+0x8a>
 8008372:	2300      	movs	r3, #0
 8008374:	6143      	str	r3, [r0, #20]
 8008376:	b005      	add	sp, #20
 8008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837a:	6837      	ldr	r7, [r6, #0]
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	409f      	lsls	r7, r3
 8008380:	430f      	orrs	r7, r1
 8008382:	4661      	mov	r1, ip
 8008384:	c180      	stmia	r1!, {r7}
 8008386:	468c      	mov	ip, r1
 8008388:	9b01      	ldr	r3, [sp, #4]
 800838a:	ce02      	ldmia	r6!, {r1}
 800838c:	40d9      	lsrs	r1, r3
 800838e:	e7db      	b.n	8008348 <rshift+0x5c>
 8008390:	c980      	ldmia	r1!, {r7}
 8008392:	c680      	stmia	r6!, {r7}
 8008394:	e7c3      	b.n	800831e <rshift+0x32>

08008396 <__hexdig_fun>:
 8008396:	0002      	movs	r2, r0
 8008398:	3a30      	subs	r2, #48	; 0x30
 800839a:	0003      	movs	r3, r0
 800839c:	2a09      	cmp	r2, #9
 800839e:	d802      	bhi.n	80083a6 <__hexdig_fun+0x10>
 80083a0:	3b20      	subs	r3, #32
 80083a2:	b2d8      	uxtb	r0, r3
 80083a4:	4770      	bx	lr
 80083a6:	0002      	movs	r2, r0
 80083a8:	3a61      	subs	r2, #97	; 0x61
 80083aa:	2a05      	cmp	r2, #5
 80083ac:	d801      	bhi.n	80083b2 <__hexdig_fun+0x1c>
 80083ae:	3b47      	subs	r3, #71	; 0x47
 80083b0:	e7f7      	b.n	80083a2 <__hexdig_fun+0xc>
 80083b2:	001a      	movs	r2, r3
 80083b4:	3a41      	subs	r2, #65	; 0x41
 80083b6:	2000      	movs	r0, #0
 80083b8:	2a05      	cmp	r2, #5
 80083ba:	d8f3      	bhi.n	80083a4 <__hexdig_fun+0xe>
 80083bc:	3b27      	subs	r3, #39	; 0x27
 80083be:	e7f0      	b.n	80083a2 <__hexdig_fun+0xc>

080083c0 <__gethex>:
 80083c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c2:	b089      	sub	sp, #36	; 0x24
 80083c4:	9307      	str	r3, [sp, #28]
 80083c6:	2302      	movs	r3, #2
 80083c8:	9201      	str	r2, [sp, #4]
 80083ca:	680a      	ldr	r2, [r1, #0]
 80083cc:	425b      	negs	r3, r3
 80083ce:	9003      	str	r0, [sp, #12]
 80083d0:	9106      	str	r1, [sp, #24]
 80083d2:	1c96      	adds	r6, r2, #2
 80083d4:	1a9b      	subs	r3, r3, r2
 80083d6:	199a      	adds	r2, r3, r6
 80083d8:	9600      	str	r6, [sp, #0]
 80083da:	9205      	str	r2, [sp, #20]
 80083dc:	9a00      	ldr	r2, [sp, #0]
 80083de:	3601      	adds	r6, #1
 80083e0:	7810      	ldrb	r0, [r2, #0]
 80083e2:	2830      	cmp	r0, #48	; 0x30
 80083e4:	d0f7      	beq.n	80083d6 <__gethex+0x16>
 80083e6:	f7ff ffd6 	bl	8008396 <__hexdig_fun>
 80083ea:	2300      	movs	r3, #0
 80083ec:	001d      	movs	r5, r3
 80083ee:	9302      	str	r3, [sp, #8]
 80083f0:	4298      	cmp	r0, r3
 80083f2:	d11d      	bne.n	8008430 <__gethex+0x70>
 80083f4:	2201      	movs	r2, #1
 80083f6:	49a6      	ldr	r1, [pc, #664]	; (8008690 <__gethex+0x2d0>)
 80083f8:	9800      	ldr	r0, [sp, #0]
 80083fa:	f7fe ffdf 	bl	80073bc <strncmp>
 80083fe:	0007      	movs	r7, r0
 8008400:	42a8      	cmp	r0, r5
 8008402:	d169      	bne.n	80084d8 <__gethex+0x118>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	0034      	movs	r4, r6
 8008408:	7858      	ldrb	r0, [r3, #1]
 800840a:	f7ff ffc4 	bl	8008396 <__hexdig_fun>
 800840e:	2301      	movs	r3, #1
 8008410:	9302      	str	r3, [sp, #8]
 8008412:	42a8      	cmp	r0, r5
 8008414:	d02f      	beq.n	8008476 <__gethex+0xb6>
 8008416:	9600      	str	r6, [sp, #0]
 8008418:	9b00      	ldr	r3, [sp, #0]
 800841a:	7818      	ldrb	r0, [r3, #0]
 800841c:	2830      	cmp	r0, #48	; 0x30
 800841e:	d009      	beq.n	8008434 <__gethex+0x74>
 8008420:	f7ff ffb9 	bl	8008396 <__hexdig_fun>
 8008424:	4242      	negs	r2, r0
 8008426:	4142      	adcs	r2, r0
 8008428:	2301      	movs	r3, #1
 800842a:	0035      	movs	r5, r6
 800842c:	9202      	str	r2, [sp, #8]
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	9c00      	ldr	r4, [sp, #0]
 8008432:	e004      	b.n	800843e <__gethex+0x7e>
 8008434:	9b00      	ldr	r3, [sp, #0]
 8008436:	3301      	adds	r3, #1
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	e7ed      	b.n	8008418 <__gethex+0x58>
 800843c:	3401      	adds	r4, #1
 800843e:	7820      	ldrb	r0, [r4, #0]
 8008440:	f7ff ffa9 	bl	8008396 <__hexdig_fun>
 8008444:	1e07      	subs	r7, r0, #0
 8008446:	d1f9      	bne.n	800843c <__gethex+0x7c>
 8008448:	2201      	movs	r2, #1
 800844a:	0020      	movs	r0, r4
 800844c:	4990      	ldr	r1, [pc, #576]	; (8008690 <__gethex+0x2d0>)
 800844e:	f7fe ffb5 	bl	80073bc <strncmp>
 8008452:	2800      	cmp	r0, #0
 8008454:	d10d      	bne.n	8008472 <__gethex+0xb2>
 8008456:	2d00      	cmp	r5, #0
 8008458:	d106      	bne.n	8008468 <__gethex+0xa8>
 800845a:	3401      	adds	r4, #1
 800845c:	0025      	movs	r5, r4
 800845e:	7820      	ldrb	r0, [r4, #0]
 8008460:	f7ff ff99 	bl	8008396 <__hexdig_fun>
 8008464:	2800      	cmp	r0, #0
 8008466:	d102      	bne.n	800846e <__gethex+0xae>
 8008468:	1b2d      	subs	r5, r5, r4
 800846a:	00af      	lsls	r7, r5, #2
 800846c:	e003      	b.n	8008476 <__gethex+0xb6>
 800846e:	3401      	adds	r4, #1
 8008470:	e7f5      	b.n	800845e <__gethex+0x9e>
 8008472:	2d00      	cmp	r5, #0
 8008474:	d1f8      	bne.n	8008468 <__gethex+0xa8>
 8008476:	2220      	movs	r2, #32
 8008478:	7823      	ldrb	r3, [r4, #0]
 800847a:	0026      	movs	r6, r4
 800847c:	4393      	bics	r3, r2
 800847e:	2b50      	cmp	r3, #80	; 0x50
 8008480:	d11d      	bne.n	80084be <__gethex+0xfe>
 8008482:	7863      	ldrb	r3, [r4, #1]
 8008484:	2b2b      	cmp	r3, #43	; 0x2b
 8008486:	d02c      	beq.n	80084e2 <__gethex+0x122>
 8008488:	2b2d      	cmp	r3, #45	; 0x2d
 800848a:	d02e      	beq.n	80084ea <__gethex+0x12a>
 800848c:	2300      	movs	r3, #0
 800848e:	1c66      	adds	r6, r4, #1
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	7830      	ldrb	r0, [r6, #0]
 8008494:	f7ff ff7f 	bl	8008396 <__hexdig_fun>
 8008498:	1e43      	subs	r3, r0, #1
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b18      	cmp	r3, #24
 800849e:	d82b      	bhi.n	80084f8 <__gethex+0x138>
 80084a0:	3810      	subs	r0, #16
 80084a2:	0005      	movs	r5, r0
 80084a4:	7870      	ldrb	r0, [r6, #1]
 80084a6:	f7ff ff76 	bl	8008396 <__hexdig_fun>
 80084aa:	1e43      	subs	r3, r0, #1
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	3601      	adds	r6, #1
 80084b0:	2b18      	cmp	r3, #24
 80084b2:	d91c      	bls.n	80084ee <__gethex+0x12e>
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d000      	beq.n	80084bc <__gethex+0xfc>
 80084ba:	426d      	negs	r5, r5
 80084bc:	197f      	adds	r7, r7, r5
 80084be:	9b06      	ldr	r3, [sp, #24]
 80084c0:	601e      	str	r6, [r3, #0]
 80084c2:	9b02      	ldr	r3, [sp, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d019      	beq.n	80084fc <__gethex+0x13c>
 80084c8:	2600      	movs	r6, #0
 80084ca:	9b05      	ldr	r3, [sp, #20]
 80084cc:	42b3      	cmp	r3, r6
 80084ce:	d100      	bne.n	80084d2 <__gethex+0x112>
 80084d0:	3606      	adds	r6, #6
 80084d2:	0030      	movs	r0, r6
 80084d4:	b009      	add	sp, #36	; 0x24
 80084d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d8:	2301      	movs	r3, #1
 80084da:	2700      	movs	r7, #0
 80084dc:	9c00      	ldr	r4, [sp, #0]
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	e7c9      	b.n	8008476 <__gethex+0xb6>
 80084e2:	2300      	movs	r3, #0
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	1ca6      	adds	r6, r4, #2
 80084e8:	e7d3      	b.n	8008492 <__gethex+0xd2>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e7fa      	b.n	80084e4 <__gethex+0x124>
 80084ee:	230a      	movs	r3, #10
 80084f0:	435d      	muls	r5, r3
 80084f2:	182d      	adds	r5, r5, r0
 80084f4:	3d10      	subs	r5, #16
 80084f6:	e7d5      	b.n	80084a4 <__gethex+0xe4>
 80084f8:	0026      	movs	r6, r4
 80084fa:	e7e0      	b.n	80084be <__gethex+0xfe>
 80084fc:	9b00      	ldr	r3, [sp, #0]
 80084fe:	9902      	ldr	r1, [sp, #8]
 8008500:	1ae3      	subs	r3, r4, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	2b07      	cmp	r3, #7
 8008506:	dc0a      	bgt.n	800851e <__gethex+0x15e>
 8008508:	9803      	ldr	r0, [sp, #12]
 800850a:	f000 fb1b 	bl	8008b44 <_Balloc>
 800850e:	1e05      	subs	r5, r0, #0
 8008510:	d108      	bne.n	8008524 <__gethex+0x164>
 8008512:	002a      	movs	r2, r5
 8008514:	21e4      	movs	r1, #228	; 0xe4
 8008516:	4b5f      	ldr	r3, [pc, #380]	; (8008694 <__gethex+0x2d4>)
 8008518:	485f      	ldr	r0, [pc, #380]	; (8008698 <__gethex+0x2d8>)
 800851a:	f001 faa3 	bl	8009a64 <__assert_func>
 800851e:	3101      	adds	r1, #1
 8008520:	105b      	asrs	r3, r3, #1
 8008522:	e7ef      	b.n	8008504 <__gethex+0x144>
 8008524:	0003      	movs	r3, r0
 8008526:	3314      	adds	r3, #20
 8008528:	9302      	str	r3, [sp, #8]
 800852a:	9305      	str	r3, [sp, #20]
 800852c:	2300      	movs	r3, #0
 800852e:	001e      	movs	r6, r3
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	9b00      	ldr	r3, [sp, #0]
 8008534:	42a3      	cmp	r3, r4
 8008536:	d33f      	bcc.n	80085b8 <__gethex+0x1f8>
 8008538:	9c05      	ldr	r4, [sp, #20]
 800853a:	9b02      	ldr	r3, [sp, #8]
 800853c:	c440      	stmia	r4!, {r6}
 800853e:	1ae4      	subs	r4, r4, r3
 8008540:	10a4      	asrs	r4, r4, #2
 8008542:	0030      	movs	r0, r6
 8008544:	612c      	str	r4, [r5, #16]
 8008546:	f000 fbf5 	bl	8008d34 <__hi0bits>
 800854a:	9b01      	ldr	r3, [sp, #4]
 800854c:	0164      	lsls	r4, r4, #5
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	1a26      	subs	r6, r4, r0
 8008552:	9300      	str	r3, [sp, #0]
 8008554:	429e      	cmp	r6, r3
 8008556:	dd51      	ble.n	80085fc <__gethex+0x23c>
 8008558:	1af6      	subs	r6, r6, r3
 800855a:	0031      	movs	r1, r6
 800855c:	0028      	movs	r0, r5
 800855e:	f000 ff89 	bl	8009474 <__any_on>
 8008562:	1e04      	subs	r4, r0, #0
 8008564:	d016      	beq.n	8008594 <__gethex+0x1d4>
 8008566:	2401      	movs	r4, #1
 8008568:	231f      	movs	r3, #31
 800856a:	0020      	movs	r0, r4
 800856c:	1e72      	subs	r2, r6, #1
 800856e:	4013      	ands	r3, r2
 8008570:	4098      	lsls	r0, r3
 8008572:	0003      	movs	r3, r0
 8008574:	1151      	asrs	r1, r2, #5
 8008576:	9802      	ldr	r0, [sp, #8]
 8008578:	0089      	lsls	r1, r1, #2
 800857a:	5809      	ldr	r1, [r1, r0]
 800857c:	4219      	tst	r1, r3
 800857e:	d009      	beq.n	8008594 <__gethex+0x1d4>
 8008580:	42a2      	cmp	r2, r4
 8008582:	dd06      	ble.n	8008592 <__gethex+0x1d2>
 8008584:	0028      	movs	r0, r5
 8008586:	1eb1      	subs	r1, r6, #2
 8008588:	f000 ff74 	bl	8009474 <__any_on>
 800858c:	3402      	adds	r4, #2
 800858e:	2800      	cmp	r0, #0
 8008590:	d100      	bne.n	8008594 <__gethex+0x1d4>
 8008592:	2402      	movs	r4, #2
 8008594:	0031      	movs	r1, r6
 8008596:	0028      	movs	r0, r5
 8008598:	f7ff fea8 	bl	80082ec <rshift>
 800859c:	19bf      	adds	r7, r7, r6
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	42bb      	cmp	r3, r7
 80085a4:	da3a      	bge.n	800861c <__gethex+0x25c>
 80085a6:	0029      	movs	r1, r5
 80085a8:	9803      	ldr	r0, [sp, #12]
 80085aa:	f000 fb0f 	bl	8008bcc <_Bfree>
 80085ae:	2300      	movs	r3, #0
 80085b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085b2:	26a3      	movs	r6, #163	; 0xa3
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	e78c      	b.n	80084d2 <__gethex+0x112>
 80085b8:	3c01      	subs	r4, #1
 80085ba:	7823      	ldrb	r3, [r4, #0]
 80085bc:	2b2e      	cmp	r3, #46	; 0x2e
 80085be:	d012      	beq.n	80085e6 <__gethex+0x226>
 80085c0:	9b04      	ldr	r3, [sp, #16]
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d104      	bne.n	80085d0 <__gethex+0x210>
 80085c6:	9b05      	ldr	r3, [sp, #20]
 80085c8:	c340      	stmia	r3!, {r6}
 80085ca:	2600      	movs	r6, #0
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	9604      	str	r6, [sp, #16]
 80085d0:	7820      	ldrb	r0, [r4, #0]
 80085d2:	f7ff fee0 	bl	8008396 <__hexdig_fun>
 80085d6:	230f      	movs	r3, #15
 80085d8:	4018      	ands	r0, r3
 80085da:	9b04      	ldr	r3, [sp, #16]
 80085dc:	4098      	lsls	r0, r3
 80085de:	3304      	adds	r3, #4
 80085e0:	4306      	orrs	r6, r0
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	e7a5      	b.n	8008532 <__gethex+0x172>
 80085e6:	9b00      	ldr	r3, [sp, #0]
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	d8e9      	bhi.n	80085c0 <__gethex+0x200>
 80085ec:	2201      	movs	r2, #1
 80085ee:	0020      	movs	r0, r4
 80085f0:	4927      	ldr	r1, [pc, #156]	; (8008690 <__gethex+0x2d0>)
 80085f2:	f7fe fee3 	bl	80073bc <strncmp>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d1e2      	bne.n	80085c0 <__gethex+0x200>
 80085fa:	e79a      	b.n	8008532 <__gethex+0x172>
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	2400      	movs	r4, #0
 8008600:	429e      	cmp	r6, r3
 8008602:	dacc      	bge.n	800859e <__gethex+0x1de>
 8008604:	1b9e      	subs	r6, r3, r6
 8008606:	0029      	movs	r1, r5
 8008608:	0032      	movs	r2, r6
 800860a:	9803      	ldr	r0, [sp, #12]
 800860c:	f000 fcfe 	bl	800900c <__lshift>
 8008610:	0003      	movs	r3, r0
 8008612:	3314      	adds	r3, #20
 8008614:	0005      	movs	r5, r0
 8008616:	1bbf      	subs	r7, r7, r6
 8008618:	9302      	str	r3, [sp, #8]
 800861a:	e7c0      	b.n	800859e <__gethex+0x1de>
 800861c:	9b01      	ldr	r3, [sp, #4]
 800861e:	685e      	ldr	r6, [r3, #4]
 8008620:	42be      	cmp	r6, r7
 8008622:	dd70      	ble.n	8008706 <__gethex+0x346>
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	1bf6      	subs	r6, r6, r7
 8008628:	42b3      	cmp	r3, r6
 800862a:	dc37      	bgt.n	800869c <__gethex+0x2dc>
 800862c:	9b01      	ldr	r3, [sp, #4]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d024      	beq.n	800867e <__gethex+0x2be>
 8008634:	2b03      	cmp	r3, #3
 8008636:	d026      	beq.n	8008686 <__gethex+0x2c6>
 8008638:	2b01      	cmp	r3, #1
 800863a:	d117      	bne.n	800866c <__gethex+0x2ac>
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	42b3      	cmp	r3, r6
 8008640:	d114      	bne.n	800866c <__gethex+0x2ac>
 8008642:	2b01      	cmp	r3, #1
 8008644:	d10b      	bne.n	800865e <__gethex+0x29e>
 8008646:	9b01      	ldr	r3, [sp, #4]
 8008648:	9a07      	ldr	r2, [sp, #28]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	2662      	movs	r6, #98	; 0x62
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	2301      	movs	r3, #1
 8008652:	9a02      	ldr	r2, [sp, #8]
 8008654:	612b      	str	r3, [r5, #16]
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800865a:	601d      	str	r5, [r3, #0]
 800865c:	e739      	b.n	80084d2 <__gethex+0x112>
 800865e:	9900      	ldr	r1, [sp, #0]
 8008660:	0028      	movs	r0, r5
 8008662:	3901      	subs	r1, #1
 8008664:	f000 ff06 	bl	8009474 <__any_on>
 8008668:	2800      	cmp	r0, #0
 800866a:	d1ec      	bne.n	8008646 <__gethex+0x286>
 800866c:	0029      	movs	r1, r5
 800866e:	9803      	ldr	r0, [sp, #12]
 8008670:	f000 faac 	bl	8008bcc <_Bfree>
 8008674:	2300      	movs	r3, #0
 8008676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008678:	2650      	movs	r6, #80	; 0x50
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e729      	b.n	80084d2 <__gethex+0x112>
 800867e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1f3      	bne.n	800866c <__gethex+0x2ac>
 8008684:	e7df      	b.n	8008646 <__gethex+0x286>
 8008686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1dc      	bne.n	8008646 <__gethex+0x286>
 800868c:	e7ee      	b.n	800866c <__gethex+0x2ac>
 800868e:	46c0      	nop			; (mov r8, r8)
 8008690:	0800a288 	.word	0x0800a288
 8008694:	0800a39d 	.word	0x0800a39d
 8008698:	0800a3ae 	.word	0x0800a3ae
 800869c:	1e77      	subs	r7, r6, #1
 800869e:	2c00      	cmp	r4, #0
 80086a0:	d12f      	bne.n	8008702 <__gethex+0x342>
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	d004      	beq.n	80086b0 <__gethex+0x2f0>
 80086a6:	0039      	movs	r1, r7
 80086a8:	0028      	movs	r0, r5
 80086aa:	f000 fee3 	bl	8009474 <__any_on>
 80086ae:	0004      	movs	r4, r0
 80086b0:	231f      	movs	r3, #31
 80086b2:	117a      	asrs	r2, r7, #5
 80086b4:	401f      	ands	r7, r3
 80086b6:	3b1e      	subs	r3, #30
 80086b8:	40bb      	lsls	r3, r7
 80086ba:	9902      	ldr	r1, [sp, #8]
 80086bc:	0092      	lsls	r2, r2, #2
 80086be:	5852      	ldr	r2, [r2, r1]
 80086c0:	421a      	tst	r2, r3
 80086c2:	d001      	beq.n	80086c8 <__gethex+0x308>
 80086c4:	2302      	movs	r3, #2
 80086c6:	431c      	orrs	r4, r3
 80086c8:	9b00      	ldr	r3, [sp, #0]
 80086ca:	0031      	movs	r1, r6
 80086cc:	1b9b      	subs	r3, r3, r6
 80086ce:	2602      	movs	r6, #2
 80086d0:	0028      	movs	r0, r5
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	f7ff fe0a 	bl	80082ec <rshift>
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	685f      	ldr	r7, [r3, #4]
 80086dc:	2c00      	cmp	r4, #0
 80086de:	d041      	beq.n	8008764 <__gethex+0x3a4>
 80086e0:	9b01      	ldr	r3, [sp, #4]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d010      	beq.n	800870a <__gethex+0x34a>
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	d012      	beq.n	8008712 <__gethex+0x352>
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d106      	bne.n	80086fe <__gethex+0x33e>
 80086f0:	07a2      	lsls	r2, r4, #30
 80086f2:	d504      	bpl.n	80086fe <__gethex+0x33e>
 80086f4:	9a02      	ldr	r2, [sp, #8]
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	4314      	orrs	r4, r2
 80086fa:	421c      	tst	r4, r3
 80086fc:	d10c      	bne.n	8008718 <__gethex+0x358>
 80086fe:	2310      	movs	r3, #16
 8008700:	e02f      	b.n	8008762 <__gethex+0x3a2>
 8008702:	2401      	movs	r4, #1
 8008704:	e7d4      	b.n	80086b0 <__gethex+0x2f0>
 8008706:	2601      	movs	r6, #1
 8008708:	e7e8      	b.n	80086dc <__gethex+0x31c>
 800870a:	2301      	movs	r3, #1
 800870c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	930f      	str	r3, [sp, #60]	; 0x3c
 8008712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0f2      	beq.n	80086fe <__gethex+0x33e>
 8008718:	692b      	ldr	r3, [r5, #16]
 800871a:	2000      	movs	r0, #0
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	9304      	str	r3, [sp, #16]
 8008722:	002b      	movs	r3, r5
 8008724:	9a04      	ldr	r2, [sp, #16]
 8008726:	3314      	adds	r3, #20
 8008728:	1899      	adds	r1, r3, r2
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	1c54      	adds	r4, r2, #1
 800872e:	d01e      	beq.n	800876e <__gethex+0x3ae>
 8008730:	3201      	adds	r2, #1
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	002b      	movs	r3, r5
 8008736:	3314      	adds	r3, #20
 8008738:	2e02      	cmp	r6, #2
 800873a:	d141      	bne.n	80087c0 <__gethex+0x400>
 800873c:	9a01      	ldr	r2, [sp, #4]
 800873e:	9900      	ldr	r1, [sp, #0]
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	3a01      	subs	r2, #1
 8008744:	428a      	cmp	r2, r1
 8008746:	d10b      	bne.n	8008760 <__gethex+0x3a0>
 8008748:	221f      	movs	r2, #31
 800874a:	9800      	ldr	r0, [sp, #0]
 800874c:	1149      	asrs	r1, r1, #5
 800874e:	4002      	ands	r2, r0
 8008750:	2001      	movs	r0, #1
 8008752:	0004      	movs	r4, r0
 8008754:	4094      	lsls	r4, r2
 8008756:	0089      	lsls	r1, r1, #2
 8008758:	58cb      	ldr	r3, [r1, r3]
 800875a:	4223      	tst	r3, r4
 800875c:	d000      	beq.n	8008760 <__gethex+0x3a0>
 800875e:	2601      	movs	r6, #1
 8008760:	2320      	movs	r3, #32
 8008762:	431e      	orrs	r6, r3
 8008764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008766:	601d      	str	r5, [r3, #0]
 8008768:	9b07      	ldr	r3, [sp, #28]
 800876a:	601f      	str	r7, [r3, #0]
 800876c:	e6b1      	b.n	80084d2 <__gethex+0x112>
 800876e:	c301      	stmia	r3!, {r0}
 8008770:	4299      	cmp	r1, r3
 8008772:	d8da      	bhi.n	800872a <__gethex+0x36a>
 8008774:	68ab      	ldr	r3, [r5, #8]
 8008776:	9a02      	ldr	r2, [sp, #8]
 8008778:	429a      	cmp	r2, r3
 800877a:	db18      	blt.n	80087ae <__gethex+0x3ee>
 800877c:	6869      	ldr	r1, [r5, #4]
 800877e:	9803      	ldr	r0, [sp, #12]
 8008780:	3101      	adds	r1, #1
 8008782:	f000 f9df 	bl	8008b44 <_Balloc>
 8008786:	1e04      	subs	r4, r0, #0
 8008788:	d104      	bne.n	8008794 <__gethex+0x3d4>
 800878a:	0022      	movs	r2, r4
 800878c:	2184      	movs	r1, #132	; 0x84
 800878e:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <__gethex+0x440>)
 8008790:	481c      	ldr	r0, [pc, #112]	; (8008804 <__gethex+0x444>)
 8008792:	e6c2      	b.n	800851a <__gethex+0x15a>
 8008794:	0029      	movs	r1, r5
 8008796:	692a      	ldr	r2, [r5, #16]
 8008798:	310c      	adds	r1, #12
 800879a:	3202      	adds	r2, #2
 800879c:	0092      	lsls	r2, r2, #2
 800879e:	300c      	adds	r0, #12
 80087a0:	f7fe fea8 	bl	80074f4 <memcpy>
 80087a4:	0029      	movs	r1, r5
 80087a6:	9803      	ldr	r0, [sp, #12]
 80087a8:	f000 fa10 	bl	8008bcc <_Bfree>
 80087ac:	0025      	movs	r5, r4
 80087ae:	692b      	ldr	r3, [r5, #16]
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	612a      	str	r2, [r5, #16]
 80087b4:	2201      	movs	r2, #1
 80087b6:	3304      	adds	r3, #4
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	18eb      	adds	r3, r5, r3
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	e7b9      	b.n	8008734 <__gethex+0x374>
 80087c0:	692a      	ldr	r2, [r5, #16]
 80087c2:	9902      	ldr	r1, [sp, #8]
 80087c4:	428a      	cmp	r2, r1
 80087c6:	dd09      	ble.n	80087dc <__gethex+0x41c>
 80087c8:	2101      	movs	r1, #1
 80087ca:	0028      	movs	r0, r5
 80087cc:	f7ff fd8e 	bl	80082ec <rshift>
 80087d0:	9b01      	ldr	r3, [sp, #4]
 80087d2:	3701      	adds	r7, #1
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	42bb      	cmp	r3, r7
 80087d8:	dac1      	bge.n	800875e <__gethex+0x39e>
 80087da:	e6e4      	b.n	80085a6 <__gethex+0x1e6>
 80087dc:	221f      	movs	r2, #31
 80087de:	9c00      	ldr	r4, [sp, #0]
 80087e0:	9900      	ldr	r1, [sp, #0]
 80087e2:	2601      	movs	r6, #1
 80087e4:	4014      	ands	r4, r2
 80087e6:	4211      	tst	r1, r2
 80087e8:	d0ba      	beq.n	8008760 <__gethex+0x3a0>
 80087ea:	9a04      	ldr	r2, [sp, #16]
 80087ec:	189b      	adds	r3, r3, r2
 80087ee:	3b04      	subs	r3, #4
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	f000 fa9f 	bl	8008d34 <__hi0bits>
 80087f6:	2320      	movs	r3, #32
 80087f8:	1b1b      	subs	r3, r3, r4
 80087fa:	4298      	cmp	r0, r3
 80087fc:	dbe4      	blt.n	80087c8 <__gethex+0x408>
 80087fe:	e7af      	b.n	8008760 <__gethex+0x3a0>
 8008800:	0800a39d 	.word	0x0800a39d
 8008804:	0800a3ae 	.word	0x0800a3ae

08008808 <L_shift>:
 8008808:	2308      	movs	r3, #8
 800880a:	b570      	push	{r4, r5, r6, lr}
 800880c:	2520      	movs	r5, #32
 800880e:	1a9a      	subs	r2, r3, r2
 8008810:	0092      	lsls	r2, r2, #2
 8008812:	1aad      	subs	r5, r5, r2
 8008814:	6843      	ldr	r3, [r0, #4]
 8008816:	6804      	ldr	r4, [r0, #0]
 8008818:	001e      	movs	r6, r3
 800881a:	40ae      	lsls	r6, r5
 800881c:	40d3      	lsrs	r3, r2
 800881e:	4334      	orrs	r4, r6
 8008820:	6004      	str	r4, [r0, #0]
 8008822:	6043      	str	r3, [r0, #4]
 8008824:	3004      	adds	r0, #4
 8008826:	4288      	cmp	r0, r1
 8008828:	d3f4      	bcc.n	8008814 <L_shift+0xc>
 800882a:	bd70      	pop	{r4, r5, r6, pc}

0800882c <__match>:
 800882c:	b530      	push	{r4, r5, lr}
 800882e:	6803      	ldr	r3, [r0, #0]
 8008830:	780c      	ldrb	r4, [r1, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	2c00      	cmp	r4, #0
 8008836:	d102      	bne.n	800883e <__match+0x12>
 8008838:	6003      	str	r3, [r0, #0]
 800883a:	2001      	movs	r0, #1
 800883c:	bd30      	pop	{r4, r5, pc}
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	0015      	movs	r5, r2
 8008842:	3d41      	subs	r5, #65	; 0x41
 8008844:	2d19      	cmp	r5, #25
 8008846:	d800      	bhi.n	800884a <__match+0x1e>
 8008848:	3220      	adds	r2, #32
 800884a:	3101      	adds	r1, #1
 800884c:	42a2      	cmp	r2, r4
 800884e:	d0ef      	beq.n	8008830 <__match+0x4>
 8008850:	2000      	movs	r0, #0
 8008852:	e7f3      	b.n	800883c <__match+0x10>

08008854 <__hexnan>:
 8008854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008856:	680b      	ldr	r3, [r1, #0]
 8008858:	b08b      	sub	sp, #44	; 0x2c
 800885a:	9201      	str	r2, [sp, #4]
 800885c:	9901      	ldr	r1, [sp, #4]
 800885e:	115a      	asrs	r2, r3, #5
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	188a      	adds	r2, r1, r2
 8008864:	9202      	str	r2, [sp, #8]
 8008866:	0019      	movs	r1, r3
 8008868:	221f      	movs	r2, #31
 800886a:	4011      	ands	r1, r2
 800886c:	9008      	str	r0, [sp, #32]
 800886e:	9106      	str	r1, [sp, #24]
 8008870:	4213      	tst	r3, r2
 8008872:	d002      	beq.n	800887a <__hexnan+0x26>
 8008874:	9b02      	ldr	r3, [sp, #8]
 8008876:	3304      	adds	r3, #4
 8008878:	9302      	str	r3, [sp, #8]
 800887a:	9b02      	ldr	r3, [sp, #8]
 800887c:	2500      	movs	r5, #0
 800887e:	1f1f      	subs	r7, r3, #4
 8008880:	003e      	movs	r6, r7
 8008882:	003c      	movs	r4, r7
 8008884:	9b08      	ldr	r3, [sp, #32]
 8008886:	603d      	str	r5, [r7, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	9507      	str	r5, [sp, #28]
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	9503      	str	r5, [sp, #12]
 8008890:	9b05      	ldr	r3, [sp, #20]
 8008892:	3301      	adds	r3, #1
 8008894:	9309      	str	r3, [sp, #36]	; 0x24
 8008896:	9b05      	ldr	r3, [sp, #20]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d028      	beq.n	80088f2 <__hexnan+0x9e>
 80088a0:	9804      	ldr	r0, [sp, #16]
 80088a2:	f7ff fd78 	bl	8008396 <__hexdig_fun>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d154      	bne.n	8008954 <__hexnan+0x100>
 80088aa:	9b04      	ldr	r3, [sp, #16]
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d819      	bhi.n	80088e4 <__hexnan+0x90>
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	9a07      	ldr	r2, [sp, #28]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	dd12      	ble.n	80088de <__hexnan+0x8a>
 80088b8:	42b4      	cmp	r4, r6
 80088ba:	d206      	bcs.n	80088ca <__hexnan+0x76>
 80088bc:	2d07      	cmp	r5, #7
 80088be:	dc04      	bgt.n	80088ca <__hexnan+0x76>
 80088c0:	002a      	movs	r2, r5
 80088c2:	0031      	movs	r1, r6
 80088c4:	0020      	movs	r0, r4
 80088c6:	f7ff ff9f 	bl	8008808 <L_shift>
 80088ca:	9b01      	ldr	r3, [sp, #4]
 80088cc:	2508      	movs	r5, #8
 80088ce:	429c      	cmp	r4, r3
 80088d0:	d905      	bls.n	80088de <__hexnan+0x8a>
 80088d2:	1f26      	subs	r6, r4, #4
 80088d4:	2500      	movs	r5, #0
 80088d6:	0034      	movs	r4, r6
 80088d8:	9b03      	ldr	r3, [sp, #12]
 80088da:	6035      	str	r5, [r6, #0]
 80088dc:	9307      	str	r3, [sp, #28]
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	9305      	str	r3, [sp, #20]
 80088e2:	e7d5      	b.n	8008890 <__hexnan+0x3c>
 80088e4:	9b04      	ldr	r3, [sp, #16]
 80088e6:	2b29      	cmp	r3, #41	; 0x29
 80088e8:	d159      	bne.n	800899e <__hexnan+0x14a>
 80088ea:	9b05      	ldr	r3, [sp, #20]
 80088ec:	9a08      	ldr	r2, [sp, #32]
 80088ee:	3302      	adds	r3, #2
 80088f0:	6013      	str	r3, [r2, #0]
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d052      	beq.n	800899e <__hexnan+0x14a>
 80088f8:	42b4      	cmp	r4, r6
 80088fa:	d206      	bcs.n	800890a <__hexnan+0xb6>
 80088fc:	2d07      	cmp	r5, #7
 80088fe:	dc04      	bgt.n	800890a <__hexnan+0xb6>
 8008900:	002a      	movs	r2, r5
 8008902:	0031      	movs	r1, r6
 8008904:	0020      	movs	r0, r4
 8008906:	f7ff ff7f 	bl	8008808 <L_shift>
 800890a:	9b01      	ldr	r3, [sp, #4]
 800890c:	429c      	cmp	r4, r3
 800890e:	d935      	bls.n	800897c <__hexnan+0x128>
 8008910:	001a      	movs	r2, r3
 8008912:	0023      	movs	r3, r4
 8008914:	cb02      	ldmia	r3!, {r1}
 8008916:	c202      	stmia	r2!, {r1}
 8008918:	429f      	cmp	r7, r3
 800891a:	d2fb      	bcs.n	8008914 <__hexnan+0xc0>
 800891c:	9b02      	ldr	r3, [sp, #8]
 800891e:	1c62      	adds	r2, r4, #1
 8008920:	1ed9      	subs	r1, r3, #3
 8008922:	2304      	movs	r3, #4
 8008924:	4291      	cmp	r1, r2
 8008926:	d305      	bcc.n	8008934 <__hexnan+0xe0>
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	3b04      	subs	r3, #4
 800892c:	1b1b      	subs	r3, r3, r4
 800892e:	089b      	lsrs	r3, r3, #2
 8008930:	3301      	adds	r3, #1
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	9a01      	ldr	r2, [sp, #4]
 8008936:	18d3      	adds	r3, r2, r3
 8008938:	2200      	movs	r2, #0
 800893a:	c304      	stmia	r3!, {r2}
 800893c:	429f      	cmp	r7, r3
 800893e:	d2fc      	bcs.n	800893a <__hexnan+0xe6>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d104      	bne.n	8008950 <__hexnan+0xfc>
 8008946:	9b01      	ldr	r3, [sp, #4]
 8008948:	429f      	cmp	r7, r3
 800894a:	d126      	bne.n	800899a <__hexnan+0x146>
 800894c:	2301      	movs	r3, #1
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	2005      	movs	r0, #5
 8008952:	e025      	b.n	80089a0 <__hexnan+0x14c>
 8008954:	9b03      	ldr	r3, [sp, #12]
 8008956:	3501      	adds	r5, #1
 8008958:	3301      	adds	r3, #1
 800895a:	9303      	str	r3, [sp, #12]
 800895c:	2d08      	cmp	r5, #8
 800895e:	dd06      	ble.n	800896e <__hexnan+0x11a>
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	429c      	cmp	r4, r3
 8008964:	d9bb      	bls.n	80088de <__hexnan+0x8a>
 8008966:	2300      	movs	r3, #0
 8008968:	2501      	movs	r5, #1
 800896a:	3c04      	subs	r4, #4
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	220f      	movs	r2, #15
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	4010      	ands	r0, r2
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	4303      	orrs	r3, r0
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	e7b0      	b.n	80088de <__hexnan+0x8a>
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0de      	beq.n	8008940 <__hexnan+0xec>
 8008982:	2320      	movs	r3, #32
 8008984:	9a06      	ldr	r2, [sp, #24]
 8008986:	9902      	ldr	r1, [sp, #8]
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	2201      	movs	r2, #1
 800898c:	4252      	negs	r2, r2
 800898e:	40da      	lsrs	r2, r3
 8008990:	3904      	subs	r1, #4
 8008992:	680b      	ldr	r3, [r1, #0]
 8008994:	4013      	ands	r3, r2
 8008996:	600b      	str	r3, [r1, #0]
 8008998:	e7d2      	b.n	8008940 <__hexnan+0xec>
 800899a:	3f04      	subs	r7, #4
 800899c:	e7d0      	b.n	8008940 <__hexnan+0xec>
 800899e:	2004      	movs	r0, #4
 80089a0:	b00b      	add	sp, #44	; 0x2c
 80089a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089a4 <malloc>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4b03      	ldr	r3, [pc, #12]	; (80089b4 <malloc+0x10>)
 80089a8:	0001      	movs	r1, r0
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	f000 f826 	bl	80089fc <_malloc_r>
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	200001d4 	.word	0x200001d4

080089b8 <sbrk_aligned>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	4e0f      	ldr	r6, [pc, #60]	; (80089f8 <sbrk_aligned+0x40>)
 80089bc:	000d      	movs	r5, r1
 80089be:	6831      	ldr	r1, [r6, #0]
 80089c0:	0004      	movs	r4, r0
 80089c2:	2900      	cmp	r1, #0
 80089c4:	d102      	bne.n	80089cc <sbrk_aligned+0x14>
 80089c6:	f001 f83b 	bl	8009a40 <_sbrk_r>
 80089ca:	6030      	str	r0, [r6, #0]
 80089cc:	0029      	movs	r1, r5
 80089ce:	0020      	movs	r0, r4
 80089d0:	f001 f836 	bl	8009a40 <_sbrk_r>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d00a      	beq.n	80089ee <sbrk_aligned+0x36>
 80089d8:	2303      	movs	r3, #3
 80089da:	1cc5      	adds	r5, r0, #3
 80089dc:	439d      	bics	r5, r3
 80089de:	42a8      	cmp	r0, r5
 80089e0:	d007      	beq.n	80089f2 <sbrk_aligned+0x3a>
 80089e2:	1a29      	subs	r1, r5, r0
 80089e4:	0020      	movs	r0, r4
 80089e6:	f001 f82b 	bl	8009a40 <_sbrk_r>
 80089ea:	3001      	adds	r0, #1
 80089ec:	d101      	bne.n	80089f2 <sbrk_aligned+0x3a>
 80089ee:	2501      	movs	r5, #1
 80089f0:	426d      	negs	r5, r5
 80089f2:	0028      	movs	r0, r5
 80089f4:	bd70      	pop	{r4, r5, r6, pc}
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	20000418 	.word	0x20000418

080089fc <_malloc_r>:
 80089fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089fe:	2203      	movs	r2, #3
 8008a00:	1ccb      	adds	r3, r1, #3
 8008a02:	4393      	bics	r3, r2
 8008a04:	3308      	adds	r3, #8
 8008a06:	0006      	movs	r6, r0
 8008a08:	001f      	movs	r7, r3
 8008a0a:	2b0c      	cmp	r3, #12
 8008a0c:	d238      	bcs.n	8008a80 <_malloc_r+0x84>
 8008a0e:	270c      	movs	r7, #12
 8008a10:	42b9      	cmp	r1, r7
 8008a12:	d837      	bhi.n	8008a84 <_malloc_r+0x88>
 8008a14:	0030      	movs	r0, r6
 8008a16:	f000 f885 	bl	8008b24 <__malloc_lock>
 8008a1a:	4b38      	ldr	r3, [pc, #224]	; (8008afc <_malloc_r+0x100>)
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	001c      	movs	r4, r3
 8008a22:	2c00      	cmp	r4, #0
 8008a24:	d133      	bne.n	8008a8e <_malloc_r+0x92>
 8008a26:	0039      	movs	r1, r7
 8008a28:	0030      	movs	r0, r6
 8008a2a:	f7ff ffc5 	bl	80089b8 <sbrk_aligned>
 8008a2e:	0004      	movs	r4, r0
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d15e      	bne.n	8008af2 <_malloc_r+0xf6>
 8008a34:	9b00      	ldr	r3, [sp, #0]
 8008a36:	681c      	ldr	r4, [r3, #0]
 8008a38:	0025      	movs	r5, r4
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	d14e      	bne.n	8008adc <_malloc_r+0xe0>
 8008a3e:	2c00      	cmp	r4, #0
 8008a40:	d051      	beq.n	8008ae6 <_malloc_r+0xea>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	0029      	movs	r1, r5
 8008a46:	18e3      	adds	r3, r4, r3
 8008a48:	0030      	movs	r0, r6
 8008a4a:	9301      	str	r3, [sp, #4]
 8008a4c:	f000 fff8 	bl	8009a40 <_sbrk_r>
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	4283      	cmp	r3, r0
 8008a54:	d147      	bne.n	8008ae6 <_malloc_r+0xea>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	0030      	movs	r0, r6
 8008a5a:	1aff      	subs	r7, r7, r3
 8008a5c:	0039      	movs	r1, r7
 8008a5e:	f7ff ffab 	bl	80089b8 <sbrk_aligned>
 8008a62:	3001      	adds	r0, #1
 8008a64:	d03f      	beq.n	8008ae6 <_malloc_r+0xea>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	19db      	adds	r3, r3, r7
 8008a6a:	6023      	str	r3, [r4, #0]
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d040      	beq.n	8008af6 <_malloc_r+0xfa>
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	42a2      	cmp	r2, r4
 8008a78:	d133      	bne.n	8008ae2 <_malloc_r+0xe6>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	605a      	str	r2, [r3, #4]
 8008a7e:	e014      	b.n	8008aaa <_malloc_r+0xae>
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dac5      	bge.n	8008a10 <_malloc_r+0x14>
 8008a84:	230c      	movs	r3, #12
 8008a86:	2500      	movs	r5, #0
 8008a88:	6033      	str	r3, [r6, #0]
 8008a8a:	0028      	movs	r0, r5
 8008a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008a8e:	6821      	ldr	r1, [r4, #0]
 8008a90:	1bc9      	subs	r1, r1, r7
 8008a92:	d420      	bmi.n	8008ad6 <_malloc_r+0xda>
 8008a94:	290b      	cmp	r1, #11
 8008a96:	d918      	bls.n	8008aca <_malloc_r+0xce>
 8008a98:	19e2      	adds	r2, r4, r7
 8008a9a:	6027      	str	r7, [r4, #0]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d112      	bne.n	8008ac6 <_malloc_r+0xca>
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	6863      	ldr	r3, [r4, #4]
 8008aa6:	6011      	str	r1, [r2, #0]
 8008aa8:	6053      	str	r3, [r2, #4]
 8008aaa:	0030      	movs	r0, r6
 8008aac:	0025      	movs	r5, r4
 8008aae:	f000 f841 	bl	8008b34 <__malloc_unlock>
 8008ab2:	2207      	movs	r2, #7
 8008ab4:	350b      	adds	r5, #11
 8008ab6:	1d23      	adds	r3, r4, #4
 8008ab8:	4395      	bics	r5, r2
 8008aba:	1aea      	subs	r2, r5, r3
 8008abc:	429d      	cmp	r5, r3
 8008abe:	d0e4      	beq.n	8008a8a <_malloc_r+0x8e>
 8008ac0:	1b5b      	subs	r3, r3, r5
 8008ac2:	50a3      	str	r3, [r4, r2]
 8008ac4:	e7e1      	b.n	8008a8a <_malloc_r+0x8e>
 8008ac6:	605a      	str	r2, [r3, #4]
 8008ac8:	e7ec      	b.n	8008aa4 <_malloc_r+0xa8>
 8008aca:	6862      	ldr	r2, [r4, #4]
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d1d5      	bne.n	8008a7c <_malloc_r+0x80>
 8008ad0:	9b00      	ldr	r3, [sp, #0]
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e7e9      	b.n	8008aaa <_malloc_r+0xae>
 8008ad6:	0023      	movs	r3, r4
 8008ad8:	6864      	ldr	r4, [r4, #4]
 8008ada:	e7a2      	b.n	8008a22 <_malloc_r+0x26>
 8008adc:	002c      	movs	r4, r5
 8008ade:	686d      	ldr	r5, [r5, #4]
 8008ae0:	e7ab      	b.n	8008a3a <_malloc_r+0x3e>
 8008ae2:	0013      	movs	r3, r2
 8008ae4:	e7c4      	b.n	8008a70 <_malloc_r+0x74>
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	0030      	movs	r0, r6
 8008aea:	6033      	str	r3, [r6, #0]
 8008aec:	f000 f822 	bl	8008b34 <__malloc_unlock>
 8008af0:	e7cb      	b.n	8008a8a <_malloc_r+0x8e>
 8008af2:	6027      	str	r7, [r4, #0]
 8008af4:	e7d9      	b.n	8008aaa <_malloc_r+0xae>
 8008af6:	605b      	str	r3, [r3, #4]
 8008af8:	deff      	udf	#255	; 0xff
 8008afa:	46c0      	nop			; (mov r8, r8)
 8008afc:	20000414 	.word	0x20000414

08008b00 <__ascii_mbtowc>:
 8008b00:	b082      	sub	sp, #8
 8008b02:	2900      	cmp	r1, #0
 8008b04:	d100      	bne.n	8008b08 <__ascii_mbtowc+0x8>
 8008b06:	a901      	add	r1, sp, #4
 8008b08:	1e10      	subs	r0, r2, #0
 8008b0a:	d006      	beq.n	8008b1a <__ascii_mbtowc+0x1a>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d006      	beq.n	8008b1e <__ascii_mbtowc+0x1e>
 8008b10:	7813      	ldrb	r3, [r2, #0]
 8008b12:	600b      	str	r3, [r1, #0]
 8008b14:	7810      	ldrb	r0, [r2, #0]
 8008b16:	1e43      	subs	r3, r0, #1
 8008b18:	4198      	sbcs	r0, r3
 8008b1a:	b002      	add	sp, #8
 8008b1c:	4770      	bx	lr
 8008b1e:	2002      	movs	r0, #2
 8008b20:	4240      	negs	r0, r0
 8008b22:	e7fa      	b.n	8008b1a <__ascii_mbtowc+0x1a>

08008b24 <__malloc_lock>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	4802      	ldr	r0, [pc, #8]	; (8008b30 <__malloc_lock+0xc>)
 8008b28:	f7fe fcd7 	bl	80074da <__retarget_lock_acquire_recursive>
 8008b2c:	bd10      	pop	{r4, pc}
 8008b2e:	46c0      	nop			; (mov r8, r8)
 8008b30:	20000410 	.word	0x20000410

08008b34 <__malloc_unlock>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4802      	ldr	r0, [pc, #8]	; (8008b40 <__malloc_unlock+0xc>)
 8008b38:	f7fe fcd0 	bl	80074dc <__retarget_lock_release_recursive>
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	20000410 	.word	0x20000410

08008b44 <_Balloc>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	69c5      	ldr	r5, [r0, #28]
 8008b48:	0006      	movs	r6, r0
 8008b4a:	000c      	movs	r4, r1
 8008b4c:	2d00      	cmp	r5, #0
 8008b4e:	d10e      	bne.n	8008b6e <_Balloc+0x2a>
 8008b50:	2010      	movs	r0, #16
 8008b52:	f7ff ff27 	bl	80089a4 <malloc>
 8008b56:	1e02      	subs	r2, r0, #0
 8008b58:	61f0      	str	r0, [r6, #28]
 8008b5a:	d104      	bne.n	8008b66 <_Balloc+0x22>
 8008b5c:	216b      	movs	r1, #107	; 0x6b
 8008b5e:	4b19      	ldr	r3, [pc, #100]	; (8008bc4 <_Balloc+0x80>)
 8008b60:	4819      	ldr	r0, [pc, #100]	; (8008bc8 <_Balloc+0x84>)
 8008b62:	f000 ff7f 	bl	8009a64 <__assert_func>
 8008b66:	6045      	str	r5, [r0, #4]
 8008b68:	6085      	str	r5, [r0, #8]
 8008b6a:	6005      	str	r5, [r0, #0]
 8008b6c:	60c5      	str	r5, [r0, #12]
 8008b6e:	69f5      	ldr	r5, [r6, #28]
 8008b70:	68eb      	ldr	r3, [r5, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d013      	beq.n	8008b9e <_Balloc+0x5a>
 8008b76:	69f3      	ldr	r3, [r6, #28]
 8008b78:	00a2      	lsls	r2, r4, #2
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	189b      	adds	r3, r3, r2
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d118      	bne.n	8008bb6 <_Balloc+0x72>
 8008b84:	2101      	movs	r1, #1
 8008b86:	000d      	movs	r5, r1
 8008b88:	40a5      	lsls	r5, r4
 8008b8a:	1d6a      	adds	r2, r5, #5
 8008b8c:	0030      	movs	r0, r6
 8008b8e:	0092      	lsls	r2, r2, #2
 8008b90:	f000 ff86 	bl	8009aa0 <_calloc_r>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d00c      	beq.n	8008bb2 <_Balloc+0x6e>
 8008b98:	6044      	str	r4, [r0, #4]
 8008b9a:	6085      	str	r5, [r0, #8]
 8008b9c:	e00d      	b.n	8008bba <_Balloc+0x76>
 8008b9e:	2221      	movs	r2, #33	; 0x21
 8008ba0:	2104      	movs	r1, #4
 8008ba2:	0030      	movs	r0, r6
 8008ba4:	f000 ff7c 	bl	8009aa0 <_calloc_r>
 8008ba8:	69f3      	ldr	r3, [r6, #28]
 8008baa:	60e8      	str	r0, [r5, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e1      	bne.n	8008b76 <_Balloc+0x32>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	bd70      	pop	{r4, r5, r6, pc}
 8008bb6:	6802      	ldr	r2, [r0, #0]
 8008bb8:	601a      	str	r2, [r3, #0]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	6103      	str	r3, [r0, #16]
 8008bbe:	60c3      	str	r3, [r0, #12]
 8008bc0:	e7f8      	b.n	8008bb4 <_Balloc+0x70>
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	0800a32e 	.word	0x0800a32e
 8008bc8:	0800a40e 	.word	0x0800a40e

08008bcc <_Bfree>:
 8008bcc:	b570      	push	{r4, r5, r6, lr}
 8008bce:	69c6      	ldr	r6, [r0, #28]
 8008bd0:	0005      	movs	r5, r0
 8008bd2:	000c      	movs	r4, r1
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	d10e      	bne.n	8008bf6 <_Bfree+0x2a>
 8008bd8:	2010      	movs	r0, #16
 8008bda:	f7ff fee3 	bl	80089a4 <malloc>
 8008bde:	1e02      	subs	r2, r0, #0
 8008be0:	61e8      	str	r0, [r5, #28]
 8008be2:	d104      	bne.n	8008bee <_Bfree+0x22>
 8008be4:	218f      	movs	r1, #143	; 0x8f
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <_Bfree+0x40>)
 8008be8:	4809      	ldr	r0, [pc, #36]	; (8008c10 <_Bfree+0x44>)
 8008bea:	f000 ff3b 	bl	8009a64 <__assert_func>
 8008bee:	6046      	str	r6, [r0, #4]
 8008bf0:	6086      	str	r6, [r0, #8]
 8008bf2:	6006      	str	r6, [r0, #0]
 8008bf4:	60c6      	str	r6, [r0, #12]
 8008bf6:	2c00      	cmp	r4, #0
 8008bf8:	d007      	beq.n	8008c0a <_Bfree+0x3e>
 8008bfa:	69eb      	ldr	r3, [r5, #28]
 8008bfc:	6862      	ldr	r2, [r4, #4]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	0092      	lsls	r2, r2, #2
 8008c02:	189b      	adds	r3, r3, r2
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	6022      	str	r2, [r4, #0]
 8008c08:	601c      	str	r4, [r3, #0]
 8008c0a:	bd70      	pop	{r4, r5, r6, pc}
 8008c0c:	0800a32e 	.word	0x0800a32e
 8008c10:	0800a40e 	.word	0x0800a40e

08008c14 <__multadd>:
 8008c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c16:	000e      	movs	r6, r1
 8008c18:	9001      	str	r0, [sp, #4]
 8008c1a:	000c      	movs	r4, r1
 8008c1c:	001d      	movs	r5, r3
 8008c1e:	2000      	movs	r0, #0
 8008c20:	690f      	ldr	r7, [r1, #16]
 8008c22:	3614      	adds	r6, #20
 8008c24:	6833      	ldr	r3, [r6, #0]
 8008c26:	3001      	adds	r0, #1
 8008c28:	b299      	uxth	r1, r3
 8008c2a:	4351      	muls	r1, r2
 8008c2c:	0c1b      	lsrs	r3, r3, #16
 8008c2e:	4353      	muls	r3, r2
 8008c30:	1949      	adds	r1, r1, r5
 8008c32:	0c0d      	lsrs	r5, r1, #16
 8008c34:	195b      	adds	r3, r3, r5
 8008c36:	0c1d      	lsrs	r5, r3, #16
 8008c38:	b289      	uxth	r1, r1
 8008c3a:	041b      	lsls	r3, r3, #16
 8008c3c:	185b      	adds	r3, r3, r1
 8008c3e:	c608      	stmia	r6!, {r3}
 8008c40:	4287      	cmp	r7, r0
 8008c42:	dcef      	bgt.n	8008c24 <__multadd+0x10>
 8008c44:	2d00      	cmp	r5, #0
 8008c46:	d022      	beq.n	8008c8e <__multadd+0x7a>
 8008c48:	68a3      	ldr	r3, [r4, #8]
 8008c4a:	42bb      	cmp	r3, r7
 8008c4c:	dc19      	bgt.n	8008c82 <__multadd+0x6e>
 8008c4e:	6861      	ldr	r1, [r4, #4]
 8008c50:	9801      	ldr	r0, [sp, #4]
 8008c52:	3101      	adds	r1, #1
 8008c54:	f7ff ff76 	bl	8008b44 <_Balloc>
 8008c58:	1e06      	subs	r6, r0, #0
 8008c5a:	d105      	bne.n	8008c68 <__multadd+0x54>
 8008c5c:	0032      	movs	r2, r6
 8008c5e:	21ba      	movs	r1, #186	; 0xba
 8008c60:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <__multadd+0x80>)
 8008c62:	480d      	ldr	r0, [pc, #52]	; (8008c98 <__multadd+0x84>)
 8008c64:	f000 fefe 	bl	8009a64 <__assert_func>
 8008c68:	0021      	movs	r1, r4
 8008c6a:	6922      	ldr	r2, [r4, #16]
 8008c6c:	310c      	adds	r1, #12
 8008c6e:	3202      	adds	r2, #2
 8008c70:	0092      	lsls	r2, r2, #2
 8008c72:	300c      	adds	r0, #12
 8008c74:	f7fe fc3e 	bl	80074f4 <memcpy>
 8008c78:	0021      	movs	r1, r4
 8008c7a:	9801      	ldr	r0, [sp, #4]
 8008c7c:	f7ff ffa6 	bl	8008bcc <_Bfree>
 8008c80:	0034      	movs	r4, r6
 8008c82:	1d3b      	adds	r3, r7, #4
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	18e3      	adds	r3, r4, r3
 8008c88:	605d      	str	r5, [r3, #4]
 8008c8a:	1c7b      	adds	r3, r7, #1
 8008c8c:	6123      	str	r3, [r4, #16]
 8008c8e:	0020      	movs	r0, r4
 8008c90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	0800a39d 	.word	0x0800a39d
 8008c98:	0800a40e 	.word	0x0800a40e

08008c9c <__s2b>:
 8008c9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c9e:	0006      	movs	r6, r0
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	000c      	movs	r4, r1
 8008ca4:	3008      	adds	r0, #8
 8008ca6:	2109      	movs	r1, #9
 8008ca8:	9301      	str	r3, [sp, #4]
 8008caa:	0015      	movs	r5, r2
 8008cac:	f7f7 fad0 	bl	8000250 <__divsi3>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4283      	cmp	r3, r0
 8008cb6:	db0a      	blt.n	8008cce <__s2b+0x32>
 8008cb8:	0030      	movs	r0, r6
 8008cba:	f7ff ff43 	bl	8008b44 <_Balloc>
 8008cbe:	1e01      	subs	r1, r0, #0
 8008cc0:	d108      	bne.n	8008cd4 <__s2b+0x38>
 8008cc2:	000a      	movs	r2, r1
 8008cc4:	4b19      	ldr	r3, [pc, #100]	; (8008d2c <__s2b+0x90>)
 8008cc6:	481a      	ldr	r0, [pc, #104]	; (8008d30 <__s2b+0x94>)
 8008cc8:	31d3      	adds	r1, #211	; 0xd3
 8008cca:	f000 fecb 	bl	8009a64 <__assert_func>
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	3101      	adds	r1, #1
 8008cd2:	e7ef      	b.n	8008cb4 <__s2b+0x18>
 8008cd4:	9b08      	ldr	r3, [sp, #32]
 8008cd6:	6143      	str	r3, [r0, #20]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	6103      	str	r3, [r0, #16]
 8008cdc:	2d09      	cmp	r5, #9
 8008cde:	dd18      	ble.n	8008d12 <__s2b+0x76>
 8008ce0:	0023      	movs	r3, r4
 8008ce2:	3309      	adds	r3, #9
 8008ce4:	001f      	movs	r7, r3
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	1964      	adds	r4, r4, r5
 8008cea:	783b      	ldrb	r3, [r7, #0]
 8008cec:	220a      	movs	r2, #10
 8008cee:	0030      	movs	r0, r6
 8008cf0:	3b30      	subs	r3, #48	; 0x30
 8008cf2:	f7ff ff8f 	bl	8008c14 <__multadd>
 8008cf6:	3701      	adds	r7, #1
 8008cf8:	0001      	movs	r1, r0
 8008cfa:	42a7      	cmp	r7, r4
 8008cfc:	d1f5      	bne.n	8008cea <__s2b+0x4e>
 8008cfe:	002c      	movs	r4, r5
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	3c08      	subs	r4, #8
 8008d04:	191c      	adds	r4, r3, r4
 8008d06:	002f      	movs	r7, r5
 8008d08:	9b01      	ldr	r3, [sp, #4]
 8008d0a:	429f      	cmp	r7, r3
 8008d0c:	db04      	blt.n	8008d18 <__s2b+0x7c>
 8008d0e:	0008      	movs	r0, r1
 8008d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d12:	2509      	movs	r5, #9
 8008d14:	340a      	adds	r4, #10
 8008d16:	e7f6      	b.n	8008d06 <__s2b+0x6a>
 8008d18:	1b63      	subs	r3, r4, r5
 8008d1a:	5ddb      	ldrb	r3, [r3, r7]
 8008d1c:	220a      	movs	r2, #10
 8008d1e:	0030      	movs	r0, r6
 8008d20:	3b30      	subs	r3, #48	; 0x30
 8008d22:	f7ff ff77 	bl	8008c14 <__multadd>
 8008d26:	3701      	adds	r7, #1
 8008d28:	0001      	movs	r1, r0
 8008d2a:	e7ed      	b.n	8008d08 <__s2b+0x6c>
 8008d2c:	0800a39d 	.word	0x0800a39d
 8008d30:	0800a40e 	.word	0x0800a40e

08008d34 <__hi0bits>:
 8008d34:	0003      	movs	r3, r0
 8008d36:	0c02      	lsrs	r2, r0, #16
 8008d38:	2000      	movs	r0, #0
 8008d3a:	4282      	cmp	r2, r0
 8008d3c:	d101      	bne.n	8008d42 <__hi0bits+0xe>
 8008d3e:	041b      	lsls	r3, r3, #16
 8008d40:	3010      	adds	r0, #16
 8008d42:	0e1a      	lsrs	r2, r3, #24
 8008d44:	d101      	bne.n	8008d4a <__hi0bits+0x16>
 8008d46:	3008      	adds	r0, #8
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	0f1a      	lsrs	r2, r3, #28
 8008d4c:	d101      	bne.n	8008d52 <__hi0bits+0x1e>
 8008d4e:	3004      	adds	r0, #4
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	0f9a      	lsrs	r2, r3, #30
 8008d54:	d101      	bne.n	8008d5a <__hi0bits+0x26>
 8008d56:	3002      	adds	r0, #2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	db03      	blt.n	8008d66 <__hi0bits+0x32>
 8008d5e:	3001      	adds	r0, #1
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	d400      	bmi.n	8008d66 <__hi0bits+0x32>
 8008d64:	2020      	movs	r0, #32
 8008d66:	4770      	bx	lr

08008d68 <__lo0bits>:
 8008d68:	6803      	ldr	r3, [r0, #0]
 8008d6a:	0001      	movs	r1, r0
 8008d6c:	2207      	movs	r2, #7
 8008d6e:	0018      	movs	r0, r3
 8008d70:	4010      	ands	r0, r2
 8008d72:	4213      	tst	r3, r2
 8008d74:	d00d      	beq.n	8008d92 <__lo0bits+0x2a>
 8008d76:	3a06      	subs	r2, #6
 8008d78:	2000      	movs	r0, #0
 8008d7a:	4213      	tst	r3, r2
 8008d7c:	d105      	bne.n	8008d8a <__lo0bits+0x22>
 8008d7e:	3002      	adds	r0, #2
 8008d80:	4203      	tst	r3, r0
 8008d82:	d003      	beq.n	8008d8c <__lo0bits+0x24>
 8008d84:	40d3      	lsrs	r3, r2
 8008d86:	0010      	movs	r0, r2
 8008d88:	600b      	str	r3, [r1, #0]
 8008d8a:	4770      	bx	lr
 8008d8c:	089b      	lsrs	r3, r3, #2
 8008d8e:	600b      	str	r3, [r1, #0]
 8008d90:	e7fb      	b.n	8008d8a <__lo0bits+0x22>
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	2a00      	cmp	r2, #0
 8008d96:	d101      	bne.n	8008d9c <__lo0bits+0x34>
 8008d98:	2010      	movs	r0, #16
 8008d9a:	0c1b      	lsrs	r3, r3, #16
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	d101      	bne.n	8008da6 <__lo0bits+0x3e>
 8008da2:	3008      	adds	r0, #8
 8008da4:	0a1b      	lsrs	r3, r3, #8
 8008da6:	071a      	lsls	r2, r3, #28
 8008da8:	d101      	bne.n	8008dae <__lo0bits+0x46>
 8008daa:	3004      	adds	r0, #4
 8008dac:	091b      	lsrs	r3, r3, #4
 8008dae:	079a      	lsls	r2, r3, #30
 8008db0:	d101      	bne.n	8008db6 <__lo0bits+0x4e>
 8008db2:	3002      	adds	r0, #2
 8008db4:	089b      	lsrs	r3, r3, #2
 8008db6:	07da      	lsls	r2, r3, #31
 8008db8:	d4e9      	bmi.n	8008d8e <__lo0bits+0x26>
 8008dba:	3001      	adds	r0, #1
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	d1e6      	bne.n	8008d8e <__lo0bits+0x26>
 8008dc0:	2020      	movs	r0, #32
 8008dc2:	e7e2      	b.n	8008d8a <__lo0bits+0x22>

08008dc4 <__i2b>:
 8008dc4:	b510      	push	{r4, lr}
 8008dc6:	000c      	movs	r4, r1
 8008dc8:	2101      	movs	r1, #1
 8008dca:	f7ff febb 	bl	8008b44 <_Balloc>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d107      	bne.n	8008de2 <__i2b+0x1e>
 8008dd2:	2146      	movs	r1, #70	; 0x46
 8008dd4:	4c05      	ldr	r4, [pc, #20]	; (8008dec <__i2b+0x28>)
 8008dd6:	0002      	movs	r2, r0
 8008dd8:	4b05      	ldr	r3, [pc, #20]	; (8008df0 <__i2b+0x2c>)
 8008dda:	0020      	movs	r0, r4
 8008ddc:	31ff      	adds	r1, #255	; 0xff
 8008dde:	f000 fe41 	bl	8009a64 <__assert_func>
 8008de2:	2301      	movs	r3, #1
 8008de4:	6144      	str	r4, [r0, #20]
 8008de6:	6103      	str	r3, [r0, #16]
 8008de8:	bd10      	pop	{r4, pc}
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	0800a40e 	.word	0x0800a40e
 8008df0:	0800a39d 	.word	0x0800a39d

08008df4 <__multiply>:
 8008df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008df6:	0015      	movs	r5, r2
 8008df8:	690a      	ldr	r2, [r1, #16]
 8008dfa:	692b      	ldr	r3, [r5, #16]
 8008dfc:	000c      	movs	r4, r1
 8008dfe:	b08b      	sub	sp, #44	; 0x2c
 8008e00:	429a      	cmp	r2, r3
 8008e02:	da01      	bge.n	8008e08 <__multiply+0x14>
 8008e04:	002c      	movs	r4, r5
 8008e06:	000d      	movs	r5, r1
 8008e08:	6927      	ldr	r7, [r4, #16]
 8008e0a:	692e      	ldr	r6, [r5, #16]
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	19bb      	adds	r3, r7, r6
 8008e10:	9303      	str	r3, [sp, #12]
 8008e12:	68a3      	ldr	r3, [r4, #8]
 8008e14:	19ba      	adds	r2, r7, r6
 8008e16:	4293      	cmp	r3, r2
 8008e18:	da00      	bge.n	8008e1c <__multiply+0x28>
 8008e1a:	3101      	adds	r1, #1
 8008e1c:	f7ff fe92 	bl	8008b44 <_Balloc>
 8008e20:	9002      	str	r0, [sp, #8]
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d106      	bne.n	8008e34 <__multiply+0x40>
 8008e26:	21b1      	movs	r1, #177	; 0xb1
 8008e28:	4b48      	ldr	r3, [pc, #288]	; (8008f4c <__multiply+0x158>)
 8008e2a:	4849      	ldr	r0, [pc, #292]	; (8008f50 <__multiply+0x15c>)
 8008e2c:	9a02      	ldr	r2, [sp, #8]
 8008e2e:	0049      	lsls	r1, r1, #1
 8008e30:	f000 fe18 	bl	8009a64 <__assert_func>
 8008e34:	9b02      	ldr	r3, [sp, #8]
 8008e36:	2200      	movs	r2, #0
 8008e38:	3314      	adds	r3, #20
 8008e3a:	469c      	mov	ip, r3
 8008e3c:	19bb      	adds	r3, r7, r6
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4463      	add	r3, ip
 8008e42:	9304      	str	r3, [sp, #16]
 8008e44:	4663      	mov	r3, ip
 8008e46:	9904      	ldr	r1, [sp, #16]
 8008e48:	428b      	cmp	r3, r1
 8008e4a:	d32a      	bcc.n	8008ea2 <__multiply+0xae>
 8008e4c:	0023      	movs	r3, r4
 8008e4e:	00bf      	lsls	r7, r7, #2
 8008e50:	3314      	adds	r3, #20
 8008e52:	3514      	adds	r5, #20
 8008e54:	9308      	str	r3, [sp, #32]
 8008e56:	00b6      	lsls	r6, r6, #2
 8008e58:	19db      	adds	r3, r3, r7
 8008e5a:	9305      	str	r3, [sp, #20]
 8008e5c:	19ab      	adds	r3, r5, r6
 8008e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e60:	2304      	movs	r3, #4
 8008e62:	9306      	str	r3, [sp, #24]
 8008e64:	0023      	movs	r3, r4
 8008e66:	9a05      	ldr	r2, [sp, #20]
 8008e68:	3315      	adds	r3, #21
 8008e6a:	9501      	str	r5, [sp, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d305      	bcc.n	8008e7c <__multiply+0x88>
 8008e70:	1b13      	subs	r3, r2, r4
 8008e72:	3b15      	subs	r3, #21
 8008e74:	089b      	lsrs	r3, r3, #2
 8008e76:	3301      	adds	r3, #1
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	9306      	str	r3, [sp, #24]
 8008e7c:	9b01      	ldr	r3, [sp, #4]
 8008e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d310      	bcc.n	8008ea6 <__multiply+0xb2>
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	dd05      	ble.n	8008e96 <__multiply+0xa2>
 8008e8a:	9b04      	ldr	r3, [sp, #16]
 8008e8c:	3b04      	subs	r3, #4
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d056      	beq.n	8008f44 <__multiply+0x150>
 8008e96:	9b02      	ldr	r3, [sp, #8]
 8008e98:	9a03      	ldr	r2, [sp, #12]
 8008e9a:	0018      	movs	r0, r3
 8008e9c:	611a      	str	r2, [r3, #16]
 8008e9e:	b00b      	add	sp, #44	; 0x2c
 8008ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ea2:	c304      	stmia	r3!, {r2}
 8008ea4:	e7cf      	b.n	8008e46 <__multiply+0x52>
 8008ea6:	9b01      	ldr	r3, [sp, #4]
 8008ea8:	6818      	ldr	r0, [r3, #0]
 8008eaa:	b280      	uxth	r0, r0
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d01e      	beq.n	8008eee <__multiply+0xfa>
 8008eb0:	4667      	mov	r7, ip
 8008eb2:	2500      	movs	r5, #0
 8008eb4:	9e08      	ldr	r6, [sp, #32]
 8008eb6:	ce02      	ldmia	r6!, {r1}
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	9307      	str	r3, [sp, #28]
 8008ebc:	b28b      	uxth	r3, r1
 8008ebe:	4343      	muls	r3, r0
 8008ec0:	001a      	movs	r2, r3
 8008ec2:	466b      	mov	r3, sp
 8008ec4:	8b9b      	ldrh	r3, [r3, #28]
 8008ec6:	18d3      	adds	r3, r2, r3
 8008ec8:	195b      	adds	r3, r3, r5
 8008eca:	0c0d      	lsrs	r5, r1, #16
 8008ecc:	4345      	muls	r5, r0
 8008ece:	9a07      	ldr	r2, [sp, #28]
 8008ed0:	0c11      	lsrs	r1, r2, #16
 8008ed2:	1869      	adds	r1, r5, r1
 8008ed4:	0c1a      	lsrs	r2, r3, #16
 8008ed6:	188a      	adds	r2, r1, r2
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	0c15      	lsrs	r5, r2, #16
 8008edc:	0412      	lsls	r2, r2, #16
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	9b05      	ldr	r3, [sp, #20]
 8008ee2:	c704      	stmia	r7!, {r2}
 8008ee4:	42b3      	cmp	r3, r6
 8008ee6:	d8e6      	bhi.n	8008eb6 <__multiply+0xc2>
 8008ee8:	4663      	mov	r3, ip
 8008eea:	9a06      	ldr	r2, [sp, #24]
 8008eec:	509d      	str	r5, [r3, r2]
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	0c00      	lsrs	r0, r0, #16
 8008ef4:	d020      	beq.n	8008f38 <__multiply+0x144>
 8008ef6:	4663      	mov	r3, ip
 8008ef8:	0025      	movs	r5, r4
 8008efa:	4661      	mov	r1, ip
 8008efc:	2700      	movs	r7, #0
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3514      	adds	r5, #20
 8008f02:	682a      	ldr	r2, [r5, #0]
 8008f04:	680e      	ldr	r6, [r1, #0]
 8008f06:	b292      	uxth	r2, r2
 8008f08:	4342      	muls	r2, r0
 8008f0a:	0c36      	lsrs	r6, r6, #16
 8008f0c:	1992      	adds	r2, r2, r6
 8008f0e:	19d2      	adds	r2, r2, r7
 8008f10:	0416      	lsls	r6, r2, #16
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	431e      	orrs	r6, r3
 8008f16:	600e      	str	r6, [r1, #0]
 8008f18:	cd40      	ldmia	r5!, {r6}
 8008f1a:	684b      	ldr	r3, [r1, #4]
 8008f1c:	0c36      	lsrs	r6, r6, #16
 8008f1e:	4346      	muls	r6, r0
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	0c12      	lsrs	r2, r2, #16
 8008f24:	18f3      	adds	r3, r6, r3
 8008f26:	189b      	adds	r3, r3, r2
 8008f28:	9a05      	ldr	r2, [sp, #20]
 8008f2a:	0c1f      	lsrs	r7, r3, #16
 8008f2c:	3104      	adds	r1, #4
 8008f2e:	42aa      	cmp	r2, r5
 8008f30:	d8e7      	bhi.n	8008f02 <__multiply+0x10e>
 8008f32:	4662      	mov	r2, ip
 8008f34:	9906      	ldr	r1, [sp, #24]
 8008f36:	5053      	str	r3, [r2, r1]
 8008f38:	9b01      	ldr	r3, [sp, #4]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	2304      	movs	r3, #4
 8008f40:	449c      	add	ip, r3
 8008f42:	e79b      	b.n	8008e7c <__multiply+0x88>
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	9303      	str	r3, [sp, #12]
 8008f4a:	e79b      	b.n	8008e84 <__multiply+0x90>
 8008f4c:	0800a39d 	.word	0x0800a39d
 8008f50:	0800a40e 	.word	0x0800a40e

08008f54 <__pow5mult>:
 8008f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f56:	2303      	movs	r3, #3
 8008f58:	0015      	movs	r5, r2
 8008f5a:	0007      	movs	r7, r0
 8008f5c:	000e      	movs	r6, r1
 8008f5e:	401a      	ands	r2, r3
 8008f60:	421d      	tst	r5, r3
 8008f62:	d008      	beq.n	8008f76 <__pow5mult+0x22>
 8008f64:	4925      	ldr	r1, [pc, #148]	; (8008ffc <__pow5mult+0xa8>)
 8008f66:	3a01      	subs	r2, #1
 8008f68:	0092      	lsls	r2, r2, #2
 8008f6a:	5852      	ldr	r2, [r2, r1]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	0031      	movs	r1, r6
 8008f70:	f7ff fe50 	bl	8008c14 <__multadd>
 8008f74:	0006      	movs	r6, r0
 8008f76:	10ad      	asrs	r5, r5, #2
 8008f78:	d03d      	beq.n	8008ff6 <__pow5mult+0xa2>
 8008f7a:	69fc      	ldr	r4, [r7, #28]
 8008f7c:	2c00      	cmp	r4, #0
 8008f7e:	d10f      	bne.n	8008fa0 <__pow5mult+0x4c>
 8008f80:	2010      	movs	r0, #16
 8008f82:	f7ff fd0f 	bl	80089a4 <malloc>
 8008f86:	1e02      	subs	r2, r0, #0
 8008f88:	61f8      	str	r0, [r7, #28]
 8008f8a:	d105      	bne.n	8008f98 <__pow5mult+0x44>
 8008f8c:	21b4      	movs	r1, #180	; 0xb4
 8008f8e:	4b1c      	ldr	r3, [pc, #112]	; (8009000 <__pow5mult+0xac>)
 8008f90:	481c      	ldr	r0, [pc, #112]	; (8009004 <__pow5mult+0xb0>)
 8008f92:	31ff      	adds	r1, #255	; 0xff
 8008f94:	f000 fd66 	bl	8009a64 <__assert_func>
 8008f98:	6044      	str	r4, [r0, #4]
 8008f9a:	6084      	str	r4, [r0, #8]
 8008f9c:	6004      	str	r4, [r0, #0]
 8008f9e:	60c4      	str	r4, [r0, #12]
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	689c      	ldr	r4, [r3, #8]
 8008fa4:	9301      	str	r3, [sp, #4]
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d108      	bne.n	8008fbc <__pow5mult+0x68>
 8008faa:	0038      	movs	r0, r7
 8008fac:	4916      	ldr	r1, [pc, #88]	; (8009008 <__pow5mult+0xb4>)
 8008fae:	f7ff ff09 	bl	8008dc4 <__i2b>
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	0004      	movs	r4, r0
 8008fb6:	6098      	str	r0, [r3, #8]
 8008fb8:	2300      	movs	r3, #0
 8008fba:	6003      	str	r3, [r0, #0]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	421d      	tst	r5, r3
 8008fc0:	d00a      	beq.n	8008fd8 <__pow5mult+0x84>
 8008fc2:	0031      	movs	r1, r6
 8008fc4:	0022      	movs	r2, r4
 8008fc6:	0038      	movs	r0, r7
 8008fc8:	f7ff ff14 	bl	8008df4 <__multiply>
 8008fcc:	0031      	movs	r1, r6
 8008fce:	9001      	str	r0, [sp, #4]
 8008fd0:	0038      	movs	r0, r7
 8008fd2:	f7ff fdfb 	bl	8008bcc <_Bfree>
 8008fd6:	9e01      	ldr	r6, [sp, #4]
 8008fd8:	106d      	asrs	r5, r5, #1
 8008fda:	d00c      	beq.n	8008ff6 <__pow5mult+0xa2>
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d107      	bne.n	8008ff2 <__pow5mult+0x9e>
 8008fe2:	0022      	movs	r2, r4
 8008fe4:	0021      	movs	r1, r4
 8008fe6:	0038      	movs	r0, r7
 8008fe8:	f7ff ff04 	bl	8008df4 <__multiply>
 8008fec:	2300      	movs	r3, #0
 8008fee:	6020      	str	r0, [r4, #0]
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	0004      	movs	r4, r0
 8008ff4:	e7e2      	b.n	8008fbc <__pow5mult+0x68>
 8008ff6:	0030      	movs	r0, r6
 8008ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ffa:	46c0      	nop			; (mov r8, r8)
 8008ffc:	0800a558 	.word	0x0800a558
 8009000:	0800a32e 	.word	0x0800a32e
 8009004:	0800a40e 	.word	0x0800a40e
 8009008:	00000271 	.word	0x00000271

0800900c <__lshift>:
 800900c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800900e:	000c      	movs	r4, r1
 8009010:	0017      	movs	r7, r2
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	1155      	asrs	r5, r2, #5
 8009016:	b087      	sub	sp, #28
 8009018:	18eb      	adds	r3, r5, r3
 800901a:	9302      	str	r3, [sp, #8]
 800901c:	3301      	adds	r3, #1
 800901e:	9301      	str	r3, [sp, #4]
 8009020:	6849      	ldr	r1, [r1, #4]
 8009022:	68a3      	ldr	r3, [r4, #8]
 8009024:	9004      	str	r0, [sp, #16]
 8009026:	9a01      	ldr	r2, [sp, #4]
 8009028:	4293      	cmp	r3, r2
 800902a:	db10      	blt.n	800904e <__lshift+0x42>
 800902c:	9804      	ldr	r0, [sp, #16]
 800902e:	f7ff fd89 	bl	8008b44 <_Balloc>
 8009032:	2300      	movs	r3, #0
 8009034:	0002      	movs	r2, r0
 8009036:	0006      	movs	r6, r0
 8009038:	0019      	movs	r1, r3
 800903a:	3214      	adds	r2, #20
 800903c:	4298      	cmp	r0, r3
 800903e:	d10c      	bne.n	800905a <__lshift+0x4e>
 8009040:	31df      	adds	r1, #223	; 0xdf
 8009042:	0032      	movs	r2, r6
 8009044:	4b26      	ldr	r3, [pc, #152]	; (80090e0 <__lshift+0xd4>)
 8009046:	4827      	ldr	r0, [pc, #156]	; (80090e4 <__lshift+0xd8>)
 8009048:	31ff      	adds	r1, #255	; 0xff
 800904a:	f000 fd0b 	bl	8009a64 <__assert_func>
 800904e:	3101      	adds	r1, #1
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	e7e8      	b.n	8009026 <__lshift+0x1a>
 8009054:	0098      	lsls	r0, r3, #2
 8009056:	5011      	str	r1, [r2, r0]
 8009058:	3301      	adds	r3, #1
 800905a:	42ab      	cmp	r3, r5
 800905c:	dbfa      	blt.n	8009054 <__lshift+0x48>
 800905e:	43eb      	mvns	r3, r5
 8009060:	17db      	asrs	r3, r3, #31
 8009062:	401d      	ands	r5, r3
 8009064:	211f      	movs	r1, #31
 8009066:	0023      	movs	r3, r4
 8009068:	0038      	movs	r0, r7
 800906a:	00ad      	lsls	r5, r5, #2
 800906c:	1955      	adds	r5, r2, r5
 800906e:	6922      	ldr	r2, [r4, #16]
 8009070:	3314      	adds	r3, #20
 8009072:	0092      	lsls	r2, r2, #2
 8009074:	4008      	ands	r0, r1
 8009076:	4684      	mov	ip, r0
 8009078:	189a      	adds	r2, r3, r2
 800907a:	420f      	tst	r7, r1
 800907c:	d02a      	beq.n	80090d4 <__lshift+0xc8>
 800907e:	3101      	adds	r1, #1
 8009080:	1a09      	subs	r1, r1, r0
 8009082:	9105      	str	r1, [sp, #20]
 8009084:	2100      	movs	r1, #0
 8009086:	9503      	str	r5, [sp, #12]
 8009088:	4667      	mov	r7, ip
 800908a:	6818      	ldr	r0, [r3, #0]
 800908c:	40b8      	lsls	r0, r7
 800908e:	4308      	orrs	r0, r1
 8009090:	9903      	ldr	r1, [sp, #12]
 8009092:	c101      	stmia	r1!, {r0}
 8009094:	9103      	str	r1, [sp, #12]
 8009096:	9805      	ldr	r0, [sp, #20]
 8009098:	cb02      	ldmia	r3!, {r1}
 800909a:	40c1      	lsrs	r1, r0
 800909c:	429a      	cmp	r2, r3
 800909e:	d8f3      	bhi.n	8009088 <__lshift+0x7c>
 80090a0:	0020      	movs	r0, r4
 80090a2:	3015      	adds	r0, #21
 80090a4:	2304      	movs	r3, #4
 80090a6:	4282      	cmp	r2, r0
 80090a8:	d304      	bcc.n	80090b4 <__lshift+0xa8>
 80090aa:	1b13      	subs	r3, r2, r4
 80090ac:	3b15      	subs	r3, #21
 80090ae:	089b      	lsrs	r3, r3, #2
 80090b0:	3301      	adds	r3, #1
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	50e9      	str	r1, [r5, r3]
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d002      	beq.n	80090c0 <__lshift+0xb4>
 80090ba:	9b02      	ldr	r3, [sp, #8]
 80090bc:	3302      	adds	r3, #2
 80090be:	9301      	str	r3, [sp, #4]
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	9804      	ldr	r0, [sp, #16]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	0021      	movs	r1, r4
 80090c8:	6133      	str	r3, [r6, #16]
 80090ca:	f7ff fd7f 	bl	8008bcc <_Bfree>
 80090ce:	0030      	movs	r0, r6
 80090d0:	b007      	add	sp, #28
 80090d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090d4:	cb02      	ldmia	r3!, {r1}
 80090d6:	c502      	stmia	r5!, {r1}
 80090d8:	429a      	cmp	r2, r3
 80090da:	d8fb      	bhi.n	80090d4 <__lshift+0xc8>
 80090dc:	e7f0      	b.n	80090c0 <__lshift+0xb4>
 80090de:	46c0      	nop			; (mov r8, r8)
 80090e0:	0800a39d 	.word	0x0800a39d
 80090e4:	0800a40e 	.word	0x0800a40e

080090e8 <__mcmp>:
 80090e8:	b530      	push	{r4, r5, lr}
 80090ea:	690b      	ldr	r3, [r1, #16]
 80090ec:	6904      	ldr	r4, [r0, #16]
 80090ee:	0002      	movs	r2, r0
 80090f0:	1ae0      	subs	r0, r4, r3
 80090f2:	429c      	cmp	r4, r3
 80090f4:	d10e      	bne.n	8009114 <__mcmp+0x2c>
 80090f6:	3214      	adds	r2, #20
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	3114      	adds	r1, #20
 80090fc:	0014      	movs	r4, r2
 80090fe:	18c9      	adds	r1, r1, r3
 8009100:	18d2      	adds	r2, r2, r3
 8009102:	3a04      	subs	r2, #4
 8009104:	3904      	subs	r1, #4
 8009106:	6815      	ldr	r5, [r2, #0]
 8009108:	680b      	ldr	r3, [r1, #0]
 800910a:	429d      	cmp	r5, r3
 800910c:	d003      	beq.n	8009116 <__mcmp+0x2e>
 800910e:	2001      	movs	r0, #1
 8009110:	429d      	cmp	r5, r3
 8009112:	d303      	bcc.n	800911c <__mcmp+0x34>
 8009114:	bd30      	pop	{r4, r5, pc}
 8009116:	4294      	cmp	r4, r2
 8009118:	d3f3      	bcc.n	8009102 <__mcmp+0x1a>
 800911a:	e7fb      	b.n	8009114 <__mcmp+0x2c>
 800911c:	4240      	negs	r0, r0
 800911e:	e7f9      	b.n	8009114 <__mcmp+0x2c>

08009120 <__mdiff>:
 8009120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009122:	000e      	movs	r6, r1
 8009124:	0007      	movs	r7, r0
 8009126:	0011      	movs	r1, r2
 8009128:	0030      	movs	r0, r6
 800912a:	b087      	sub	sp, #28
 800912c:	0014      	movs	r4, r2
 800912e:	f7ff ffdb 	bl	80090e8 <__mcmp>
 8009132:	1e05      	subs	r5, r0, #0
 8009134:	d110      	bne.n	8009158 <__mdiff+0x38>
 8009136:	0001      	movs	r1, r0
 8009138:	0038      	movs	r0, r7
 800913a:	f7ff fd03 	bl	8008b44 <_Balloc>
 800913e:	1e02      	subs	r2, r0, #0
 8009140:	d104      	bne.n	800914c <__mdiff+0x2c>
 8009142:	4b3f      	ldr	r3, [pc, #252]	; (8009240 <__mdiff+0x120>)
 8009144:	483f      	ldr	r0, [pc, #252]	; (8009244 <__mdiff+0x124>)
 8009146:	4940      	ldr	r1, [pc, #256]	; (8009248 <__mdiff+0x128>)
 8009148:	f000 fc8c 	bl	8009a64 <__assert_func>
 800914c:	2301      	movs	r3, #1
 800914e:	6145      	str	r5, [r0, #20]
 8009150:	6103      	str	r3, [r0, #16]
 8009152:	0010      	movs	r0, r2
 8009154:	b007      	add	sp, #28
 8009156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009158:	2301      	movs	r3, #1
 800915a:	9301      	str	r3, [sp, #4]
 800915c:	2800      	cmp	r0, #0
 800915e:	db04      	blt.n	800916a <__mdiff+0x4a>
 8009160:	0023      	movs	r3, r4
 8009162:	0034      	movs	r4, r6
 8009164:	001e      	movs	r6, r3
 8009166:	2300      	movs	r3, #0
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	0038      	movs	r0, r7
 800916c:	6861      	ldr	r1, [r4, #4]
 800916e:	f7ff fce9 	bl	8008b44 <_Balloc>
 8009172:	1e02      	subs	r2, r0, #0
 8009174:	d103      	bne.n	800917e <__mdiff+0x5e>
 8009176:	4b32      	ldr	r3, [pc, #200]	; (8009240 <__mdiff+0x120>)
 8009178:	4832      	ldr	r0, [pc, #200]	; (8009244 <__mdiff+0x124>)
 800917a:	4934      	ldr	r1, [pc, #208]	; (800924c <__mdiff+0x12c>)
 800917c:	e7e4      	b.n	8009148 <__mdiff+0x28>
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	2700      	movs	r7, #0
 8009182:	60c3      	str	r3, [r0, #12]
 8009184:	6920      	ldr	r0, [r4, #16]
 8009186:	3414      	adds	r4, #20
 8009188:	0083      	lsls	r3, r0, #2
 800918a:	18e3      	adds	r3, r4, r3
 800918c:	0021      	movs	r1, r4
 800918e:	9401      	str	r4, [sp, #4]
 8009190:	0034      	movs	r4, r6
 8009192:	9302      	str	r3, [sp, #8]
 8009194:	6933      	ldr	r3, [r6, #16]
 8009196:	3414      	adds	r4, #20
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	18e3      	adds	r3, r4, r3
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	0013      	movs	r3, r2
 80091a0:	3314      	adds	r3, #20
 80091a2:	469c      	mov	ip, r3
 80091a4:	9305      	str	r3, [sp, #20]
 80091a6:	9104      	str	r1, [sp, #16]
 80091a8:	9b04      	ldr	r3, [sp, #16]
 80091aa:	cc02      	ldmia	r4!, {r1}
 80091ac:	cb20      	ldmia	r3!, {r5}
 80091ae:	9304      	str	r3, [sp, #16]
 80091b0:	b2ab      	uxth	r3, r5
 80091b2:	19df      	adds	r7, r3, r7
 80091b4:	b28b      	uxth	r3, r1
 80091b6:	1afb      	subs	r3, r7, r3
 80091b8:	0c09      	lsrs	r1, r1, #16
 80091ba:	0c2d      	lsrs	r5, r5, #16
 80091bc:	1a6d      	subs	r5, r5, r1
 80091be:	1419      	asrs	r1, r3, #16
 80091c0:	1869      	adds	r1, r5, r1
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	140f      	asrs	r7, r1, #16
 80091c6:	0409      	lsls	r1, r1, #16
 80091c8:	4319      	orrs	r1, r3
 80091ca:	4663      	mov	r3, ip
 80091cc:	c302      	stmia	r3!, {r1}
 80091ce:	469c      	mov	ip, r3
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	d8e8      	bhi.n	80091a8 <__mdiff+0x88>
 80091d6:	0031      	movs	r1, r6
 80091d8:	9c03      	ldr	r4, [sp, #12]
 80091da:	3115      	adds	r1, #21
 80091dc:	2304      	movs	r3, #4
 80091de:	428c      	cmp	r4, r1
 80091e0:	d304      	bcc.n	80091ec <__mdiff+0xcc>
 80091e2:	1ba3      	subs	r3, r4, r6
 80091e4:	3b15      	subs	r3, #21
 80091e6:	089b      	lsrs	r3, r3, #2
 80091e8:	3301      	adds	r3, #1
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	18cd      	adds	r5, r1, r3
 80091f0:	9905      	ldr	r1, [sp, #20]
 80091f2:	002e      	movs	r6, r5
 80091f4:	18cb      	adds	r3, r1, r3
 80091f6:	469c      	mov	ip, r3
 80091f8:	9902      	ldr	r1, [sp, #8]
 80091fa:	428e      	cmp	r6, r1
 80091fc:	d310      	bcc.n	8009220 <__mdiff+0x100>
 80091fe:	9e02      	ldr	r6, [sp, #8]
 8009200:	1ee9      	subs	r1, r5, #3
 8009202:	2400      	movs	r4, #0
 8009204:	428e      	cmp	r6, r1
 8009206:	d304      	bcc.n	8009212 <__mdiff+0xf2>
 8009208:	0031      	movs	r1, r6
 800920a:	3103      	adds	r1, #3
 800920c:	1b49      	subs	r1, r1, r5
 800920e:	0889      	lsrs	r1, r1, #2
 8009210:	008c      	lsls	r4, r1, #2
 8009212:	191b      	adds	r3, r3, r4
 8009214:	3b04      	subs	r3, #4
 8009216:	6819      	ldr	r1, [r3, #0]
 8009218:	2900      	cmp	r1, #0
 800921a:	d00f      	beq.n	800923c <__mdiff+0x11c>
 800921c:	6110      	str	r0, [r2, #16]
 800921e:	e798      	b.n	8009152 <__mdiff+0x32>
 8009220:	ce02      	ldmia	r6!, {r1}
 8009222:	b28c      	uxth	r4, r1
 8009224:	19e4      	adds	r4, r4, r7
 8009226:	0c0f      	lsrs	r7, r1, #16
 8009228:	1421      	asrs	r1, r4, #16
 800922a:	1879      	adds	r1, r7, r1
 800922c:	b2a4      	uxth	r4, r4
 800922e:	140f      	asrs	r7, r1, #16
 8009230:	0409      	lsls	r1, r1, #16
 8009232:	4321      	orrs	r1, r4
 8009234:	4664      	mov	r4, ip
 8009236:	c402      	stmia	r4!, {r1}
 8009238:	46a4      	mov	ip, r4
 800923a:	e7dd      	b.n	80091f8 <__mdiff+0xd8>
 800923c:	3801      	subs	r0, #1
 800923e:	e7e9      	b.n	8009214 <__mdiff+0xf4>
 8009240:	0800a39d 	.word	0x0800a39d
 8009244:	0800a40e 	.word	0x0800a40e
 8009248:	00000237 	.word	0x00000237
 800924c:	00000245 	.word	0x00000245

08009250 <__ulp>:
 8009250:	2000      	movs	r0, #0
 8009252:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <__ulp+0x30>)
 8009254:	4019      	ands	r1, r3
 8009256:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <__ulp+0x34>)
 8009258:	18c9      	adds	r1, r1, r3
 800925a:	4281      	cmp	r1, r0
 800925c:	dc06      	bgt.n	800926c <__ulp+0x1c>
 800925e:	4249      	negs	r1, r1
 8009260:	150b      	asrs	r3, r1, #20
 8009262:	2b13      	cmp	r3, #19
 8009264:	dc03      	bgt.n	800926e <__ulp+0x1e>
 8009266:	2180      	movs	r1, #128	; 0x80
 8009268:	0309      	lsls	r1, r1, #12
 800926a:	4119      	asrs	r1, r3
 800926c:	4770      	bx	lr
 800926e:	3b14      	subs	r3, #20
 8009270:	2001      	movs	r0, #1
 8009272:	2b1e      	cmp	r3, #30
 8009274:	dc02      	bgt.n	800927c <__ulp+0x2c>
 8009276:	2080      	movs	r0, #128	; 0x80
 8009278:	0600      	lsls	r0, r0, #24
 800927a:	40d8      	lsrs	r0, r3
 800927c:	2100      	movs	r1, #0
 800927e:	e7f5      	b.n	800926c <__ulp+0x1c>
 8009280:	7ff00000 	.word	0x7ff00000
 8009284:	fcc00000 	.word	0xfcc00000

08009288 <__b2d>:
 8009288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800928a:	0006      	movs	r6, r0
 800928c:	6903      	ldr	r3, [r0, #16]
 800928e:	3614      	adds	r6, #20
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	18f3      	adds	r3, r6, r3
 8009294:	1f1d      	subs	r5, r3, #4
 8009296:	682c      	ldr	r4, [r5, #0]
 8009298:	000f      	movs	r7, r1
 800929a:	0020      	movs	r0, r4
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	f7ff fd49 	bl	8008d34 <__hi0bits>
 80092a2:	2220      	movs	r2, #32
 80092a4:	1a12      	subs	r2, r2, r0
 80092a6:	603a      	str	r2, [r7, #0]
 80092a8:	0003      	movs	r3, r0
 80092aa:	4a1c      	ldr	r2, [pc, #112]	; (800931c <__b2d+0x94>)
 80092ac:	280a      	cmp	r0, #10
 80092ae:	dc15      	bgt.n	80092dc <__b2d+0x54>
 80092b0:	210b      	movs	r1, #11
 80092b2:	0027      	movs	r7, r4
 80092b4:	1a09      	subs	r1, r1, r0
 80092b6:	40cf      	lsrs	r7, r1
 80092b8:	433a      	orrs	r2, r7
 80092ba:	468c      	mov	ip, r1
 80092bc:	0011      	movs	r1, r2
 80092be:	2200      	movs	r2, #0
 80092c0:	42ae      	cmp	r6, r5
 80092c2:	d202      	bcs.n	80092ca <__b2d+0x42>
 80092c4:	9a01      	ldr	r2, [sp, #4]
 80092c6:	3a08      	subs	r2, #8
 80092c8:	6812      	ldr	r2, [r2, #0]
 80092ca:	3315      	adds	r3, #21
 80092cc:	409c      	lsls	r4, r3
 80092ce:	4663      	mov	r3, ip
 80092d0:	0027      	movs	r7, r4
 80092d2:	40da      	lsrs	r2, r3
 80092d4:	4317      	orrs	r7, r2
 80092d6:	0038      	movs	r0, r7
 80092d8:	b003      	add	sp, #12
 80092da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092dc:	2700      	movs	r7, #0
 80092de:	42ae      	cmp	r6, r5
 80092e0:	d202      	bcs.n	80092e8 <__b2d+0x60>
 80092e2:	9d01      	ldr	r5, [sp, #4]
 80092e4:	3d08      	subs	r5, #8
 80092e6:	682f      	ldr	r7, [r5, #0]
 80092e8:	210b      	movs	r1, #11
 80092ea:	4249      	negs	r1, r1
 80092ec:	468c      	mov	ip, r1
 80092ee:	449c      	add	ip, r3
 80092f0:	2b0b      	cmp	r3, #11
 80092f2:	d010      	beq.n	8009316 <__b2d+0x8e>
 80092f4:	4661      	mov	r1, ip
 80092f6:	2320      	movs	r3, #32
 80092f8:	408c      	lsls	r4, r1
 80092fa:	1a5b      	subs	r3, r3, r1
 80092fc:	0039      	movs	r1, r7
 80092fe:	40d9      	lsrs	r1, r3
 8009300:	430c      	orrs	r4, r1
 8009302:	4322      	orrs	r2, r4
 8009304:	0011      	movs	r1, r2
 8009306:	2200      	movs	r2, #0
 8009308:	42b5      	cmp	r5, r6
 800930a:	d901      	bls.n	8009310 <__b2d+0x88>
 800930c:	3d04      	subs	r5, #4
 800930e:	682a      	ldr	r2, [r5, #0]
 8009310:	4664      	mov	r4, ip
 8009312:	40a7      	lsls	r7, r4
 8009314:	e7dd      	b.n	80092d2 <__b2d+0x4a>
 8009316:	4322      	orrs	r2, r4
 8009318:	0011      	movs	r1, r2
 800931a:	e7dc      	b.n	80092d6 <__b2d+0x4e>
 800931c:	3ff00000 	.word	0x3ff00000

08009320 <__d2b>:
 8009320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009322:	2101      	movs	r1, #1
 8009324:	0014      	movs	r4, r2
 8009326:	001d      	movs	r5, r3
 8009328:	9f08      	ldr	r7, [sp, #32]
 800932a:	f7ff fc0b 	bl	8008b44 <_Balloc>
 800932e:	1e06      	subs	r6, r0, #0
 8009330:	d105      	bne.n	800933e <__d2b+0x1e>
 8009332:	0032      	movs	r2, r6
 8009334:	4b24      	ldr	r3, [pc, #144]	; (80093c8 <__d2b+0xa8>)
 8009336:	4825      	ldr	r0, [pc, #148]	; (80093cc <__d2b+0xac>)
 8009338:	4925      	ldr	r1, [pc, #148]	; (80093d0 <__d2b+0xb0>)
 800933a:	f000 fb93 	bl	8009a64 <__assert_func>
 800933e:	032b      	lsls	r3, r5, #12
 8009340:	006d      	lsls	r5, r5, #1
 8009342:	0b1b      	lsrs	r3, r3, #12
 8009344:	0d6d      	lsrs	r5, r5, #21
 8009346:	d125      	bne.n	8009394 <__d2b+0x74>
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	2c00      	cmp	r4, #0
 800934c:	d028      	beq.n	80093a0 <__d2b+0x80>
 800934e:	4668      	mov	r0, sp
 8009350:	9400      	str	r4, [sp, #0]
 8009352:	f7ff fd09 	bl	8008d68 <__lo0bits>
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	9900      	ldr	r1, [sp, #0]
 800935a:	2800      	cmp	r0, #0
 800935c:	d01e      	beq.n	800939c <__d2b+0x7c>
 800935e:	2220      	movs	r2, #32
 8009360:	001c      	movs	r4, r3
 8009362:	1a12      	subs	r2, r2, r0
 8009364:	4094      	lsls	r4, r2
 8009366:	0022      	movs	r2, r4
 8009368:	40c3      	lsrs	r3, r0
 800936a:	430a      	orrs	r2, r1
 800936c:	6172      	str	r2, [r6, #20]
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	9c01      	ldr	r4, [sp, #4]
 8009372:	61b4      	str	r4, [r6, #24]
 8009374:	1e63      	subs	r3, r4, #1
 8009376:	419c      	sbcs	r4, r3
 8009378:	3401      	adds	r4, #1
 800937a:	6134      	str	r4, [r6, #16]
 800937c:	2d00      	cmp	r5, #0
 800937e:	d017      	beq.n	80093b0 <__d2b+0x90>
 8009380:	2435      	movs	r4, #53	; 0x35
 8009382:	4b14      	ldr	r3, [pc, #80]	; (80093d4 <__d2b+0xb4>)
 8009384:	18ed      	adds	r5, r5, r3
 8009386:	182d      	adds	r5, r5, r0
 8009388:	603d      	str	r5, [r7, #0]
 800938a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938c:	1a24      	subs	r4, r4, r0
 800938e:	601c      	str	r4, [r3, #0]
 8009390:	0030      	movs	r0, r6
 8009392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009394:	2280      	movs	r2, #128	; 0x80
 8009396:	0352      	lsls	r2, r2, #13
 8009398:	4313      	orrs	r3, r2
 800939a:	e7d5      	b.n	8009348 <__d2b+0x28>
 800939c:	6171      	str	r1, [r6, #20]
 800939e:	e7e7      	b.n	8009370 <__d2b+0x50>
 80093a0:	a801      	add	r0, sp, #4
 80093a2:	f7ff fce1 	bl	8008d68 <__lo0bits>
 80093a6:	9b01      	ldr	r3, [sp, #4]
 80093a8:	2401      	movs	r4, #1
 80093aa:	6173      	str	r3, [r6, #20]
 80093ac:	3020      	adds	r0, #32
 80093ae:	e7e4      	b.n	800937a <__d2b+0x5a>
 80093b0:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <__d2b+0xb8>)
 80093b2:	18c0      	adds	r0, r0, r3
 80093b4:	4b09      	ldr	r3, [pc, #36]	; (80093dc <__d2b+0xbc>)
 80093b6:	6038      	str	r0, [r7, #0]
 80093b8:	18e3      	adds	r3, r4, r3
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	18f3      	adds	r3, r6, r3
 80093be:	6958      	ldr	r0, [r3, #20]
 80093c0:	f7ff fcb8 	bl	8008d34 <__hi0bits>
 80093c4:	0164      	lsls	r4, r4, #5
 80093c6:	e7e0      	b.n	800938a <__d2b+0x6a>
 80093c8:	0800a39d 	.word	0x0800a39d
 80093cc:	0800a40e 	.word	0x0800a40e
 80093d0:	0000030f 	.word	0x0000030f
 80093d4:	fffffbcd 	.word	0xfffffbcd
 80093d8:	fffffbce 	.word	0xfffffbce
 80093dc:	3fffffff 	.word	0x3fffffff

080093e0 <__ratio>:
 80093e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093e2:	b087      	sub	sp, #28
 80093e4:	000f      	movs	r7, r1
 80093e6:	a904      	add	r1, sp, #16
 80093e8:	0006      	movs	r6, r0
 80093ea:	f7ff ff4d 	bl	8009288 <__b2d>
 80093ee:	9000      	str	r0, [sp, #0]
 80093f0:	9101      	str	r1, [sp, #4]
 80093f2:	9c00      	ldr	r4, [sp, #0]
 80093f4:	9d01      	ldr	r5, [sp, #4]
 80093f6:	0038      	movs	r0, r7
 80093f8:	a905      	add	r1, sp, #20
 80093fa:	f7ff ff45 	bl	8009288 <__b2d>
 80093fe:	9002      	str	r0, [sp, #8]
 8009400:	9103      	str	r1, [sp, #12]
 8009402:	9a02      	ldr	r2, [sp, #8]
 8009404:	9b03      	ldr	r3, [sp, #12]
 8009406:	6930      	ldr	r0, [r6, #16]
 8009408:	6939      	ldr	r1, [r7, #16]
 800940a:	9e04      	ldr	r6, [sp, #16]
 800940c:	1a40      	subs	r0, r0, r1
 800940e:	9905      	ldr	r1, [sp, #20]
 8009410:	0140      	lsls	r0, r0, #5
 8009412:	1a71      	subs	r1, r6, r1
 8009414:	1841      	adds	r1, r0, r1
 8009416:	0508      	lsls	r0, r1, #20
 8009418:	2900      	cmp	r1, #0
 800941a:	dd07      	ble.n	800942c <__ratio+0x4c>
 800941c:	9901      	ldr	r1, [sp, #4]
 800941e:	1845      	adds	r5, r0, r1
 8009420:	0020      	movs	r0, r4
 8009422:	0029      	movs	r1, r5
 8009424:	f7f7 fcfa 	bl	8000e1c <__aeabi_ddiv>
 8009428:	b007      	add	sp, #28
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942c:	9903      	ldr	r1, [sp, #12]
 800942e:	1a0b      	subs	r3, r1, r0
 8009430:	e7f6      	b.n	8009420 <__ratio+0x40>

08009432 <__copybits>:
 8009432:	b570      	push	{r4, r5, r6, lr}
 8009434:	0014      	movs	r4, r2
 8009436:	0005      	movs	r5, r0
 8009438:	3901      	subs	r1, #1
 800943a:	6913      	ldr	r3, [r2, #16]
 800943c:	1149      	asrs	r1, r1, #5
 800943e:	3101      	adds	r1, #1
 8009440:	0089      	lsls	r1, r1, #2
 8009442:	3414      	adds	r4, #20
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	1841      	adds	r1, r0, r1
 8009448:	18e3      	adds	r3, r4, r3
 800944a:	42a3      	cmp	r3, r4
 800944c:	d80d      	bhi.n	800946a <__copybits+0x38>
 800944e:	0014      	movs	r4, r2
 8009450:	3411      	adds	r4, #17
 8009452:	2500      	movs	r5, #0
 8009454:	429c      	cmp	r4, r3
 8009456:	d803      	bhi.n	8009460 <__copybits+0x2e>
 8009458:	1a9b      	subs	r3, r3, r2
 800945a:	3b11      	subs	r3, #17
 800945c:	089b      	lsrs	r3, r3, #2
 800945e:	009d      	lsls	r5, r3, #2
 8009460:	2300      	movs	r3, #0
 8009462:	1940      	adds	r0, r0, r5
 8009464:	4281      	cmp	r1, r0
 8009466:	d803      	bhi.n	8009470 <__copybits+0x3e>
 8009468:	bd70      	pop	{r4, r5, r6, pc}
 800946a:	cc40      	ldmia	r4!, {r6}
 800946c:	c540      	stmia	r5!, {r6}
 800946e:	e7ec      	b.n	800944a <__copybits+0x18>
 8009470:	c008      	stmia	r0!, {r3}
 8009472:	e7f7      	b.n	8009464 <__copybits+0x32>

08009474 <__any_on>:
 8009474:	0002      	movs	r2, r0
 8009476:	6900      	ldr	r0, [r0, #16]
 8009478:	b510      	push	{r4, lr}
 800947a:	3214      	adds	r2, #20
 800947c:	114b      	asrs	r3, r1, #5
 800947e:	4298      	cmp	r0, r3
 8009480:	db13      	blt.n	80094aa <__any_on+0x36>
 8009482:	dd0c      	ble.n	800949e <__any_on+0x2a>
 8009484:	241f      	movs	r4, #31
 8009486:	0008      	movs	r0, r1
 8009488:	4020      	ands	r0, r4
 800948a:	4221      	tst	r1, r4
 800948c:	d007      	beq.n	800949e <__any_on+0x2a>
 800948e:	0099      	lsls	r1, r3, #2
 8009490:	588c      	ldr	r4, [r1, r2]
 8009492:	0021      	movs	r1, r4
 8009494:	40c1      	lsrs	r1, r0
 8009496:	4081      	lsls	r1, r0
 8009498:	2001      	movs	r0, #1
 800949a:	428c      	cmp	r4, r1
 800949c:	d104      	bne.n	80094a8 <__any_on+0x34>
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	18d3      	adds	r3, r2, r3
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d803      	bhi.n	80094ae <__any_on+0x3a>
 80094a6:	2000      	movs	r0, #0
 80094a8:	bd10      	pop	{r4, pc}
 80094aa:	0003      	movs	r3, r0
 80094ac:	e7f7      	b.n	800949e <__any_on+0x2a>
 80094ae:	3b04      	subs	r3, #4
 80094b0:	6819      	ldr	r1, [r3, #0]
 80094b2:	2900      	cmp	r1, #0
 80094b4:	d0f5      	beq.n	80094a2 <__any_on+0x2e>
 80094b6:	2001      	movs	r0, #1
 80094b8:	e7f6      	b.n	80094a8 <__any_on+0x34>
	...

080094bc <_strtol_l.constprop.0>:
 80094bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094be:	b087      	sub	sp, #28
 80094c0:	001e      	movs	r6, r3
 80094c2:	9005      	str	r0, [sp, #20]
 80094c4:	9101      	str	r1, [sp, #4]
 80094c6:	9202      	str	r2, [sp, #8]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d048      	beq.n	800955e <_strtol_l.constprop.0+0xa2>
 80094cc:	000b      	movs	r3, r1
 80094ce:	2e24      	cmp	r6, #36	; 0x24
 80094d0:	d845      	bhi.n	800955e <_strtol_l.constprop.0+0xa2>
 80094d2:	4a3b      	ldr	r2, [pc, #236]	; (80095c0 <_strtol_l.constprop.0+0x104>)
 80094d4:	2108      	movs	r1, #8
 80094d6:	4694      	mov	ip, r2
 80094d8:	001a      	movs	r2, r3
 80094da:	4660      	mov	r0, ip
 80094dc:	7814      	ldrb	r4, [r2, #0]
 80094de:	3301      	adds	r3, #1
 80094e0:	5d00      	ldrb	r0, [r0, r4]
 80094e2:	001d      	movs	r5, r3
 80094e4:	0007      	movs	r7, r0
 80094e6:	400f      	ands	r7, r1
 80094e8:	4208      	tst	r0, r1
 80094ea:	d1f5      	bne.n	80094d8 <_strtol_l.constprop.0+0x1c>
 80094ec:	2c2d      	cmp	r4, #45	; 0x2d
 80094ee:	d13d      	bne.n	800956c <_strtol_l.constprop.0+0xb0>
 80094f0:	2701      	movs	r7, #1
 80094f2:	781c      	ldrb	r4, [r3, #0]
 80094f4:	1c95      	adds	r5, r2, #2
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	d05e      	beq.n	80095b8 <_strtol_l.constprop.0+0xfc>
 80094fa:	2e10      	cmp	r6, #16
 80094fc:	d109      	bne.n	8009512 <_strtol_l.constprop.0+0x56>
 80094fe:	2c30      	cmp	r4, #48	; 0x30
 8009500:	d107      	bne.n	8009512 <_strtol_l.constprop.0+0x56>
 8009502:	2220      	movs	r2, #32
 8009504:	782b      	ldrb	r3, [r5, #0]
 8009506:	4393      	bics	r3, r2
 8009508:	2b58      	cmp	r3, #88	; 0x58
 800950a:	d150      	bne.n	80095ae <_strtol_l.constprop.0+0xf2>
 800950c:	2610      	movs	r6, #16
 800950e:	786c      	ldrb	r4, [r5, #1]
 8009510:	3502      	adds	r5, #2
 8009512:	4b2c      	ldr	r3, [pc, #176]	; (80095c4 <_strtol_l.constprop.0+0x108>)
 8009514:	0031      	movs	r1, r6
 8009516:	18fb      	adds	r3, r7, r3
 8009518:	0018      	movs	r0, r3
 800951a:	9303      	str	r3, [sp, #12]
 800951c:	f7f6 fe94 	bl	8000248 <__aeabi_uidivmod>
 8009520:	2200      	movs	r2, #0
 8009522:	9104      	str	r1, [sp, #16]
 8009524:	2101      	movs	r1, #1
 8009526:	4684      	mov	ip, r0
 8009528:	0010      	movs	r0, r2
 800952a:	4249      	negs	r1, r1
 800952c:	0023      	movs	r3, r4
 800952e:	3b30      	subs	r3, #48	; 0x30
 8009530:	2b09      	cmp	r3, #9
 8009532:	d903      	bls.n	800953c <_strtol_l.constprop.0+0x80>
 8009534:	3b11      	subs	r3, #17
 8009536:	2b19      	cmp	r3, #25
 8009538:	d81d      	bhi.n	8009576 <_strtol_l.constprop.0+0xba>
 800953a:	330a      	adds	r3, #10
 800953c:	429e      	cmp	r6, r3
 800953e:	dd1e      	ble.n	800957e <_strtol_l.constprop.0+0xc2>
 8009540:	1c54      	adds	r4, r2, #1
 8009542:	d009      	beq.n	8009558 <_strtol_l.constprop.0+0x9c>
 8009544:	000a      	movs	r2, r1
 8009546:	4584      	cmp	ip, r0
 8009548:	d306      	bcc.n	8009558 <_strtol_l.constprop.0+0x9c>
 800954a:	d102      	bne.n	8009552 <_strtol_l.constprop.0+0x96>
 800954c:	9c04      	ldr	r4, [sp, #16]
 800954e:	429c      	cmp	r4, r3
 8009550:	db02      	blt.n	8009558 <_strtol_l.constprop.0+0x9c>
 8009552:	2201      	movs	r2, #1
 8009554:	4370      	muls	r0, r6
 8009556:	1818      	adds	r0, r3, r0
 8009558:	782c      	ldrb	r4, [r5, #0]
 800955a:	3501      	adds	r5, #1
 800955c:	e7e6      	b.n	800952c <_strtol_l.constprop.0+0x70>
 800955e:	f7fd ff91 	bl	8007484 <__errno>
 8009562:	2316      	movs	r3, #22
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	2000      	movs	r0, #0
 8009568:	b007      	add	sp, #28
 800956a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800956c:	2c2b      	cmp	r4, #43	; 0x2b
 800956e:	d1c2      	bne.n	80094f6 <_strtol_l.constprop.0+0x3a>
 8009570:	781c      	ldrb	r4, [r3, #0]
 8009572:	1c95      	adds	r5, r2, #2
 8009574:	e7bf      	b.n	80094f6 <_strtol_l.constprop.0+0x3a>
 8009576:	0023      	movs	r3, r4
 8009578:	3b61      	subs	r3, #97	; 0x61
 800957a:	2b19      	cmp	r3, #25
 800957c:	d9dd      	bls.n	800953a <_strtol_l.constprop.0+0x7e>
 800957e:	1c53      	adds	r3, r2, #1
 8009580:	d109      	bne.n	8009596 <_strtol_l.constprop.0+0xda>
 8009582:	2322      	movs	r3, #34	; 0x22
 8009584:	9a05      	ldr	r2, [sp, #20]
 8009586:	9803      	ldr	r0, [sp, #12]
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0eb      	beq.n	8009568 <_strtol_l.constprop.0+0xac>
 8009590:	1e6b      	subs	r3, r5, #1
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	e007      	b.n	80095a6 <_strtol_l.constprop.0+0xea>
 8009596:	2f00      	cmp	r7, #0
 8009598:	d000      	beq.n	800959c <_strtol_l.constprop.0+0xe0>
 800959a:	4240      	negs	r0, r0
 800959c:	9b02      	ldr	r3, [sp, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d0e2      	beq.n	8009568 <_strtol_l.constprop.0+0xac>
 80095a2:	2a00      	cmp	r2, #0
 80095a4:	d1f4      	bne.n	8009590 <_strtol_l.constprop.0+0xd4>
 80095a6:	9b02      	ldr	r3, [sp, #8]
 80095a8:	9a01      	ldr	r2, [sp, #4]
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	e7dc      	b.n	8009568 <_strtol_l.constprop.0+0xac>
 80095ae:	2430      	movs	r4, #48	; 0x30
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	d1ae      	bne.n	8009512 <_strtol_l.constprop.0+0x56>
 80095b4:	3608      	adds	r6, #8
 80095b6:	e7ac      	b.n	8009512 <_strtol_l.constprop.0+0x56>
 80095b8:	2c30      	cmp	r4, #48	; 0x30
 80095ba:	d0a2      	beq.n	8009502 <_strtol_l.constprop.0+0x46>
 80095bc:	260a      	movs	r6, #10
 80095be:	e7a8      	b.n	8009512 <_strtol_l.constprop.0+0x56>
 80095c0:	0800a565 	.word	0x0800a565
 80095c4:	7fffffff 	.word	0x7fffffff

080095c8 <_strtol_r>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	f7ff ff77 	bl	80094bc <_strtol_l.constprop.0>
 80095ce:	bd10      	pop	{r4, pc}

080095d0 <__ascii_wctomb>:
 80095d0:	0003      	movs	r3, r0
 80095d2:	1e08      	subs	r0, r1, #0
 80095d4:	d005      	beq.n	80095e2 <__ascii_wctomb+0x12>
 80095d6:	2aff      	cmp	r2, #255	; 0xff
 80095d8:	d904      	bls.n	80095e4 <__ascii_wctomb+0x14>
 80095da:	228a      	movs	r2, #138	; 0x8a
 80095dc:	2001      	movs	r0, #1
 80095de:	601a      	str	r2, [r3, #0]
 80095e0:	4240      	negs	r0, r0
 80095e2:	4770      	bx	lr
 80095e4:	2001      	movs	r0, #1
 80095e6:	700a      	strb	r2, [r1, #0]
 80095e8:	e7fb      	b.n	80095e2 <__ascii_wctomb+0x12>
	...

080095ec <__ssputs_r>:
 80095ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ee:	b085      	sub	sp, #20
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	9203      	str	r2, [sp, #12]
 80095f4:	688e      	ldr	r6, [r1, #8]
 80095f6:	9a01      	ldr	r2, [sp, #4]
 80095f8:	0007      	movs	r7, r0
 80095fa:	000c      	movs	r4, r1
 80095fc:	680b      	ldr	r3, [r1, #0]
 80095fe:	4296      	cmp	r6, r2
 8009600:	d831      	bhi.n	8009666 <__ssputs_r+0x7a>
 8009602:	898a      	ldrh	r2, [r1, #12]
 8009604:	2190      	movs	r1, #144	; 0x90
 8009606:	00c9      	lsls	r1, r1, #3
 8009608:	420a      	tst	r2, r1
 800960a:	d029      	beq.n	8009660 <__ssputs_r+0x74>
 800960c:	2003      	movs	r0, #3
 800960e:	6921      	ldr	r1, [r4, #16]
 8009610:	1a5b      	subs	r3, r3, r1
 8009612:	9302      	str	r3, [sp, #8]
 8009614:	6963      	ldr	r3, [r4, #20]
 8009616:	4343      	muls	r3, r0
 8009618:	0fdd      	lsrs	r5, r3, #31
 800961a:	18ed      	adds	r5, r5, r3
 800961c:	9b01      	ldr	r3, [sp, #4]
 800961e:	9802      	ldr	r0, [sp, #8]
 8009620:	3301      	adds	r3, #1
 8009622:	181b      	adds	r3, r3, r0
 8009624:	106d      	asrs	r5, r5, #1
 8009626:	42ab      	cmp	r3, r5
 8009628:	d900      	bls.n	800962c <__ssputs_r+0x40>
 800962a:	001d      	movs	r5, r3
 800962c:	0552      	lsls	r2, r2, #21
 800962e:	d529      	bpl.n	8009684 <__ssputs_r+0x98>
 8009630:	0029      	movs	r1, r5
 8009632:	0038      	movs	r0, r7
 8009634:	f7ff f9e2 	bl	80089fc <_malloc_r>
 8009638:	1e06      	subs	r6, r0, #0
 800963a:	d02d      	beq.n	8009698 <__ssputs_r+0xac>
 800963c:	9a02      	ldr	r2, [sp, #8]
 800963e:	6921      	ldr	r1, [r4, #16]
 8009640:	f7fd ff58 	bl	80074f4 <memcpy>
 8009644:	89a2      	ldrh	r2, [r4, #12]
 8009646:	4b19      	ldr	r3, [pc, #100]	; (80096ac <__ssputs_r+0xc0>)
 8009648:	401a      	ands	r2, r3
 800964a:	2380      	movs	r3, #128	; 0x80
 800964c:	4313      	orrs	r3, r2
 800964e:	81a3      	strh	r3, [r4, #12]
 8009650:	9b02      	ldr	r3, [sp, #8]
 8009652:	6126      	str	r6, [r4, #16]
 8009654:	18f6      	adds	r6, r6, r3
 8009656:	6026      	str	r6, [r4, #0]
 8009658:	6165      	str	r5, [r4, #20]
 800965a:	9e01      	ldr	r6, [sp, #4]
 800965c:	1aed      	subs	r5, r5, r3
 800965e:	60a5      	str	r5, [r4, #8]
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	429e      	cmp	r6, r3
 8009664:	d900      	bls.n	8009668 <__ssputs_r+0x7c>
 8009666:	9e01      	ldr	r6, [sp, #4]
 8009668:	0032      	movs	r2, r6
 800966a:	9903      	ldr	r1, [sp, #12]
 800966c:	6820      	ldr	r0, [r4, #0]
 800966e:	f000 f9d4 	bl	8009a1a <memmove>
 8009672:	2000      	movs	r0, #0
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	1b9b      	subs	r3, r3, r6
 8009678:	60a3      	str	r3, [r4, #8]
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	199b      	adds	r3, r3, r6
 800967e:	6023      	str	r3, [r4, #0]
 8009680:	b005      	add	sp, #20
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009684:	002a      	movs	r2, r5
 8009686:	0038      	movs	r0, r7
 8009688:	f000 fa37 	bl	8009afa <_realloc_r>
 800968c:	1e06      	subs	r6, r0, #0
 800968e:	d1df      	bne.n	8009650 <__ssputs_r+0x64>
 8009690:	0038      	movs	r0, r7
 8009692:	6921      	ldr	r1, [r4, #16]
 8009694:	f7fe fde0 	bl	8008258 <_free_r>
 8009698:	230c      	movs	r3, #12
 800969a:	2001      	movs	r0, #1
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	89a2      	ldrh	r2, [r4, #12]
 80096a0:	3334      	adds	r3, #52	; 0x34
 80096a2:	4313      	orrs	r3, r2
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	4240      	negs	r0, r0
 80096a8:	e7ea      	b.n	8009680 <__ssputs_r+0x94>
 80096aa:	46c0      	nop			; (mov r8, r8)
 80096ac:	fffffb7f 	.word	0xfffffb7f

080096b0 <_svfiprintf_r>:
 80096b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096b2:	b0a1      	sub	sp, #132	; 0x84
 80096b4:	9003      	str	r0, [sp, #12]
 80096b6:	001d      	movs	r5, r3
 80096b8:	898b      	ldrh	r3, [r1, #12]
 80096ba:	000f      	movs	r7, r1
 80096bc:	0016      	movs	r6, r2
 80096be:	061b      	lsls	r3, r3, #24
 80096c0:	d511      	bpl.n	80096e6 <_svfiprintf_r+0x36>
 80096c2:	690b      	ldr	r3, [r1, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10e      	bne.n	80096e6 <_svfiprintf_r+0x36>
 80096c8:	2140      	movs	r1, #64	; 0x40
 80096ca:	f7ff f997 	bl	80089fc <_malloc_r>
 80096ce:	6038      	str	r0, [r7, #0]
 80096d0:	6138      	str	r0, [r7, #16]
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d105      	bne.n	80096e2 <_svfiprintf_r+0x32>
 80096d6:	230c      	movs	r3, #12
 80096d8:	9a03      	ldr	r2, [sp, #12]
 80096da:	3801      	subs	r0, #1
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	b021      	add	sp, #132	; 0x84
 80096e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e2:	2340      	movs	r3, #64	; 0x40
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	2300      	movs	r3, #0
 80096e8:	ac08      	add	r4, sp, #32
 80096ea:	6163      	str	r3, [r4, #20]
 80096ec:	3320      	adds	r3, #32
 80096ee:	7663      	strb	r3, [r4, #25]
 80096f0:	3310      	adds	r3, #16
 80096f2:	76a3      	strb	r3, [r4, #26]
 80096f4:	9507      	str	r5, [sp, #28]
 80096f6:	0035      	movs	r5, r6
 80096f8:	782b      	ldrb	r3, [r5, #0]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <_svfiprintf_r+0x52>
 80096fe:	2b25      	cmp	r3, #37	; 0x25
 8009700:	d148      	bne.n	8009794 <_svfiprintf_r+0xe4>
 8009702:	1bab      	subs	r3, r5, r6
 8009704:	9305      	str	r3, [sp, #20]
 8009706:	42b5      	cmp	r5, r6
 8009708:	d00b      	beq.n	8009722 <_svfiprintf_r+0x72>
 800970a:	0032      	movs	r2, r6
 800970c:	0039      	movs	r1, r7
 800970e:	9803      	ldr	r0, [sp, #12]
 8009710:	f7ff ff6c 	bl	80095ec <__ssputs_r>
 8009714:	3001      	adds	r0, #1
 8009716:	d100      	bne.n	800971a <_svfiprintf_r+0x6a>
 8009718:	e0af      	b.n	800987a <_svfiprintf_r+0x1ca>
 800971a:	6963      	ldr	r3, [r4, #20]
 800971c:	9a05      	ldr	r2, [sp, #20]
 800971e:	189b      	adds	r3, r3, r2
 8009720:	6163      	str	r3, [r4, #20]
 8009722:	782b      	ldrb	r3, [r5, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d100      	bne.n	800972a <_svfiprintf_r+0x7a>
 8009728:	e0a7      	b.n	800987a <_svfiprintf_r+0x1ca>
 800972a:	2201      	movs	r2, #1
 800972c:	2300      	movs	r3, #0
 800972e:	4252      	negs	r2, r2
 8009730:	6062      	str	r2, [r4, #4]
 8009732:	a904      	add	r1, sp, #16
 8009734:	3254      	adds	r2, #84	; 0x54
 8009736:	1852      	adds	r2, r2, r1
 8009738:	1c6e      	adds	r6, r5, #1
 800973a:	6023      	str	r3, [r4, #0]
 800973c:	60e3      	str	r3, [r4, #12]
 800973e:	60a3      	str	r3, [r4, #8]
 8009740:	7013      	strb	r3, [r2, #0]
 8009742:	65a3      	str	r3, [r4, #88]	; 0x58
 8009744:	4b55      	ldr	r3, [pc, #340]	; (800989c <_svfiprintf_r+0x1ec>)
 8009746:	2205      	movs	r2, #5
 8009748:	0018      	movs	r0, r3
 800974a:	7831      	ldrb	r1, [r6, #0]
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	f7fd fec6 	bl	80074de <memchr>
 8009752:	1c75      	adds	r5, r6, #1
 8009754:	2800      	cmp	r0, #0
 8009756:	d11f      	bne.n	8009798 <_svfiprintf_r+0xe8>
 8009758:	6822      	ldr	r2, [r4, #0]
 800975a:	06d3      	lsls	r3, r2, #27
 800975c:	d504      	bpl.n	8009768 <_svfiprintf_r+0xb8>
 800975e:	2353      	movs	r3, #83	; 0x53
 8009760:	a904      	add	r1, sp, #16
 8009762:	185b      	adds	r3, r3, r1
 8009764:	2120      	movs	r1, #32
 8009766:	7019      	strb	r1, [r3, #0]
 8009768:	0713      	lsls	r3, r2, #28
 800976a:	d504      	bpl.n	8009776 <_svfiprintf_r+0xc6>
 800976c:	2353      	movs	r3, #83	; 0x53
 800976e:	a904      	add	r1, sp, #16
 8009770:	185b      	adds	r3, r3, r1
 8009772:	212b      	movs	r1, #43	; 0x2b
 8009774:	7019      	strb	r1, [r3, #0]
 8009776:	7833      	ldrb	r3, [r6, #0]
 8009778:	2b2a      	cmp	r3, #42	; 0x2a
 800977a:	d016      	beq.n	80097aa <_svfiprintf_r+0xfa>
 800977c:	0035      	movs	r5, r6
 800977e:	2100      	movs	r1, #0
 8009780:	200a      	movs	r0, #10
 8009782:	68e3      	ldr	r3, [r4, #12]
 8009784:	782a      	ldrb	r2, [r5, #0]
 8009786:	1c6e      	adds	r6, r5, #1
 8009788:	3a30      	subs	r2, #48	; 0x30
 800978a:	2a09      	cmp	r2, #9
 800978c:	d94e      	bls.n	800982c <_svfiprintf_r+0x17c>
 800978e:	2900      	cmp	r1, #0
 8009790:	d111      	bne.n	80097b6 <_svfiprintf_r+0x106>
 8009792:	e017      	b.n	80097c4 <_svfiprintf_r+0x114>
 8009794:	3501      	adds	r5, #1
 8009796:	e7af      	b.n	80096f8 <_svfiprintf_r+0x48>
 8009798:	9b05      	ldr	r3, [sp, #20]
 800979a:	6822      	ldr	r2, [r4, #0]
 800979c:	1ac0      	subs	r0, r0, r3
 800979e:	2301      	movs	r3, #1
 80097a0:	4083      	lsls	r3, r0
 80097a2:	4313      	orrs	r3, r2
 80097a4:	002e      	movs	r6, r5
 80097a6:	6023      	str	r3, [r4, #0]
 80097a8:	e7cc      	b.n	8009744 <_svfiprintf_r+0x94>
 80097aa:	9b07      	ldr	r3, [sp, #28]
 80097ac:	1d19      	adds	r1, r3, #4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	9107      	str	r1, [sp, #28]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	db01      	blt.n	80097ba <_svfiprintf_r+0x10a>
 80097b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80097b8:	e004      	b.n	80097c4 <_svfiprintf_r+0x114>
 80097ba:	425b      	negs	r3, r3
 80097bc:	60e3      	str	r3, [r4, #12]
 80097be:	2302      	movs	r3, #2
 80097c0:	4313      	orrs	r3, r2
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	782b      	ldrb	r3, [r5, #0]
 80097c6:	2b2e      	cmp	r3, #46	; 0x2e
 80097c8:	d10a      	bne.n	80097e0 <_svfiprintf_r+0x130>
 80097ca:	786b      	ldrb	r3, [r5, #1]
 80097cc:	2b2a      	cmp	r3, #42	; 0x2a
 80097ce:	d135      	bne.n	800983c <_svfiprintf_r+0x18c>
 80097d0:	9b07      	ldr	r3, [sp, #28]
 80097d2:	3502      	adds	r5, #2
 80097d4:	1d1a      	adds	r2, r3, #4
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	9207      	str	r2, [sp, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	db2b      	blt.n	8009836 <_svfiprintf_r+0x186>
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	4e2f      	ldr	r6, [pc, #188]	; (80098a0 <_svfiprintf_r+0x1f0>)
 80097e2:	2203      	movs	r2, #3
 80097e4:	0030      	movs	r0, r6
 80097e6:	7829      	ldrb	r1, [r5, #0]
 80097e8:	f7fd fe79 	bl	80074de <memchr>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d006      	beq.n	80097fe <_svfiprintf_r+0x14e>
 80097f0:	2340      	movs	r3, #64	; 0x40
 80097f2:	1b80      	subs	r0, r0, r6
 80097f4:	4083      	lsls	r3, r0
 80097f6:	6822      	ldr	r2, [r4, #0]
 80097f8:	3501      	adds	r5, #1
 80097fa:	4313      	orrs	r3, r2
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	7829      	ldrb	r1, [r5, #0]
 8009800:	2206      	movs	r2, #6
 8009802:	4828      	ldr	r0, [pc, #160]	; (80098a4 <_svfiprintf_r+0x1f4>)
 8009804:	1c6e      	adds	r6, r5, #1
 8009806:	7621      	strb	r1, [r4, #24]
 8009808:	f7fd fe69 	bl	80074de <memchr>
 800980c:	2800      	cmp	r0, #0
 800980e:	d03c      	beq.n	800988a <_svfiprintf_r+0x1da>
 8009810:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <_svfiprintf_r+0x1f8>)
 8009812:	2b00      	cmp	r3, #0
 8009814:	d125      	bne.n	8009862 <_svfiprintf_r+0x1b2>
 8009816:	2207      	movs	r2, #7
 8009818:	9b07      	ldr	r3, [sp, #28]
 800981a:	3307      	adds	r3, #7
 800981c:	4393      	bics	r3, r2
 800981e:	3308      	adds	r3, #8
 8009820:	9307      	str	r3, [sp, #28]
 8009822:	6963      	ldr	r3, [r4, #20]
 8009824:	9a04      	ldr	r2, [sp, #16]
 8009826:	189b      	adds	r3, r3, r2
 8009828:	6163      	str	r3, [r4, #20]
 800982a:	e764      	b.n	80096f6 <_svfiprintf_r+0x46>
 800982c:	4343      	muls	r3, r0
 800982e:	0035      	movs	r5, r6
 8009830:	2101      	movs	r1, #1
 8009832:	189b      	adds	r3, r3, r2
 8009834:	e7a6      	b.n	8009784 <_svfiprintf_r+0xd4>
 8009836:	2301      	movs	r3, #1
 8009838:	425b      	negs	r3, r3
 800983a:	e7d0      	b.n	80097de <_svfiprintf_r+0x12e>
 800983c:	2300      	movs	r3, #0
 800983e:	200a      	movs	r0, #10
 8009840:	001a      	movs	r2, r3
 8009842:	3501      	adds	r5, #1
 8009844:	6063      	str	r3, [r4, #4]
 8009846:	7829      	ldrb	r1, [r5, #0]
 8009848:	1c6e      	adds	r6, r5, #1
 800984a:	3930      	subs	r1, #48	; 0x30
 800984c:	2909      	cmp	r1, #9
 800984e:	d903      	bls.n	8009858 <_svfiprintf_r+0x1a8>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d0c5      	beq.n	80097e0 <_svfiprintf_r+0x130>
 8009854:	9209      	str	r2, [sp, #36]	; 0x24
 8009856:	e7c3      	b.n	80097e0 <_svfiprintf_r+0x130>
 8009858:	4342      	muls	r2, r0
 800985a:	0035      	movs	r5, r6
 800985c:	2301      	movs	r3, #1
 800985e:	1852      	adds	r2, r2, r1
 8009860:	e7f1      	b.n	8009846 <_svfiprintf_r+0x196>
 8009862:	aa07      	add	r2, sp, #28
 8009864:	9200      	str	r2, [sp, #0]
 8009866:	0021      	movs	r1, r4
 8009868:	003a      	movs	r2, r7
 800986a:	4b10      	ldr	r3, [pc, #64]	; (80098ac <_svfiprintf_r+0x1fc>)
 800986c:	9803      	ldr	r0, [sp, #12]
 800986e:	f7fc fe8f 	bl	8006590 <_printf_float>
 8009872:	9004      	str	r0, [sp, #16]
 8009874:	9b04      	ldr	r3, [sp, #16]
 8009876:	3301      	adds	r3, #1
 8009878:	d1d3      	bne.n	8009822 <_svfiprintf_r+0x172>
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800987e:	065b      	lsls	r3, r3, #25
 8009880:	d400      	bmi.n	8009884 <_svfiprintf_r+0x1d4>
 8009882:	e72c      	b.n	80096de <_svfiprintf_r+0x2e>
 8009884:	2001      	movs	r0, #1
 8009886:	4240      	negs	r0, r0
 8009888:	e729      	b.n	80096de <_svfiprintf_r+0x2e>
 800988a:	aa07      	add	r2, sp, #28
 800988c:	9200      	str	r2, [sp, #0]
 800988e:	0021      	movs	r1, r4
 8009890:	003a      	movs	r2, r7
 8009892:	4b06      	ldr	r3, [pc, #24]	; (80098ac <_svfiprintf_r+0x1fc>)
 8009894:	9803      	ldr	r0, [sp, #12]
 8009896:	f7fd f941 	bl	8006b1c <_printf_i>
 800989a:	e7ea      	b.n	8009872 <_svfiprintf_r+0x1c2>
 800989c:	0800a665 	.word	0x0800a665
 80098a0:	0800a66b 	.word	0x0800a66b
 80098a4:	0800a66f 	.word	0x0800a66f
 80098a8:	08006591 	.word	0x08006591
 80098ac:	080095ed 	.word	0x080095ed

080098b0 <__sflush_r>:
 80098b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b2:	898b      	ldrh	r3, [r1, #12]
 80098b4:	0005      	movs	r5, r0
 80098b6:	000c      	movs	r4, r1
 80098b8:	071a      	lsls	r2, r3, #28
 80098ba:	d45c      	bmi.n	8009976 <__sflush_r+0xc6>
 80098bc:	684a      	ldr	r2, [r1, #4]
 80098be:	2a00      	cmp	r2, #0
 80098c0:	dc04      	bgt.n	80098cc <__sflush_r+0x1c>
 80098c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	dc01      	bgt.n	80098cc <__sflush_r+0x1c>
 80098c8:	2000      	movs	r0, #0
 80098ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80098ce:	2f00      	cmp	r7, #0
 80098d0:	d0fa      	beq.n	80098c8 <__sflush_r+0x18>
 80098d2:	2200      	movs	r2, #0
 80098d4:	2080      	movs	r0, #128	; 0x80
 80098d6:	682e      	ldr	r6, [r5, #0]
 80098d8:	602a      	str	r2, [r5, #0]
 80098da:	001a      	movs	r2, r3
 80098dc:	0140      	lsls	r0, r0, #5
 80098de:	6a21      	ldr	r1, [r4, #32]
 80098e0:	4002      	ands	r2, r0
 80098e2:	4203      	tst	r3, r0
 80098e4:	d034      	beq.n	8009950 <__sflush_r+0xa0>
 80098e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	075b      	lsls	r3, r3, #29
 80098ec:	d506      	bpl.n	80098fc <__sflush_r+0x4c>
 80098ee:	6863      	ldr	r3, [r4, #4]
 80098f0:	1ac0      	subs	r0, r0, r3
 80098f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <__sflush_r+0x4c>
 80098f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098fa:	1ac0      	subs	r0, r0, r3
 80098fc:	0002      	movs	r2, r0
 80098fe:	2300      	movs	r3, #0
 8009900:	0028      	movs	r0, r5
 8009902:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009904:	6a21      	ldr	r1, [r4, #32]
 8009906:	47b8      	blx	r7
 8009908:	89a2      	ldrh	r2, [r4, #12]
 800990a:	1c43      	adds	r3, r0, #1
 800990c:	d106      	bne.n	800991c <__sflush_r+0x6c>
 800990e:	6829      	ldr	r1, [r5, #0]
 8009910:	291d      	cmp	r1, #29
 8009912:	d82c      	bhi.n	800996e <__sflush_r+0xbe>
 8009914:	4b2a      	ldr	r3, [pc, #168]	; (80099c0 <__sflush_r+0x110>)
 8009916:	410b      	asrs	r3, r1
 8009918:	07db      	lsls	r3, r3, #31
 800991a:	d428      	bmi.n	800996e <__sflush_r+0xbe>
 800991c:	2300      	movs	r3, #0
 800991e:	6063      	str	r3, [r4, #4]
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	6023      	str	r3, [r4, #0]
 8009924:	04d2      	lsls	r2, r2, #19
 8009926:	d505      	bpl.n	8009934 <__sflush_r+0x84>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <__sflush_r+0x82>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d100      	bne.n	8009934 <__sflush_r+0x84>
 8009932:	6560      	str	r0, [r4, #84]	; 0x54
 8009934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009936:	602e      	str	r6, [r5, #0]
 8009938:	2900      	cmp	r1, #0
 800993a:	d0c5      	beq.n	80098c8 <__sflush_r+0x18>
 800993c:	0023      	movs	r3, r4
 800993e:	3344      	adds	r3, #68	; 0x44
 8009940:	4299      	cmp	r1, r3
 8009942:	d002      	beq.n	800994a <__sflush_r+0x9a>
 8009944:	0028      	movs	r0, r5
 8009946:	f7fe fc87 	bl	8008258 <_free_r>
 800994a:	2000      	movs	r0, #0
 800994c:	6360      	str	r0, [r4, #52]	; 0x34
 800994e:	e7bc      	b.n	80098ca <__sflush_r+0x1a>
 8009950:	2301      	movs	r3, #1
 8009952:	0028      	movs	r0, r5
 8009954:	47b8      	blx	r7
 8009956:	1c43      	adds	r3, r0, #1
 8009958:	d1c6      	bne.n	80098e8 <__sflush_r+0x38>
 800995a:	682b      	ldr	r3, [r5, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0c3      	beq.n	80098e8 <__sflush_r+0x38>
 8009960:	2b1d      	cmp	r3, #29
 8009962:	d001      	beq.n	8009968 <__sflush_r+0xb8>
 8009964:	2b16      	cmp	r3, #22
 8009966:	d101      	bne.n	800996c <__sflush_r+0xbc>
 8009968:	602e      	str	r6, [r5, #0]
 800996a:	e7ad      	b.n	80098c8 <__sflush_r+0x18>
 800996c:	89a2      	ldrh	r2, [r4, #12]
 800996e:	2340      	movs	r3, #64	; 0x40
 8009970:	4313      	orrs	r3, r2
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	e7a9      	b.n	80098ca <__sflush_r+0x1a>
 8009976:	690e      	ldr	r6, [r1, #16]
 8009978:	2e00      	cmp	r6, #0
 800997a:	d0a5      	beq.n	80098c8 <__sflush_r+0x18>
 800997c:	680f      	ldr	r7, [r1, #0]
 800997e:	600e      	str	r6, [r1, #0]
 8009980:	1bba      	subs	r2, r7, r6
 8009982:	9201      	str	r2, [sp, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	079b      	lsls	r3, r3, #30
 8009988:	d100      	bne.n	800998c <__sflush_r+0xdc>
 800998a:	694a      	ldr	r2, [r1, #20]
 800998c:	60a2      	str	r2, [r4, #8]
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	dd99      	ble.n	80098c8 <__sflush_r+0x18>
 8009994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009996:	0032      	movs	r2, r6
 8009998:	001f      	movs	r7, r3
 800999a:	0028      	movs	r0, r5
 800999c:	9b01      	ldr	r3, [sp, #4]
 800999e:	6a21      	ldr	r1, [r4, #32]
 80099a0:	47b8      	blx	r7
 80099a2:	2800      	cmp	r0, #0
 80099a4:	dc06      	bgt.n	80099b4 <__sflush_r+0x104>
 80099a6:	2340      	movs	r3, #64	; 0x40
 80099a8:	2001      	movs	r0, #1
 80099aa:	89a2      	ldrh	r2, [r4, #12]
 80099ac:	4240      	negs	r0, r0
 80099ae:	4313      	orrs	r3, r2
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	e78a      	b.n	80098ca <__sflush_r+0x1a>
 80099b4:	9b01      	ldr	r3, [sp, #4]
 80099b6:	1836      	adds	r6, r6, r0
 80099b8:	1a1b      	subs	r3, r3, r0
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	e7e7      	b.n	800998e <__sflush_r+0xde>
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	dfbffffe 	.word	0xdfbffffe

080099c4 <_fflush_r>:
 80099c4:	690b      	ldr	r3, [r1, #16]
 80099c6:	b570      	push	{r4, r5, r6, lr}
 80099c8:	0005      	movs	r5, r0
 80099ca:	000c      	movs	r4, r1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d102      	bne.n	80099d6 <_fflush_r+0x12>
 80099d0:	2500      	movs	r5, #0
 80099d2:	0028      	movs	r0, r5
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d004      	beq.n	80099e4 <_fflush_r+0x20>
 80099da:	6a03      	ldr	r3, [r0, #32]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <_fflush_r+0x20>
 80099e0:	f7fd fc44 	bl	800726c <__sinit>
 80099e4:	220c      	movs	r2, #12
 80099e6:	5ea3      	ldrsh	r3, [r4, r2]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d0f1      	beq.n	80099d0 <_fflush_r+0xc>
 80099ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099ee:	07d2      	lsls	r2, r2, #31
 80099f0:	d404      	bmi.n	80099fc <_fflush_r+0x38>
 80099f2:	059b      	lsls	r3, r3, #22
 80099f4:	d402      	bmi.n	80099fc <_fflush_r+0x38>
 80099f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f8:	f7fd fd6f 	bl	80074da <__retarget_lock_acquire_recursive>
 80099fc:	0028      	movs	r0, r5
 80099fe:	0021      	movs	r1, r4
 8009a00:	f7ff ff56 	bl	80098b0 <__sflush_r>
 8009a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a06:	0005      	movs	r5, r0
 8009a08:	07db      	lsls	r3, r3, #31
 8009a0a:	d4e2      	bmi.n	80099d2 <_fflush_r+0xe>
 8009a0c:	89a3      	ldrh	r3, [r4, #12]
 8009a0e:	059b      	lsls	r3, r3, #22
 8009a10:	d4df      	bmi.n	80099d2 <_fflush_r+0xe>
 8009a12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a14:	f7fd fd62 	bl	80074dc <__retarget_lock_release_recursive>
 8009a18:	e7db      	b.n	80099d2 <_fflush_r+0xe>

08009a1a <memmove>:
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	4288      	cmp	r0, r1
 8009a1e:	d902      	bls.n	8009a26 <memmove+0xc>
 8009a20:	188b      	adds	r3, r1, r2
 8009a22:	4298      	cmp	r0, r3
 8009a24:	d303      	bcc.n	8009a2e <memmove+0x14>
 8009a26:	2300      	movs	r3, #0
 8009a28:	e007      	b.n	8009a3a <memmove+0x20>
 8009a2a:	5c8b      	ldrb	r3, [r1, r2]
 8009a2c:	5483      	strb	r3, [r0, r2]
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	d2fb      	bcs.n	8009a2a <memmove+0x10>
 8009a32:	bd10      	pop	{r4, pc}
 8009a34:	5ccc      	ldrb	r4, [r1, r3]
 8009a36:	54c4      	strb	r4, [r0, r3]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d1fa      	bne.n	8009a34 <memmove+0x1a>
 8009a3e:	e7f8      	b.n	8009a32 <memmove+0x18>

08009a40 <_sbrk_r>:
 8009a40:	2300      	movs	r3, #0
 8009a42:	b570      	push	{r4, r5, r6, lr}
 8009a44:	4d06      	ldr	r5, [pc, #24]	; (8009a60 <_sbrk_r+0x20>)
 8009a46:	0004      	movs	r4, r0
 8009a48:	0008      	movs	r0, r1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	f7f9 fad6 	bl	8002ffc <_sbrk>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d103      	bne.n	8009a5c <_sbrk_r+0x1c>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d000      	beq.n	8009a5c <_sbrk_r+0x1c>
 8009a5a:	6023      	str	r3, [r4, #0]
 8009a5c:	bd70      	pop	{r4, r5, r6, pc}
 8009a5e:	46c0      	nop			; (mov r8, r8)
 8009a60:	2000040c 	.word	0x2000040c

08009a64 <__assert_func>:
 8009a64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009a66:	0014      	movs	r4, r2
 8009a68:	001a      	movs	r2, r3
 8009a6a:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <__assert_func+0x2c>)
 8009a6c:	0005      	movs	r5, r0
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	000e      	movs	r6, r1
 8009a72:	68d8      	ldr	r0, [r3, #12]
 8009a74:	4b07      	ldr	r3, [pc, #28]	; (8009a94 <__assert_func+0x30>)
 8009a76:	2c00      	cmp	r4, #0
 8009a78:	d101      	bne.n	8009a7e <__assert_func+0x1a>
 8009a7a:	4b07      	ldr	r3, [pc, #28]	; (8009a98 <__assert_func+0x34>)
 8009a7c:	001c      	movs	r4, r3
 8009a7e:	4907      	ldr	r1, [pc, #28]	; (8009a9c <__assert_func+0x38>)
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	9402      	str	r4, [sp, #8]
 8009a84:	002b      	movs	r3, r5
 8009a86:	9600      	str	r6, [sp, #0]
 8009a88:	f000 f866 	bl	8009b58 <fiprintf>
 8009a8c:	f000 f874 	bl	8009b78 <abort>
 8009a90:	200001d4 	.word	0x200001d4
 8009a94:	0800a676 	.word	0x0800a676
 8009a98:	0800a6b1 	.word	0x0800a6b1
 8009a9c:	0800a683 	.word	0x0800a683

08009aa0 <_calloc_r>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	0c0b      	lsrs	r3, r1, #16
 8009aa4:	0c15      	lsrs	r5, r2, #16
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d11e      	bne.n	8009ae8 <_calloc_r+0x48>
 8009aaa:	2d00      	cmp	r5, #0
 8009aac:	d10c      	bne.n	8009ac8 <_calloc_r+0x28>
 8009aae:	b289      	uxth	r1, r1
 8009ab0:	b294      	uxth	r4, r2
 8009ab2:	434c      	muls	r4, r1
 8009ab4:	0021      	movs	r1, r4
 8009ab6:	f7fe ffa1 	bl	80089fc <_malloc_r>
 8009aba:	1e05      	subs	r5, r0, #0
 8009abc:	d01b      	beq.n	8009af6 <_calloc_r+0x56>
 8009abe:	0022      	movs	r2, r4
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	f7fd fc73 	bl	80073ac <memset>
 8009ac6:	e016      	b.n	8009af6 <_calloc_r+0x56>
 8009ac8:	1c2b      	adds	r3, r5, #0
 8009aca:	1c0c      	adds	r4, r1, #0
 8009acc:	b289      	uxth	r1, r1
 8009ace:	b292      	uxth	r2, r2
 8009ad0:	434a      	muls	r2, r1
 8009ad2:	b2a1      	uxth	r1, r4
 8009ad4:	b29c      	uxth	r4, r3
 8009ad6:	434c      	muls	r4, r1
 8009ad8:	0c13      	lsrs	r3, r2, #16
 8009ada:	18e4      	adds	r4, r4, r3
 8009adc:	0c23      	lsrs	r3, r4, #16
 8009ade:	d107      	bne.n	8009af0 <_calloc_r+0x50>
 8009ae0:	0424      	lsls	r4, r4, #16
 8009ae2:	b292      	uxth	r2, r2
 8009ae4:	4314      	orrs	r4, r2
 8009ae6:	e7e5      	b.n	8009ab4 <_calloc_r+0x14>
 8009ae8:	2d00      	cmp	r5, #0
 8009aea:	d101      	bne.n	8009af0 <_calloc_r+0x50>
 8009aec:	1c14      	adds	r4, r2, #0
 8009aee:	e7ed      	b.n	8009acc <_calloc_r+0x2c>
 8009af0:	230c      	movs	r3, #12
 8009af2:	2500      	movs	r5, #0
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	0028      	movs	r0, r5
 8009af8:	bd70      	pop	{r4, r5, r6, pc}

08009afa <_realloc_r>:
 8009afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009afc:	0007      	movs	r7, r0
 8009afe:	000e      	movs	r6, r1
 8009b00:	0014      	movs	r4, r2
 8009b02:	2900      	cmp	r1, #0
 8009b04:	d105      	bne.n	8009b12 <_realloc_r+0x18>
 8009b06:	0011      	movs	r1, r2
 8009b08:	f7fe ff78 	bl	80089fc <_malloc_r>
 8009b0c:	0005      	movs	r5, r0
 8009b0e:	0028      	movs	r0, r5
 8009b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d103      	bne.n	8009b1e <_realloc_r+0x24>
 8009b16:	f7fe fb9f 	bl	8008258 <_free_r>
 8009b1a:	0025      	movs	r5, r4
 8009b1c:	e7f7      	b.n	8009b0e <_realloc_r+0x14>
 8009b1e:	f000 f832 	bl	8009b86 <_malloc_usable_size_r>
 8009b22:	9001      	str	r0, [sp, #4]
 8009b24:	4284      	cmp	r4, r0
 8009b26:	d803      	bhi.n	8009b30 <_realloc_r+0x36>
 8009b28:	0035      	movs	r5, r6
 8009b2a:	0843      	lsrs	r3, r0, #1
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	d3ee      	bcc.n	8009b0e <_realloc_r+0x14>
 8009b30:	0021      	movs	r1, r4
 8009b32:	0038      	movs	r0, r7
 8009b34:	f7fe ff62 	bl	80089fc <_malloc_r>
 8009b38:	1e05      	subs	r5, r0, #0
 8009b3a:	d0e8      	beq.n	8009b0e <_realloc_r+0x14>
 8009b3c:	9b01      	ldr	r3, [sp, #4]
 8009b3e:	0022      	movs	r2, r4
 8009b40:	429c      	cmp	r4, r3
 8009b42:	d900      	bls.n	8009b46 <_realloc_r+0x4c>
 8009b44:	001a      	movs	r2, r3
 8009b46:	0031      	movs	r1, r6
 8009b48:	0028      	movs	r0, r5
 8009b4a:	f7fd fcd3 	bl	80074f4 <memcpy>
 8009b4e:	0031      	movs	r1, r6
 8009b50:	0038      	movs	r0, r7
 8009b52:	f7fe fb81 	bl	8008258 <_free_r>
 8009b56:	e7da      	b.n	8009b0e <_realloc_r+0x14>

08009b58 <fiprintf>:
 8009b58:	b40e      	push	{r1, r2, r3}
 8009b5a:	b517      	push	{r0, r1, r2, r4, lr}
 8009b5c:	4c05      	ldr	r4, [pc, #20]	; (8009b74 <fiprintf+0x1c>)
 8009b5e:	ab05      	add	r3, sp, #20
 8009b60:	cb04      	ldmia	r3!, {r2}
 8009b62:	0001      	movs	r1, r0
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	9301      	str	r3, [sp, #4]
 8009b68:	f000 f83c 	bl	8009be4 <_vfiprintf_r>
 8009b6c:	bc1e      	pop	{r1, r2, r3, r4}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	b003      	add	sp, #12
 8009b72:	4718      	bx	r3
 8009b74:	200001d4 	.word	0x200001d4

08009b78 <abort>:
 8009b78:	2006      	movs	r0, #6
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	f000 fa1e 	bl	8009fbc <raise>
 8009b80:	2001      	movs	r0, #1
 8009b82:	f7f9 f9ca 	bl	8002f1a <_exit>

08009b86 <_malloc_usable_size_r>:
 8009b86:	1f0b      	subs	r3, r1, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	1f18      	subs	r0, r3, #4
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	da01      	bge.n	8009b94 <_malloc_usable_size_r+0xe>
 8009b90:	580b      	ldr	r3, [r1, r0]
 8009b92:	18c0      	adds	r0, r0, r3
 8009b94:	4770      	bx	lr

08009b96 <__sfputc_r>:
 8009b96:	6893      	ldr	r3, [r2, #8]
 8009b98:	b510      	push	{r4, lr}
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	6093      	str	r3, [r2, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	da04      	bge.n	8009bac <__sfputc_r+0x16>
 8009ba2:	6994      	ldr	r4, [r2, #24]
 8009ba4:	42a3      	cmp	r3, r4
 8009ba6:	db07      	blt.n	8009bb8 <__sfputc_r+0x22>
 8009ba8:	290a      	cmp	r1, #10
 8009baa:	d005      	beq.n	8009bb8 <__sfputc_r+0x22>
 8009bac:	6813      	ldr	r3, [r2, #0]
 8009bae:	1c58      	adds	r0, r3, #1
 8009bb0:	6010      	str	r0, [r2, #0]
 8009bb2:	7019      	strb	r1, [r3, #0]
 8009bb4:	0008      	movs	r0, r1
 8009bb6:	bd10      	pop	{r4, pc}
 8009bb8:	f000 f930 	bl	8009e1c <__swbuf_r>
 8009bbc:	0001      	movs	r1, r0
 8009bbe:	e7f9      	b.n	8009bb4 <__sfputc_r+0x1e>

08009bc0 <__sfputs_r>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	0006      	movs	r6, r0
 8009bc4:	000f      	movs	r7, r1
 8009bc6:	0014      	movs	r4, r2
 8009bc8:	18d5      	adds	r5, r2, r3
 8009bca:	42ac      	cmp	r4, r5
 8009bcc:	d101      	bne.n	8009bd2 <__sfputs_r+0x12>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e007      	b.n	8009be2 <__sfputs_r+0x22>
 8009bd2:	7821      	ldrb	r1, [r4, #0]
 8009bd4:	003a      	movs	r2, r7
 8009bd6:	0030      	movs	r0, r6
 8009bd8:	f7ff ffdd 	bl	8009b96 <__sfputc_r>
 8009bdc:	3401      	adds	r4, #1
 8009bde:	1c43      	adds	r3, r0, #1
 8009be0:	d1f3      	bne.n	8009bca <__sfputs_r+0xa>
 8009be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009be4 <_vfiprintf_r>:
 8009be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009be6:	b0a1      	sub	sp, #132	; 0x84
 8009be8:	000f      	movs	r7, r1
 8009bea:	0015      	movs	r5, r2
 8009bec:	001e      	movs	r6, r3
 8009bee:	9003      	str	r0, [sp, #12]
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d004      	beq.n	8009bfe <_vfiprintf_r+0x1a>
 8009bf4:	6a03      	ldr	r3, [r0, #32]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <_vfiprintf_r+0x1a>
 8009bfa:	f7fd fb37 	bl	800726c <__sinit>
 8009bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c00:	07db      	lsls	r3, r3, #31
 8009c02:	d405      	bmi.n	8009c10 <_vfiprintf_r+0x2c>
 8009c04:	89bb      	ldrh	r3, [r7, #12]
 8009c06:	059b      	lsls	r3, r3, #22
 8009c08:	d402      	bmi.n	8009c10 <_vfiprintf_r+0x2c>
 8009c0a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009c0c:	f7fd fc65 	bl	80074da <__retarget_lock_acquire_recursive>
 8009c10:	89bb      	ldrh	r3, [r7, #12]
 8009c12:	071b      	lsls	r3, r3, #28
 8009c14:	d502      	bpl.n	8009c1c <_vfiprintf_r+0x38>
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d113      	bne.n	8009c44 <_vfiprintf_r+0x60>
 8009c1c:	0039      	movs	r1, r7
 8009c1e:	9803      	ldr	r0, [sp, #12]
 8009c20:	f000 f93e 	bl	8009ea0 <__swsetup_r>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d00d      	beq.n	8009c44 <_vfiprintf_r+0x60>
 8009c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c2a:	07db      	lsls	r3, r3, #31
 8009c2c:	d503      	bpl.n	8009c36 <_vfiprintf_r+0x52>
 8009c2e:	2001      	movs	r0, #1
 8009c30:	4240      	negs	r0, r0
 8009c32:	b021      	add	sp, #132	; 0x84
 8009c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c36:	89bb      	ldrh	r3, [r7, #12]
 8009c38:	059b      	lsls	r3, r3, #22
 8009c3a:	d4f8      	bmi.n	8009c2e <_vfiprintf_r+0x4a>
 8009c3c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009c3e:	f7fd fc4d 	bl	80074dc <__retarget_lock_release_recursive>
 8009c42:	e7f4      	b.n	8009c2e <_vfiprintf_r+0x4a>
 8009c44:	2300      	movs	r3, #0
 8009c46:	ac08      	add	r4, sp, #32
 8009c48:	6163      	str	r3, [r4, #20]
 8009c4a:	3320      	adds	r3, #32
 8009c4c:	7663      	strb	r3, [r4, #25]
 8009c4e:	3310      	adds	r3, #16
 8009c50:	76a3      	strb	r3, [r4, #26]
 8009c52:	9607      	str	r6, [sp, #28]
 8009c54:	002e      	movs	r6, r5
 8009c56:	7833      	ldrb	r3, [r6, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d001      	beq.n	8009c60 <_vfiprintf_r+0x7c>
 8009c5c:	2b25      	cmp	r3, #37	; 0x25
 8009c5e:	d148      	bne.n	8009cf2 <_vfiprintf_r+0x10e>
 8009c60:	1b73      	subs	r3, r6, r5
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	42ae      	cmp	r6, r5
 8009c66:	d00b      	beq.n	8009c80 <_vfiprintf_r+0x9c>
 8009c68:	002a      	movs	r2, r5
 8009c6a:	0039      	movs	r1, r7
 8009c6c:	9803      	ldr	r0, [sp, #12]
 8009c6e:	f7ff ffa7 	bl	8009bc0 <__sfputs_r>
 8009c72:	3001      	adds	r0, #1
 8009c74:	d100      	bne.n	8009c78 <_vfiprintf_r+0x94>
 8009c76:	e0af      	b.n	8009dd8 <_vfiprintf_r+0x1f4>
 8009c78:	6963      	ldr	r3, [r4, #20]
 8009c7a:	9a05      	ldr	r2, [sp, #20]
 8009c7c:	189b      	adds	r3, r3, r2
 8009c7e:	6163      	str	r3, [r4, #20]
 8009c80:	7833      	ldrb	r3, [r6, #0]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d100      	bne.n	8009c88 <_vfiprintf_r+0xa4>
 8009c86:	e0a7      	b.n	8009dd8 <_vfiprintf_r+0x1f4>
 8009c88:	2201      	movs	r2, #1
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	4252      	negs	r2, r2
 8009c8e:	6062      	str	r2, [r4, #4]
 8009c90:	a904      	add	r1, sp, #16
 8009c92:	3254      	adds	r2, #84	; 0x54
 8009c94:	1852      	adds	r2, r2, r1
 8009c96:	1c75      	adds	r5, r6, #1
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	60e3      	str	r3, [r4, #12]
 8009c9c:	60a3      	str	r3, [r4, #8]
 8009c9e:	7013      	strb	r3, [r2, #0]
 8009ca0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ca2:	4b59      	ldr	r3, [pc, #356]	; (8009e08 <_vfiprintf_r+0x224>)
 8009ca4:	2205      	movs	r2, #5
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	7829      	ldrb	r1, [r5, #0]
 8009caa:	9305      	str	r3, [sp, #20]
 8009cac:	f7fd fc17 	bl	80074de <memchr>
 8009cb0:	1c6e      	adds	r6, r5, #1
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d11f      	bne.n	8009cf6 <_vfiprintf_r+0x112>
 8009cb6:	6822      	ldr	r2, [r4, #0]
 8009cb8:	06d3      	lsls	r3, r2, #27
 8009cba:	d504      	bpl.n	8009cc6 <_vfiprintf_r+0xe2>
 8009cbc:	2353      	movs	r3, #83	; 0x53
 8009cbe:	a904      	add	r1, sp, #16
 8009cc0:	185b      	adds	r3, r3, r1
 8009cc2:	2120      	movs	r1, #32
 8009cc4:	7019      	strb	r1, [r3, #0]
 8009cc6:	0713      	lsls	r3, r2, #28
 8009cc8:	d504      	bpl.n	8009cd4 <_vfiprintf_r+0xf0>
 8009cca:	2353      	movs	r3, #83	; 0x53
 8009ccc:	a904      	add	r1, sp, #16
 8009cce:	185b      	adds	r3, r3, r1
 8009cd0:	212b      	movs	r1, #43	; 0x2b
 8009cd2:	7019      	strb	r1, [r3, #0]
 8009cd4:	782b      	ldrb	r3, [r5, #0]
 8009cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd8:	d016      	beq.n	8009d08 <_vfiprintf_r+0x124>
 8009cda:	002e      	movs	r6, r5
 8009cdc:	2100      	movs	r1, #0
 8009cde:	200a      	movs	r0, #10
 8009ce0:	68e3      	ldr	r3, [r4, #12]
 8009ce2:	7832      	ldrb	r2, [r6, #0]
 8009ce4:	1c75      	adds	r5, r6, #1
 8009ce6:	3a30      	subs	r2, #48	; 0x30
 8009ce8:	2a09      	cmp	r2, #9
 8009cea:	d94e      	bls.n	8009d8a <_vfiprintf_r+0x1a6>
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d111      	bne.n	8009d14 <_vfiprintf_r+0x130>
 8009cf0:	e017      	b.n	8009d22 <_vfiprintf_r+0x13e>
 8009cf2:	3601      	adds	r6, #1
 8009cf4:	e7af      	b.n	8009c56 <_vfiprintf_r+0x72>
 8009cf6:	9b05      	ldr	r3, [sp, #20]
 8009cf8:	6822      	ldr	r2, [r4, #0]
 8009cfa:	1ac0      	subs	r0, r0, r3
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4083      	lsls	r3, r0
 8009d00:	4313      	orrs	r3, r2
 8009d02:	0035      	movs	r5, r6
 8009d04:	6023      	str	r3, [r4, #0]
 8009d06:	e7cc      	b.n	8009ca2 <_vfiprintf_r+0xbe>
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	1d19      	adds	r1, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	9107      	str	r1, [sp, #28]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	db01      	blt.n	8009d18 <_vfiprintf_r+0x134>
 8009d14:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d16:	e004      	b.n	8009d22 <_vfiprintf_r+0x13e>
 8009d18:	425b      	negs	r3, r3
 8009d1a:	60e3      	str	r3, [r4, #12]
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	7833      	ldrb	r3, [r6, #0]
 8009d24:	2b2e      	cmp	r3, #46	; 0x2e
 8009d26:	d10a      	bne.n	8009d3e <_vfiprintf_r+0x15a>
 8009d28:	7873      	ldrb	r3, [r6, #1]
 8009d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2c:	d135      	bne.n	8009d9a <_vfiprintf_r+0x1b6>
 8009d2e:	9b07      	ldr	r3, [sp, #28]
 8009d30:	3602      	adds	r6, #2
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9207      	str	r2, [sp, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	db2b      	blt.n	8009d94 <_vfiprintf_r+0x1b0>
 8009d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d3e:	4d33      	ldr	r5, [pc, #204]	; (8009e0c <_vfiprintf_r+0x228>)
 8009d40:	2203      	movs	r2, #3
 8009d42:	0028      	movs	r0, r5
 8009d44:	7831      	ldrb	r1, [r6, #0]
 8009d46:	f7fd fbca 	bl	80074de <memchr>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d006      	beq.n	8009d5c <_vfiprintf_r+0x178>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	1b40      	subs	r0, r0, r5
 8009d52:	4083      	lsls	r3, r0
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	3601      	adds	r6, #1
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	6023      	str	r3, [r4, #0]
 8009d5c:	7831      	ldrb	r1, [r6, #0]
 8009d5e:	2206      	movs	r2, #6
 8009d60:	482b      	ldr	r0, [pc, #172]	; (8009e10 <_vfiprintf_r+0x22c>)
 8009d62:	1c75      	adds	r5, r6, #1
 8009d64:	7621      	strb	r1, [r4, #24]
 8009d66:	f7fd fbba 	bl	80074de <memchr>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d043      	beq.n	8009df6 <_vfiprintf_r+0x212>
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <_vfiprintf_r+0x230>)
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d125      	bne.n	8009dc0 <_vfiprintf_r+0x1dc>
 8009d74:	2207      	movs	r2, #7
 8009d76:	9b07      	ldr	r3, [sp, #28]
 8009d78:	3307      	adds	r3, #7
 8009d7a:	4393      	bics	r3, r2
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	9307      	str	r3, [sp, #28]
 8009d80:	6963      	ldr	r3, [r4, #20]
 8009d82:	9a04      	ldr	r2, [sp, #16]
 8009d84:	189b      	adds	r3, r3, r2
 8009d86:	6163      	str	r3, [r4, #20]
 8009d88:	e764      	b.n	8009c54 <_vfiprintf_r+0x70>
 8009d8a:	4343      	muls	r3, r0
 8009d8c:	002e      	movs	r6, r5
 8009d8e:	2101      	movs	r1, #1
 8009d90:	189b      	adds	r3, r3, r2
 8009d92:	e7a6      	b.n	8009ce2 <_vfiprintf_r+0xfe>
 8009d94:	2301      	movs	r3, #1
 8009d96:	425b      	negs	r3, r3
 8009d98:	e7d0      	b.n	8009d3c <_vfiprintf_r+0x158>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	200a      	movs	r0, #10
 8009d9e:	001a      	movs	r2, r3
 8009da0:	3601      	adds	r6, #1
 8009da2:	6063      	str	r3, [r4, #4]
 8009da4:	7831      	ldrb	r1, [r6, #0]
 8009da6:	1c75      	adds	r5, r6, #1
 8009da8:	3930      	subs	r1, #48	; 0x30
 8009daa:	2909      	cmp	r1, #9
 8009dac:	d903      	bls.n	8009db6 <_vfiprintf_r+0x1d2>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0c5      	beq.n	8009d3e <_vfiprintf_r+0x15a>
 8009db2:	9209      	str	r2, [sp, #36]	; 0x24
 8009db4:	e7c3      	b.n	8009d3e <_vfiprintf_r+0x15a>
 8009db6:	4342      	muls	r2, r0
 8009db8:	002e      	movs	r6, r5
 8009dba:	2301      	movs	r3, #1
 8009dbc:	1852      	adds	r2, r2, r1
 8009dbe:	e7f1      	b.n	8009da4 <_vfiprintf_r+0x1c0>
 8009dc0:	aa07      	add	r2, sp, #28
 8009dc2:	9200      	str	r2, [sp, #0]
 8009dc4:	0021      	movs	r1, r4
 8009dc6:	003a      	movs	r2, r7
 8009dc8:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <_vfiprintf_r+0x234>)
 8009dca:	9803      	ldr	r0, [sp, #12]
 8009dcc:	f7fc fbe0 	bl	8006590 <_printf_float>
 8009dd0:	9004      	str	r0, [sp, #16]
 8009dd2:	9b04      	ldr	r3, [sp, #16]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	d1d3      	bne.n	8009d80 <_vfiprintf_r+0x19c>
 8009dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dda:	07db      	lsls	r3, r3, #31
 8009ddc:	d405      	bmi.n	8009dea <_vfiprintf_r+0x206>
 8009dde:	89bb      	ldrh	r3, [r7, #12]
 8009de0:	059b      	lsls	r3, r3, #22
 8009de2:	d402      	bmi.n	8009dea <_vfiprintf_r+0x206>
 8009de4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009de6:	f7fd fb79 	bl	80074dc <__retarget_lock_release_recursive>
 8009dea:	89bb      	ldrh	r3, [r7, #12]
 8009dec:	065b      	lsls	r3, r3, #25
 8009dee:	d500      	bpl.n	8009df2 <_vfiprintf_r+0x20e>
 8009df0:	e71d      	b.n	8009c2e <_vfiprintf_r+0x4a>
 8009df2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009df4:	e71d      	b.n	8009c32 <_vfiprintf_r+0x4e>
 8009df6:	aa07      	add	r2, sp, #28
 8009df8:	9200      	str	r2, [sp, #0]
 8009dfa:	0021      	movs	r1, r4
 8009dfc:	003a      	movs	r2, r7
 8009dfe:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <_vfiprintf_r+0x234>)
 8009e00:	9803      	ldr	r0, [sp, #12]
 8009e02:	f7fc fe8b 	bl	8006b1c <_printf_i>
 8009e06:	e7e3      	b.n	8009dd0 <_vfiprintf_r+0x1ec>
 8009e08:	0800a665 	.word	0x0800a665
 8009e0c:	0800a66b 	.word	0x0800a66b
 8009e10:	0800a66f 	.word	0x0800a66f
 8009e14:	08006591 	.word	0x08006591
 8009e18:	08009bc1 	.word	0x08009bc1

08009e1c <__swbuf_r>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	0006      	movs	r6, r0
 8009e20:	000d      	movs	r5, r1
 8009e22:	0014      	movs	r4, r2
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d004      	beq.n	8009e32 <__swbuf_r+0x16>
 8009e28:	6a03      	ldr	r3, [r0, #32]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <__swbuf_r+0x16>
 8009e2e:	f7fd fa1d 	bl	800726c <__sinit>
 8009e32:	69a3      	ldr	r3, [r4, #24]
 8009e34:	60a3      	str	r3, [r4, #8]
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	071b      	lsls	r3, r3, #28
 8009e3a:	d528      	bpl.n	8009e8e <__swbuf_r+0x72>
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d025      	beq.n	8009e8e <__swbuf_r+0x72>
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	b2ef      	uxtb	r7, r5
 8009e48:	1ac0      	subs	r0, r0, r3
 8009e4a:	6963      	ldr	r3, [r4, #20]
 8009e4c:	b2ed      	uxtb	r5, r5
 8009e4e:	4283      	cmp	r3, r0
 8009e50:	dc05      	bgt.n	8009e5e <__swbuf_r+0x42>
 8009e52:	0021      	movs	r1, r4
 8009e54:	0030      	movs	r0, r6
 8009e56:	f7ff fdb5 	bl	80099c4 <_fflush_r>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d11d      	bne.n	8009e9a <__swbuf_r+0x7e>
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	3001      	adds	r0, #1
 8009e62:	3b01      	subs	r3, #1
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	6022      	str	r2, [r4, #0]
 8009e6c:	701f      	strb	r7, [r3, #0]
 8009e6e:	6963      	ldr	r3, [r4, #20]
 8009e70:	4283      	cmp	r3, r0
 8009e72:	d004      	beq.n	8009e7e <__swbuf_r+0x62>
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	07db      	lsls	r3, r3, #31
 8009e78:	d507      	bpl.n	8009e8a <__swbuf_r+0x6e>
 8009e7a:	2d0a      	cmp	r5, #10
 8009e7c:	d105      	bne.n	8009e8a <__swbuf_r+0x6e>
 8009e7e:	0021      	movs	r1, r4
 8009e80:	0030      	movs	r0, r6
 8009e82:	f7ff fd9f 	bl	80099c4 <_fflush_r>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	d107      	bne.n	8009e9a <__swbuf_r+0x7e>
 8009e8a:	0028      	movs	r0, r5
 8009e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e8e:	0021      	movs	r1, r4
 8009e90:	0030      	movs	r0, r6
 8009e92:	f000 f805 	bl	8009ea0 <__swsetup_r>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	d0d3      	beq.n	8009e42 <__swbuf_r+0x26>
 8009e9a:	2501      	movs	r5, #1
 8009e9c:	426d      	negs	r5, r5
 8009e9e:	e7f4      	b.n	8009e8a <__swbuf_r+0x6e>

08009ea0 <__swsetup_r>:
 8009ea0:	4b30      	ldr	r3, [pc, #192]	; (8009f64 <__swsetup_r+0xc4>)
 8009ea2:	b570      	push	{r4, r5, r6, lr}
 8009ea4:	0005      	movs	r5, r0
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	000c      	movs	r4, r1
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d004      	beq.n	8009eb8 <__swsetup_r+0x18>
 8009eae:	6a03      	ldr	r3, [r0, #32]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <__swsetup_r+0x18>
 8009eb4:	f7fd f9da 	bl	800726c <__sinit>
 8009eb8:	230c      	movs	r3, #12
 8009eba:	5ee2      	ldrsh	r2, [r4, r3]
 8009ebc:	b293      	uxth	r3, r2
 8009ebe:	0711      	lsls	r1, r2, #28
 8009ec0:	d423      	bmi.n	8009f0a <__swsetup_r+0x6a>
 8009ec2:	06d9      	lsls	r1, r3, #27
 8009ec4:	d407      	bmi.n	8009ed6 <__swsetup_r+0x36>
 8009ec6:	2309      	movs	r3, #9
 8009ec8:	2001      	movs	r0, #1
 8009eca:	602b      	str	r3, [r5, #0]
 8009ecc:	3337      	adds	r3, #55	; 0x37
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	4240      	negs	r0, r0
 8009ed4:	bd70      	pop	{r4, r5, r6, pc}
 8009ed6:	075b      	lsls	r3, r3, #29
 8009ed8:	d513      	bpl.n	8009f02 <__swsetup_r+0x62>
 8009eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009edc:	2900      	cmp	r1, #0
 8009ede:	d008      	beq.n	8009ef2 <__swsetup_r+0x52>
 8009ee0:	0023      	movs	r3, r4
 8009ee2:	3344      	adds	r3, #68	; 0x44
 8009ee4:	4299      	cmp	r1, r3
 8009ee6:	d002      	beq.n	8009eee <__swsetup_r+0x4e>
 8009ee8:	0028      	movs	r0, r5
 8009eea:	f7fe f9b5 	bl	8008258 <_free_r>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	6363      	str	r3, [r4, #52]	; 0x34
 8009ef2:	2224      	movs	r2, #36	; 0x24
 8009ef4:	89a3      	ldrh	r3, [r4, #12]
 8009ef6:	4393      	bics	r3, r2
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	2300      	movs	r3, #0
 8009efc:	6063      	str	r3, [r4, #4]
 8009efe:	6923      	ldr	r3, [r4, #16]
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	2308      	movs	r3, #8
 8009f04:	89a2      	ldrh	r2, [r4, #12]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	81a3      	strh	r3, [r4, #12]
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <__swsetup_r+0x88>
 8009f10:	21a0      	movs	r1, #160	; 0xa0
 8009f12:	2280      	movs	r2, #128	; 0x80
 8009f14:	89a3      	ldrh	r3, [r4, #12]
 8009f16:	0089      	lsls	r1, r1, #2
 8009f18:	0092      	lsls	r2, r2, #2
 8009f1a:	400b      	ands	r3, r1
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d003      	beq.n	8009f28 <__swsetup_r+0x88>
 8009f20:	0021      	movs	r1, r4
 8009f22:	0028      	movs	r0, r5
 8009f24:	f000 f892 	bl	800a04c <__smakebuf_r>
 8009f28:	220c      	movs	r2, #12
 8009f2a:	5ea3      	ldrsh	r3, [r4, r2]
 8009f2c:	2001      	movs	r0, #1
 8009f2e:	001a      	movs	r2, r3
 8009f30:	b299      	uxth	r1, r3
 8009f32:	4002      	ands	r2, r0
 8009f34:	4203      	tst	r3, r0
 8009f36:	d00f      	beq.n	8009f58 <__swsetup_r+0xb8>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	60a2      	str	r2, [r4, #8]
 8009f3c:	6962      	ldr	r2, [r4, #20]
 8009f3e:	4252      	negs	r2, r2
 8009f40:	61a2      	str	r2, [r4, #24]
 8009f42:	2000      	movs	r0, #0
 8009f44:	6922      	ldr	r2, [r4, #16]
 8009f46:	4282      	cmp	r2, r0
 8009f48:	d1c4      	bne.n	8009ed4 <__swsetup_r+0x34>
 8009f4a:	0609      	lsls	r1, r1, #24
 8009f4c:	d5c2      	bpl.n	8009ed4 <__swsetup_r+0x34>
 8009f4e:	2240      	movs	r2, #64	; 0x40
 8009f50:	4313      	orrs	r3, r2
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	3801      	subs	r0, #1
 8009f56:	e7bd      	b.n	8009ed4 <__swsetup_r+0x34>
 8009f58:	0788      	lsls	r0, r1, #30
 8009f5a:	d400      	bmi.n	8009f5e <__swsetup_r+0xbe>
 8009f5c:	6962      	ldr	r2, [r4, #20]
 8009f5e:	60a2      	str	r2, [r4, #8]
 8009f60:	e7ef      	b.n	8009f42 <__swsetup_r+0xa2>
 8009f62:	46c0      	nop			; (mov r8, r8)
 8009f64:	200001d4 	.word	0x200001d4

08009f68 <_raise_r>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	0004      	movs	r4, r0
 8009f6c:	000d      	movs	r5, r1
 8009f6e:	291f      	cmp	r1, #31
 8009f70:	d904      	bls.n	8009f7c <_raise_r+0x14>
 8009f72:	2316      	movs	r3, #22
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	2001      	movs	r0, #1
 8009f78:	4240      	negs	r0, r0
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d004      	beq.n	8009f8c <_raise_r+0x24>
 8009f82:	008a      	lsls	r2, r1, #2
 8009f84:	189b      	adds	r3, r3, r2
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	2a00      	cmp	r2, #0
 8009f8a:	d108      	bne.n	8009f9e <_raise_r+0x36>
 8009f8c:	0020      	movs	r0, r4
 8009f8e:	f000 f831 	bl	8009ff4 <_getpid_r>
 8009f92:	002a      	movs	r2, r5
 8009f94:	0001      	movs	r1, r0
 8009f96:	0020      	movs	r0, r4
 8009f98:	f000 f81a 	bl	8009fd0 <_kill_r>
 8009f9c:	e7ed      	b.n	8009f7a <_raise_r+0x12>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	2a01      	cmp	r2, #1
 8009fa2:	d0ea      	beq.n	8009f7a <_raise_r+0x12>
 8009fa4:	1c51      	adds	r1, r2, #1
 8009fa6:	d103      	bne.n	8009fb0 <_raise_r+0x48>
 8009fa8:	2316      	movs	r3, #22
 8009faa:	3001      	adds	r0, #1
 8009fac:	6023      	str	r3, [r4, #0]
 8009fae:	e7e4      	b.n	8009f7a <_raise_r+0x12>
 8009fb0:	2400      	movs	r4, #0
 8009fb2:	0028      	movs	r0, r5
 8009fb4:	601c      	str	r4, [r3, #0]
 8009fb6:	4790      	blx	r2
 8009fb8:	0020      	movs	r0, r4
 8009fba:	e7de      	b.n	8009f7a <_raise_r+0x12>

08009fbc <raise>:
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	4b03      	ldr	r3, [pc, #12]	; (8009fcc <raise+0x10>)
 8009fc0:	0001      	movs	r1, r0
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	f7ff ffd0 	bl	8009f68 <_raise_r>
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	46c0      	nop			; (mov r8, r8)
 8009fcc:	200001d4 	.word	0x200001d4

08009fd0 <_kill_r>:
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	b570      	push	{r4, r5, r6, lr}
 8009fd4:	4d06      	ldr	r5, [pc, #24]	; (8009ff0 <_kill_r+0x20>)
 8009fd6:	0004      	movs	r4, r0
 8009fd8:	0008      	movs	r0, r1
 8009fda:	0011      	movs	r1, r2
 8009fdc:	602b      	str	r3, [r5, #0]
 8009fde:	f7f8 ff8c 	bl	8002efa <_kill>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d103      	bne.n	8009fee <_kill_r+0x1e>
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d000      	beq.n	8009fee <_kill_r+0x1e>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
 8009ff0:	2000040c 	.word	0x2000040c

08009ff4 <_getpid_r>:
 8009ff4:	b510      	push	{r4, lr}
 8009ff6:	f7f8 ff7a 	bl	8002eee <_getpid>
 8009ffa:	bd10      	pop	{r4, pc}

08009ffc <__swhatbuf_r>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	000e      	movs	r6, r1
 800a000:	001d      	movs	r5, r3
 800a002:	230e      	movs	r3, #14
 800a004:	5ec9      	ldrsh	r1, [r1, r3]
 800a006:	0014      	movs	r4, r2
 800a008:	b096      	sub	sp, #88	; 0x58
 800a00a:	2900      	cmp	r1, #0
 800a00c:	da0c      	bge.n	800a028 <__swhatbuf_r+0x2c>
 800a00e:	89b2      	ldrh	r2, [r6, #12]
 800a010:	2380      	movs	r3, #128	; 0x80
 800a012:	0011      	movs	r1, r2
 800a014:	4019      	ands	r1, r3
 800a016:	421a      	tst	r2, r3
 800a018:	d013      	beq.n	800a042 <__swhatbuf_r+0x46>
 800a01a:	2100      	movs	r1, #0
 800a01c:	3b40      	subs	r3, #64	; 0x40
 800a01e:	2000      	movs	r0, #0
 800a020:	6029      	str	r1, [r5, #0]
 800a022:	6023      	str	r3, [r4, #0]
 800a024:	b016      	add	sp, #88	; 0x58
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	466a      	mov	r2, sp
 800a02a:	f000 f84d 	bl	800a0c8 <_fstat_r>
 800a02e:	2800      	cmp	r0, #0
 800a030:	dbed      	blt.n	800a00e <__swhatbuf_r+0x12>
 800a032:	23f0      	movs	r3, #240	; 0xf0
 800a034:	9901      	ldr	r1, [sp, #4]
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	4019      	ands	r1, r3
 800a03a:	4b03      	ldr	r3, [pc, #12]	; (800a048 <__swhatbuf_r+0x4c>)
 800a03c:	18c9      	adds	r1, r1, r3
 800a03e:	424b      	negs	r3, r1
 800a040:	4159      	adcs	r1, r3
 800a042:	2380      	movs	r3, #128	; 0x80
 800a044:	00db      	lsls	r3, r3, #3
 800a046:	e7ea      	b.n	800a01e <__swhatbuf_r+0x22>
 800a048:	ffffe000 	.word	0xffffe000

0800a04c <__smakebuf_r>:
 800a04c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a04e:	2602      	movs	r6, #2
 800a050:	898b      	ldrh	r3, [r1, #12]
 800a052:	0005      	movs	r5, r0
 800a054:	000c      	movs	r4, r1
 800a056:	4233      	tst	r3, r6
 800a058:	d006      	beq.n	800a068 <__smakebuf_r+0x1c>
 800a05a:	0023      	movs	r3, r4
 800a05c:	3347      	adds	r3, #71	; 0x47
 800a05e:	6023      	str	r3, [r4, #0]
 800a060:	6123      	str	r3, [r4, #16]
 800a062:	2301      	movs	r3, #1
 800a064:	6163      	str	r3, [r4, #20]
 800a066:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a068:	466a      	mov	r2, sp
 800a06a:	ab01      	add	r3, sp, #4
 800a06c:	f7ff ffc6 	bl	8009ffc <__swhatbuf_r>
 800a070:	9900      	ldr	r1, [sp, #0]
 800a072:	0007      	movs	r7, r0
 800a074:	0028      	movs	r0, r5
 800a076:	f7fe fcc1 	bl	80089fc <_malloc_r>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d108      	bne.n	800a090 <__smakebuf_r+0x44>
 800a07e:	220c      	movs	r2, #12
 800a080:	5ea3      	ldrsh	r3, [r4, r2]
 800a082:	059a      	lsls	r2, r3, #22
 800a084:	d4ef      	bmi.n	800a066 <__smakebuf_r+0x1a>
 800a086:	2203      	movs	r2, #3
 800a088:	4393      	bics	r3, r2
 800a08a:	431e      	orrs	r6, r3
 800a08c:	81a6      	strh	r6, [r4, #12]
 800a08e:	e7e4      	b.n	800a05a <__smakebuf_r+0xe>
 800a090:	2380      	movs	r3, #128	; 0x80
 800a092:	89a2      	ldrh	r2, [r4, #12]
 800a094:	6020      	str	r0, [r4, #0]
 800a096:	4313      	orrs	r3, r2
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	6120      	str	r0, [r4, #16]
 800a09e:	6163      	str	r3, [r4, #20]
 800a0a0:	9b01      	ldr	r3, [sp, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00c      	beq.n	800a0c0 <__smakebuf_r+0x74>
 800a0a6:	0028      	movs	r0, r5
 800a0a8:	230e      	movs	r3, #14
 800a0aa:	5ee1      	ldrsh	r1, [r4, r3]
 800a0ac:	f000 f81e 	bl	800a0ec <_isatty_r>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d005      	beq.n	800a0c0 <__smakebuf_r+0x74>
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	89a2      	ldrh	r2, [r4, #12]
 800a0b8:	439a      	bics	r2, r3
 800a0ba:	3b02      	subs	r3, #2
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	433b      	orrs	r3, r7
 800a0c4:	81a3      	strh	r3, [r4, #12]
 800a0c6:	e7ce      	b.n	800a066 <__smakebuf_r+0x1a>

0800a0c8 <_fstat_r>:
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	b570      	push	{r4, r5, r6, lr}
 800a0cc:	4d06      	ldr	r5, [pc, #24]	; (800a0e8 <_fstat_r+0x20>)
 800a0ce:	0004      	movs	r4, r0
 800a0d0:	0008      	movs	r0, r1
 800a0d2:	0011      	movs	r1, r2
 800a0d4:	602b      	str	r3, [r5, #0]
 800a0d6:	f7f8 ff6f 	bl	8002fb8 <_fstat>
 800a0da:	1c43      	adds	r3, r0, #1
 800a0dc:	d103      	bne.n	800a0e6 <_fstat_r+0x1e>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d000      	beq.n	800a0e6 <_fstat_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	2000040c 	.word	0x2000040c

0800a0ec <_isatty_r>:
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	b570      	push	{r4, r5, r6, lr}
 800a0f0:	4d06      	ldr	r5, [pc, #24]	; (800a10c <_isatty_r+0x20>)
 800a0f2:	0004      	movs	r4, r0
 800a0f4:	0008      	movs	r0, r1
 800a0f6:	602b      	str	r3, [r5, #0]
 800a0f8:	f7f8 ff6c 	bl	8002fd4 <_isatty>
 800a0fc:	1c43      	adds	r3, r0, #1
 800a0fe:	d103      	bne.n	800a108 <_isatty_r+0x1c>
 800a100:	682b      	ldr	r3, [r5, #0]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d000      	beq.n	800a108 <_isatty_r+0x1c>
 800a106:	6023      	str	r3, [r4, #0]
 800a108:	bd70      	pop	{r4, r5, r6, pc}
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	2000040c 	.word	0x2000040c

0800a110 <_init>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr

0800a11c <_fini>:
 800a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a11e:	46c0      	nop			; (mov r8, r8)
 800a120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a122:	bc08      	pop	{r3}
 800a124:	469e      	mov	lr, r3
 800a126:	4770      	bx	lr
