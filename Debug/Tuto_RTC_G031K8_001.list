
Tuto_RTC_G031K8_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1fc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800a2b8  0800a2b8  0001a2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a86c  0800a86c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a86c  0800a86c  0001a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a874  0800a874  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a878  0800a878  0001a878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d8  0800aa54  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800aa54  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dac8  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002443  00000000  00000000  0002dd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00030150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f4  00000000  00000000  00030d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017fc6  00000000  00000000  000315fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f94b  00000000  00000000  000495c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000908a2  00000000  00000000  00058f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d24  00000000  00000000  000e97b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000ed4d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d8 	.word	0x200001d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a2a0 	.word	0x0800a2a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001dc 	.word	0x200001dc
 8000100:	0800a2a0 	.word	0x0800a2a0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f885 	bl	8001548 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffd5 	bl	80013f8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f877 	bl	8001548 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f86d 	bl	8001548 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fffd 	bl	800147c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fff3 	bl	800147c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f876 	bl	80005c4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffcf 	bl	8000490 <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 feeb 	bl	80022d4 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 fb44 	bl	8001b94 <__aeabi_dsub>
 800050c:	f001 fee2 	bl	80022d4 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__aeabi_d2lz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0005      	movs	r5, r0
 8000524:	000c      	movs	r4, r1
 8000526:	2200      	movs	r2, #0
 8000528:	2300      	movs	r3, #0
 800052a:	0028      	movs	r0, r5
 800052c:	0021      	movs	r1, r4
 800052e:	f7ff ff91 	bl	8000454 <__aeabi_dcmplt>
 8000532:	2800      	cmp	r0, #0
 8000534:	d108      	bne.n	8000548 <__aeabi_d2lz+0x28>
 8000536:	0028      	movs	r0, r5
 8000538:	0021      	movs	r1, r4
 800053a:	f000 f80f 	bl	800055c <__aeabi_d2ulz>
 800053e:	0002      	movs	r2, r0
 8000540:	000b      	movs	r3, r1
 8000542:	0010      	movs	r0, r2
 8000544:	0019      	movs	r1, r3
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	2380      	movs	r3, #128	; 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	18e1      	adds	r1, r4, r3
 800054e:	0028      	movs	r0, r5
 8000550:	f000 f804 	bl	800055c <__aeabi_d2ulz>
 8000554:	2300      	movs	r3, #0
 8000556:	4242      	negs	r2, r0
 8000558:	418b      	sbcs	r3, r1
 800055a:	e7f2      	b.n	8000542 <__aeabi_d2lz+0x22>

0800055c <__aeabi_d2ulz>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	2200      	movs	r2, #0
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <__aeabi_d2ulz+0x34>)
 8000562:	000d      	movs	r5, r1
 8000564:	0004      	movs	r4, r0
 8000566:	f001 f853 	bl	8001610 <__aeabi_dmul>
 800056a:	f7ff ffbb 	bl	80004e4 <__aeabi_d2uiz>
 800056e:	0006      	movs	r6, r0
 8000570:	f001 ff16 	bl	80023a0 <__aeabi_ui2d>
 8000574:	2200      	movs	r2, #0
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <__aeabi_d2ulz+0x38>)
 8000578:	f001 f84a 	bl	8001610 <__aeabi_dmul>
 800057c:	0002      	movs	r2, r0
 800057e:	000b      	movs	r3, r1
 8000580:	0020      	movs	r0, r4
 8000582:	0029      	movs	r1, r5
 8000584:	f001 fb06 	bl	8001b94 <__aeabi_dsub>
 8000588:	f7ff ffac 	bl	80004e4 <__aeabi_d2uiz>
 800058c:	0031      	movs	r1, r6
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	3df00000 	.word	0x3df00000
 8000594:	41f00000 	.word	0x41f00000

08000598 <__aeabi_l2d>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	0006      	movs	r6, r0
 800059c:	0008      	movs	r0, r1
 800059e:	f001 fecf 	bl	8002340 <__aeabi_i2d>
 80005a2:	2200      	movs	r2, #0
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <__aeabi_l2d+0x28>)
 80005a6:	f001 f833 	bl	8001610 <__aeabi_dmul>
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	0030      	movs	r0, r6
 80005b0:	f001 fef6 	bl	80023a0 <__aeabi_ui2d>
 80005b4:	002b      	movs	r3, r5
 80005b6:	0022      	movs	r2, r4
 80005b8:	f000 f8d0 	bl	800075c <__aeabi_dadd>
 80005bc:	bd70      	pop	{r4, r5, r6, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	41f00000 	.word	0x41f00000

080005c4 <__udivmoddi4>:
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	4657      	mov	r7, sl
 80005c8:	464e      	mov	r6, r9
 80005ca:	4645      	mov	r5, r8
 80005cc:	46de      	mov	lr, fp
 80005ce:	b5e0      	push	{r5, r6, r7, lr}
 80005d0:	0004      	movs	r4, r0
 80005d2:	000d      	movs	r5, r1
 80005d4:	4692      	mov	sl, r2
 80005d6:	4699      	mov	r9, r3
 80005d8:	b083      	sub	sp, #12
 80005da:	428b      	cmp	r3, r1
 80005dc:	d830      	bhi.n	8000640 <__udivmoddi4+0x7c>
 80005de:	d02d      	beq.n	800063c <__udivmoddi4+0x78>
 80005e0:	4649      	mov	r1, r9
 80005e2:	4650      	mov	r0, sl
 80005e4:	f001 ffa6 	bl	8002534 <__clzdi2>
 80005e8:	0029      	movs	r1, r5
 80005ea:	0006      	movs	r6, r0
 80005ec:	0020      	movs	r0, r4
 80005ee:	f001 ffa1 	bl	8002534 <__clzdi2>
 80005f2:	1a33      	subs	r3, r6, r0
 80005f4:	4698      	mov	r8, r3
 80005f6:	3b20      	subs	r3, #32
 80005f8:	d434      	bmi.n	8000664 <__udivmoddi4+0xa0>
 80005fa:	469b      	mov	fp, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	465a      	mov	r2, fp
 8000600:	4093      	lsls	r3, r2
 8000602:	4642      	mov	r2, r8
 8000604:	001f      	movs	r7, r3
 8000606:	4653      	mov	r3, sl
 8000608:	4093      	lsls	r3, r2
 800060a:	001e      	movs	r6, r3
 800060c:	42af      	cmp	r7, r5
 800060e:	d83b      	bhi.n	8000688 <__udivmoddi4+0xc4>
 8000610:	42af      	cmp	r7, r5
 8000612:	d100      	bne.n	8000616 <__udivmoddi4+0x52>
 8000614:	e079      	b.n	800070a <__udivmoddi4+0x146>
 8000616:	465b      	mov	r3, fp
 8000618:	1ba4      	subs	r4, r4, r6
 800061a:	41bd      	sbcs	r5, r7
 800061c:	2b00      	cmp	r3, #0
 800061e:	da00      	bge.n	8000622 <__udivmoddi4+0x5e>
 8000620:	e076      	b.n	8000710 <__udivmoddi4+0x14c>
 8000622:	2200      	movs	r2, #0
 8000624:	2300      	movs	r3, #0
 8000626:	9200      	str	r2, [sp, #0]
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	465a      	mov	r2, fp
 800062e:	4093      	lsls	r3, r2
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2301      	movs	r3, #1
 8000634:	4642      	mov	r2, r8
 8000636:	4093      	lsls	r3, r2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	e029      	b.n	8000690 <__udivmoddi4+0xcc>
 800063c:	4282      	cmp	r2, r0
 800063e:	d9cf      	bls.n	80005e0 <__udivmoddi4+0x1c>
 8000640:	2200      	movs	r2, #0
 8000642:	2300      	movs	r3, #0
 8000644:	9200      	str	r2, [sp, #0]
 8000646:	9301      	str	r3, [sp, #4]
 8000648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <__udivmoddi4+0x8e>
 800064e:	601c      	str	r4, [r3, #0]
 8000650:	605d      	str	r5, [r3, #4]
 8000652:	9800      	ldr	r0, [sp, #0]
 8000654:	9901      	ldr	r1, [sp, #4]
 8000656:	b003      	add	sp, #12
 8000658:	bcf0      	pop	{r4, r5, r6, r7}
 800065a:	46bb      	mov	fp, r7
 800065c:	46b2      	mov	sl, r6
 800065e:	46a9      	mov	r9, r5
 8000660:	46a0      	mov	r8, r4
 8000662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000664:	4642      	mov	r2, r8
 8000666:	469b      	mov	fp, r3
 8000668:	2320      	movs	r3, #32
 800066a:	1a9b      	subs	r3, r3, r2
 800066c:	4652      	mov	r2, sl
 800066e:	40da      	lsrs	r2, r3
 8000670:	4641      	mov	r1, r8
 8000672:	0013      	movs	r3, r2
 8000674:	464a      	mov	r2, r9
 8000676:	408a      	lsls	r2, r1
 8000678:	0017      	movs	r7, r2
 800067a:	4642      	mov	r2, r8
 800067c:	431f      	orrs	r7, r3
 800067e:	4653      	mov	r3, sl
 8000680:	4093      	lsls	r3, r2
 8000682:	001e      	movs	r6, r3
 8000684:	42af      	cmp	r7, r5
 8000686:	d9c3      	bls.n	8000610 <__udivmoddi4+0x4c>
 8000688:	2200      	movs	r2, #0
 800068a:	2300      	movs	r3, #0
 800068c:	9200      	str	r2, [sp, #0]
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4643      	mov	r3, r8
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0d8      	beq.n	8000648 <__udivmoddi4+0x84>
 8000696:	07fb      	lsls	r3, r7, #31
 8000698:	0872      	lsrs	r2, r6, #1
 800069a:	431a      	orrs	r2, r3
 800069c:	4646      	mov	r6, r8
 800069e:	087b      	lsrs	r3, r7, #1
 80006a0:	e00e      	b.n	80006c0 <__udivmoddi4+0xfc>
 80006a2:	42ab      	cmp	r3, r5
 80006a4:	d101      	bne.n	80006aa <__udivmoddi4+0xe6>
 80006a6:	42a2      	cmp	r2, r4
 80006a8:	d80c      	bhi.n	80006c4 <__udivmoddi4+0x100>
 80006aa:	1aa4      	subs	r4, r4, r2
 80006ac:	419d      	sbcs	r5, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	1924      	adds	r4, r4, r4
 80006b2:	416d      	adcs	r5, r5
 80006b4:	2100      	movs	r1, #0
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1824      	adds	r4, r4, r0
 80006ba:	414d      	adcs	r5, r1
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d006      	beq.n	80006ce <__udivmoddi4+0x10a>
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d9ee      	bls.n	80006a2 <__udivmoddi4+0xde>
 80006c4:	3e01      	subs	r6, #1
 80006c6:	1924      	adds	r4, r4, r4
 80006c8:	416d      	adcs	r5, r5
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d1f8      	bne.n	80006c0 <__udivmoddi4+0xfc>
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	465b      	mov	r3, fp
 80006d4:	1900      	adds	r0, r0, r4
 80006d6:	4169      	adcs	r1, r5
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db24      	blt.n	8000726 <__udivmoddi4+0x162>
 80006dc:	002b      	movs	r3, r5
 80006de:	465a      	mov	r2, fp
 80006e0:	4644      	mov	r4, r8
 80006e2:	40d3      	lsrs	r3, r2
 80006e4:	002a      	movs	r2, r5
 80006e6:	40e2      	lsrs	r2, r4
 80006e8:	001c      	movs	r4, r3
 80006ea:	465b      	mov	r3, fp
 80006ec:	0015      	movs	r5, r2
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db2a      	blt.n	8000748 <__udivmoddi4+0x184>
 80006f2:	0026      	movs	r6, r4
 80006f4:	409e      	lsls	r6, r3
 80006f6:	0033      	movs	r3, r6
 80006f8:	0026      	movs	r6, r4
 80006fa:	4647      	mov	r7, r8
 80006fc:	40be      	lsls	r6, r7
 80006fe:	0032      	movs	r2, r6
 8000700:	1a80      	subs	r0, r0, r2
 8000702:	4199      	sbcs	r1, r3
 8000704:	9000      	str	r0, [sp, #0]
 8000706:	9101      	str	r1, [sp, #4]
 8000708:	e79e      	b.n	8000648 <__udivmoddi4+0x84>
 800070a:	42a3      	cmp	r3, r4
 800070c:	d8bc      	bhi.n	8000688 <__udivmoddi4+0xc4>
 800070e:	e782      	b.n	8000616 <__udivmoddi4+0x52>
 8000710:	4642      	mov	r2, r8
 8000712:	2320      	movs	r3, #32
 8000714:	2100      	movs	r1, #0
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	9100      	str	r1, [sp, #0]
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	40da      	lsrs	r2, r3
 8000722:	9201      	str	r2, [sp, #4]
 8000724:	e785      	b.n	8000632 <__udivmoddi4+0x6e>
 8000726:	4642      	mov	r2, r8
 8000728:	2320      	movs	r3, #32
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	4646      	mov	r6, r8
 8000730:	409a      	lsls	r2, r3
 8000732:	0023      	movs	r3, r4
 8000734:	40f3      	lsrs	r3, r6
 8000736:	4644      	mov	r4, r8
 8000738:	4313      	orrs	r3, r2
 800073a:	002a      	movs	r2, r5
 800073c:	40e2      	lsrs	r2, r4
 800073e:	001c      	movs	r4, r3
 8000740:	465b      	mov	r3, fp
 8000742:	0015      	movs	r5, r2
 8000744:	2b00      	cmp	r3, #0
 8000746:	dad4      	bge.n	80006f2 <__udivmoddi4+0x12e>
 8000748:	4642      	mov	r2, r8
 800074a:	002f      	movs	r7, r5
 800074c:	2320      	movs	r3, #32
 800074e:	0026      	movs	r6, r4
 8000750:	4097      	lsls	r7, r2
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	40de      	lsrs	r6, r3
 8000756:	003b      	movs	r3, r7
 8000758:	4333      	orrs	r3, r6
 800075a:	e7cd      	b.n	80006f8 <__udivmoddi4+0x134>

0800075c <__aeabi_dadd>:
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	464f      	mov	r7, r9
 8000760:	4646      	mov	r6, r8
 8000762:	46d6      	mov	lr, sl
 8000764:	0004      	movs	r4, r0
 8000766:	b5c0      	push	{r6, r7, lr}
 8000768:	001f      	movs	r7, r3
 800076a:	030b      	lsls	r3, r1, #12
 800076c:	0010      	movs	r0, r2
 800076e:	004e      	lsls	r6, r1, #1
 8000770:	0a5b      	lsrs	r3, r3, #9
 8000772:	0fcd      	lsrs	r5, r1, #31
 8000774:	0f61      	lsrs	r1, r4, #29
 8000776:	007a      	lsls	r2, r7, #1
 8000778:	4319      	orrs	r1, r3
 800077a:	00e3      	lsls	r3, r4, #3
 800077c:	033c      	lsls	r4, r7, #12
 800077e:	0fff      	lsrs	r7, r7, #31
 8000780:	46bc      	mov	ip, r7
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0f47      	lsrs	r7, r0, #29
 8000786:	4327      	orrs	r7, r4
 8000788:	0d76      	lsrs	r6, r6, #21
 800078a:	0d52      	lsrs	r2, r2, #21
 800078c:	00c0      	lsls	r0, r0, #3
 800078e:	46b9      	mov	r9, r7
 8000790:	4680      	mov	r8, r0
 8000792:	1ab7      	subs	r7, r6, r2
 8000794:	4565      	cmp	r5, ip
 8000796:	d100      	bne.n	800079a <__aeabi_dadd+0x3e>
 8000798:	e09b      	b.n	80008d2 <__aeabi_dadd+0x176>
 800079a:	2f00      	cmp	r7, #0
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dadd+0x44>
 800079e:	e084      	b.n	80008aa <__aeabi_dadd+0x14e>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0x4a>
 80007a4:	e0be      	b.n	8000924 <__aeabi_dadd+0x1c8>
 80007a6:	4ac8      	ldr	r2, [pc, #800]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80007a8:	4296      	cmp	r6, r2
 80007aa:	d100      	bne.n	80007ae <__aeabi_dadd+0x52>
 80007ac:	e124      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	464c      	mov	r4, r9
 80007b2:	0412      	lsls	r2, r2, #16
 80007b4:	4314      	orrs	r4, r2
 80007b6:	46a1      	mov	r9, r4
 80007b8:	2f38      	cmp	r7, #56	; 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x62>
 80007bc:	e167      	b.n	8000a8e <__aeabi_dadd+0x332>
 80007be:	2f1f      	cmp	r7, #31
 80007c0:	dd00      	ble.n	80007c4 <__aeabi_dadd+0x68>
 80007c2:	e1d6      	b.n	8000b72 <__aeabi_dadd+0x416>
 80007c4:	2220      	movs	r2, #32
 80007c6:	464c      	mov	r4, r9
 80007c8:	1bd2      	subs	r2, r2, r7
 80007ca:	4094      	lsls	r4, r2
 80007cc:	46a2      	mov	sl, r4
 80007ce:	4644      	mov	r4, r8
 80007d0:	40fc      	lsrs	r4, r7
 80007d2:	0020      	movs	r0, r4
 80007d4:	4654      	mov	r4, sl
 80007d6:	4304      	orrs	r4, r0
 80007d8:	4640      	mov	r0, r8
 80007da:	4090      	lsls	r0, r2
 80007dc:	1e42      	subs	r2, r0, #1
 80007de:	4190      	sbcs	r0, r2
 80007e0:	464a      	mov	r2, r9
 80007e2:	40fa      	lsrs	r2, r7
 80007e4:	4304      	orrs	r4, r0
 80007e6:	1a89      	subs	r1, r1, r2
 80007e8:	1b1c      	subs	r4, r3, r4
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	4192      	sbcs	r2, r2
 80007ee:	4252      	negs	r2, r2
 80007f0:	1a8b      	subs	r3, r1, r2
 80007f2:	469a      	mov	sl, r3
 80007f4:	4653      	mov	r3, sl
 80007f6:	021b      	lsls	r3, r3, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0xa0>
 80007fa:	e0d4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 80007fc:	4653      	mov	r3, sl
 80007fe:	025a      	lsls	r2, r3, #9
 8000800:	0a53      	lsrs	r3, r2, #9
 8000802:	469a      	mov	sl, r3
 8000804:	4653      	mov	r3, sl
 8000806:	2b00      	cmp	r3, #0
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0xb0>
 800080a:	e104      	b.n	8000a16 <__aeabi_dadd+0x2ba>
 800080c:	4650      	mov	r0, sl
 800080e:	f001 fe73 	bl	80024f8 <__clzsi2>
 8000812:	0003      	movs	r3, r0
 8000814:	3b08      	subs	r3, #8
 8000816:	2220      	movs	r2, #32
 8000818:	0020      	movs	r0, r4
 800081a:	1ad2      	subs	r2, r2, r3
 800081c:	4651      	mov	r1, sl
 800081e:	40d0      	lsrs	r0, r2
 8000820:	4099      	lsls	r1, r3
 8000822:	0002      	movs	r2, r0
 8000824:	409c      	lsls	r4, r3
 8000826:	430a      	orrs	r2, r1
 8000828:	42b3      	cmp	r3, r6
 800082a:	da00      	bge.n	800082e <__aeabi_dadd+0xd2>
 800082c:	e102      	b.n	8000a34 <__aeabi_dadd+0x2d8>
 800082e:	1b9b      	subs	r3, r3, r6
 8000830:	1c59      	adds	r1, r3, #1
 8000832:	291f      	cmp	r1, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0xdc>
 8000836:	e0a7      	b.n	8000988 <__aeabi_dadd+0x22c>
 8000838:	2320      	movs	r3, #32
 800083a:	0010      	movs	r0, r2
 800083c:	0026      	movs	r6, r4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	409c      	lsls	r4, r3
 8000842:	4098      	lsls	r0, r3
 8000844:	40ce      	lsrs	r6, r1
 8000846:	40ca      	lsrs	r2, r1
 8000848:	1e63      	subs	r3, r4, #1
 800084a:	419c      	sbcs	r4, r3
 800084c:	4330      	orrs	r0, r6
 800084e:	4692      	mov	sl, r2
 8000850:	2600      	movs	r6, #0
 8000852:	4304      	orrs	r4, r0
 8000854:	0763      	lsls	r3, r4, #29
 8000856:	d009      	beq.n	800086c <__aeabi_dadd+0x110>
 8000858:	230f      	movs	r3, #15
 800085a:	4023      	ands	r3, r4
 800085c:	2b04      	cmp	r3, #4
 800085e:	d005      	beq.n	800086c <__aeabi_dadd+0x110>
 8000860:	1d23      	adds	r3, r4, #4
 8000862:	42a3      	cmp	r3, r4
 8000864:	41a4      	sbcs	r4, r4
 8000866:	4264      	negs	r4, r4
 8000868:	44a2      	add	sl, r4
 800086a:	001c      	movs	r4, r3
 800086c:	4653      	mov	r3, sl
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	d400      	bmi.n	8000874 <__aeabi_dadd+0x118>
 8000872:	e09b      	b.n	80009ac <__aeabi_dadd+0x250>
 8000874:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000876:	3601      	adds	r6, #1
 8000878:	429e      	cmp	r6, r3
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x122>
 800087c:	e0b8      	b.n	80009f0 <__aeabi_dadd+0x294>
 800087e:	4653      	mov	r3, sl
 8000880:	4992      	ldr	r1, [pc, #584]	; (8000acc <__aeabi_dadd+0x370>)
 8000882:	08e4      	lsrs	r4, r4, #3
 8000884:	400b      	ands	r3, r1
 8000886:	0019      	movs	r1, r3
 8000888:	075b      	lsls	r3, r3, #29
 800088a:	4323      	orrs	r3, r4
 800088c:	0572      	lsls	r2, r6, #21
 800088e:	024c      	lsls	r4, r1, #9
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	0d52      	lsrs	r2, r2, #21
 8000894:	0512      	lsls	r2, r2, #20
 8000896:	07ed      	lsls	r5, r5, #31
 8000898:	4322      	orrs	r2, r4
 800089a:	432a      	orrs	r2, r5
 800089c:	0018      	movs	r0, r3
 800089e:	0011      	movs	r1, r2
 80008a0:	bce0      	pop	{r5, r6, r7}
 80008a2:	46ba      	mov	sl, r7
 80008a4:	46b1      	mov	r9, r6
 80008a6:	46a8      	mov	r8, r5
 80008a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008aa:	2f00      	cmp	r7, #0
 80008ac:	d048      	beq.n	8000940 <__aeabi_dadd+0x1e4>
 80008ae:	1b97      	subs	r7, r2, r6
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_dadd+0x15a>
 80008b4:	e10e      	b.n	8000ad4 <__aeabi_dadd+0x378>
 80008b6:	000c      	movs	r4, r1
 80008b8:	431c      	orrs	r4, r3
 80008ba:	d100      	bne.n	80008be <__aeabi_dadd+0x162>
 80008bc:	e1b7      	b.n	8000c2e <__aeabi_dadd+0x4d2>
 80008be:	1e7c      	subs	r4, r7, #1
 80008c0:	2f01      	cmp	r7, #1
 80008c2:	d100      	bne.n	80008c6 <__aeabi_dadd+0x16a>
 80008c4:	e226      	b.n	8000d14 <__aeabi_dadd+0x5b8>
 80008c6:	4d80      	ldr	r5, [pc, #512]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008c8:	42af      	cmp	r7, r5
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x172>
 80008cc:	e1d5      	b.n	8000c7a <__aeabi_dadd+0x51e>
 80008ce:	0027      	movs	r7, r4
 80008d0:	e107      	b.n	8000ae2 <__aeabi_dadd+0x386>
 80008d2:	2f00      	cmp	r7, #0
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x17c>
 80008d6:	e0b2      	b.n	8000a3e <__aeabi_dadd+0x2e2>
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d047      	beq.n	800096c <__aeabi_dadd+0x210>
 80008dc:	4a7a      	ldr	r2, [pc, #488]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80008de:	4296      	cmp	r6, r2
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x188>
 80008e2:	e089      	b.n	80009f8 <__aeabi_dadd+0x29c>
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	464c      	mov	r4, r9
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	4314      	orrs	r4, r2
 80008ec:	46a1      	mov	r9, r4
 80008ee:	2f38      	cmp	r7, #56	; 0x38
 80008f0:	dc6b      	bgt.n	80009ca <__aeabi_dadd+0x26e>
 80008f2:	2f1f      	cmp	r7, #31
 80008f4:	dc00      	bgt.n	80008f8 <__aeabi_dadd+0x19c>
 80008f6:	e16e      	b.n	8000bd6 <__aeabi_dadd+0x47a>
 80008f8:	003a      	movs	r2, r7
 80008fa:	4648      	mov	r0, r9
 80008fc:	3a20      	subs	r2, #32
 80008fe:	40d0      	lsrs	r0, r2
 8000900:	4684      	mov	ip, r0
 8000902:	2f20      	cmp	r7, #32
 8000904:	d007      	beq.n	8000916 <__aeabi_dadd+0x1ba>
 8000906:	2240      	movs	r2, #64	; 0x40
 8000908:	4648      	mov	r0, r9
 800090a:	1bd2      	subs	r2, r2, r7
 800090c:	4090      	lsls	r0, r2
 800090e:	0002      	movs	r2, r0
 8000910:	4640      	mov	r0, r8
 8000912:	4310      	orrs	r0, r2
 8000914:	4680      	mov	r8, r0
 8000916:	4640      	mov	r0, r8
 8000918:	1e42      	subs	r2, r0, #1
 800091a:	4190      	sbcs	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	0004      	movs	r4, r0
 8000920:	4314      	orrs	r4, r2
 8000922:	e057      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000924:	464a      	mov	r2, r9
 8000926:	4302      	orrs	r2, r0
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x1d0>
 800092a:	e103      	b.n	8000b34 <__aeabi_dadd+0x3d8>
 800092c:	1e7a      	subs	r2, r7, #1
 800092e:	2f01      	cmp	r7, #1
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x1d8>
 8000932:	e193      	b.n	8000c5c <__aeabi_dadd+0x500>
 8000934:	4c64      	ldr	r4, [pc, #400]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000936:	42a7      	cmp	r7, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x1e0>
 800093a:	e18a      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 800093c:	0017      	movs	r7, r2
 800093e:	e73b      	b.n	80007b8 <__aeabi_dadd+0x5c>
 8000940:	4c63      	ldr	r4, [pc, #396]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000942:	1c72      	adds	r2, r6, #1
 8000944:	4222      	tst	r2, r4
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x1ee>
 8000948:	e0e0      	b.n	8000b0c <__aeabi_dadd+0x3b0>
 800094a:	000a      	movs	r2, r1
 800094c:	431a      	orrs	r2, r3
 800094e:	2e00      	cmp	r6, #0
 8000950:	d000      	beq.n	8000954 <__aeabi_dadd+0x1f8>
 8000952:	e174      	b.n	8000c3e <__aeabi_dadd+0x4e2>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d100      	bne.n	800095a <__aeabi_dadd+0x1fe>
 8000958:	e1d0      	b.n	8000cfc <__aeabi_dadd+0x5a0>
 800095a:	464a      	mov	r2, r9
 800095c:	4302      	orrs	r2, r0
 800095e:	d000      	beq.n	8000962 <__aeabi_dadd+0x206>
 8000960:	e1e3      	b.n	8000d2a <__aeabi_dadd+0x5ce>
 8000962:	074a      	lsls	r2, r1, #29
 8000964:	08db      	lsrs	r3, r3, #3
 8000966:	4313      	orrs	r3, r2
 8000968:	08c9      	lsrs	r1, r1, #3
 800096a:	e029      	b.n	80009c0 <__aeabi_dadd+0x264>
 800096c:	464a      	mov	r2, r9
 800096e:	4302      	orrs	r2, r0
 8000970:	d100      	bne.n	8000974 <__aeabi_dadd+0x218>
 8000972:	e17d      	b.n	8000c70 <__aeabi_dadd+0x514>
 8000974:	1e7a      	subs	r2, r7, #1
 8000976:	2f01      	cmp	r7, #1
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x220>
 800097a:	e0e0      	b.n	8000b3e <__aeabi_dadd+0x3e2>
 800097c:	4c52      	ldr	r4, [pc, #328]	; (8000ac8 <__aeabi_dadd+0x36c>)
 800097e:	42a7      	cmp	r7, r4
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x228>
 8000982:	e166      	b.n	8000c52 <__aeabi_dadd+0x4f6>
 8000984:	0017      	movs	r7, r2
 8000986:	e7b2      	b.n	80008ee <__aeabi_dadd+0x192>
 8000988:	0010      	movs	r0, r2
 800098a:	3b1f      	subs	r3, #31
 800098c:	40d8      	lsrs	r0, r3
 800098e:	2920      	cmp	r1, #32
 8000990:	d003      	beq.n	800099a <__aeabi_dadd+0x23e>
 8000992:	2340      	movs	r3, #64	; 0x40
 8000994:	1a5b      	subs	r3, r3, r1
 8000996:	409a      	lsls	r2, r3
 8000998:	4314      	orrs	r4, r2
 800099a:	1e63      	subs	r3, r4, #1
 800099c:	419c      	sbcs	r4, r3
 800099e:	2300      	movs	r3, #0
 80009a0:	2600      	movs	r6, #0
 80009a2:	469a      	mov	sl, r3
 80009a4:	4304      	orrs	r4, r0
 80009a6:	0763      	lsls	r3, r4, #29
 80009a8:	d000      	beq.n	80009ac <__aeabi_dadd+0x250>
 80009aa:	e755      	b.n	8000858 <__aeabi_dadd+0xfc>
 80009ac:	4652      	mov	r2, sl
 80009ae:	08e3      	lsrs	r3, r4, #3
 80009b0:	0752      	lsls	r2, r2, #29
 80009b2:	4313      	orrs	r3, r2
 80009b4:	4652      	mov	r2, sl
 80009b6:	0037      	movs	r7, r6
 80009b8:	08d1      	lsrs	r1, r2, #3
 80009ba:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009bc:	4297      	cmp	r7, r2
 80009be:	d01f      	beq.n	8000a00 <__aeabi_dadd+0x2a4>
 80009c0:	0309      	lsls	r1, r1, #12
 80009c2:	057a      	lsls	r2, r7, #21
 80009c4:	0b0c      	lsrs	r4, r1, #12
 80009c6:	0d52      	lsrs	r2, r2, #21
 80009c8:	e764      	b.n	8000894 <__aeabi_dadd+0x138>
 80009ca:	4642      	mov	r2, r8
 80009cc:	464c      	mov	r4, r9
 80009ce:	4314      	orrs	r4, r2
 80009d0:	1e62      	subs	r2, r4, #1
 80009d2:	4194      	sbcs	r4, r2
 80009d4:	18e4      	adds	r4, r4, r3
 80009d6:	429c      	cmp	r4, r3
 80009d8:	4192      	sbcs	r2, r2
 80009da:	4252      	negs	r2, r2
 80009dc:	4692      	mov	sl, r2
 80009de:	448a      	add	sl, r1
 80009e0:	4653      	mov	r3, sl
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	d5df      	bpl.n	80009a6 <__aeabi_dadd+0x24a>
 80009e6:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <__aeabi_dadd+0x36c>)
 80009e8:	3601      	adds	r6, #1
 80009ea:	429e      	cmp	r6, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x294>
 80009ee:	e0b3      	b.n	8000b58 <__aeabi_dadd+0x3fc>
 80009f0:	0032      	movs	r2, r6
 80009f2:	2400      	movs	r4, #0
 80009f4:	2300      	movs	r3, #0
 80009f6:	e74d      	b.n	8000894 <__aeabi_dadd+0x138>
 80009f8:	074a      	lsls	r2, r1, #29
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	4313      	orrs	r3, r2
 80009fe:	08c9      	lsrs	r1, r1, #3
 8000a00:	001a      	movs	r2, r3
 8000a02:	430a      	orrs	r2, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x2ac>
 8000a06:	e200      	b.n	8000e0a <__aeabi_dadd+0x6ae>
 8000a08:	2480      	movs	r4, #128	; 0x80
 8000a0a:	0324      	lsls	r4, r4, #12
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	0324      	lsls	r4, r4, #12
 8000a10:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a12:	0b24      	lsrs	r4, r4, #12
 8000a14:	e73e      	b.n	8000894 <__aeabi_dadd+0x138>
 8000a16:	0020      	movs	r0, r4
 8000a18:	f001 fd6e 	bl	80024f8 <__clzsi2>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	3318      	adds	r3, #24
 8000a20:	2b1f      	cmp	r3, #31
 8000a22:	dc00      	bgt.n	8000a26 <__aeabi_dadd+0x2ca>
 8000a24:	e6f7      	b.n	8000816 <__aeabi_dadd+0xba>
 8000a26:	0022      	movs	r2, r4
 8000a28:	3808      	subs	r0, #8
 8000a2a:	4082      	lsls	r2, r0
 8000a2c:	2400      	movs	r4, #0
 8000a2e:	42b3      	cmp	r3, r6
 8000a30:	db00      	blt.n	8000a34 <__aeabi_dadd+0x2d8>
 8000a32:	e6fc      	b.n	800082e <__aeabi_dadd+0xd2>
 8000a34:	1af6      	subs	r6, r6, r3
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <__aeabi_dadd+0x370>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	e70a      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000a3e:	2f00      	cmp	r7, #0
 8000a40:	d02b      	beq.n	8000a9a <__aeabi_dadd+0x33e>
 8000a42:	1b97      	subs	r7, r2, r6
 8000a44:	2e00      	cmp	r6, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x2ee>
 8000a48:	e0b8      	b.n	8000bbc <__aeabi_dadd+0x460>
 8000a4a:	4c1f      	ldr	r4, [pc, #124]	; (8000ac8 <__aeabi_dadd+0x36c>)
 8000a4c:	42a2      	cmp	r2, r4
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dadd+0x2f6>
 8000a50:	e11c      	b.n	8000c8c <__aeabi_dadd+0x530>
 8000a52:	2480      	movs	r4, #128	; 0x80
 8000a54:	0424      	lsls	r4, r4, #16
 8000a56:	4321      	orrs	r1, r4
 8000a58:	2f38      	cmp	r7, #56	; 0x38
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dadd+0x302>
 8000a5c:	e11e      	b.n	8000c9c <__aeabi_dadd+0x540>
 8000a5e:	2f1f      	cmp	r7, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x308>
 8000a62:	e19e      	b.n	8000da2 <__aeabi_dadd+0x646>
 8000a64:	2620      	movs	r6, #32
 8000a66:	000c      	movs	r4, r1
 8000a68:	1bf6      	subs	r6, r6, r7
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	40b3      	lsls	r3, r6
 8000a6e:	40b4      	lsls	r4, r6
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	1e5e      	subs	r6, r3, #1
 8000a74:	41b3      	sbcs	r3, r6
 8000a76:	40f9      	lsrs	r1, r7
 8000a78:	4304      	orrs	r4, r0
 8000a7a:	431c      	orrs	r4, r3
 8000a7c:	4489      	add	r9, r1
 8000a7e:	4444      	add	r4, r8
 8000a80:	4544      	cmp	r4, r8
 8000a82:	419b      	sbcs	r3, r3
 8000a84:	425b      	negs	r3, r3
 8000a86:	444b      	add	r3, r9
 8000a88:	469a      	mov	sl, r3
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	e7a8      	b.n	80009e0 <__aeabi_dadd+0x284>
 8000a8e:	4642      	mov	r2, r8
 8000a90:	464c      	mov	r4, r9
 8000a92:	4314      	orrs	r4, r2
 8000a94:	1e62      	subs	r2, r4, #1
 8000a96:	4194      	sbcs	r4, r2
 8000a98:	e6a6      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000a9a:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__aeabi_dadd+0x374>)
 8000a9c:	1c72      	adds	r2, r6, #1
 8000a9e:	4222      	tst	r2, r4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x348>
 8000aa2:	e0a8      	b.n	8000bf6 <__aeabi_dadd+0x49a>
 8000aa4:	000a      	movs	r2, r1
 8000aa6:	431a      	orrs	r2, r3
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dadd+0x352>
 8000aac:	e10a      	b.n	8000cc4 <__aeabi_dadd+0x568>
 8000aae:	2a00      	cmp	r2, #0
 8000ab0:	d100      	bne.n	8000ab4 <__aeabi_dadd+0x358>
 8000ab2:	e15e      	b.n	8000d72 <__aeabi_dadd+0x616>
 8000ab4:	464a      	mov	r2, r9
 8000ab6:	4302      	orrs	r2, r0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_dadd+0x360>
 8000aba:	e161      	b.n	8000d80 <__aeabi_dadd+0x624>
 8000abc:	074a      	lsls	r2, r1, #29
 8000abe:	08db      	lsrs	r3, r3, #3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	08c9      	lsrs	r1, r1, #3
 8000ac4:	e77c      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	000007ff 	.word	0x000007ff
 8000acc:	ff7fffff 	.word	0xff7fffff
 8000ad0:	000007fe 	.word	0x000007fe
 8000ad4:	4ccf      	ldr	r4, [pc, #828]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000ad6:	42a2      	cmp	r2, r4
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x380>
 8000ada:	e0ce      	b.n	8000c7a <__aeabi_dadd+0x51e>
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	4321      	orrs	r1, r4
 8000ae2:	2f38      	cmp	r7, #56	; 0x38
 8000ae4:	dc5b      	bgt.n	8000b9e <__aeabi_dadd+0x442>
 8000ae6:	2f1f      	cmp	r7, #31
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_dadd+0x390>
 8000aea:	e0dc      	b.n	8000ca6 <__aeabi_dadd+0x54a>
 8000aec:	2520      	movs	r5, #32
 8000aee:	000c      	movs	r4, r1
 8000af0:	1bed      	subs	r5, r5, r7
 8000af2:	001e      	movs	r6, r3
 8000af4:	40ab      	lsls	r3, r5
 8000af6:	40ac      	lsls	r4, r5
 8000af8:	40fe      	lsrs	r6, r7
 8000afa:	1e5d      	subs	r5, r3, #1
 8000afc:	41ab      	sbcs	r3, r5
 8000afe:	4334      	orrs	r4, r6
 8000b00:	40f9      	lsrs	r1, r7
 8000b02:	431c      	orrs	r4, r3
 8000b04:	464b      	mov	r3, r9
 8000b06:	1a5b      	subs	r3, r3, r1
 8000b08:	4699      	mov	r9, r3
 8000b0a:	e04c      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000b0c:	464a      	mov	r2, r9
 8000b0e:	1a1c      	subs	r4, r3, r0
 8000b10:	1a88      	subs	r0, r1, r2
 8000b12:	42a3      	cmp	r3, r4
 8000b14:	4192      	sbcs	r2, r2
 8000b16:	4252      	negs	r2, r2
 8000b18:	4692      	mov	sl, r2
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	4650      	mov	r0, sl
 8000b1e:	1a12      	subs	r2, r2, r0
 8000b20:	4692      	mov	sl, r2
 8000b22:	0212      	lsls	r2, r2, #8
 8000b24:	d478      	bmi.n	8000c18 <__aeabi_dadd+0x4bc>
 8000b26:	4653      	mov	r3, sl
 8000b28:	4323      	orrs	r3, r4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x3d2>
 8000b2c:	e66a      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2500      	movs	r5, #0
 8000b32:	e745      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000b34:	074a      	lsls	r2, r1, #29
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	08c9      	lsrs	r1, r1, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000b3e:	181c      	adds	r4, r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	419b      	sbcs	r3, r3
 8000b44:	4449      	add	r1, r9
 8000b46:	468a      	mov	sl, r1
 8000b48:	425b      	negs	r3, r3
 8000b4a:	449a      	add	sl, r3
 8000b4c:	4653      	mov	r3, sl
 8000b4e:	2601      	movs	r6, #1
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	d400      	bmi.n	8000b56 <__aeabi_dadd+0x3fa>
 8000b54:	e727      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000b56:	2602      	movs	r6, #2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	4baf      	ldr	r3, [pc, #700]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	4021      	ands	r1, r4
 8000b64:	0862      	lsrs	r2, r4, #1
 8000b66:	430a      	orrs	r2, r1
 8000b68:	07dc      	lsls	r4, r3, #31
 8000b6a:	085b      	lsrs	r3, r3, #1
 8000b6c:	469a      	mov	sl, r3
 8000b6e:	4314      	orrs	r4, r2
 8000b70:	e670      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000b72:	003a      	movs	r2, r7
 8000b74:	464c      	mov	r4, r9
 8000b76:	3a20      	subs	r2, #32
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	46a4      	mov	ip, r4
 8000b7c:	2f20      	cmp	r7, #32
 8000b7e:	d007      	beq.n	8000b90 <__aeabi_dadd+0x434>
 8000b80:	2240      	movs	r2, #64	; 0x40
 8000b82:	4648      	mov	r0, r9
 8000b84:	1bd2      	subs	r2, r2, r7
 8000b86:	4090      	lsls	r0, r2
 8000b88:	0002      	movs	r2, r0
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	4310      	orrs	r0, r2
 8000b8e:	4680      	mov	r8, r0
 8000b90:	4640      	mov	r0, r8
 8000b92:	1e42      	subs	r2, r0, #1
 8000b94:	4190      	sbcs	r0, r2
 8000b96:	4662      	mov	r2, ip
 8000b98:	0004      	movs	r4, r0
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	e624      	b.n	80007e8 <__aeabi_dadd+0x8c>
 8000b9e:	4319      	orrs	r1, r3
 8000ba0:	000c      	movs	r4, r1
 8000ba2:	1e63      	subs	r3, r4, #1
 8000ba4:	419c      	sbcs	r4, r3
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1b1c      	subs	r4, r3, r4
 8000baa:	45a0      	cmp	r8, r4
 8000bac:	419b      	sbcs	r3, r3
 8000bae:	4649      	mov	r1, r9
 8000bb0:	425b      	negs	r3, r3
 8000bb2:	1acb      	subs	r3, r1, r3
 8000bb4:	469a      	mov	sl, r3
 8000bb6:	4665      	mov	r5, ip
 8000bb8:	0016      	movs	r6, r2
 8000bba:	e61b      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000bbc:	000c      	movs	r4, r1
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_dadd+0x468>
 8000bc2:	e0c7      	b.n	8000d54 <__aeabi_dadd+0x5f8>
 8000bc4:	1e7c      	subs	r4, r7, #1
 8000bc6:	2f01      	cmp	r7, #1
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x470>
 8000bca:	e0f9      	b.n	8000dc0 <__aeabi_dadd+0x664>
 8000bcc:	4e91      	ldr	r6, [pc, #580]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bce:	42b7      	cmp	r7, r6
 8000bd0:	d05c      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	e740      	b.n	8000a58 <__aeabi_dadd+0x2fc>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	464c      	mov	r4, r9
 8000bda:	4640      	mov	r0, r8
 8000bdc:	1bd2      	subs	r2, r2, r7
 8000bde:	4094      	lsls	r4, r2
 8000be0:	40f8      	lsrs	r0, r7
 8000be2:	4304      	orrs	r4, r0
 8000be4:	4640      	mov	r0, r8
 8000be6:	4090      	lsls	r0, r2
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	4190      	sbcs	r0, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	40fa      	lsrs	r2, r7
 8000bf0:	4304      	orrs	r4, r0
 8000bf2:	1889      	adds	r1, r1, r2
 8000bf4:	e6ee      	b.n	80009d4 <__aeabi_dadd+0x278>
 8000bf6:	4c87      	ldr	r4, [pc, #540]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000bf8:	42a2      	cmp	r2, r4
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x4a2>
 8000bfc:	e6f9      	b.n	80009f2 <__aeabi_dadd+0x296>
 8000bfe:	1818      	adds	r0, r3, r0
 8000c00:	4298      	cmp	r0, r3
 8000c02:	419b      	sbcs	r3, r3
 8000c04:	4449      	add	r1, r9
 8000c06:	425b      	negs	r3, r3
 8000c08:	18cb      	adds	r3, r1, r3
 8000c0a:	07dc      	lsls	r4, r3, #31
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	469a      	mov	sl, r3
 8000c12:	0016      	movs	r6, r2
 8000c14:	4304      	orrs	r4, r0
 8000c16:	e6c6      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000c18:	4642      	mov	r2, r8
 8000c1a:	1ad4      	subs	r4, r2, r3
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	4180      	sbcs	r0, r0
 8000c20:	464b      	mov	r3, r9
 8000c22:	4240      	negs	r0, r0
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	1a0b      	subs	r3, r1, r0
 8000c28:	469a      	mov	sl, r3
 8000c2a:	4665      	mov	r5, ip
 8000c2c:	e5ea      	b.n	8000804 <__aeabi_dadd+0xa8>
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	08c0      	lsrs	r0, r0, #3
 8000c34:	075b      	lsls	r3, r3, #29
 8000c36:	4665      	mov	r5, ip
 8000c38:	4303      	orrs	r3, r0
 8000c3a:	08d1      	lsrs	r1, r2, #3
 8000c3c:	e6bd      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x4e8>
 8000c42:	e08e      	b.n	8000d62 <__aeabi_dadd+0x606>
 8000c44:	464b      	mov	r3, r9
 8000c46:	4303      	orrs	r3, r0
 8000c48:	d117      	bne.n	8000c7a <__aeabi_dadd+0x51e>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2500      	movs	r5, #0
 8000c4e:	0309      	lsls	r1, r1, #12
 8000c50:	e6da      	b.n	8000a08 <__aeabi_dadd+0x2ac>
 8000c52:	074a      	lsls	r2, r1, #29
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	08c9      	lsrs	r1, r1, #3
 8000c5a:	e6d1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c5c:	1a1c      	subs	r4, r3, r0
 8000c5e:	464a      	mov	r2, r9
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	419b      	sbcs	r3, r3
 8000c64:	1a89      	subs	r1, r1, r2
 8000c66:	425b      	negs	r3, r3
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	469a      	mov	sl, r3
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	e5c1      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000c70:	074a      	lsls	r2, r1, #29
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	4313      	orrs	r3, r2
 8000c76:	08c9      	lsrs	r1, r1, #3
 8000c78:	e69f      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	08d8      	lsrs	r0, r3, #3
 8000c7e:	464b      	mov	r3, r9
 8000c80:	464a      	mov	r2, r9
 8000c82:	075b      	lsls	r3, r3, #29
 8000c84:	4665      	mov	r5, ip
 8000c86:	4303      	orrs	r3, r0
 8000c88:	08d1      	lsrs	r1, r2, #3
 8000c8a:	e6b9      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c8c:	4643      	mov	r3, r8
 8000c8e:	08d8      	lsrs	r0, r3, #3
 8000c90:	464b      	mov	r3, r9
 8000c92:	464a      	mov	r2, r9
 8000c94:	075b      	lsls	r3, r3, #29
 8000c96:	4303      	orrs	r3, r0
 8000c98:	08d1      	lsrs	r1, r2, #3
 8000c9a:	e6b1      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000c9c:	4319      	orrs	r1, r3
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	1e63      	subs	r3, r4, #1
 8000ca2:	419c      	sbcs	r4, r3
 8000ca4:	e6eb      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000ca6:	003c      	movs	r4, r7
 8000ca8:	000d      	movs	r5, r1
 8000caa:	3c20      	subs	r4, #32
 8000cac:	40e5      	lsrs	r5, r4
 8000cae:	2f20      	cmp	r7, #32
 8000cb0:	d003      	beq.n	8000cba <__aeabi_dadd+0x55e>
 8000cb2:	2440      	movs	r4, #64	; 0x40
 8000cb4:	1be4      	subs	r4, r4, r7
 8000cb6:	40a1      	lsls	r1, r4
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	001c      	movs	r4, r3
 8000cbc:	1e63      	subs	r3, r4, #1
 8000cbe:	419c      	sbcs	r4, r3
 8000cc0:	432c      	orrs	r4, r5
 8000cc2:	e770      	b.n	8000ba6 <__aeabi_dadd+0x44a>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	d0e1      	beq.n	8000c8c <__aeabi_dadd+0x530>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	4302      	orrs	r2, r0
 8000ccc:	d0c1      	beq.n	8000c52 <__aeabi_dadd+0x4f6>
 8000cce:	074a      	lsls	r2, r1, #29
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	08c9      	lsrs	r1, r1, #3
 8000cd8:	0312      	lsls	r2, r2, #12
 8000cda:	4211      	tst	r1, r2
 8000cdc:	d008      	beq.n	8000cf0 <__aeabi_dadd+0x594>
 8000cde:	4648      	mov	r0, r9
 8000ce0:	08c4      	lsrs	r4, r0, #3
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d104      	bne.n	8000cf0 <__aeabi_dadd+0x594>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	0021      	movs	r1, r4
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	0742      	lsls	r2, r0, #29
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	0f5a      	lsrs	r2, r3, #29
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	0752      	lsls	r2, r2, #29
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	e681      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	4303      	orrs	r3, r0
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x5a8>
 8000d02:	e714      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4665      	mov	r5, ip
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	08d1      	lsrs	r1, r2, #3
 8000d12:	e655      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d14:	1ac4      	subs	r4, r0, r3
 8000d16:	45a0      	cmp	r8, r4
 8000d18:	4180      	sbcs	r0, r0
 8000d1a:	464b      	mov	r3, r9
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	1a59      	subs	r1, r3, r1
 8000d20:	1a0b      	subs	r3, r1, r0
 8000d22:	469a      	mov	sl, r3
 8000d24:	4665      	mov	r5, ip
 8000d26:	2601      	movs	r6, #1
 8000d28:	e564      	b.n	80007f4 <__aeabi_dadd+0x98>
 8000d2a:	1a1c      	subs	r4, r3, r0
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	42a3      	cmp	r3, r4
 8000d30:	4180      	sbcs	r0, r0
 8000d32:	1a8a      	subs	r2, r1, r2
 8000d34:	4240      	negs	r0, r0
 8000d36:	1a12      	subs	r2, r2, r0
 8000d38:	4692      	mov	sl, r2
 8000d3a:	0212      	lsls	r2, r2, #8
 8000d3c:	d549      	bpl.n	8000dd2 <__aeabi_dadd+0x676>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	1ad4      	subs	r4, r2, r3
 8000d42:	45a0      	cmp	r8, r4
 8000d44:	4180      	sbcs	r0, r0
 8000d46:	464b      	mov	r3, r9
 8000d48:	4240      	negs	r0, r0
 8000d4a:	1a59      	subs	r1, r3, r1
 8000d4c:	1a0b      	subs	r3, r1, r0
 8000d4e:	469a      	mov	sl, r3
 8000d50:	4665      	mov	r5, ip
 8000d52:	e57f      	b.n	8000854 <__aeabi_dadd+0xf8>
 8000d54:	464b      	mov	r3, r9
 8000d56:	464a      	mov	r2, r9
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	075b      	lsls	r3, r3, #29
 8000d5c:	4303      	orrs	r3, r0
 8000d5e:	08d1      	lsrs	r1, r2, #3
 8000d60:	e62b      	b.n	80009ba <__aeabi_dadd+0x25e>
 8000d62:	464a      	mov	r2, r9
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	4302      	orrs	r2, r0
 8000d68:	d138      	bne.n	8000ddc <__aeabi_dadd+0x680>
 8000d6a:	074a      	lsls	r2, r1, #29
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	08c9      	lsrs	r1, r1, #3
 8000d70:	e646      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000d72:	464b      	mov	r3, r9
 8000d74:	464a      	mov	r2, r9
 8000d76:	08c0      	lsrs	r0, r0, #3
 8000d78:	075b      	lsls	r3, r3, #29
 8000d7a:	4303      	orrs	r3, r0
 8000d7c:	08d1      	lsrs	r1, r2, #3
 8000d7e:	e61f      	b.n	80009c0 <__aeabi_dadd+0x264>
 8000d80:	181c      	adds	r4, r3, r0
 8000d82:	429c      	cmp	r4, r3
 8000d84:	419b      	sbcs	r3, r3
 8000d86:	4449      	add	r1, r9
 8000d88:	468a      	mov	sl, r1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	449a      	add	sl, r3
 8000d8e:	4653      	mov	r3, sl
 8000d90:	021b      	lsls	r3, r3, #8
 8000d92:	d400      	bmi.n	8000d96 <__aeabi_dadd+0x63a>
 8000d94:	e607      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000d96:	4652      	mov	r2, sl
 8000d98:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <__aeabi_dadd+0x6bc>)
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4692      	mov	sl, r2
 8000da0:	e601      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000da2:	003c      	movs	r4, r7
 8000da4:	000e      	movs	r6, r1
 8000da6:	3c20      	subs	r4, #32
 8000da8:	40e6      	lsrs	r6, r4
 8000daa:	2f20      	cmp	r7, #32
 8000dac:	d003      	beq.n	8000db6 <__aeabi_dadd+0x65a>
 8000dae:	2440      	movs	r4, #64	; 0x40
 8000db0:	1be4      	subs	r4, r4, r7
 8000db2:	40a1      	lsls	r1, r4
 8000db4:	430b      	orrs	r3, r1
 8000db6:	001c      	movs	r4, r3
 8000db8:	1e63      	subs	r3, r4, #1
 8000dba:	419c      	sbcs	r4, r3
 8000dbc:	4334      	orrs	r4, r6
 8000dbe:	e65e      	b.n	8000a7e <__aeabi_dadd+0x322>
 8000dc0:	4443      	add	r3, r8
 8000dc2:	4283      	cmp	r3, r0
 8000dc4:	4180      	sbcs	r0, r0
 8000dc6:	4449      	add	r1, r9
 8000dc8:	468a      	mov	sl, r1
 8000dca:	4240      	negs	r0, r0
 8000dcc:	001c      	movs	r4, r3
 8000dce:	4482      	add	sl, r0
 8000dd0:	e6bc      	b.n	8000b4c <__aeabi_dadd+0x3f0>
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	4323      	orrs	r3, r4
 8000dd6:	d100      	bne.n	8000dda <__aeabi_dadd+0x67e>
 8000dd8:	e6a9      	b.n	8000b2e <__aeabi_dadd+0x3d2>
 8000dda:	e5e4      	b.n	80009a6 <__aeabi_dadd+0x24a>
 8000ddc:	074a      	lsls	r2, r1, #29
 8000dde:	4313      	orrs	r3, r2
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	08c9      	lsrs	r1, r1, #3
 8000de4:	0312      	lsls	r2, r2, #12
 8000de6:	4211      	tst	r1, r2
 8000de8:	d009      	beq.n	8000dfe <__aeabi_dadd+0x6a2>
 8000dea:	4648      	mov	r0, r9
 8000dec:	08c4      	lsrs	r4, r0, #3
 8000dee:	4214      	tst	r4, r2
 8000df0:	d105      	bne.n	8000dfe <__aeabi_dadd+0x6a2>
 8000df2:	4643      	mov	r3, r8
 8000df4:	4665      	mov	r5, ip
 8000df6:	0021      	movs	r1, r4
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	0742      	lsls	r2, r0, #29
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	0f5a      	lsrs	r2, r3, #29
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	08db      	lsrs	r3, r3, #3
 8000e04:	0752      	lsls	r2, r2, #29
 8000e06:	4313      	orrs	r3, r2
 8000e08:	e5fa      	b.n	8000a00 <__aeabi_dadd+0x2a4>
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	4a01      	ldr	r2, [pc, #4]	; (8000e14 <__aeabi_dadd+0x6b8>)
 8000e0e:	001c      	movs	r4, r3
 8000e10:	e540      	b.n	8000894 <__aeabi_dadd+0x138>
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	000007ff 	.word	0x000007ff
 8000e18:	ff7fffff 	.word	0xff7fffff

08000e1c <__aeabi_ddiv>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	4657      	mov	r7, sl
 8000e20:	464e      	mov	r6, r9
 8000e22:	4645      	mov	r5, r8
 8000e24:	46de      	mov	lr, fp
 8000e26:	b5e0      	push	{r5, r6, r7, lr}
 8000e28:	030c      	lsls	r4, r1, #12
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	004b      	lsls	r3, r1, #1
 8000e2e:	4681      	mov	r9, r0
 8000e30:	4692      	mov	sl, r2
 8000e32:	0005      	movs	r5, r0
 8000e34:	b085      	sub	sp, #20
 8000e36:	0b24      	lsrs	r4, r4, #12
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	0fce      	lsrs	r6, r1, #31
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x26>
 8000e40:	e152      	b.n	80010e8 <__aeabi_ddiv+0x2cc>
 8000e42:	4ad2      	ldr	r2, [pc, #840]	; (800118c <__aeabi_ddiv+0x370>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d100      	bne.n	8000e4a <__aeabi_ddiv+0x2e>
 8000e48:	e16e      	b.n	8001128 <__aeabi_ddiv+0x30c>
 8000e4a:	0f42      	lsrs	r2, r0, #29
 8000e4c:	00e4      	lsls	r4, r4, #3
 8000e4e:	4314      	orrs	r4, r2
 8000e50:	2280      	movs	r2, #128	; 0x80
 8000e52:	0412      	lsls	r2, r2, #16
 8000e54:	4322      	orrs	r2, r4
 8000e56:	4690      	mov	r8, r2
 8000e58:	4acd      	ldr	r2, [pc, #820]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e5a:	00c5      	lsls	r5, r0, #3
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	449b      	add	fp, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	4699      	mov	r9, r3
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	033c      	lsls	r4, r7, #12
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	0b24      	lsrs	r4, r4, #12
 8000e6e:	0d5b      	lsrs	r3, r3, #21
 8000e70:	0fff      	lsrs	r7, r7, #31
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x5c>
 8000e76:	e11a      	b.n	80010ae <__aeabi_ddiv+0x292>
 8000e78:	4ac4      	ldr	r2, [pc, #784]	; (800118c <__aeabi_ddiv+0x370>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_ddiv+0x64>
 8000e7e:	e15e      	b.n	800113e <__aeabi_ddiv+0x322>
 8000e80:	0f42      	lsrs	r2, r0, #29
 8000e82:	00e4      	lsls	r4, r4, #3
 8000e84:	4322      	orrs	r2, r4
 8000e86:	2480      	movs	r4, #128	; 0x80
 8000e88:	0424      	lsls	r4, r4, #16
 8000e8a:	4314      	orrs	r4, r2
 8000e8c:	4ac0      	ldr	r2, [pc, #768]	; (8001190 <__aeabi_ddiv+0x374>)
 8000e8e:	00c1      	lsls	r1, r0, #3
 8000e90:	4694      	mov	ip, r2
 8000e92:	465a      	mov	r2, fp
 8000e94:	4463      	add	r3, ip
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	469b      	mov	fp, r3
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	407b      	eors	r3, r7
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d827      	bhi.n	8000ef8 <__aeabi_ddiv+0xdc>
 8000ea8:	4aba      	ldr	r2, [pc, #744]	; (8001194 <__aeabi_ddiv+0x378>)
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	58d3      	ldr	r3, [r2, r3]
 8000eae:	469f      	mov	pc, r3
 8000eb0:	46b2      	mov	sl, r6
 8000eb2:	9b00      	ldr	r3, [sp, #0]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d016      	beq.n	8000ee6 <__aeabi_ddiv+0xca>
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	d100      	bne.n	8000ebe <__aeabi_ddiv+0xa2>
 8000ebc:	e287      	b.n	80013ce <__aeabi_ddiv+0x5b2>
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d000      	beq.n	8000ec4 <__aeabi_ddiv+0xa8>
 8000ec2:	e0d5      	b.n	8001070 <__aeabi_ddiv+0x254>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2500      	movs	r5, #0
 8000eca:	051b      	lsls	r3, r3, #20
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	4652      	mov	r2, sl
 8000ed0:	07d2      	lsls	r2, r2, #31
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	0028      	movs	r0, r5
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	b005      	add	sp, #20
 8000eda:	bcf0      	pop	{r4, r5, r6, r7}
 8000edc:	46bb      	mov	fp, r7
 8000ede:	46b2      	mov	sl, r6
 8000ee0:	46a9      	mov	r9, r5
 8000ee2:	46a0      	mov	r8, r4
 8000ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4ba8      	ldr	r3, [pc, #672]	; (800118c <__aeabi_ddiv+0x370>)
 8000eec:	e7ed      	b.n	8000eca <__aeabi_ddiv+0xae>
 8000eee:	46ba      	mov	sl, r7
 8000ef0:	46a0      	mov	r8, r4
 8000ef2:	000d      	movs	r5, r1
 8000ef4:	9000      	str	r0, [sp, #0]
 8000ef6:	e7dc      	b.n	8000eb2 <__aeabi_ddiv+0x96>
 8000ef8:	4544      	cmp	r4, r8
 8000efa:	d200      	bcs.n	8000efe <__aeabi_ddiv+0xe2>
 8000efc:	e1c4      	b.n	8001288 <__aeabi_ddiv+0x46c>
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xe6>
 8000f00:	e1bf      	b.n	8001282 <__aeabi_ddiv+0x466>
 8000f02:	2301      	movs	r3, #1
 8000f04:	425b      	negs	r3, r3
 8000f06:	469c      	mov	ip, r3
 8000f08:	002e      	movs	r6, r5
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	44e3      	add	fp, ip
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	0e0c      	lsrs	r4, r1, #24
 8000f14:	431c      	orrs	r4, r3
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	4699      	mov	r9, r3
 8000f1a:	0423      	lsls	r3, r4, #16
 8000f1c:	020a      	lsls	r2, r1, #8
 8000f1e:	0c1f      	lsrs	r7, r3, #16
 8000f20:	4649      	mov	r1, r9
 8000f22:	9200      	str	r2, [sp, #0]
 8000f24:	9701      	str	r7, [sp, #4]
 8000f26:	f7ff f98f 	bl	8000248 <__aeabi_uidivmod>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	437a      	muls	r2, r7
 8000f2e:	040b      	lsls	r3, r1, #16
 8000f30:	0c31      	lsrs	r1, r6, #16
 8000f32:	4680      	mov	r8, r0
 8000f34:	4319      	orrs	r1, r3
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d907      	bls.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	469c      	mov	ip, r3
 8000f40:	1909      	adds	r1, r1, r4
 8000f42:	44e0      	add	r8, ip
 8000f44:	428c      	cmp	r4, r1
 8000f46:	d800      	bhi.n	8000f4a <__aeabi_ddiv+0x12e>
 8000f48:	e201      	b.n	800134e <__aeabi_ddiv+0x532>
 8000f4a:	1a88      	subs	r0, r1, r2
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f97b 	bl	8000248 <__aeabi_uidivmod>
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	0436      	lsls	r6, r6, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0409      	lsls	r1, r1, #16
 8000f5a:	0c36      	lsrs	r6, r6, #16
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	430e      	orrs	r6, r1
 8000f60:	42b2      	cmp	r2, r6
 8000f62:	d904      	bls.n	8000f6e <__aeabi_ddiv+0x152>
 8000f64:	1936      	adds	r6, r6, r4
 8000f66:	3b01      	subs	r3, #1
 8000f68:	42b4      	cmp	r4, r6
 8000f6a:	d800      	bhi.n	8000f6e <__aeabi_ddiv+0x152>
 8000f6c:	e1e9      	b.n	8001342 <__aeabi_ddiv+0x526>
 8000f6e:	1ab0      	subs	r0, r6, r2
 8000f70:	4642      	mov	r2, r8
 8000f72:	9e00      	ldr	r6, [sp, #0]
 8000f74:	0412      	lsls	r2, r2, #16
 8000f76:	431a      	orrs	r2, r3
 8000f78:	0c33      	lsrs	r3, r6, #16
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	0c11      	lsrs	r1, r2, #16
 8000f7e:	4690      	mov	r8, r2
 8000f80:	9302      	str	r3, [sp, #8]
 8000f82:	0413      	lsls	r3, r2, #16
 8000f84:	0432      	lsls	r2, r6, #16
 8000f86:	0c16      	lsrs	r6, r2, #16
 8000f88:	0032      	movs	r2, r6
 8000f8a:	0c1b      	lsrs	r3, r3, #16
 8000f8c:	435a      	muls	r2, r3
 8000f8e:	9603      	str	r6, [sp, #12]
 8000f90:	437b      	muls	r3, r7
 8000f92:	434e      	muls	r6, r1
 8000f94:	4379      	muls	r1, r7
 8000f96:	0c17      	lsrs	r7, r2, #16
 8000f98:	46bc      	mov	ip, r7
 8000f9a:	199b      	adds	r3, r3, r6
 8000f9c:	4463      	add	r3, ip
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	d903      	bls.n	8000faa <__aeabi_ddiv+0x18e>
 8000fa2:	2680      	movs	r6, #128	; 0x80
 8000fa4:	0276      	lsls	r6, r6, #9
 8000fa6:	46b4      	mov	ip, r6
 8000fa8:	4461      	add	r1, ip
 8000faa:	0c1e      	lsrs	r6, r3, #16
 8000fac:	1871      	adds	r1, r6, r1
 8000fae:	0416      	lsls	r6, r2, #16
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	0c36      	lsrs	r6, r6, #16
 8000fb4:	199e      	adds	r6, r3, r6
 8000fb6:	4288      	cmp	r0, r1
 8000fb8:	d302      	bcc.n	8000fc0 <__aeabi_ddiv+0x1a4>
 8000fba:	d112      	bne.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fbc:	42b5      	cmp	r5, r6
 8000fbe:	d210      	bcs.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8000fc0:	4643      	mov	r3, r8
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	9b00      	ldr	r3, [sp, #0]
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	4465      	add	r5, ip
 8000fca:	001f      	movs	r7, r3
 8000fcc:	429d      	cmp	r5, r3
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	191b      	adds	r3, r3, r4
 8000fd4:	18c0      	adds	r0, r0, r3
 8000fd6:	4284      	cmp	r4, r0
 8000fd8:	d200      	bcs.n	8000fdc <__aeabi_ddiv+0x1c0>
 8000fda:	e19e      	b.n	800131a <__aeabi_ddiv+0x4fe>
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8000fde:	e199      	b.n	8001314 <__aeabi_ddiv+0x4f8>
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	1bae      	subs	r6, r5, r6
 8000fe4:	42b5      	cmp	r5, r6
 8000fe6:	41ad      	sbcs	r5, r5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	426d      	negs	r5, r5
 8000fec:	1b40      	subs	r0, r0, r5
 8000fee:	4284      	cmp	r4, r0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_ddiv+0x1d8>
 8000ff2:	e1d2      	b.n	800139a <__aeabi_ddiv+0x57e>
 8000ff4:	4649      	mov	r1, r9
 8000ff6:	f7ff f927 	bl	8000248 <__aeabi_uidivmod>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	040b      	lsls	r3, r1, #16
 8000ffe:	4342      	muls	r2, r0
 8001000:	0c31      	lsrs	r1, r6, #16
 8001002:	0005      	movs	r5, r0
 8001004:	4319      	orrs	r1, r3
 8001006:	428a      	cmp	r2, r1
 8001008:	d900      	bls.n	800100c <__aeabi_ddiv+0x1f0>
 800100a:	e16c      	b.n	80012e6 <__aeabi_ddiv+0x4ca>
 800100c:	1a88      	subs	r0, r1, r2
 800100e:	4649      	mov	r1, r9
 8001010:	f7ff f91a 	bl	8000248 <__aeabi_uidivmod>
 8001014:	9a01      	ldr	r2, [sp, #4]
 8001016:	0436      	lsls	r6, r6, #16
 8001018:	4342      	muls	r2, r0
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	0c36      	lsrs	r6, r6, #16
 800101e:	0003      	movs	r3, r0
 8001020:	430e      	orrs	r6, r1
 8001022:	42b2      	cmp	r2, r6
 8001024:	d900      	bls.n	8001028 <__aeabi_ddiv+0x20c>
 8001026:	e153      	b.n	80012d0 <__aeabi_ddiv+0x4b4>
 8001028:	9803      	ldr	r0, [sp, #12]
 800102a:	1ab6      	subs	r6, r6, r2
 800102c:	0002      	movs	r2, r0
 800102e:	042d      	lsls	r5, r5, #16
 8001030:	431d      	orrs	r5, r3
 8001032:	9f02      	ldr	r7, [sp, #8]
 8001034:	042b      	lsls	r3, r5, #16
 8001036:	0c1b      	lsrs	r3, r3, #16
 8001038:	435a      	muls	r2, r3
 800103a:	437b      	muls	r3, r7
 800103c:	469c      	mov	ip, r3
 800103e:	0c29      	lsrs	r1, r5, #16
 8001040:	4348      	muls	r0, r1
 8001042:	0c13      	lsrs	r3, r2, #16
 8001044:	4484      	add	ip, r0
 8001046:	4463      	add	r3, ip
 8001048:	4379      	muls	r1, r7
 800104a:	4298      	cmp	r0, r3
 800104c:	d903      	bls.n	8001056 <__aeabi_ddiv+0x23a>
 800104e:	2080      	movs	r0, #128	; 0x80
 8001050:	0240      	lsls	r0, r0, #9
 8001052:	4684      	mov	ip, r0
 8001054:	4461      	add	r1, ip
 8001056:	0c18      	lsrs	r0, r3, #16
 8001058:	0412      	lsls	r2, r2, #16
 800105a:	041b      	lsls	r3, r3, #16
 800105c:	0c12      	lsrs	r2, r2, #16
 800105e:	1840      	adds	r0, r0, r1
 8001060:	189b      	adds	r3, r3, r2
 8001062:	4286      	cmp	r6, r0
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x24c>
 8001066:	e100      	b.n	800126a <__aeabi_ddiv+0x44e>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x250>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x448>
 800106c:	2301      	movs	r3, #1
 800106e:	431d      	orrs	r5, r3
 8001070:	4b49      	ldr	r3, [pc, #292]	; (8001198 <__aeabi_ddiv+0x37c>)
 8001072:	445b      	add	r3, fp
 8001074:	2b00      	cmp	r3, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_ddiv+0x25e>
 8001078:	e0aa      	b.n	80011d0 <__aeabi_ddiv+0x3b4>
 800107a:	076a      	lsls	r2, r5, #29
 800107c:	d000      	beq.n	8001080 <__aeabi_ddiv+0x264>
 800107e:	e13d      	b.n	80012fc <__aeabi_ddiv+0x4e0>
 8001080:	08e9      	lsrs	r1, r5, #3
 8001082:	4642      	mov	r2, r8
 8001084:	01d2      	lsls	r2, r2, #7
 8001086:	d506      	bpl.n	8001096 <__aeabi_ddiv+0x27a>
 8001088:	4642      	mov	r2, r8
 800108a:	4b44      	ldr	r3, [pc, #272]	; (800119c <__aeabi_ddiv+0x380>)
 800108c:	401a      	ands	r2, r3
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	4690      	mov	r8, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	445b      	add	r3, fp
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <__aeabi_ddiv+0x384>)
 8001098:	4293      	cmp	r3, r2
 800109a:	dd00      	ble.n	800109e <__aeabi_ddiv+0x282>
 800109c:	e723      	b.n	8000ee6 <__aeabi_ddiv+0xca>
 800109e:	4642      	mov	r2, r8
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	0755      	lsls	r5, r2, #29
 80010a4:	0252      	lsls	r2, r2, #9
 80010a6:	430d      	orrs	r5, r1
 80010a8:	0b12      	lsrs	r2, r2, #12
 80010aa:	0d5b      	lsrs	r3, r3, #21
 80010ac:	e70d      	b.n	8000eca <__aeabi_ddiv+0xae>
 80010ae:	4651      	mov	r1, sl
 80010b0:	4321      	orrs	r1, r4
 80010b2:	d100      	bne.n	80010b6 <__aeabi_ddiv+0x29a>
 80010b4:	e07c      	b.n	80011b0 <__aeabi_ddiv+0x394>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d100      	bne.n	80010bc <__aeabi_ddiv+0x2a0>
 80010ba:	e0fb      	b.n	80012b4 <__aeabi_ddiv+0x498>
 80010bc:	0020      	movs	r0, r4
 80010be:	f001 fa1b 	bl	80024f8 <__clzsi2>
 80010c2:	0002      	movs	r2, r0
 80010c4:	3a0b      	subs	r2, #11
 80010c6:	231d      	movs	r3, #29
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	4652      	mov	r2, sl
 80010cc:	0001      	movs	r1, r0
 80010ce:	40da      	lsrs	r2, r3
 80010d0:	4653      	mov	r3, sl
 80010d2:	3908      	subs	r1, #8
 80010d4:	408b      	lsls	r3, r1
 80010d6:	408c      	lsls	r4, r1
 80010d8:	0019      	movs	r1, r3
 80010da:	4314      	orrs	r4, r2
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <__aeabi_ddiv+0x388>)
 80010de:	4458      	add	r0, fp
 80010e0:	469b      	mov	fp, r3
 80010e2:	4483      	add	fp, r0
 80010e4:	2000      	movs	r0, #0
 80010e6:	e6d9      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80010e8:	0003      	movs	r3, r0
 80010ea:	4323      	orrs	r3, r4
 80010ec:	4698      	mov	r8, r3
 80010ee:	d044      	beq.n	800117a <__aeabi_ddiv+0x35e>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x2da>
 80010f4:	e0cf      	b.n	8001296 <__aeabi_ddiv+0x47a>
 80010f6:	0020      	movs	r0, r4
 80010f8:	f001 f9fe 	bl	80024f8 <__clzsi2>
 80010fc:	0001      	movs	r1, r0
 80010fe:	0002      	movs	r2, r0
 8001100:	390b      	subs	r1, #11
 8001102:	231d      	movs	r3, #29
 8001104:	1a5b      	subs	r3, r3, r1
 8001106:	4649      	mov	r1, r9
 8001108:	0010      	movs	r0, r2
 800110a:	40d9      	lsrs	r1, r3
 800110c:	3808      	subs	r0, #8
 800110e:	4084      	lsls	r4, r0
 8001110:	000b      	movs	r3, r1
 8001112:	464d      	mov	r5, r9
 8001114:	4323      	orrs	r3, r4
 8001116:	4698      	mov	r8, r3
 8001118:	4085      	lsls	r5, r0
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <__aeabi_ddiv+0x38c>)
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	469b      	mov	fp, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4699      	mov	r9, r3
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	e69e      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 8001128:	0002      	movs	r2, r0
 800112a:	4322      	orrs	r2, r4
 800112c:	4690      	mov	r8, r2
 800112e:	d11d      	bne.n	800116c <__aeabi_ddiv+0x350>
 8001130:	2208      	movs	r2, #8
 8001132:	469b      	mov	fp, r3
 8001134:	2302      	movs	r3, #2
 8001136:	2500      	movs	r5, #0
 8001138:	4691      	mov	r9, r2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	e693      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800113e:	4651      	mov	r1, sl
 8001140:	4321      	orrs	r1, r4
 8001142:	d109      	bne.n	8001158 <__aeabi_ddiv+0x33c>
 8001144:	2302      	movs	r3, #2
 8001146:	464a      	mov	r2, r9
 8001148:	431a      	orrs	r2, r3
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <__aeabi_ddiv+0x390>)
 800114c:	4691      	mov	r9, r2
 800114e:	469c      	mov	ip, r3
 8001150:	2400      	movs	r4, #0
 8001152:	2002      	movs	r0, #2
 8001154:	44e3      	add	fp, ip
 8001156:	e6a1      	b.n	8000e9c <__aeabi_ddiv+0x80>
 8001158:	2303      	movs	r3, #3
 800115a:	464a      	mov	r2, r9
 800115c:	431a      	orrs	r2, r3
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <__aeabi_ddiv+0x390>)
 8001160:	4691      	mov	r9, r2
 8001162:	469c      	mov	ip, r3
 8001164:	4651      	mov	r1, sl
 8001166:	2003      	movs	r0, #3
 8001168:	44e3      	add	fp, ip
 800116a:	e697      	b.n	8000e9c <__aeabi_ddiv+0x80>
 800116c:	220c      	movs	r2, #12
 800116e:	469b      	mov	fp, r3
 8001170:	2303      	movs	r3, #3
 8001172:	46a0      	mov	r8, r4
 8001174:	4691      	mov	r9, r2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	e675      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800117a:	2304      	movs	r3, #4
 800117c:	4699      	mov	r9, r3
 800117e:	2300      	movs	r3, #0
 8001180:	469b      	mov	fp, r3
 8001182:	3301      	adds	r3, #1
 8001184:	2500      	movs	r5, #0
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	e66d      	b.n	8000e66 <__aeabi_ddiv+0x4a>
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	000007ff 	.word	0x000007ff
 8001190:	fffffc01 	.word	0xfffffc01
 8001194:	0800a364 	.word	0x0800a364
 8001198:	000003ff 	.word	0x000003ff
 800119c:	feffffff 	.word	0xfeffffff
 80011a0:	000007fe 	.word	0x000007fe
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	fffffc0d 	.word	0xfffffc0d
 80011ac:	fffff801 	.word	0xfffff801
 80011b0:	464a      	mov	r2, r9
 80011b2:	2301      	movs	r3, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	4691      	mov	r9, r2
 80011b8:	2400      	movs	r4, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	e66e      	b.n	8000e9c <__aeabi_ddiv+0x80>
 80011be:	2300      	movs	r3, #0
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	469a      	mov	sl, r3
 80011c4:	2500      	movs	r5, #0
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80011c8:	0312      	lsls	r2, r2, #12
 80011ca:	e67e      	b.n	8000eca <__aeabi_ddiv+0xae>
 80011cc:	2501      	movs	r5, #1
 80011ce:	426d      	negs	r5, r5
 80011d0:	2201      	movs	r2, #1
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	2a38      	cmp	r2, #56	; 0x38
 80011d6:	dd00      	ble.n	80011da <__aeabi_ddiv+0x3be>
 80011d8:	e674      	b.n	8000ec4 <__aeabi_ddiv+0xa8>
 80011da:	2a1f      	cmp	r2, #31
 80011dc:	dc00      	bgt.n	80011e0 <__aeabi_ddiv+0x3c4>
 80011de:	e0bd      	b.n	800135c <__aeabi_ddiv+0x540>
 80011e0:	211f      	movs	r1, #31
 80011e2:	4249      	negs	r1, r1
 80011e4:	1acb      	subs	r3, r1, r3
 80011e6:	4641      	mov	r1, r8
 80011e8:	40d9      	lsrs	r1, r3
 80011ea:	000b      	movs	r3, r1
 80011ec:	2a20      	cmp	r2, #32
 80011ee:	d004      	beq.n	80011fa <__aeabi_ddiv+0x3de>
 80011f0:	4641      	mov	r1, r8
 80011f2:	4a7e      	ldr	r2, [pc, #504]	; (80013ec <__aeabi_ddiv+0x5d0>)
 80011f4:	445a      	add	r2, fp
 80011f6:	4091      	lsls	r1, r2
 80011f8:	430d      	orrs	r5, r1
 80011fa:	0029      	movs	r1, r5
 80011fc:	1e4a      	subs	r2, r1, #1
 80011fe:	4191      	sbcs	r1, r2
 8001200:	4319      	orrs	r1, r3
 8001202:	2307      	movs	r3, #7
 8001204:	001d      	movs	r5, r3
 8001206:	2200      	movs	r2, #0
 8001208:	400d      	ands	r5, r1
 800120a:	420b      	tst	r3, r1
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x3f4>
 800120e:	e0d0      	b.n	80013b2 <__aeabi_ddiv+0x596>
 8001210:	220f      	movs	r2, #15
 8001212:	2300      	movs	r3, #0
 8001214:	400a      	ands	r2, r1
 8001216:	2a04      	cmp	r2, #4
 8001218:	d100      	bne.n	800121c <__aeabi_ddiv+0x400>
 800121a:	e0c7      	b.n	80013ac <__aeabi_ddiv+0x590>
 800121c:	1d0a      	adds	r2, r1, #4
 800121e:	428a      	cmp	r2, r1
 8001220:	4189      	sbcs	r1, r1
 8001222:	4249      	negs	r1, r1
 8001224:	185b      	adds	r3, r3, r1
 8001226:	0011      	movs	r1, r2
 8001228:	021a      	lsls	r2, r3, #8
 800122a:	d400      	bmi.n	800122e <__aeabi_ddiv+0x412>
 800122c:	e0be      	b.n	80013ac <__aeabi_ddiv+0x590>
 800122e:	2301      	movs	r3, #1
 8001230:	2200      	movs	r2, #0
 8001232:	2500      	movs	r5, #0
 8001234:	e649      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001236:	2280      	movs	r2, #128	; 0x80
 8001238:	4643      	mov	r3, r8
 800123a:	0312      	lsls	r2, r2, #12
 800123c:	4213      	tst	r3, r2
 800123e:	d008      	beq.n	8001252 <__aeabi_ddiv+0x436>
 8001240:	4214      	tst	r4, r2
 8001242:	d106      	bne.n	8001252 <__aeabi_ddiv+0x436>
 8001244:	4322      	orrs	r2, r4
 8001246:	0312      	lsls	r2, r2, #12
 8001248:	46ba      	mov	sl, r7
 800124a:	000d      	movs	r5, r1
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 800124e:	0b12      	lsrs	r2, r2, #12
 8001250:	e63b      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	4643      	mov	r3, r8
 8001256:	0312      	lsls	r2, r2, #12
 8001258:	431a      	orrs	r2, r3
 800125a:	0312      	lsls	r2, r2, #12
 800125c:	46b2      	mov	sl, r6
 800125e:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 8001260:	0b12      	lsrs	r2, r2, #12
 8001262:	e632      	b.n	8000eca <__aeabi_ddiv+0xae>
 8001264:	2b00      	cmp	r3, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x44e>
 8001268:	e702      	b.n	8001070 <__aeabi_ddiv+0x254>
 800126a:	19a6      	adds	r6, r4, r6
 800126c:	1e6a      	subs	r2, r5, #1
 800126e:	42a6      	cmp	r6, r4
 8001270:	d200      	bcs.n	8001274 <__aeabi_ddiv+0x458>
 8001272:	e089      	b.n	8001388 <__aeabi_ddiv+0x56c>
 8001274:	4286      	cmp	r6, r0
 8001276:	d200      	bcs.n	800127a <__aeabi_ddiv+0x45e>
 8001278:	e09f      	b.n	80013ba <__aeabi_ddiv+0x59e>
 800127a:	d100      	bne.n	800127e <__aeabi_ddiv+0x462>
 800127c:	e0af      	b.n	80013de <__aeabi_ddiv+0x5c2>
 800127e:	0015      	movs	r5, r2
 8001280:	e6f4      	b.n	800106c <__aeabi_ddiv+0x250>
 8001282:	42a9      	cmp	r1, r5
 8001284:	d900      	bls.n	8001288 <__aeabi_ddiv+0x46c>
 8001286:	e63c      	b.n	8000f02 <__aeabi_ddiv+0xe6>
 8001288:	4643      	mov	r3, r8
 800128a:	07de      	lsls	r6, r3, #31
 800128c:	0858      	lsrs	r0, r3, #1
 800128e:	086b      	lsrs	r3, r5, #1
 8001290:	431e      	orrs	r6, r3
 8001292:	07ed      	lsls	r5, r5, #31
 8001294:	e63c      	b.n	8000f10 <__aeabi_ddiv+0xf4>
 8001296:	f001 f92f 	bl	80024f8 <__clzsi2>
 800129a:	0001      	movs	r1, r0
 800129c:	0002      	movs	r2, r0
 800129e:	3115      	adds	r1, #21
 80012a0:	3220      	adds	r2, #32
 80012a2:	291c      	cmp	r1, #28
 80012a4:	dc00      	bgt.n	80012a8 <__aeabi_ddiv+0x48c>
 80012a6:	e72c      	b.n	8001102 <__aeabi_ddiv+0x2e6>
 80012a8:	464b      	mov	r3, r9
 80012aa:	3808      	subs	r0, #8
 80012ac:	4083      	lsls	r3, r0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4698      	mov	r8, r3
 80012b2:	e732      	b.n	800111a <__aeabi_ddiv+0x2fe>
 80012b4:	f001 f920 	bl	80024f8 <__clzsi2>
 80012b8:	0003      	movs	r3, r0
 80012ba:	001a      	movs	r2, r3
 80012bc:	3215      	adds	r2, #21
 80012be:	3020      	adds	r0, #32
 80012c0:	2a1c      	cmp	r2, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4aa>
 80012c4:	e6ff      	b.n	80010c6 <__aeabi_ddiv+0x2aa>
 80012c6:	4654      	mov	r4, sl
 80012c8:	3b08      	subs	r3, #8
 80012ca:	2100      	movs	r1, #0
 80012cc:	409c      	lsls	r4, r3
 80012ce:	e705      	b.n	80010dc <__aeabi_ddiv+0x2c0>
 80012d0:	1936      	adds	r6, r6, r4
 80012d2:	3b01      	subs	r3, #1
 80012d4:	42b4      	cmp	r4, r6
 80012d6:	d900      	bls.n	80012da <__aeabi_ddiv+0x4be>
 80012d8:	e6a6      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012da:	42b2      	cmp	r2, r6
 80012dc:	d800      	bhi.n	80012e0 <__aeabi_ddiv+0x4c4>
 80012de:	e6a3      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e0:	1e83      	subs	r3, r0, #2
 80012e2:	1936      	adds	r6, r6, r4
 80012e4:	e6a0      	b.n	8001028 <__aeabi_ddiv+0x20c>
 80012e6:	1909      	adds	r1, r1, r4
 80012e8:	3d01      	subs	r5, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d900      	bls.n	80012f0 <__aeabi_ddiv+0x4d4>
 80012ee:	e68d      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f0:	428a      	cmp	r2, r1
 80012f2:	d800      	bhi.n	80012f6 <__aeabi_ddiv+0x4da>
 80012f4:	e68a      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012f6:	1e85      	subs	r5, r0, #2
 80012f8:	1909      	adds	r1, r1, r4
 80012fa:	e687      	b.n	800100c <__aeabi_ddiv+0x1f0>
 80012fc:	220f      	movs	r2, #15
 80012fe:	402a      	ands	r2, r5
 8001300:	2a04      	cmp	r2, #4
 8001302:	d100      	bne.n	8001306 <__aeabi_ddiv+0x4ea>
 8001304:	e6bc      	b.n	8001080 <__aeabi_ddiv+0x264>
 8001306:	1d29      	adds	r1, r5, #4
 8001308:	42a9      	cmp	r1, r5
 800130a:	41ad      	sbcs	r5, r5
 800130c:	426d      	negs	r5, r5
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	44a8      	add	r8, r5
 8001312:	e6b6      	b.n	8001082 <__aeabi_ddiv+0x266>
 8001314:	42af      	cmp	r7, r5
 8001316:	d900      	bls.n	800131a <__aeabi_ddiv+0x4fe>
 8001318:	e662      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 800131a:	4281      	cmp	r1, r0
 800131c:	d804      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 800131e:	d000      	beq.n	8001322 <__aeabi_ddiv+0x506>
 8001320:	e65e      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001322:	42ae      	cmp	r6, r5
 8001324:	d800      	bhi.n	8001328 <__aeabi_ddiv+0x50c>
 8001326:	e65b      	b.n	8000fe0 <__aeabi_ddiv+0x1c4>
 8001328:	2302      	movs	r3, #2
 800132a:	425b      	negs	r3, r3
 800132c:	469c      	mov	ip, r3
 800132e:	9b00      	ldr	r3, [sp, #0]
 8001330:	44e0      	add	r8, ip
 8001332:	469c      	mov	ip, r3
 8001334:	4465      	add	r5, ip
 8001336:	429d      	cmp	r5, r3
 8001338:	419b      	sbcs	r3, r3
 800133a:	425b      	negs	r3, r3
 800133c:	191b      	adds	r3, r3, r4
 800133e:	18c0      	adds	r0, r0, r3
 8001340:	e64f      	b.n	8000fe2 <__aeabi_ddiv+0x1c6>
 8001342:	42b2      	cmp	r2, r6
 8001344:	d800      	bhi.n	8001348 <__aeabi_ddiv+0x52c>
 8001346:	e612      	b.n	8000f6e <__aeabi_ddiv+0x152>
 8001348:	1e83      	subs	r3, r0, #2
 800134a:	1936      	adds	r6, r6, r4
 800134c:	e60f      	b.n	8000f6e <__aeabi_ddiv+0x152>
 800134e:	428a      	cmp	r2, r1
 8001350:	d800      	bhi.n	8001354 <__aeabi_ddiv+0x538>
 8001352:	e5fa      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 8001354:	1e83      	subs	r3, r0, #2
 8001356:	4698      	mov	r8, r3
 8001358:	1909      	adds	r1, r1, r4
 800135a:	e5f6      	b.n	8000f4a <__aeabi_ddiv+0x12e>
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <__aeabi_ddiv+0x5d4>)
 800135e:	0028      	movs	r0, r5
 8001360:	445b      	add	r3, fp
 8001362:	4641      	mov	r1, r8
 8001364:	409d      	lsls	r5, r3
 8001366:	4099      	lsls	r1, r3
 8001368:	40d0      	lsrs	r0, r2
 800136a:	1e6b      	subs	r3, r5, #1
 800136c:	419d      	sbcs	r5, r3
 800136e:	4643      	mov	r3, r8
 8001370:	4301      	orrs	r1, r0
 8001372:	4329      	orrs	r1, r5
 8001374:	40d3      	lsrs	r3, r2
 8001376:	074a      	lsls	r2, r1, #29
 8001378:	d100      	bne.n	800137c <__aeabi_ddiv+0x560>
 800137a:	e755      	b.n	8001228 <__aeabi_ddiv+0x40c>
 800137c:	220f      	movs	r2, #15
 800137e:	400a      	ands	r2, r1
 8001380:	2a04      	cmp	r2, #4
 8001382:	d000      	beq.n	8001386 <__aeabi_ddiv+0x56a>
 8001384:	e74a      	b.n	800121c <__aeabi_ddiv+0x400>
 8001386:	e74f      	b.n	8001228 <__aeabi_ddiv+0x40c>
 8001388:	0015      	movs	r5, r2
 800138a:	4286      	cmp	r6, r0
 800138c:	d000      	beq.n	8001390 <__aeabi_ddiv+0x574>
 800138e:	e66d      	b.n	800106c <__aeabi_ddiv+0x250>
 8001390:	9a00      	ldr	r2, [sp, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d000      	beq.n	8001398 <__aeabi_ddiv+0x57c>
 8001396:	e669      	b.n	800106c <__aeabi_ddiv+0x250>
 8001398:	e66a      	b.n	8001070 <__aeabi_ddiv+0x254>
 800139a:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <__aeabi_ddiv+0x5d8>)
 800139c:	445b      	add	r3, fp
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc00      	bgt.n	80013a4 <__aeabi_ddiv+0x588>
 80013a2:	e713      	b.n	80011cc <__aeabi_ddiv+0x3b0>
 80013a4:	2501      	movs	r5, #1
 80013a6:	2100      	movs	r1, #0
 80013a8:	44a8      	add	r8, r5
 80013aa:	e66a      	b.n	8001082 <__aeabi_ddiv+0x266>
 80013ac:	075d      	lsls	r5, r3, #29
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	0b1a      	lsrs	r2, r3, #12
 80013b2:	08c9      	lsrs	r1, r1, #3
 80013b4:	2300      	movs	r3, #0
 80013b6:	430d      	orrs	r5, r1
 80013b8:	e587      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013ba:	9900      	ldr	r1, [sp, #0]
 80013bc:	3d02      	subs	r5, #2
 80013be:	004a      	lsls	r2, r1, #1
 80013c0:	428a      	cmp	r2, r1
 80013c2:	41bf      	sbcs	r7, r7
 80013c4:	427f      	negs	r7, r7
 80013c6:	193f      	adds	r7, r7, r4
 80013c8:	19f6      	adds	r6, r6, r7
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	e7dd      	b.n	800138a <__aeabi_ddiv+0x56e>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	4643      	mov	r3, r8
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	431a      	orrs	r2, r3
 80013d6:	0312      	lsls	r2, r2, #12
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <__aeabi_ddiv+0x5cc>)
 80013da:	0b12      	lsrs	r2, r2, #12
 80013dc:	e575      	b.n	8000eca <__aeabi_ddiv+0xae>
 80013de:	9900      	ldr	r1, [sp, #0]
 80013e0:	4299      	cmp	r1, r3
 80013e2:	d3ea      	bcc.n	80013ba <__aeabi_ddiv+0x59e>
 80013e4:	0015      	movs	r5, r2
 80013e6:	e7d3      	b.n	8001390 <__aeabi_ddiv+0x574>
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	0000043e 	.word	0x0000043e
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	000003ff 	.word	0x000003ff

080013f8 <__eqdf2>:
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	464e      	mov	r6, r9
 80013fc:	4645      	mov	r5, r8
 80013fe:	46de      	mov	lr, fp
 8001400:	4657      	mov	r7, sl
 8001402:	4690      	mov	r8, r2
 8001404:	b5e0      	push	{r5, r6, r7, lr}
 8001406:	0017      	movs	r7, r2
 8001408:	031a      	lsls	r2, r3, #12
 800140a:	0b12      	lsrs	r2, r2, #12
 800140c:	0005      	movs	r5, r0
 800140e:	4684      	mov	ip, r0
 8001410:	4819      	ldr	r0, [pc, #100]	; (8001478 <__eqdf2+0x80>)
 8001412:	030e      	lsls	r6, r1, #12
 8001414:	004c      	lsls	r4, r1, #1
 8001416:	4691      	mov	r9, r2
 8001418:	005a      	lsls	r2, r3, #1
 800141a:	0fdb      	lsrs	r3, r3, #31
 800141c:	469b      	mov	fp, r3
 800141e:	0b36      	lsrs	r6, r6, #12
 8001420:	0d64      	lsrs	r4, r4, #21
 8001422:	0fc9      	lsrs	r1, r1, #31
 8001424:	0d52      	lsrs	r2, r2, #21
 8001426:	4284      	cmp	r4, r0
 8001428:	d019      	beq.n	800145e <__eqdf2+0x66>
 800142a:	4282      	cmp	r2, r0
 800142c:	d010      	beq.n	8001450 <__eqdf2+0x58>
 800142e:	2001      	movs	r0, #1
 8001430:	4294      	cmp	r4, r2
 8001432:	d10e      	bne.n	8001452 <__eqdf2+0x5a>
 8001434:	454e      	cmp	r6, r9
 8001436:	d10c      	bne.n	8001452 <__eqdf2+0x5a>
 8001438:	2001      	movs	r0, #1
 800143a:	45c4      	cmp	ip, r8
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x5a>
 800143e:	4559      	cmp	r1, fp
 8001440:	d017      	beq.n	8001472 <__eqdf2+0x7a>
 8001442:	2c00      	cmp	r4, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x5a>
 8001446:	0030      	movs	r0, r6
 8001448:	4328      	orrs	r0, r5
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x5a>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	0033      	movs	r3, r6
 8001460:	2001      	movs	r0, #1
 8001462:	432b      	orrs	r3, r5
 8001464:	d1f5      	bne.n	8001452 <__eqdf2+0x5a>
 8001466:	42a2      	cmp	r2, r4
 8001468:	d1f3      	bne.n	8001452 <__eqdf2+0x5a>
 800146a:	464b      	mov	r3, r9
 800146c:	433b      	orrs	r3, r7
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x5a>
 8001470:	e7e2      	b.n	8001438 <__eqdf2+0x40>
 8001472:	2000      	movs	r0, #0
 8001474:	e7ed      	b.n	8001452 <__eqdf2+0x5a>
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff

0800147c <__gedf2>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	4647      	mov	r7, r8
 8001480:	46ce      	mov	lr, r9
 8001482:	0004      	movs	r4, r0
 8001484:	0018      	movs	r0, r3
 8001486:	0016      	movs	r6, r2
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	0b1b      	lsrs	r3, r3, #12
 800148c:	4d2d      	ldr	r5, [pc, #180]	; (8001544 <__gedf2+0xc8>)
 800148e:	004a      	lsls	r2, r1, #1
 8001490:	4699      	mov	r9, r3
 8001492:	b580      	push	{r7, lr}
 8001494:	0043      	lsls	r3, r0, #1
 8001496:	030f      	lsls	r7, r1, #12
 8001498:	46a4      	mov	ip, r4
 800149a:	46b0      	mov	r8, r6
 800149c:	0b3f      	lsrs	r7, r7, #12
 800149e:	0d52      	lsrs	r2, r2, #21
 80014a0:	0fc9      	lsrs	r1, r1, #31
 80014a2:	0d5b      	lsrs	r3, r3, #21
 80014a4:	0fc0      	lsrs	r0, r0, #31
 80014a6:	42aa      	cmp	r2, r5
 80014a8:	d021      	beq.n	80014ee <__gedf2+0x72>
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	d013      	beq.n	80014d6 <__gedf2+0x5a>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d122      	bne.n	80014f8 <__gedf2+0x7c>
 80014b2:	433c      	orrs	r4, r7
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <__gedf2+0x42>
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d022      	beq.n	8001504 <__gedf2+0x88>
 80014be:	2c00      	cmp	r4, #0
 80014c0:	d010      	beq.n	80014e4 <__gedf2+0x68>
 80014c2:	4281      	cmp	r1, r0
 80014c4:	d022      	beq.n	800150c <__gedf2+0x90>
 80014c6:	2002      	movs	r0, #2
 80014c8:	3901      	subs	r1, #1
 80014ca:	4008      	ands	r0, r1
 80014cc:	3801      	subs	r0, #1
 80014ce:	bcc0      	pop	{r6, r7}
 80014d0:	46b9      	mov	r9, r7
 80014d2:	46b0      	mov	r8, r6
 80014d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d6:	464d      	mov	r5, r9
 80014d8:	432e      	orrs	r6, r5
 80014da:	d129      	bne.n	8001530 <__gedf2+0xb4>
 80014dc:	2a00      	cmp	r2, #0
 80014de:	d1f0      	bne.n	80014c2 <__gedf2+0x46>
 80014e0:	433c      	orrs	r4, r7
 80014e2:	d1ee      	bne.n	80014c2 <__gedf2+0x46>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d1f2      	bne.n	80014ce <__gedf2+0x52>
 80014e8:	2001      	movs	r0, #1
 80014ea:	4240      	negs	r0, r0
 80014ec:	e7ef      	b.n	80014ce <__gedf2+0x52>
 80014ee:	003d      	movs	r5, r7
 80014f0:	4325      	orrs	r5, r4
 80014f2:	d11d      	bne.n	8001530 <__gedf2+0xb4>
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d0ee      	beq.n	80014d6 <__gedf2+0x5a>
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e2      	bne.n	80014c2 <__gedf2+0x46>
 80014fc:	464c      	mov	r4, r9
 80014fe:	4326      	orrs	r6, r4
 8001500:	d1df      	bne.n	80014c2 <__gedf2+0x46>
 8001502:	e7e0      	b.n	80014c6 <__gedf2+0x4a>
 8001504:	2000      	movs	r0, #0
 8001506:	2c00      	cmp	r4, #0
 8001508:	d0e1      	beq.n	80014ce <__gedf2+0x52>
 800150a:	e7dc      	b.n	80014c6 <__gedf2+0x4a>
 800150c:	429a      	cmp	r2, r3
 800150e:	dc0a      	bgt.n	8001526 <__gedf2+0xaa>
 8001510:	dbe8      	blt.n	80014e4 <__gedf2+0x68>
 8001512:	454f      	cmp	r7, r9
 8001514:	d8d7      	bhi.n	80014c6 <__gedf2+0x4a>
 8001516:	d00e      	beq.n	8001536 <__gedf2+0xba>
 8001518:	2000      	movs	r0, #0
 800151a:	454f      	cmp	r7, r9
 800151c:	d2d7      	bcs.n	80014ce <__gedf2+0x52>
 800151e:	2900      	cmp	r1, #0
 8001520:	d0e2      	beq.n	80014e8 <__gedf2+0x6c>
 8001522:	0008      	movs	r0, r1
 8001524:	e7d3      	b.n	80014ce <__gedf2+0x52>
 8001526:	4243      	negs	r3, r0
 8001528:	4158      	adcs	r0, r3
 800152a:	0040      	lsls	r0, r0, #1
 800152c:	3801      	subs	r0, #1
 800152e:	e7ce      	b.n	80014ce <__gedf2+0x52>
 8001530:	2002      	movs	r0, #2
 8001532:	4240      	negs	r0, r0
 8001534:	e7cb      	b.n	80014ce <__gedf2+0x52>
 8001536:	45c4      	cmp	ip, r8
 8001538:	d8c5      	bhi.n	80014c6 <__gedf2+0x4a>
 800153a:	2000      	movs	r0, #0
 800153c:	45c4      	cmp	ip, r8
 800153e:	d2c6      	bcs.n	80014ce <__gedf2+0x52>
 8001540:	e7ed      	b.n	800151e <__gedf2+0xa2>
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__ledf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4647      	mov	r7, r8
 800154c:	46ce      	mov	lr, r9
 800154e:	0004      	movs	r4, r0
 8001550:	0018      	movs	r0, r3
 8001552:	0016      	movs	r6, r2
 8001554:	031b      	lsls	r3, r3, #12
 8001556:	0b1b      	lsrs	r3, r3, #12
 8001558:	4d2c      	ldr	r5, [pc, #176]	; (800160c <__ledf2+0xc4>)
 800155a:	004a      	lsls	r2, r1, #1
 800155c:	4699      	mov	r9, r3
 800155e:	b580      	push	{r7, lr}
 8001560:	0043      	lsls	r3, r0, #1
 8001562:	030f      	lsls	r7, r1, #12
 8001564:	46a4      	mov	ip, r4
 8001566:	46b0      	mov	r8, r6
 8001568:	0b3f      	lsrs	r7, r7, #12
 800156a:	0d52      	lsrs	r2, r2, #21
 800156c:	0fc9      	lsrs	r1, r1, #31
 800156e:	0d5b      	lsrs	r3, r3, #21
 8001570:	0fc0      	lsrs	r0, r0, #31
 8001572:	42aa      	cmp	r2, r5
 8001574:	d00d      	beq.n	8001592 <__ledf2+0x4a>
 8001576:	42ab      	cmp	r3, r5
 8001578:	d010      	beq.n	800159c <__ledf2+0x54>
 800157a:	2a00      	cmp	r2, #0
 800157c:	d127      	bne.n	80015ce <__ledf2+0x86>
 800157e:	433c      	orrs	r4, r7
 8001580:	2b00      	cmp	r3, #0
 8001582:	d111      	bne.n	80015a8 <__ledf2+0x60>
 8001584:	464d      	mov	r5, r9
 8001586:	432e      	orrs	r6, r5
 8001588:	d10e      	bne.n	80015a8 <__ledf2+0x60>
 800158a:	2000      	movs	r0, #0
 800158c:	2c00      	cmp	r4, #0
 800158e:	d015      	beq.n	80015bc <__ledf2+0x74>
 8001590:	e00e      	b.n	80015b0 <__ledf2+0x68>
 8001592:	003d      	movs	r5, r7
 8001594:	4325      	orrs	r5, r4
 8001596:	d110      	bne.n	80015ba <__ledf2+0x72>
 8001598:	4293      	cmp	r3, r2
 800159a:	d118      	bne.n	80015ce <__ledf2+0x86>
 800159c:	464d      	mov	r5, r9
 800159e:	432e      	orrs	r6, r5
 80015a0:	d10b      	bne.n	80015ba <__ledf2+0x72>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <__ledf2+0x64>
 80015a6:	433c      	orrs	r4, r7
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d00b      	beq.n	80015c4 <__ledf2+0x7c>
 80015ac:	4281      	cmp	r1, r0
 80015ae:	d014      	beq.n	80015da <__ledf2+0x92>
 80015b0:	2002      	movs	r0, #2
 80015b2:	3901      	subs	r1, #1
 80015b4:	4008      	ands	r0, r1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e000      	b.n	80015bc <__ledf2+0x74>
 80015ba:	2002      	movs	r0, #2
 80015bc:	bcc0      	pop	{r6, r7}
 80015be:	46b9      	mov	r9, r7
 80015c0:	46b0      	mov	r8, r6
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1f9      	bne.n	80015bc <__ledf2+0x74>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7f6      	b.n	80015bc <__ledf2+0x74>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ec      	bne.n	80015ac <__ledf2+0x64>
 80015d2:	464c      	mov	r4, r9
 80015d4:	4326      	orrs	r6, r4
 80015d6:	d1e9      	bne.n	80015ac <__ledf2+0x64>
 80015d8:	e7ea      	b.n	80015b0 <__ledf2+0x68>
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd04      	ble.n	80015e8 <__ledf2+0xa0>
 80015de:	4243      	negs	r3, r0
 80015e0:	4158      	adcs	r0, r3
 80015e2:	0040      	lsls	r0, r0, #1
 80015e4:	3801      	subs	r0, #1
 80015e6:	e7e9      	b.n	80015bc <__ledf2+0x74>
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbeb      	blt.n	80015c4 <__ledf2+0x7c>
 80015ec:	454f      	cmp	r7, r9
 80015ee:	d8df      	bhi.n	80015b0 <__ledf2+0x68>
 80015f0:	d006      	beq.n	8001600 <__ledf2+0xb8>
 80015f2:	2000      	movs	r0, #0
 80015f4:	454f      	cmp	r7, r9
 80015f6:	d2e1      	bcs.n	80015bc <__ledf2+0x74>
 80015f8:	2900      	cmp	r1, #0
 80015fa:	d0e5      	beq.n	80015c8 <__ledf2+0x80>
 80015fc:	0008      	movs	r0, r1
 80015fe:	e7dd      	b.n	80015bc <__ledf2+0x74>
 8001600:	45c4      	cmp	ip, r8
 8001602:	d8d5      	bhi.n	80015b0 <__ledf2+0x68>
 8001604:	2000      	movs	r0, #0
 8001606:	45c4      	cmp	ip, r8
 8001608:	d2d8      	bcs.n	80015bc <__ledf2+0x74>
 800160a:	e7f5      	b.n	80015f8 <__ledf2+0xb0>
 800160c:	000007ff 	.word	0x000007ff

08001610 <__aeabi_dmul>:
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	4645      	mov	r5, r8
 8001614:	46de      	mov	lr, fp
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	b5e0      	push	{r5, r6, r7, lr}
 800161c:	001f      	movs	r7, r3
 800161e:	030b      	lsls	r3, r1, #12
 8001620:	0b1b      	lsrs	r3, r3, #12
 8001622:	469b      	mov	fp, r3
 8001624:	004d      	lsls	r5, r1, #1
 8001626:	0fcb      	lsrs	r3, r1, #31
 8001628:	0004      	movs	r4, r0
 800162a:	4691      	mov	r9, r2
 800162c:	4698      	mov	r8, r3
 800162e:	b087      	sub	sp, #28
 8001630:	0d6d      	lsrs	r5, r5, #21
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0x26>
 8001634:	e1cd      	b.n	80019d2 <__aeabi_dmul+0x3c2>
 8001636:	4bce      	ldr	r3, [pc, #824]	; (8001970 <__aeabi_dmul+0x360>)
 8001638:	429d      	cmp	r5, r3
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2e>
 800163c:	e1e9      	b.n	8001a12 <__aeabi_dmul+0x402>
 800163e:	465a      	mov	r2, fp
 8001640:	0f43      	lsrs	r3, r0, #29
 8001642:	00d2      	lsls	r2, r2, #3
 8001644:	4313      	orrs	r3, r2
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0412      	lsls	r2, r2, #16
 800164a:	431a      	orrs	r2, r3
 800164c:	00c3      	lsls	r3, r0, #3
 800164e:	469a      	mov	sl, r3
 8001650:	4bc8      	ldr	r3, [pc, #800]	; (8001974 <__aeabi_dmul+0x364>)
 8001652:	4693      	mov	fp, r2
 8001654:	469c      	mov	ip, r3
 8001656:	2300      	movs	r3, #0
 8001658:	2600      	movs	r6, #0
 800165a:	4465      	add	r5, ip
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	033c      	lsls	r4, r7, #12
 8001660:	007b      	lsls	r3, r7, #1
 8001662:	4648      	mov	r0, r9
 8001664:	0b24      	lsrs	r4, r4, #12
 8001666:	0d5b      	lsrs	r3, r3, #21
 8001668:	0fff      	lsrs	r7, r7, #31
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x60>
 800166e:	e189      	b.n	8001984 <__aeabi_dmul+0x374>
 8001670:	4abf      	ldr	r2, [pc, #764]	; (8001970 <__aeabi_dmul+0x360>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <__aeabi_dmul+0x9a>
 8001676:	0f42      	lsrs	r2, r0, #29
 8001678:	00e4      	lsls	r4, r4, #3
 800167a:	4322      	orrs	r2, r4
 800167c:	2480      	movs	r4, #128	; 0x80
 800167e:	0424      	lsls	r4, r4, #16
 8001680:	4314      	orrs	r4, r2
 8001682:	4abc      	ldr	r2, [pc, #752]	; (8001974 <__aeabi_dmul+0x364>)
 8001684:	2100      	movs	r1, #0
 8001686:	4694      	mov	ip, r2
 8001688:	4642      	mov	r2, r8
 800168a:	4463      	add	r3, ip
 800168c:	195b      	adds	r3, r3, r5
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	407a      	eors	r2, r7
 8001694:	3301      	adds	r3, #1
 8001696:	00c0      	lsls	r0, r0, #3
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2e0a      	cmp	r6, #10
 800169e:	dd1c      	ble.n	80016da <__aeabi_dmul+0xca>
 80016a0:	003a      	movs	r2, r7
 80016a2:	2e0b      	cmp	r6, #11
 80016a4:	d05e      	beq.n	8001764 <__aeabi_dmul+0x154>
 80016a6:	4647      	mov	r7, r8
 80016a8:	e056      	b.n	8001758 <__aeabi_dmul+0x148>
 80016aa:	4649      	mov	r1, r9
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <__aeabi_dmul+0x360>)
 80016ae:	4321      	orrs	r1, r4
 80016b0:	18eb      	adds	r3, r5, r3
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	2900      	cmp	r1, #0
 80016b6:	d12a      	bne.n	800170e <__aeabi_dmul+0xfe>
 80016b8:	2080      	movs	r0, #128	; 0x80
 80016ba:	2202      	movs	r2, #2
 80016bc:	0100      	lsls	r0, r0, #4
 80016be:	002b      	movs	r3, r5
 80016c0:	4684      	mov	ip, r0
 80016c2:	4316      	orrs	r6, r2
 80016c4:	4642      	mov	r2, r8
 80016c6:	4463      	add	r3, ip
 80016c8:	407a      	eors	r2, r7
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2e0a      	cmp	r6, #10
 80016d0:	dd00      	ble.n	80016d4 <__aeabi_dmul+0xc4>
 80016d2:	e231      	b.n	8001b38 <__aeabi_dmul+0x528>
 80016d4:	2000      	movs	r0, #0
 80016d6:	2400      	movs	r4, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	2e02      	cmp	r6, #2
 80016dc:	dc26      	bgt.n	800172c <__aeabi_dmul+0x11c>
 80016de:	3e01      	subs	r6, #1
 80016e0:	2e01      	cmp	r6, #1
 80016e2:	d852      	bhi.n	800178a <__aeabi_dmul+0x17a>
 80016e4:	2902      	cmp	r1, #2
 80016e6:	d04c      	beq.n	8001782 <__aeabi_dmul+0x172>
 80016e8:	2901      	cmp	r1, #1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dmul+0xde>
 80016ec:	e118      	b.n	8001920 <__aeabi_dmul+0x310>
 80016ee:	2300      	movs	r3, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	051b      	lsls	r3, r3, #20
 80016f6:	4323      	orrs	r3, r4
 80016f8:	07d2      	lsls	r2, r2, #31
 80016fa:	4313      	orrs	r3, r2
 80016fc:	0028      	movs	r0, r5
 80016fe:	0019      	movs	r1, r3
 8001700:	b007      	add	sp, #28
 8001702:	bcf0      	pop	{r4, r5, r6, r7}
 8001704:	46bb      	mov	fp, r7
 8001706:	46b2      	mov	sl, r6
 8001708:	46a9      	mov	r9, r5
 800170a:	46a0      	mov	r8, r4
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	2203      	movs	r2, #3
 8001712:	0109      	lsls	r1, r1, #4
 8001714:	002b      	movs	r3, r5
 8001716:	468c      	mov	ip, r1
 8001718:	4316      	orrs	r6, r2
 800171a:	4642      	mov	r2, r8
 800171c:	4463      	add	r3, ip
 800171e:	407a      	eors	r2, r7
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2e0a      	cmp	r6, #10
 8001726:	dd00      	ble.n	800172a <__aeabi_dmul+0x11a>
 8001728:	e228      	b.n	8001b7c <__aeabi_dmul+0x56c>
 800172a:	2103      	movs	r1, #3
 800172c:	2501      	movs	r5, #1
 800172e:	40b5      	lsls	r5, r6
 8001730:	46ac      	mov	ip, r5
 8001732:	26a6      	movs	r6, #166	; 0xa6
 8001734:	4663      	mov	r3, ip
 8001736:	00f6      	lsls	r6, r6, #3
 8001738:	4035      	ands	r5, r6
 800173a:	4233      	tst	r3, r6
 800173c:	d10b      	bne.n	8001756 <__aeabi_dmul+0x146>
 800173e:	2690      	movs	r6, #144	; 0x90
 8001740:	00b6      	lsls	r6, r6, #2
 8001742:	4233      	tst	r3, r6
 8001744:	d118      	bne.n	8001778 <__aeabi_dmul+0x168>
 8001746:	3eb9      	subs	r6, #185	; 0xb9
 8001748:	3eff      	subs	r6, #255	; 0xff
 800174a:	421e      	tst	r6, r3
 800174c:	d01d      	beq.n	800178a <__aeabi_dmul+0x17a>
 800174e:	46a3      	mov	fp, r4
 8001750:	4682      	mov	sl, r0
 8001752:	9100      	str	r1, [sp, #0]
 8001754:	e000      	b.n	8001758 <__aeabi_dmul+0x148>
 8001756:	0017      	movs	r7, r2
 8001758:	9900      	ldr	r1, [sp, #0]
 800175a:	003a      	movs	r2, r7
 800175c:	2902      	cmp	r1, #2
 800175e:	d010      	beq.n	8001782 <__aeabi_dmul+0x172>
 8001760:	465c      	mov	r4, fp
 8001762:	4650      	mov	r0, sl
 8001764:	2903      	cmp	r1, #3
 8001766:	d1bf      	bne.n	80016e8 <__aeabi_dmul+0xd8>
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	031b      	lsls	r3, r3, #12
 800176c:	431c      	orrs	r4, r3
 800176e:	0324      	lsls	r4, r4, #12
 8001770:	0005      	movs	r5, r0
 8001772:	4b7f      	ldr	r3, [pc, #508]	; (8001970 <__aeabi_dmul+0x360>)
 8001774:	0b24      	lsrs	r4, r4, #12
 8001776:	e7bd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	2200      	movs	r2, #0
 800177c:	4b7c      	ldr	r3, [pc, #496]	; (8001970 <__aeabi_dmul+0x360>)
 800177e:	0324      	lsls	r4, r4, #12
 8001780:	e7b8      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001782:	2400      	movs	r4, #0
 8001784:	2500      	movs	r5, #0
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <__aeabi_dmul+0x360>)
 8001788:	e7b4      	b.n	80016f4 <__aeabi_dmul+0xe4>
 800178a:	4653      	mov	r3, sl
 800178c:	041e      	lsls	r6, r3, #16
 800178e:	0c36      	lsrs	r6, r6, #16
 8001790:	0c1f      	lsrs	r7, r3, #16
 8001792:	0033      	movs	r3, r6
 8001794:	0c01      	lsrs	r1, r0, #16
 8001796:	0400      	lsls	r0, r0, #16
 8001798:	0c00      	lsrs	r0, r0, #16
 800179a:	4343      	muls	r3, r0
 800179c:	4698      	mov	r8, r3
 800179e:	0003      	movs	r3, r0
 80017a0:	437b      	muls	r3, r7
 80017a2:	4699      	mov	r9, r3
 80017a4:	0033      	movs	r3, r6
 80017a6:	434b      	muls	r3, r1
 80017a8:	469c      	mov	ip, r3
 80017aa:	4643      	mov	r3, r8
 80017ac:	000d      	movs	r5, r1
 80017ae:	0c1b      	lsrs	r3, r3, #16
 80017b0:	469a      	mov	sl, r3
 80017b2:	437d      	muls	r5, r7
 80017b4:	44cc      	add	ip, r9
 80017b6:	44d4      	add	ip, sl
 80017b8:	9500      	str	r5, [sp, #0]
 80017ba:	45e1      	cmp	r9, ip
 80017bc:	d904      	bls.n	80017c8 <__aeabi_dmul+0x1b8>
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4699      	mov	r9, r3
 80017c4:	444d      	add	r5, r9
 80017c6:	9500      	str	r5, [sp, #0]
 80017c8:	4663      	mov	r3, ip
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	001d      	movs	r5, r3
 80017ce:	4663      	mov	r3, ip
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	469c      	mov	ip, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	041b      	lsls	r3, r3, #16
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	4698      	mov	r8, r3
 80017dc:	4663      	mov	r3, ip
 80017de:	4443      	add	r3, r8
 80017e0:	9303      	str	r3, [sp, #12]
 80017e2:	0c23      	lsrs	r3, r4, #16
 80017e4:	4698      	mov	r8, r3
 80017e6:	0033      	movs	r3, r6
 80017e8:	0424      	lsls	r4, r4, #16
 80017ea:	0c24      	lsrs	r4, r4, #16
 80017ec:	4363      	muls	r3, r4
 80017ee:	469c      	mov	ip, r3
 80017f0:	0023      	movs	r3, r4
 80017f2:	437b      	muls	r3, r7
 80017f4:	4699      	mov	r9, r3
 80017f6:	4643      	mov	r3, r8
 80017f8:	435e      	muls	r6, r3
 80017fa:	435f      	muls	r7, r3
 80017fc:	444e      	add	r6, r9
 80017fe:	4663      	mov	r3, ip
 8001800:	46b2      	mov	sl, r6
 8001802:	0c1e      	lsrs	r6, r3, #16
 8001804:	4456      	add	r6, sl
 8001806:	45b1      	cmp	r9, r6
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x202>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	4699      	mov	r9, r3
 8001810:	444f      	add	r7, r9
 8001812:	0c33      	lsrs	r3, r6, #16
 8001814:	4699      	mov	r9, r3
 8001816:	003b      	movs	r3, r7
 8001818:	444b      	add	r3, r9
 800181a:	9305      	str	r3, [sp, #20]
 800181c:	4663      	mov	r3, ip
 800181e:	46ac      	mov	ip, r5
 8001820:	041f      	lsls	r7, r3, #16
 8001822:	0c3f      	lsrs	r7, r7, #16
 8001824:	0436      	lsls	r6, r6, #16
 8001826:	19f6      	adds	r6, r6, r7
 8001828:	44b4      	add	ip, r6
 800182a:	4663      	mov	r3, ip
 800182c:	9304      	str	r3, [sp, #16]
 800182e:	465b      	mov	r3, fp
 8001830:	0c1b      	lsrs	r3, r3, #16
 8001832:	469c      	mov	ip, r3
 8001834:	465b      	mov	r3, fp
 8001836:	041f      	lsls	r7, r3, #16
 8001838:	0c3f      	lsrs	r7, r7, #16
 800183a:	003b      	movs	r3, r7
 800183c:	4343      	muls	r3, r0
 800183e:	4699      	mov	r9, r3
 8001840:	4663      	mov	r3, ip
 8001842:	4343      	muls	r3, r0
 8001844:	469a      	mov	sl, r3
 8001846:	464b      	mov	r3, r9
 8001848:	4660      	mov	r0, ip
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	469b      	mov	fp, r3
 800184e:	4348      	muls	r0, r1
 8001850:	4379      	muls	r1, r7
 8001852:	4451      	add	r1, sl
 8001854:	4459      	add	r1, fp
 8001856:	458a      	cmp	sl, r1
 8001858:	d903      	bls.n	8001862 <__aeabi_dmul+0x252>
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	469a      	mov	sl, r3
 8001860:	4450      	add	r0, sl
 8001862:	0c0b      	lsrs	r3, r1, #16
 8001864:	469a      	mov	sl, r3
 8001866:	464b      	mov	r3, r9
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	4699      	mov	r9, r3
 800186e:	003b      	movs	r3, r7
 8001870:	4363      	muls	r3, r4
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	4645      	mov	r5, r8
 8001876:	4449      	add	r1, r9
 8001878:	4699      	mov	r9, r3
 800187a:	4663      	mov	r3, ip
 800187c:	435c      	muls	r4, r3
 800187e:	436b      	muls	r3, r5
 8001880:	469c      	mov	ip, r3
 8001882:	464b      	mov	r3, r9
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	436f      	muls	r7, r5
 800188a:	193f      	adds	r7, r7, r4
 800188c:	4447      	add	r7, r8
 800188e:	4450      	add	r0, sl
 8001890:	42bc      	cmp	r4, r7
 8001892:	d903      	bls.n	800189c <__aeabi_dmul+0x28c>
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	4698      	mov	r8, r3
 800189a:	44c4      	add	ip, r8
 800189c:	9b04      	ldr	r3, [sp, #16]
 800189e:	9d00      	ldr	r5, [sp, #0]
 80018a0:	4698      	mov	r8, r3
 80018a2:	4445      	add	r5, r8
 80018a4:	42b5      	cmp	r5, r6
 80018a6:	41b6      	sbcs	r6, r6
 80018a8:	4273      	negs	r3, r6
 80018aa:	4698      	mov	r8, r3
 80018ac:	464b      	mov	r3, r9
 80018ae:	041e      	lsls	r6, r3, #16
 80018b0:	9b05      	ldr	r3, [sp, #20]
 80018b2:	043c      	lsls	r4, r7, #16
 80018b4:	4699      	mov	r9, r3
 80018b6:	0c36      	lsrs	r6, r6, #16
 80018b8:	19a4      	adds	r4, r4, r6
 80018ba:	444c      	add	r4, r9
 80018bc:	46a1      	mov	r9, r4
 80018be:	4683      	mov	fp, r0
 80018c0:	186e      	adds	r6, r5, r1
 80018c2:	44c1      	add	r9, r8
 80018c4:	428e      	cmp	r6, r1
 80018c6:	4189      	sbcs	r1, r1
 80018c8:	44cb      	add	fp, r9
 80018ca:	465d      	mov	r5, fp
 80018cc:	4249      	negs	r1, r1
 80018ce:	186d      	adds	r5, r5, r1
 80018d0:	429c      	cmp	r4, r3
 80018d2:	41a4      	sbcs	r4, r4
 80018d4:	45c1      	cmp	r9, r8
 80018d6:	419b      	sbcs	r3, r3
 80018d8:	4583      	cmp	fp, r0
 80018da:	4180      	sbcs	r0, r0
 80018dc:	428d      	cmp	r5, r1
 80018de:	4189      	sbcs	r1, r1
 80018e0:	425b      	negs	r3, r3
 80018e2:	4264      	negs	r4, r4
 80018e4:	431c      	orrs	r4, r3
 80018e6:	4240      	negs	r0, r0
 80018e8:	9b03      	ldr	r3, [sp, #12]
 80018ea:	4249      	negs	r1, r1
 80018ec:	4301      	orrs	r1, r0
 80018ee:	0270      	lsls	r0, r6, #9
 80018f0:	0c3f      	lsrs	r7, r7, #16
 80018f2:	4318      	orrs	r0, r3
 80018f4:	19e4      	adds	r4, r4, r7
 80018f6:	1e47      	subs	r7, r0, #1
 80018f8:	41b8      	sbcs	r0, r7
 80018fa:	1864      	adds	r4, r4, r1
 80018fc:	4464      	add	r4, ip
 80018fe:	0df6      	lsrs	r6, r6, #23
 8001900:	0261      	lsls	r1, r4, #9
 8001902:	4330      	orrs	r0, r6
 8001904:	0dec      	lsrs	r4, r5, #23
 8001906:	026e      	lsls	r6, r5, #9
 8001908:	430c      	orrs	r4, r1
 800190a:	4330      	orrs	r0, r6
 800190c:	01c9      	lsls	r1, r1, #7
 800190e:	d400      	bmi.n	8001912 <__aeabi_dmul+0x302>
 8001910:	e0f1      	b.n	8001af6 <__aeabi_dmul+0x4e6>
 8001912:	2101      	movs	r1, #1
 8001914:	0843      	lsrs	r3, r0, #1
 8001916:	4001      	ands	r1, r0
 8001918:	430b      	orrs	r3, r1
 800191a:	07e0      	lsls	r0, r4, #31
 800191c:	4318      	orrs	r0, r3
 800191e:	0864      	lsrs	r4, r4, #1
 8001920:	4915      	ldr	r1, [pc, #84]	; (8001978 <__aeabi_dmul+0x368>)
 8001922:	9b02      	ldr	r3, [sp, #8]
 8001924:	468c      	mov	ip, r1
 8001926:	4463      	add	r3, ip
 8001928:	2b00      	cmp	r3, #0
 800192a:	dc00      	bgt.n	800192e <__aeabi_dmul+0x31e>
 800192c:	e097      	b.n	8001a5e <__aeabi_dmul+0x44e>
 800192e:	0741      	lsls	r1, r0, #29
 8001930:	d009      	beq.n	8001946 <__aeabi_dmul+0x336>
 8001932:	210f      	movs	r1, #15
 8001934:	4001      	ands	r1, r0
 8001936:	2904      	cmp	r1, #4
 8001938:	d005      	beq.n	8001946 <__aeabi_dmul+0x336>
 800193a:	1d01      	adds	r1, r0, #4
 800193c:	4281      	cmp	r1, r0
 800193e:	4180      	sbcs	r0, r0
 8001940:	4240      	negs	r0, r0
 8001942:	1824      	adds	r4, r4, r0
 8001944:	0008      	movs	r0, r1
 8001946:	01e1      	lsls	r1, r4, #7
 8001948:	d506      	bpl.n	8001958 <__aeabi_dmul+0x348>
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	00c9      	lsls	r1, r1, #3
 800194e:	468c      	mov	ip, r1
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <__aeabi_dmul+0x36c>)
 8001952:	401c      	ands	r4, r3
 8001954:	9b02      	ldr	r3, [sp, #8]
 8001956:	4463      	add	r3, ip
 8001958:	4909      	ldr	r1, [pc, #36]	; (8001980 <__aeabi_dmul+0x370>)
 800195a:	428b      	cmp	r3, r1
 800195c:	dd00      	ble.n	8001960 <__aeabi_dmul+0x350>
 800195e:	e710      	b.n	8001782 <__aeabi_dmul+0x172>
 8001960:	0761      	lsls	r1, r4, #29
 8001962:	08c5      	lsrs	r5, r0, #3
 8001964:	0264      	lsls	r4, r4, #9
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	430d      	orrs	r5, r1
 800196a:	0b24      	lsrs	r4, r4, #12
 800196c:	0d5b      	lsrs	r3, r3, #21
 800196e:	e6c1      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001970:	000007ff 	.word	0x000007ff
 8001974:	fffffc01 	.word	0xfffffc01
 8001978:	000003ff 	.word	0x000003ff
 800197c:	feffffff 	.word	0xfeffffff
 8001980:	000007fe 	.word	0x000007fe
 8001984:	464b      	mov	r3, r9
 8001986:	4323      	orrs	r3, r4
 8001988:	d059      	beq.n	8001a3e <__aeabi_dmul+0x42e>
 800198a:	2c00      	cmp	r4, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dmul+0x380>
 800198e:	e0a3      	b.n	8001ad8 <__aeabi_dmul+0x4c8>
 8001990:	0020      	movs	r0, r4
 8001992:	f000 fdb1 	bl	80024f8 <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	4649      	mov	r1, r9
 80019a2:	0018      	movs	r0, r3
 80019a4:	40d1      	lsrs	r1, r2
 80019a6:	464a      	mov	r2, r9
 80019a8:	3808      	subs	r0, #8
 80019aa:	4082      	lsls	r2, r0
 80019ac:	4084      	lsls	r4, r0
 80019ae:	0010      	movs	r0, r2
 80019b0:	430c      	orrs	r4, r1
 80019b2:	4a74      	ldr	r2, [pc, #464]	; (8001b84 <__aeabi_dmul+0x574>)
 80019b4:	1aeb      	subs	r3, r5, r3
 80019b6:	4694      	mov	ip, r2
 80019b8:	4642      	mov	r2, r8
 80019ba:	4463      	add	r3, ip
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9b01      	ldr	r3, [sp, #4]
 80019c0:	407a      	eors	r2, r7
 80019c2:	3301      	adds	r3, #1
 80019c4:	2100      	movs	r1, #0
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	2e0a      	cmp	r6, #10
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dmul+0x3c0>
 80019ce:	e667      	b.n	80016a0 <__aeabi_dmul+0x90>
 80019d0:	e683      	b.n	80016da <__aeabi_dmul+0xca>
 80019d2:	465b      	mov	r3, fp
 80019d4:	4303      	orrs	r3, r0
 80019d6:	469a      	mov	sl, r3
 80019d8:	d02a      	beq.n	8001a30 <__aeabi_dmul+0x420>
 80019da:	465b      	mov	r3, fp
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d06d      	beq.n	8001abc <__aeabi_dmul+0x4ac>
 80019e0:	4658      	mov	r0, fp
 80019e2:	f000 fd89 	bl	80024f8 <__clzsi2>
 80019e6:	0001      	movs	r1, r0
 80019e8:	0003      	movs	r3, r0
 80019ea:	390b      	subs	r1, #11
 80019ec:	221d      	movs	r2, #29
 80019ee:	1a52      	subs	r2, r2, r1
 80019f0:	0021      	movs	r1, r4
 80019f2:	0018      	movs	r0, r3
 80019f4:	465d      	mov	r5, fp
 80019f6:	40d1      	lsrs	r1, r2
 80019f8:	3808      	subs	r0, #8
 80019fa:	4085      	lsls	r5, r0
 80019fc:	000a      	movs	r2, r1
 80019fe:	4084      	lsls	r4, r0
 8001a00:	432a      	orrs	r2, r5
 8001a02:	4693      	mov	fp, r2
 8001a04:	46a2      	mov	sl, r4
 8001a06:	4d5f      	ldr	r5, [pc, #380]	; (8001b84 <__aeabi_dmul+0x574>)
 8001a08:	2600      	movs	r6, #0
 8001a0a:	1aed      	subs	r5, r5, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	e625      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a12:	465b      	mov	r3, fp
 8001a14:	4303      	orrs	r3, r0
 8001a16:	469a      	mov	sl, r3
 8001a18:	d105      	bne.n	8001a26 <__aeabi_dmul+0x416>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	469b      	mov	fp, r3
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2608      	movs	r6, #8
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	e61b      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a26:	2303      	movs	r3, #3
 8001a28:	4682      	mov	sl, r0
 8001a2a:	260c      	movs	r6, #12
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e616      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a30:	2300      	movs	r3, #0
 8001a32:	469b      	mov	fp, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	2604      	movs	r6, #4
 8001a38:	2500      	movs	r5, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	e60f      	b.n	800165e <__aeabi_dmul+0x4e>
 8001a3e:	4642      	mov	r2, r8
 8001a40:	3301      	adds	r3, #1
 8001a42:	9501      	str	r5, [sp, #4]
 8001a44:	431e      	orrs	r6, r3
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	407a      	eors	r2, r7
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	2101      	movs	r1, #1
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2e0a      	cmp	r6, #10
 8001a58:	dd00      	ble.n	8001a5c <__aeabi_dmul+0x44c>
 8001a5a:	e621      	b.n	80016a0 <__aeabi_dmul+0x90>
 8001a5c:	e63d      	b.n	80016da <__aeabi_dmul+0xca>
 8001a5e:	2101      	movs	r1, #1
 8001a60:	1ac9      	subs	r1, r1, r3
 8001a62:	2938      	cmp	r1, #56	; 0x38
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x458>
 8001a66:	e642      	b.n	80016ee <__aeabi_dmul+0xde>
 8001a68:	291f      	cmp	r1, #31
 8001a6a:	dd47      	ble.n	8001afc <__aeabi_dmul+0x4ec>
 8001a6c:	261f      	movs	r6, #31
 8001a6e:	0025      	movs	r5, r4
 8001a70:	4276      	negs	r6, r6
 8001a72:	1af3      	subs	r3, r6, r3
 8001a74:	40dd      	lsrs	r5, r3
 8001a76:	002b      	movs	r3, r5
 8001a78:	2920      	cmp	r1, #32
 8001a7a:	d005      	beq.n	8001a88 <__aeabi_dmul+0x478>
 8001a7c:	4942      	ldr	r1, [pc, #264]	; (8001b88 <__aeabi_dmul+0x578>)
 8001a7e:	9d02      	ldr	r5, [sp, #8]
 8001a80:	468c      	mov	ip, r1
 8001a82:	4465      	add	r5, ip
 8001a84:	40ac      	lsls	r4, r5
 8001a86:	4320      	orrs	r0, r4
 8001a88:	1e41      	subs	r1, r0, #1
 8001a8a:	4188      	sbcs	r0, r1
 8001a8c:	4318      	orrs	r0, r3
 8001a8e:	2307      	movs	r3, #7
 8001a90:	001d      	movs	r5, r3
 8001a92:	2400      	movs	r4, #0
 8001a94:	4005      	ands	r5, r0
 8001a96:	4203      	tst	r3, r0
 8001a98:	d04a      	beq.n	8001b30 <__aeabi_dmul+0x520>
 8001a9a:	230f      	movs	r3, #15
 8001a9c:	2400      	movs	r4, #0
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d042      	beq.n	8001b2a <__aeabi_dmul+0x51a>
 8001aa4:	1d03      	adds	r3, r0, #4
 8001aa6:	4283      	cmp	r3, r0
 8001aa8:	4180      	sbcs	r0, r0
 8001aaa:	4240      	negs	r0, r0
 8001aac:	1824      	adds	r4, r4, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	0223      	lsls	r3, r4, #8
 8001ab2:	d53a      	bpl.n	8001b2a <__aeabi_dmul+0x51a>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	2400      	movs	r4, #0
 8001ab8:	2500      	movs	r5, #0
 8001aba:	e61b      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001abc:	f000 fd1c 	bl	80024f8 <__clzsi2>
 8001ac0:	0001      	movs	r1, r0
 8001ac2:	0003      	movs	r3, r0
 8001ac4:	3115      	adds	r1, #21
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	291c      	cmp	r1, #28
 8001aca:	dd8f      	ble.n	80019ec <__aeabi_dmul+0x3dc>
 8001acc:	3808      	subs	r0, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4084      	lsls	r4, r0
 8001ad2:	4692      	mov	sl, r2
 8001ad4:	46a3      	mov	fp, r4
 8001ad6:	e796      	b.n	8001a06 <__aeabi_dmul+0x3f6>
 8001ad8:	f000 fd0e 	bl	80024f8 <__clzsi2>
 8001adc:	0001      	movs	r1, r0
 8001ade:	0003      	movs	r3, r0
 8001ae0:	3115      	adds	r1, #21
 8001ae2:	3320      	adds	r3, #32
 8001ae4:	291c      	cmp	r1, #28
 8001ae6:	dc00      	bgt.n	8001aea <__aeabi_dmul+0x4da>
 8001ae8:	e758      	b.n	800199c <__aeabi_dmul+0x38c>
 8001aea:	0002      	movs	r2, r0
 8001aec:	464c      	mov	r4, r9
 8001aee:	3a08      	subs	r2, #8
 8001af0:	2000      	movs	r0, #0
 8001af2:	4094      	lsls	r4, r2
 8001af4:	e75d      	b.n	80019b2 <__aeabi_dmul+0x3a2>
 8001af6:	9b01      	ldr	r3, [sp, #4]
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	e711      	b.n	8001920 <__aeabi_dmul+0x310>
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <__aeabi_dmul+0x57c>)
 8001afe:	0026      	movs	r6, r4
 8001b00:	469c      	mov	ip, r3
 8001b02:	0003      	movs	r3, r0
 8001b04:	9d02      	ldr	r5, [sp, #8]
 8001b06:	40cb      	lsrs	r3, r1
 8001b08:	4465      	add	r5, ip
 8001b0a:	40ae      	lsls	r6, r5
 8001b0c:	431e      	orrs	r6, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	40ab      	lsls	r3, r5
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	4183      	sbcs	r3, r0
 8001b16:	0030      	movs	r0, r6
 8001b18:	4318      	orrs	r0, r3
 8001b1a:	40cc      	lsrs	r4, r1
 8001b1c:	0743      	lsls	r3, r0, #29
 8001b1e:	d0c7      	beq.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4003      	ands	r3, r0
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d1bd      	bne.n	8001aa4 <__aeabi_dmul+0x494>
 8001b28:	e7c2      	b.n	8001ab0 <__aeabi_dmul+0x4a0>
 8001b2a:	0765      	lsls	r5, r4, #29
 8001b2c:	0264      	lsls	r4, r4, #9
 8001b2e:	0b24      	lsrs	r4, r4, #12
 8001b30:	08c0      	lsrs	r0, r0, #3
 8001b32:	2300      	movs	r3, #0
 8001b34:	4305      	orrs	r5, r0
 8001b36:	e5dd      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b38:	2500      	movs	r5, #0
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	2e0f      	cmp	r6, #15
 8001b3e:	d10c      	bne.n	8001b5a <__aeabi_dmul+0x54a>
 8001b40:	2480      	movs	r4, #128	; 0x80
 8001b42:	465b      	mov	r3, fp
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	4223      	tst	r3, r4
 8001b48:	d00e      	beq.n	8001b68 <__aeabi_dmul+0x558>
 8001b4a:	4221      	tst	r1, r4
 8001b4c:	d10c      	bne.n	8001b68 <__aeabi_dmul+0x558>
 8001b4e:	430c      	orrs	r4, r1
 8001b50:	0324      	lsls	r4, r4, #12
 8001b52:	003a      	movs	r2, r7
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	e5cc      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b5a:	2e0b      	cmp	r6, #11
 8001b5c:	d000      	beq.n	8001b60 <__aeabi_dmul+0x550>
 8001b5e:	e5a2      	b.n	80016a6 <__aeabi_dmul+0x96>
 8001b60:	468b      	mov	fp, r1
 8001b62:	46aa      	mov	sl, r5
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	e5f7      	b.n	8001758 <__aeabi_dmul+0x148>
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	465b      	mov	r3, fp
 8001b6c:	0324      	lsls	r4, r4, #12
 8001b6e:	431c      	orrs	r4, r3
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	4642      	mov	r2, r8
 8001b74:	4655      	mov	r5, sl
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <__aeabi_dmul+0x580>)
 8001b78:	0b24      	lsrs	r4, r4, #12
 8001b7a:	e5bb      	b.n	80016f4 <__aeabi_dmul+0xe4>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	0021      	movs	r1, r4
 8001b80:	2303      	movs	r3, #3
 8001b82:	e7db      	b.n	8001b3c <__aeabi_dmul+0x52c>
 8001b84:	fffffc0d 	.word	0xfffffc0d
 8001b88:	0000043e 	.word	0x0000043e
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	000007ff 	.word	0x000007ff

08001b94 <__aeabi_dsub>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	4657      	mov	r7, sl
 8001b98:	464e      	mov	r6, r9
 8001b9a:	4645      	mov	r5, r8
 8001b9c:	46de      	mov	lr, fp
 8001b9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ba0:	000d      	movs	r5, r1
 8001ba2:	0004      	movs	r4, r0
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	032b      	lsls	r3, r5, #12
 8001baa:	0a5b      	lsrs	r3, r3, #9
 8001bac:	0f62      	lsrs	r2, r4, #29
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	00e3      	lsls	r3, r4, #3
 8001bb2:	030c      	lsls	r4, r1, #12
 8001bb4:	0a64      	lsrs	r4, r4, #9
 8001bb6:	0f47      	lsrs	r7, r0, #29
 8001bb8:	4327      	orrs	r7, r4
 8001bba:	4cd0      	ldr	r4, [pc, #832]	; (8001efc <__aeabi_dsub+0x368>)
 8001bbc:	006e      	lsls	r6, r5, #1
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	004a      	lsls	r2, r1, #1
 8001bc4:	00c0      	lsls	r0, r0, #3
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	46a2      	mov	sl, r4
 8001bca:	0d76      	lsrs	r6, r6, #21
 8001bcc:	0fed      	lsrs	r5, r5, #31
 8001bce:	0d52      	lsrs	r2, r2, #21
 8001bd0:	0fc9      	lsrs	r1, r1, #31
 8001bd2:	9001      	str	r0, [sp, #4]
 8001bd4:	42a2      	cmp	r2, r4
 8001bd6:	d100      	bne.n	8001bda <__aeabi_dsub+0x46>
 8001bd8:	e0b9      	b.n	8001d4e <__aeabi_dsub+0x1ba>
 8001bda:	2401      	movs	r4, #1
 8001bdc:	4061      	eors	r1, r4
 8001bde:	468b      	mov	fp, r1
 8001be0:	428d      	cmp	r5, r1
 8001be2:	d100      	bne.n	8001be6 <__aeabi_dsub+0x52>
 8001be4:	e08d      	b.n	8001d02 <__aeabi_dsub+0x16e>
 8001be6:	1ab4      	subs	r4, r6, r2
 8001be8:	46a4      	mov	ip, r4
 8001bea:	2c00      	cmp	r4, #0
 8001bec:	dc00      	bgt.n	8001bf0 <__aeabi_dsub+0x5c>
 8001bee:	e0b7      	b.n	8001d60 <__aeabi_dsub+0x1cc>
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x62>
 8001bf4:	e0cb      	b.n	8001d8e <__aeabi_dsub+0x1fa>
 8001bf6:	4ac1      	ldr	r2, [pc, #772]	; (8001efc <__aeabi_dsub+0x368>)
 8001bf8:	4296      	cmp	r6, r2
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dsub+0x6a>
 8001bfc:	e186      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	0412      	lsls	r2, r2, #16
 8001c02:	4317      	orrs	r7, r2
 8001c04:	4662      	mov	r2, ip
 8001c06:	2a38      	cmp	r2, #56	; 0x38
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x78>
 8001c0a:	e1a4      	b.n	8001f56 <__aeabi_dsub+0x3c2>
 8001c0c:	2a1f      	cmp	r2, #31
 8001c0e:	dd00      	ble.n	8001c12 <__aeabi_dsub+0x7e>
 8001c10:	e21d      	b.n	800204e <__aeabi_dsub+0x4ba>
 8001c12:	4661      	mov	r1, ip
 8001c14:	2220      	movs	r2, #32
 8001c16:	003c      	movs	r4, r7
 8001c18:	1a52      	subs	r2, r2, r1
 8001c1a:	0001      	movs	r1, r0
 8001c1c:	4090      	lsls	r0, r2
 8001c1e:	4094      	lsls	r4, r2
 8001c20:	1e42      	subs	r2, r0, #1
 8001c22:	4190      	sbcs	r0, r2
 8001c24:	4662      	mov	r2, ip
 8001c26:	46a0      	mov	r8, r4
 8001c28:	4664      	mov	r4, ip
 8001c2a:	40d7      	lsrs	r7, r2
 8001c2c:	464a      	mov	r2, r9
 8001c2e:	40e1      	lsrs	r1, r4
 8001c30:	4644      	mov	r4, r8
 8001c32:	1bd2      	subs	r2, r2, r7
 8001c34:	4691      	mov	r9, r2
 8001c36:	430c      	orrs	r4, r1
 8001c38:	4304      	orrs	r4, r0
 8001c3a:	1b1c      	subs	r4, r3, r4
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	4192      	sbcs	r2, r2
 8001c40:	464b      	mov	r3, r9
 8001c42:	4252      	negs	r2, r2
 8001c44:	1a9b      	subs	r3, r3, r2
 8001c46:	469a      	mov	sl, r3
 8001c48:	4653      	mov	r3, sl
 8001c4a:	021b      	lsls	r3, r3, #8
 8001c4c:	d400      	bmi.n	8001c50 <__aeabi_dsub+0xbc>
 8001c4e:	e12b      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001c50:	4653      	mov	r3, sl
 8001c52:	025a      	lsls	r2, r3, #9
 8001c54:	0a53      	lsrs	r3, r2, #9
 8001c56:	469a      	mov	sl, r3
 8001c58:	4653      	mov	r3, sl
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0xcc>
 8001c5e:	e166      	b.n	8001f2e <__aeabi_dsub+0x39a>
 8001c60:	4650      	mov	r0, sl
 8001c62:	f000 fc49 	bl	80024f8 <__clzsi2>
 8001c66:	0003      	movs	r3, r0
 8001c68:	3b08      	subs	r3, #8
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	0020      	movs	r0, r4
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	4651      	mov	r1, sl
 8001c72:	40d0      	lsrs	r0, r2
 8001c74:	4099      	lsls	r1, r3
 8001c76:	0002      	movs	r2, r0
 8001c78:	409c      	lsls	r4, r3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	dd00      	ble.n	8001c82 <__aeabi_dsub+0xee>
 8001c80:	e164      	b.n	8001f4c <__aeabi_dsub+0x3b8>
 8001c82:	1b9b      	subs	r3, r3, r6
 8001c84:	1c59      	adds	r1, r3, #1
 8001c86:	291f      	cmp	r1, #31
 8001c88:	dd00      	ble.n	8001c8c <__aeabi_dsub+0xf8>
 8001c8a:	e0fe      	b.n	8001e8a <__aeabi_dsub+0x2f6>
 8001c8c:	2320      	movs	r3, #32
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0026      	movs	r6, r4
 8001c92:	1a5b      	subs	r3, r3, r1
 8001c94:	409c      	lsls	r4, r3
 8001c96:	4098      	lsls	r0, r3
 8001c98:	40ce      	lsrs	r6, r1
 8001c9a:	40ca      	lsrs	r2, r1
 8001c9c:	1e63      	subs	r3, r4, #1
 8001c9e:	419c      	sbcs	r4, r3
 8001ca0:	4330      	orrs	r0, r6
 8001ca2:	4692      	mov	sl, r2
 8001ca4:	2600      	movs	r6, #0
 8001ca6:	4304      	orrs	r4, r0
 8001ca8:	0763      	lsls	r3, r4, #29
 8001caa:	d009      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cac:	230f      	movs	r3, #15
 8001cae:	4023      	ands	r3, r4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d005      	beq.n	8001cc0 <__aeabi_dsub+0x12c>
 8001cb4:	1d23      	adds	r3, r4, #4
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	41a4      	sbcs	r4, r4
 8001cba:	4264      	negs	r4, r4
 8001cbc:	44a2      	add	sl, r4
 8001cbe:	001c      	movs	r4, r3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	021b      	lsls	r3, r3, #8
 8001cc4:	d400      	bmi.n	8001cc8 <__aeabi_dsub+0x134>
 8001cc6:	e0f2      	b.n	8001eae <__aeabi_dsub+0x31a>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <__aeabi_dsub+0x368>)
 8001cca:	3601      	adds	r6, #1
 8001ccc:	429e      	cmp	r6, r3
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x13e>
 8001cd0:	e10f      	b.n	8001ef2 <__aeabi_dsub+0x35e>
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	498a      	ldr	r1, [pc, #552]	; (8001f00 <__aeabi_dsub+0x36c>)
 8001cd6:	08e4      	lsrs	r4, r4, #3
 8001cd8:	400b      	ands	r3, r1
 8001cda:	0019      	movs	r1, r3
 8001cdc:	075b      	lsls	r3, r3, #29
 8001cde:	4323      	orrs	r3, r4
 8001ce0:	0572      	lsls	r2, r6, #21
 8001ce2:	024c      	lsls	r4, r1, #9
 8001ce4:	0b24      	lsrs	r4, r4, #12
 8001ce6:	0d52      	lsrs	r2, r2, #21
 8001ce8:	0512      	lsls	r2, r2, #20
 8001cea:	4322      	orrs	r2, r4
 8001cec:	07ed      	lsls	r5, r5, #31
 8001cee:	432a      	orrs	r2, r5
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	b003      	add	sp, #12
 8001cf6:	bcf0      	pop	{r4, r5, r6, r7}
 8001cf8:	46bb      	mov	fp, r7
 8001cfa:	46b2      	mov	sl, r6
 8001cfc:	46a9      	mov	r9, r5
 8001cfe:	46a0      	mov	r8, r4
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	1ab4      	subs	r4, r6, r2
 8001d04:	46a4      	mov	ip, r4
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	dd59      	ble.n	8001dbe <__aeabi_dsub+0x22a>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x17c>
 8001d0e:	e0b0      	b.n	8001e72 <__aeabi_dsub+0x2de>
 8001d10:	4556      	cmp	r6, sl
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x182>
 8001d14:	e0fa      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0412      	lsls	r2, r2, #16
 8001d1a:	4317      	orrs	r7, r2
 8001d1c:	4662      	mov	r2, ip
 8001d1e:	2a38      	cmp	r2, #56	; 0x38
 8001d20:	dd00      	ble.n	8001d24 <__aeabi_dsub+0x190>
 8001d22:	e0d4      	b.n	8001ece <__aeabi_dsub+0x33a>
 8001d24:	2a1f      	cmp	r2, #31
 8001d26:	dc00      	bgt.n	8001d2a <__aeabi_dsub+0x196>
 8001d28:	e1c0      	b.n	80020ac <__aeabi_dsub+0x518>
 8001d2a:	0039      	movs	r1, r7
 8001d2c:	3a20      	subs	r2, #32
 8001d2e:	40d1      	lsrs	r1, r2
 8001d30:	4662      	mov	r2, ip
 8001d32:	2a20      	cmp	r2, #32
 8001d34:	d006      	beq.n	8001d44 <__aeabi_dsub+0x1b0>
 8001d36:	4664      	mov	r4, ip
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1b12      	subs	r2, r2, r4
 8001d3c:	003c      	movs	r4, r7
 8001d3e:	4094      	lsls	r4, r2
 8001d40:	4304      	orrs	r4, r0
 8001d42:	9401      	str	r4, [sp, #4]
 8001d44:	9c01      	ldr	r4, [sp, #4]
 8001d46:	1e62      	subs	r2, r4, #1
 8001d48:	4194      	sbcs	r4, r2
 8001d4a:	430c      	orrs	r4, r1
 8001d4c:	e0c3      	b.n	8001ed6 <__aeabi_dsub+0x342>
 8001d4e:	003c      	movs	r4, r7
 8001d50:	4304      	orrs	r4, r0
 8001d52:	d02b      	beq.n	8001dac <__aeabi_dsub+0x218>
 8001d54:	468b      	mov	fp, r1
 8001d56:	428d      	cmp	r5, r1
 8001d58:	d02e      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001d5a:	4c6a      	ldr	r4, [pc, #424]	; (8001f04 <__aeabi_dsub+0x370>)
 8001d5c:	46a4      	mov	ip, r4
 8001d5e:	44b4      	add	ip, r6
 8001d60:	4664      	mov	r4, ip
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	d05f      	beq.n	8001e26 <__aeabi_dsub+0x292>
 8001d66:	1b94      	subs	r4, r2, r6
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	2e00      	cmp	r6, #0
 8001d6c:	d000      	beq.n	8001d70 <__aeabi_dsub+0x1dc>
 8001d6e:	e120      	b.n	8001fb2 <__aeabi_dsub+0x41e>
 8001d70:	464c      	mov	r4, r9
 8001d72:	431c      	orrs	r4, r3
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x1e4>
 8001d76:	e1c7      	b.n	8002108 <__aeabi_dsub+0x574>
 8001d78:	4661      	mov	r1, ip
 8001d7a:	1e4c      	subs	r4, r1, #1
 8001d7c:	2901      	cmp	r1, #1
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x1ee>
 8001d80:	e223      	b.n	80021ca <__aeabi_dsub+0x636>
 8001d82:	4d5e      	ldr	r5, [pc, #376]	; (8001efc <__aeabi_dsub+0x368>)
 8001d84:	45ac      	cmp	ip, r5
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x1f6>
 8001d88:	e1d8      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	e11a      	b.n	8001fc4 <__aeabi_dsub+0x430>
 8001d8e:	003a      	movs	r2, r7
 8001d90:	4302      	orrs	r2, r0
 8001d92:	d100      	bne.n	8001d96 <__aeabi_dsub+0x202>
 8001d94:	e0e4      	b.n	8001f60 <__aeabi_dsub+0x3cc>
 8001d96:	0022      	movs	r2, r4
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	2c01      	cmp	r4, #1
 8001d9c:	d100      	bne.n	8001da0 <__aeabi_dsub+0x20c>
 8001d9e:	e1c3      	b.n	8002128 <__aeabi_dsub+0x594>
 8001da0:	4956      	ldr	r1, [pc, #344]	; (8001efc <__aeabi_dsub+0x368>)
 8001da2:	428c      	cmp	r4, r1
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x214>
 8001da6:	e0b1      	b.n	8001f0c <__aeabi_dsub+0x378>
 8001da8:	4694      	mov	ip, r2
 8001daa:	e72b      	b.n	8001c04 <__aeabi_dsub+0x70>
 8001dac:	2401      	movs	r4, #1
 8001dae:	4061      	eors	r1, r4
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d000      	beq.n	8001db8 <__aeabi_dsub+0x224>
 8001db6:	e716      	b.n	8001be6 <__aeabi_dsub+0x52>
 8001db8:	4952      	ldr	r1, [pc, #328]	; (8001f04 <__aeabi_dsub+0x370>)
 8001dba:	468c      	mov	ip, r1
 8001dbc:	44b4      	add	ip, r6
 8001dbe:	4664      	mov	r4, ip
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x232>
 8001dc4:	e0d3      	b.n	8001f6e <__aeabi_dsub+0x3da>
 8001dc6:	1b91      	subs	r1, r2, r6
 8001dc8:	468c      	mov	ip, r1
 8001dca:	2e00      	cmp	r6, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x23c>
 8001dce:	e15e      	b.n	800208e <__aeabi_dsub+0x4fa>
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <__aeabi_dsub+0x368>)
 8001dd2:	428a      	cmp	r2, r1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x244>
 8001dd6:	e1be      	b.n	8002156 <__aeabi_dsub+0x5c2>
 8001dd8:	2180      	movs	r1, #128	; 0x80
 8001dda:	464c      	mov	r4, r9
 8001ddc:	0409      	lsls	r1, r1, #16
 8001dde:	430c      	orrs	r4, r1
 8001de0:	46a1      	mov	r9, r4
 8001de2:	4661      	mov	r1, ip
 8001de4:	2938      	cmp	r1, #56	; 0x38
 8001de6:	dd00      	ble.n	8001dea <__aeabi_dsub+0x256>
 8001de8:	e1ba      	b.n	8002160 <__aeabi_dsub+0x5cc>
 8001dea:	291f      	cmp	r1, #31
 8001dec:	dd00      	ble.n	8001df0 <__aeabi_dsub+0x25c>
 8001dee:	e227      	b.n	8002240 <__aeabi_dsub+0x6ac>
 8001df0:	2420      	movs	r4, #32
 8001df2:	1a64      	subs	r4, r4, r1
 8001df4:	4649      	mov	r1, r9
 8001df6:	40a1      	lsls	r1, r4
 8001df8:	001e      	movs	r6, r3
 8001dfa:	4688      	mov	r8, r1
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	40a3      	lsls	r3, r4
 8001e00:	40ce      	lsrs	r6, r1
 8001e02:	4641      	mov	r1, r8
 8001e04:	1e5c      	subs	r4, r3, #1
 8001e06:	41a3      	sbcs	r3, r4
 8001e08:	4331      	orrs	r1, r6
 8001e0a:	4319      	orrs	r1, r3
 8001e0c:	000c      	movs	r4, r1
 8001e0e:	4663      	mov	r3, ip
 8001e10:	4649      	mov	r1, r9
 8001e12:	40d9      	lsrs	r1, r3
 8001e14:	187f      	adds	r7, r7, r1
 8001e16:	1824      	adds	r4, r4, r0
 8001e18:	4284      	cmp	r4, r0
 8001e1a:	419b      	sbcs	r3, r3
 8001e1c:	425b      	negs	r3, r3
 8001e1e:	469a      	mov	sl, r3
 8001e20:	0016      	movs	r6, r2
 8001e22:	44ba      	add	sl, r7
 8001e24:	e05d      	b.n	8001ee2 <__aeabi_dsub+0x34e>
 8001e26:	4c38      	ldr	r4, [pc, #224]	; (8001f08 <__aeabi_dsub+0x374>)
 8001e28:	1c72      	adds	r2, r6, #1
 8001e2a:	4222      	tst	r2, r4
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x29c>
 8001e2e:	e0df      	b.n	8001ff0 <__aeabi_dsub+0x45c>
 8001e30:	464a      	mov	r2, r9
 8001e32:	431a      	orrs	r2, r3
 8001e34:	2e00      	cmp	r6, #0
 8001e36:	d000      	beq.n	8001e3a <__aeabi_dsub+0x2a6>
 8001e38:	e15c      	b.n	80020f4 <__aeabi_dsub+0x560>
 8001e3a:	2a00      	cmp	r2, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x2ac>
 8001e3e:	e1cf      	b.n	80021e0 <__aeabi_dsub+0x64c>
 8001e40:	003a      	movs	r2, r7
 8001e42:	4302      	orrs	r2, r0
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x2b4>
 8001e46:	e17f      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001e48:	1a1c      	subs	r4, r3, r0
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	4189      	sbcs	r1, r1
 8001e50:	1bd2      	subs	r2, r2, r7
 8001e52:	4249      	negs	r1, r1
 8001e54:	1a52      	subs	r2, r2, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	0212      	lsls	r2, r2, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x2ca>
 8001e5c:	e20a      	b.n	8002274 <__aeabi_dsub+0x6e0>
 8001e5e:	1ac4      	subs	r4, r0, r3
 8001e60:	42a0      	cmp	r0, r4
 8001e62:	4180      	sbcs	r0, r0
 8001e64:	464b      	mov	r3, r9
 8001e66:	4240      	negs	r0, r0
 8001e68:	1aff      	subs	r7, r7, r3
 8001e6a:	1a3b      	subs	r3, r7, r0
 8001e6c:	469a      	mov	sl, r3
 8001e6e:	465d      	mov	r5, fp
 8001e70:	e71a      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001e72:	003a      	movs	r2, r7
 8001e74:	4302      	orrs	r2, r0
 8001e76:	d073      	beq.n	8001f60 <__aeabi_dsub+0x3cc>
 8001e78:	0022      	movs	r2, r4
 8001e7a:	3a01      	subs	r2, #1
 8001e7c:	2c01      	cmp	r4, #1
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x2ee>
 8001e80:	e0cb      	b.n	800201a <__aeabi_dsub+0x486>
 8001e82:	4554      	cmp	r4, sl
 8001e84:	d042      	beq.n	8001f0c <__aeabi_dsub+0x378>
 8001e86:	4694      	mov	ip, r2
 8001e88:	e748      	b.n	8001d1c <__aeabi_dsub+0x188>
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	3b1f      	subs	r3, #31
 8001e8e:	40d8      	lsrs	r0, r3
 8001e90:	2920      	cmp	r1, #32
 8001e92:	d003      	beq.n	8001e9c <__aeabi_dsub+0x308>
 8001e94:	2340      	movs	r3, #64	; 0x40
 8001e96:	1a5b      	subs	r3, r3, r1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	4314      	orrs	r4, r2
 8001e9c:	1e63      	subs	r3, r4, #1
 8001e9e:	419c      	sbcs	r4, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2600      	movs	r6, #0
 8001ea4:	469a      	mov	sl, r3
 8001ea6:	4304      	orrs	r4, r0
 8001ea8:	0763      	lsls	r3, r4, #29
 8001eaa:	d000      	beq.n	8001eae <__aeabi_dsub+0x31a>
 8001eac:	e6fe      	b.n	8001cac <__aeabi_dsub+0x118>
 8001eae:	4652      	mov	r2, sl
 8001eb0:	08e3      	lsrs	r3, r4, #3
 8001eb2:	0752      	lsls	r2, r2, #29
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	4652      	mov	r2, sl
 8001eb8:	46b4      	mov	ip, r6
 8001eba:	08d2      	lsrs	r2, r2, #3
 8001ebc:	490f      	ldr	r1, [pc, #60]	; (8001efc <__aeabi_dsub+0x368>)
 8001ebe:	458c      	cmp	ip, r1
 8001ec0:	d02a      	beq.n	8001f18 <__aeabi_dsub+0x384>
 8001ec2:	0312      	lsls	r2, r2, #12
 8001ec4:	0b14      	lsrs	r4, r2, #12
 8001ec6:	4662      	mov	r2, ip
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	0d52      	lsrs	r2, r2, #21
 8001ecc:	e70c      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001ece:	003c      	movs	r4, r7
 8001ed0:	4304      	orrs	r4, r0
 8001ed2:	1e62      	subs	r2, r4, #1
 8001ed4:	4194      	sbcs	r4, r2
 8001ed6:	18e4      	adds	r4, r4, r3
 8001ed8:	429c      	cmp	r4, r3
 8001eda:	4192      	sbcs	r2, r2
 8001edc:	4252      	negs	r2, r2
 8001ede:	444a      	add	r2, r9
 8001ee0:	4692      	mov	sl, r2
 8001ee2:	4653      	mov	r3, sl
 8001ee4:	021b      	lsls	r3, r3, #8
 8001ee6:	d5df      	bpl.n	8001ea8 <__aeabi_dsub+0x314>
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__aeabi_dsub+0x368>)
 8001eea:	3601      	adds	r6, #1
 8001eec:	429e      	cmp	r6, r3
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x35e>
 8001ef0:	e0a0      	b.n	8002034 <__aeabi_dsub+0x4a0>
 8001ef2:	0032      	movs	r2, r6
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e6f6      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	000007ff 	.word	0x000007ff
 8001f00:	ff7fffff 	.word	0xff7fffff
 8001f04:	fffff801 	.word	0xfffff801
 8001f08:	000007fe 	.word	0x000007fe
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	464a      	mov	r2, r9
 8001f10:	0752      	lsls	r2, r2, #29
 8001f12:	4313      	orrs	r3, r2
 8001f14:	464a      	mov	r2, r9
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	0019      	movs	r1, r3
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x38c>
 8001f1e:	e1b5      	b.n	800228c <__aeabi_dsub+0x6f8>
 8001f20:	2480      	movs	r4, #128	; 0x80
 8001f22:	0324      	lsls	r4, r4, #12
 8001f24:	4314      	orrs	r4, r2
 8001f26:	0324      	lsls	r4, r4, #12
 8001f28:	4ad5      	ldr	r2, [pc, #852]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001f2a:	0b24      	lsrs	r4, r4, #12
 8001f2c:	e6dc      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f000 fae2 	bl	80024f8 <__clzsi2>
 8001f34:	0003      	movs	r3, r0
 8001f36:	3318      	adds	r3, #24
 8001f38:	2b1f      	cmp	r3, #31
 8001f3a:	dc00      	bgt.n	8001f3e <__aeabi_dsub+0x3aa>
 8001f3c:	e695      	b.n	8001c6a <__aeabi_dsub+0xd6>
 8001f3e:	0022      	movs	r2, r4
 8001f40:	3808      	subs	r0, #8
 8001f42:	4082      	lsls	r2, r0
 8001f44:	2400      	movs	r4, #0
 8001f46:	429e      	cmp	r6, r3
 8001f48:	dc00      	bgt.n	8001f4c <__aeabi_dsub+0x3b8>
 8001f4a:	e69a      	b.n	8001c82 <__aeabi_dsub+0xee>
 8001f4c:	1af6      	subs	r6, r6, r3
 8001f4e:	4bcd      	ldr	r3, [pc, #820]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001f50:	401a      	ands	r2, r3
 8001f52:	4692      	mov	sl, r2
 8001f54:	e6a8      	b.n	8001ca8 <__aeabi_dsub+0x114>
 8001f56:	003c      	movs	r4, r7
 8001f58:	4304      	orrs	r4, r0
 8001f5a:	1e62      	subs	r2, r4, #1
 8001f5c:	4194      	sbcs	r4, r2
 8001f5e:	e66c      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8001f60:	464a      	mov	r2, r9
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	0752      	lsls	r2, r2, #29
 8001f66:	4313      	orrs	r3, r2
 8001f68:	464a      	mov	r2, r9
 8001f6a:	08d2      	lsrs	r2, r2, #3
 8001f6c:	e7a6      	b.n	8001ebc <__aeabi_dsub+0x328>
 8001f6e:	4cc6      	ldr	r4, [pc, #792]	; (8002288 <__aeabi_dsub+0x6f4>)
 8001f70:	1c72      	adds	r2, r6, #1
 8001f72:	4222      	tst	r2, r4
 8001f74:	d000      	beq.n	8001f78 <__aeabi_dsub+0x3e4>
 8001f76:	e0ac      	b.n	80020d2 <__aeabi_dsub+0x53e>
 8001f78:	464a      	mov	r2, r9
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	2e00      	cmp	r6, #0
 8001f7e:	d000      	beq.n	8001f82 <__aeabi_dsub+0x3ee>
 8001f80:	e105      	b.n	800218e <__aeabi_dsub+0x5fa>
 8001f82:	2a00      	cmp	r2, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dsub+0x3f4>
 8001f86:	e156      	b.n	8002236 <__aeabi_dsub+0x6a2>
 8001f88:	003a      	movs	r2, r7
 8001f8a:	4302      	orrs	r2, r0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dsub+0x3fc>
 8001f8e:	e0db      	b.n	8002148 <__aeabi_dsub+0x5b4>
 8001f90:	181c      	adds	r4, r3, r0
 8001f92:	429c      	cmp	r4, r3
 8001f94:	419b      	sbcs	r3, r3
 8001f96:	444f      	add	r7, r9
 8001f98:	46ba      	mov	sl, r7
 8001f9a:	425b      	negs	r3, r3
 8001f9c:	449a      	add	sl, r3
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	d400      	bmi.n	8001fa6 <__aeabi_dsub+0x412>
 8001fa4:	e780      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fa6:	4652      	mov	r2, sl
 8001fa8:	4bb6      	ldr	r3, [pc, #728]	; (8002284 <__aeabi_dsub+0x6f0>)
 8001faa:	2601      	movs	r6, #1
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e77a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8001fb2:	4cb3      	ldr	r4, [pc, #716]	; (8002280 <__aeabi_dsub+0x6ec>)
 8001fb4:	42a2      	cmp	r2, r4
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x426>
 8001fb8:	e0c0      	b.n	800213c <__aeabi_dsub+0x5a8>
 8001fba:	2480      	movs	r4, #128	; 0x80
 8001fbc:	464d      	mov	r5, r9
 8001fbe:	0424      	lsls	r4, r4, #16
 8001fc0:	4325      	orrs	r5, r4
 8001fc2:	46a9      	mov	r9, r5
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2c38      	cmp	r4, #56	; 0x38
 8001fc8:	dc53      	bgt.n	8002072 <__aeabi_dsub+0x4de>
 8001fca:	4661      	mov	r1, ip
 8001fcc:	2c1f      	cmp	r4, #31
 8001fce:	dd00      	ble.n	8001fd2 <__aeabi_dsub+0x43e>
 8001fd0:	e0cd      	b.n	800216e <__aeabi_dsub+0x5da>
 8001fd2:	2520      	movs	r5, #32
 8001fd4:	001e      	movs	r6, r3
 8001fd6:	1b2d      	subs	r5, r5, r4
 8001fd8:	464c      	mov	r4, r9
 8001fda:	40ab      	lsls	r3, r5
 8001fdc:	40ac      	lsls	r4, r5
 8001fde:	40ce      	lsrs	r6, r1
 8001fe0:	1e5d      	subs	r5, r3, #1
 8001fe2:	41ab      	sbcs	r3, r5
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	464c      	mov	r4, r9
 8001fea:	40cc      	lsrs	r4, r1
 8001fec:	1b3f      	subs	r7, r7, r4
 8001fee:	e045      	b.n	800207c <__aeabi_dsub+0x4e8>
 8001ff0:	464a      	mov	r2, r9
 8001ff2:	1a1c      	subs	r4, r3, r0
 8001ff4:	1bd1      	subs	r1, r2, r7
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	4192      	sbcs	r2, r2
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	4651      	mov	r1, sl
 8002002:	1a52      	subs	r2, r2, r1
 8002004:	4692      	mov	sl, r2
 8002006:	0212      	lsls	r2, r2, #8
 8002008:	d500      	bpl.n	800200c <__aeabi_dsub+0x478>
 800200a:	e083      	b.n	8002114 <__aeabi_dsub+0x580>
 800200c:	4653      	mov	r3, sl
 800200e:	4323      	orrs	r3, r4
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x480>
 8002012:	e621      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002014:	2200      	movs	r2, #0
 8002016:	2500      	movs	r5, #0
 8002018:	e753      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 800201a:	181c      	adds	r4, r3, r0
 800201c:	429c      	cmp	r4, r3
 800201e:	419b      	sbcs	r3, r3
 8002020:	444f      	add	r7, r9
 8002022:	46ba      	mov	sl, r7
 8002024:	425b      	negs	r3, r3
 8002026:	449a      	add	sl, r3
 8002028:	4653      	mov	r3, sl
 800202a:	2601      	movs	r6, #1
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	d400      	bmi.n	8002032 <__aeabi_dsub+0x49e>
 8002030:	e73a      	b.n	8001ea8 <__aeabi_dsub+0x314>
 8002032:	2602      	movs	r6, #2
 8002034:	4652      	mov	r2, sl
 8002036:	4b93      	ldr	r3, [pc, #588]	; (8002284 <__aeabi_dsub+0x6f0>)
 8002038:	2101      	movs	r1, #1
 800203a:	401a      	ands	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	4021      	ands	r1, r4
 8002040:	0862      	lsrs	r2, r4, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	07dc      	lsls	r4, r3, #31
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	469a      	mov	sl, r3
 800204a:	4314      	orrs	r4, r2
 800204c:	e62c      	b.n	8001ca8 <__aeabi_dsub+0x114>
 800204e:	0039      	movs	r1, r7
 8002050:	3a20      	subs	r2, #32
 8002052:	40d1      	lsrs	r1, r2
 8002054:	4662      	mov	r2, ip
 8002056:	2a20      	cmp	r2, #32
 8002058:	d006      	beq.n	8002068 <__aeabi_dsub+0x4d4>
 800205a:	4664      	mov	r4, ip
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	1b12      	subs	r2, r2, r4
 8002060:	003c      	movs	r4, r7
 8002062:	4094      	lsls	r4, r2
 8002064:	4304      	orrs	r4, r0
 8002066:	9401      	str	r4, [sp, #4]
 8002068:	9c01      	ldr	r4, [sp, #4]
 800206a:	1e62      	subs	r2, r4, #1
 800206c:	4194      	sbcs	r4, r2
 800206e:	430c      	orrs	r4, r1
 8002070:	e5e3      	b.n	8001c3a <__aeabi_dsub+0xa6>
 8002072:	4649      	mov	r1, r9
 8002074:	4319      	orrs	r1, r3
 8002076:	000b      	movs	r3, r1
 8002078:	1e5c      	subs	r4, r3, #1
 800207a:	41a3      	sbcs	r3, r4
 800207c:	1ac4      	subs	r4, r0, r3
 800207e:	42a0      	cmp	r0, r4
 8002080:	419b      	sbcs	r3, r3
 8002082:	425b      	negs	r3, r3
 8002084:	1afb      	subs	r3, r7, r3
 8002086:	469a      	mov	sl, r3
 8002088:	465d      	mov	r5, fp
 800208a:	0016      	movs	r6, r2
 800208c:	e5dc      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800208e:	4649      	mov	r1, r9
 8002090:	4319      	orrs	r1, r3
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x502>
 8002094:	e0ae      	b.n	80021f4 <__aeabi_dsub+0x660>
 8002096:	4661      	mov	r1, ip
 8002098:	4664      	mov	r4, ip
 800209a:	3901      	subs	r1, #1
 800209c:	2c01      	cmp	r4, #1
 800209e:	d100      	bne.n	80020a2 <__aeabi_dsub+0x50e>
 80020a0:	e0e0      	b.n	8002264 <__aeabi_dsub+0x6d0>
 80020a2:	4c77      	ldr	r4, [pc, #476]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020a4:	45a4      	cmp	ip, r4
 80020a6:	d056      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 80020a8:	468c      	mov	ip, r1
 80020aa:	e69a      	b.n	8001de2 <__aeabi_dsub+0x24e>
 80020ac:	4661      	mov	r1, ip
 80020ae:	2220      	movs	r2, #32
 80020b0:	003c      	movs	r4, r7
 80020b2:	1a52      	subs	r2, r2, r1
 80020b4:	4094      	lsls	r4, r2
 80020b6:	0001      	movs	r1, r0
 80020b8:	4090      	lsls	r0, r2
 80020ba:	46a0      	mov	r8, r4
 80020bc:	4664      	mov	r4, ip
 80020be:	1e42      	subs	r2, r0, #1
 80020c0:	4190      	sbcs	r0, r2
 80020c2:	4662      	mov	r2, ip
 80020c4:	40e1      	lsrs	r1, r4
 80020c6:	4644      	mov	r4, r8
 80020c8:	40d7      	lsrs	r7, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	4304      	orrs	r4, r0
 80020ce:	44b9      	add	r9, r7
 80020d0:	e701      	b.n	8001ed6 <__aeabi_dsub+0x342>
 80020d2:	496b      	ldr	r1, [pc, #428]	; (8002280 <__aeabi_dsub+0x6ec>)
 80020d4:	428a      	cmp	r2, r1
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x546>
 80020d8:	e70c      	b.n	8001ef4 <__aeabi_dsub+0x360>
 80020da:	1818      	adds	r0, r3, r0
 80020dc:	4298      	cmp	r0, r3
 80020de:	419b      	sbcs	r3, r3
 80020e0:	444f      	add	r7, r9
 80020e2:	425b      	negs	r3, r3
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	07dc      	lsls	r4, r3, #31
 80020e8:	0840      	lsrs	r0, r0, #1
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	469a      	mov	sl, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	4304      	orrs	r4, r0
 80020f2:	e6d9      	b.n	8001ea8 <__aeabi_dsub+0x314>
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x566>
 80020f8:	e081      	b.n	80021fe <__aeabi_dsub+0x66a>
 80020fa:	003b      	movs	r3, r7
 80020fc:	4303      	orrs	r3, r0
 80020fe:	d11d      	bne.n	800213c <__aeabi_dsub+0x5a8>
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	2500      	movs	r5, #0
 8002104:	0312      	lsls	r2, r2, #12
 8002106:	e70b      	b.n	8001f20 <__aeabi_dsub+0x38c>
 8002108:	08c0      	lsrs	r0, r0, #3
 800210a:	077b      	lsls	r3, r7, #29
 800210c:	465d      	mov	r5, fp
 800210e:	4303      	orrs	r3, r0
 8002110:	08fa      	lsrs	r2, r7, #3
 8002112:	e6d3      	b.n	8001ebc <__aeabi_dsub+0x328>
 8002114:	1ac4      	subs	r4, r0, r3
 8002116:	42a0      	cmp	r0, r4
 8002118:	4180      	sbcs	r0, r0
 800211a:	464b      	mov	r3, r9
 800211c:	4240      	negs	r0, r0
 800211e:	1aff      	subs	r7, r7, r3
 8002120:	1a3b      	subs	r3, r7, r0
 8002122:	469a      	mov	sl, r3
 8002124:	465d      	mov	r5, fp
 8002126:	e597      	b.n	8001c58 <__aeabi_dsub+0xc4>
 8002128:	1a1c      	subs	r4, r3, r0
 800212a:	464a      	mov	r2, r9
 800212c:	42a3      	cmp	r3, r4
 800212e:	419b      	sbcs	r3, r3
 8002130:	1bd7      	subs	r7, r2, r7
 8002132:	425b      	negs	r3, r3
 8002134:	1afb      	subs	r3, r7, r3
 8002136:	469a      	mov	sl, r3
 8002138:	2601      	movs	r6, #1
 800213a:	e585      	b.n	8001c48 <__aeabi_dsub+0xb4>
 800213c:	08c0      	lsrs	r0, r0, #3
 800213e:	077b      	lsls	r3, r7, #29
 8002140:	465d      	mov	r5, fp
 8002142:	4303      	orrs	r3, r0
 8002144:	08fa      	lsrs	r2, r7, #3
 8002146:	e6e7      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002148:	464a      	mov	r2, r9
 800214a:	08db      	lsrs	r3, r3, #3
 800214c:	0752      	lsls	r2, r2, #29
 800214e:	4313      	orrs	r3, r2
 8002150:	464a      	mov	r2, r9
 8002152:	08d2      	lsrs	r2, r2, #3
 8002154:	e6b5      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002156:	08c0      	lsrs	r0, r0, #3
 8002158:	077b      	lsls	r3, r7, #29
 800215a:	4303      	orrs	r3, r0
 800215c:	08fa      	lsrs	r2, r7, #3
 800215e:	e6db      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002160:	4649      	mov	r1, r9
 8002162:	4319      	orrs	r1, r3
 8002164:	000b      	movs	r3, r1
 8002166:	1e59      	subs	r1, r3, #1
 8002168:	418b      	sbcs	r3, r1
 800216a:	001c      	movs	r4, r3
 800216c:	e653      	b.n	8001e16 <__aeabi_dsub+0x282>
 800216e:	464d      	mov	r5, r9
 8002170:	3c20      	subs	r4, #32
 8002172:	40e5      	lsrs	r5, r4
 8002174:	2920      	cmp	r1, #32
 8002176:	d005      	beq.n	8002184 <__aeabi_dsub+0x5f0>
 8002178:	2440      	movs	r4, #64	; 0x40
 800217a:	1a64      	subs	r4, r4, r1
 800217c:	4649      	mov	r1, r9
 800217e:	40a1      	lsls	r1, r4
 8002180:	430b      	orrs	r3, r1
 8002182:	4698      	mov	r8, r3
 8002184:	4643      	mov	r3, r8
 8002186:	1e5c      	subs	r4, r3, #1
 8002188:	41a3      	sbcs	r3, r4
 800218a:	432b      	orrs	r3, r5
 800218c:	e776      	b.n	800207c <__aeabi_dsub+0x4e8>
 800218e:	2a00      	cmp	r2, #0
 8002190:	d0e1      	beq.n	8002156 <__aeabi_dsub+0x5c2>
 8002192:	003a      	movs	r2, r7
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	4302      	orrs	r2, r0
 8002198:	d100      	bne.n	800219c <__aeabi_dsub+0x608>
 800219a:	e6b8      	b.n	8001f0e <__aeabi_dsub+0x37a>
 800219c:	464a      	mov	r2, r9
 800219e:	0752      	lsls	r2, r2, #29
 80021a0:	2480      	movs	r4, #128	; 0x80
 80021a2:	4313      	orrs	r3, r2
 80021a4:	464a      	mov	r2, r9
 80021a6:	0324      	lsls	r4, r4, #12
 80021a8:	08d2      	lsrs	r2, r2, #3
 80021aa:	4222      	tst	r2, r4
 80021ac:	d007      	beq.n	80021be <__aeabi_dsub+0x62a>
 80021ae:	08fe      	lsrs	r6, r7, #3
 80021b0:	4226      	tst	r6, r4
 80021b2:	d104      	bne.n	80021be <__aeabi_dsub+0x62a>
 80021b4:	465d      	mov	r5, fp
 80021b6:	0032      	movs	r2, r6
 80021b8:	08c3      	lsrs	r3, r0, #3
 80021ba:	077f      	lsls	r7, r7, #29
 80021bc:	433b      	orrs	r3, r7
 80021be:	0f59      	lsrs	r1, r3, #29
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	0749      	lsls	r1, r1, #29
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	430b      	orrs	r3, r1
 80021c8:	e6a6      	b.n	8001f18 <__aeabi_dsub+0x384>
 80021ca:	1ac4      	subs	r4, r0, r3
 80021cc:	42a0      	cmp	r0, r4
 80021ce:	4180      	sbcs	r0, r0
 80021d0:	464b      	mov	r3, r9
 80021d2:	4240      	negs	r0, r0
 80021d4:	1aff      	subs	r7, r7, r3
 80021d6:	1a3b      	subs	r3, r7, r0
 80021d8:	469a      	mov	sl, r3
 80021da:	465d      	mov	r5, fp
 80021dc:	2601      	movs	r6, #1
 80021de:	e533      	b.n	8001c48 <__aeabi_dsub+0xb4>
 80021e0:	003b      	movs	r3, r7
 80021e2:	4303      	orrs	r3, r0
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x654>
 80021e6:	e715      	b.n	8002014 <__aeabi_dsub+0x480>
 80021e8:	08c0      	lsrs	r0, r0, #3
 80021ea:	077b      	lsls	r3, r7, #29
 80021ec:	465d      	mov	r5, fp
 80021ee:	4303      	orrs	r3, r0
 80021f0:	08fa      	lsrs	r2, r7, #3
 80021f2:	e666      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 80021f4:	08c0      	lsrs	r0, r0, #3
 80021f6:	077b      	lsls	r3, r7, #29
 80021f8:	4303      	orrs	r3, r0
 80021fa:	08fa      	lsrs	r2, r7, #3
 80021fc:	e65e      	b.n	8001ebc <__aeabi_dsub+0x328>
 80021fe:	003a      	movs	r2, r7
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	4302      	orrs	r2, r0
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x674>
 8002206:	e682      	b.n	8001f0e <__aeabi_dsub+0x37a>
 8002208:	464a      	mov	r2, r9
 800220a:	0752      	lsls	r2, r2, #29
 800220c:	2480      	movs	r4, #128	; 0x80
 800220e:	4313      	orrs	r3, r2
 8002210:	464a      	mov	r2, r9
 8002212:	0324      	lsls	r4, r4, #12
 8002214:	08d2      	lsrs	r2, r2, #3
 8002216:	4222      	tst	r2, r4
 8002218:	d007      	beq.n	800222a <__aeabi_dsub+0x696>
 800221a:	08fe      	lsrs	r6, r7, #3
 800221c:	4226      	tst	r6, r4
 800221e:	d104      	bne.n	800222a <__aeabi_dsub+0x696>
 8002220:	465d      	mov	r5, fp
 8002222:	0032      	movs	r2, r6
 8002224:	08c3      	lsrs	r3, r0, #3
 8002226:	077f      	lsls	r7, r7, #29
 8002228:	433b      	orrs	r3, r7
 800222a:	0f59      	lsrs	r1, r3, #29
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	0749      	lsls	r1, r1, #29
 8002232:	430b      	orrs	r3, r1
 8002234:	e670      	b.n	8001f18 <__aeabi_dsub+0x384>
 8002236:	08c0      	lsrs	r0, r0, #3
 8002238:	077b      	lsls	r3, r7, #29
 800223a:	4303      	orrs	r3, r0
 800223c:	08fa      	lsrs	r2, r7, #3
 800223e:	e640      	b.n	8001ec2 <__aeabi_dsub+0x32e>
 8002240:	464c      	mov	r4, r9
 8002242:	3920      	subs	r1, #32
 8002244:	40cc      	lsrs	r4, r1
 8002246:	4661      	mov	r1, ip
 8002248:	2920      	cmp	r1, #32
 800224a:	d006      	beq.n	800225a <__aeabi_dsub+0x6c6>
 800224c:	4666      	mov	r6, ip
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	1b89      	subs	r1, r1, r6
 8002252:	464e      	mov	r6, r9
 8002254:	408e      	lsls	r6, r1
 8002256:	4333      	orrs	r3, r6
 8002258:	4698      	mov	r8, r3
 800225a:	4643      	mov	r3, r8
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	418b      	sbcs	r3, r1
 8002260:	431c      	orrs	r4, r3
 8002262:	e5d8      	b.n	8001e16 <__aeabi_dsub+0x282>
 8002264:	181c      	adds	r4, r3, r0
 8002266:	4284      	cmp	r4, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	444f      	add	r7, r9
 800226c:	46ba      	mov	sl, r7
 800226e:	4240      	negs	r0, r0
 8002270:	4482      	add	sl, r0
 8002272:	e6d9      	b.n	8002028 <__aeabi_dsub+0x494>
 8002274:	4653      	mov	r3, sl
 8002276:	4323      	orrs	r3, r4
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x6e8>
 800227a:	e6cb      	b.n	8002014 <__aeabi_dsub+0x480>
 800227c:	e614      	b.n	8001ea8 <__aeabi_dsub+0x314>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff
 8002284:	ff7fffff 	.word	0xff7fffff
 8002288:	000007fe 	.word	0x000007fe
 800228c:	2300      	movs	r3, #0
 800228e:	4a01      	ldr	r2, [pc, #4]	; (8002294 <__aeabi_dsub+0x700>)
 8002290:	001c      	movs	r4, r3
 8002292:	e529      	b.n	8001ce8 <__aeabi_dsub+0x154>
 8002294:	000007ff 	.word	0x000007ff

08002298 <__aeabi_dcmpun>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	0005      	movs	r5, r0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <__aeabi_dcmpun+0x38>)
 800229e:	031c      	lsls	r4, r3, #12
 80022a0:	0016      	movs	r6, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	030a      	lsls	r2, r1, #12
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	0b12      	lsrs	r2, r2, #12
 80022aa:	0d49      	lsrs	r1, r1, #21
 80022ac:	0b24      	lsrs	r4, r4, #12
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	4281      	cmp	r1, r0
 80022b2:	d008      	beq.n	80022c6 <__aeabi_dcmpun+0x2e>
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <__aeabi_dcmpun+0x38>)
 80022b6:	2000      	movs	r0, #0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022bc:	0020      	movs	r0, r4
 80022be:	4330      	orrs	r0, r6
 80022c0:	1e43      	subs	r3, r0, #1
 80022c2:	4198      	sbcs	r0, r3
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	2001      	movs	r0, #1
 80022c8:	432a      	orrs	r2, r5
 80022ca:	d1fb      	bne.n	80022c4 <__aeabi_dcmpun+0x2c>
 80022cc:	e7f2      	b.n	80022b4 <__aeabi_dcmpun+0x1c>
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff

080022d4 <__aeabi_d2iz>:
 80022d4:	000a      	movs	r2, r1
 80022d6:	b530      	push	{r4, r5, lr}
 80022d8:	4c13      	ldr	r4, [pc, #76]	; (8002328 <__aeabi_d2iz+0x54>)
 80022da:	0053      	lsls	r3, r2, #1
 80022dc:	0309      	lsls	r1, r1, #12
 80022de:	0005      	movs	r5, r0
 80022e0:	0b09      	lsrs	r1, r1, #12
 80022e2:	2000      	movs	r0, #0
 80022e4:	0d5b      	lsrs	r3, r3, #21
 80022e6:	0fd2      	lsrs	r2, r2, #31
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	dd04      	ble.n	80022f6 <__aeabi_d2iz+0x22>
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <__aeabi_d2iz+0x58>)
 80022ee:	4283      	cmp	r3, r0
 80022f0:	dd02      	ble.n	80022f8 <__aeabi_d2iz+0x24>
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <__aeabi_d2iz+0x5c>)
 80022f4:	18d0      	adds	r0, r2, r3
 80022f6:	bd30      	pop	{r4, r5, pc}
 80022f8:	2080      	movs	r0, #128	; 0x80
 80022fa:	0340      	lsls	r0, r0, #13
 80022fc:	4301      	orrs	r1, r0
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <__aeabi_d2iz+0x60>)
 8002300:	1ac0      	subs	r0, r0, r3
 8002302:	281f      	cmp	r0, #31
 8002304:	dd08      	ble.n	8002318 <__aeabi_d2iz+0x44>
 8002306:	480c      	ldr	r0, [pc, #48]	; (8002338 <__aeabi_d2iz+0x64>)
 8002308:	1ac3      	subs	r3, r0, r3
 800230a:	40d9      	lsrs	r1, r3
 800230c:	000b      	movs	r3, r1
 800230e:	4258      	negs	r0, r3
 8002310:	2a00      	cmp	r2, #0
 8002312:	d1f0      	bne.n	80022f6 <__aeabi_d2iz+0x22>
 8002314:	0018      	movs	r0, r3
 8002316:	e7ee      	b.n	80022f6 <__aeabi_d2iz+0x22>
 8002318:	4c08      	ldr	r4, [pc, #32]	; (800233c <__aeabi_d2iz+0x68>)
 800231a:	40c5      	lsrs	r5, r0
 800231c:	46a4      	mov	ip, r4
 800231e:	4463      	add	r3, ip
 8002320:	4099      	lsls	r1, r3
 8002322:	000b      	movs	r3, r1
 8002324:	432b      	orrs	r3, r5
 8002326:	e7f2      	b.n	800230e <__aeabi_d2iz+0x3a>
 8002328:	000003fe 	.word	0x000003fe
 800232c:	0000041d 	.word	0x0000041d
 8002330:	7fffffff 	.word	0x7fffffff
 8002334:	00000433 	.word	0x00000433
 8002338:	00000413 	.word	0x00000413
 800233c:	fffffbed 	.word	0xfffffbed

08002340 <__aeabi_i2d>:
 8002340:	b570      	push	{r4, r5, r6, lr}
 8002342:	2800      	cmp	r0, #0
 8002344:	d016      	beq.n	8002374 <__aeabi_i2d+0x34>
 8002346:	17c3      	asrs	r3, r0, #31
 8002348:	18c5      	adds	r5, r0, r3
 800234a:	405d      	eors	r5, r3
 800234c:	0fc4      	lsrs	r4, r0, #31
 800234e:	0028      	movs	r0, r5
 8002350:	f000 f8d2 	bl	80024f8 <__clzsi2>
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <__aeabi_i2d+0x5c>)
 8002356:	1a1b      	subs	r3, r3, r0
 8002358:	280a      	cmp	r0, #10
 800235a:	dc16      	bgt.n	800238a <__aeabi_i2d+0x4a>
 800235c:	0002      	movs	r2, r0
 800235e:	002e      	movs	r6, r5
 8002360:	3215      	adds	r2, #21
 8002362:	4096      	lsls	r6, r2
 8002364:	220b      	movs	r2, #11
 8002366:	1a12      	subs	r2, r2, r0
 8002368:	40d5      	lsrs	r5, r2
 800236a:	055b      	lsls	r3, r3, #21
 800236c:	032d      	lsls	r5, r5, #12
 800236e:	0b2d      	lsrs	r5, r5, #12
 8002370:	0d5b      	lsrs	r3, r3, #21
 8002372:	e003      	b.n	800237c <__aeabi_i2d+0x3c>
 8002374:	2400      	movs	r4, #0
 8002376:	2300      	movs	r3, #0
 8002378:	2500      	movs	r5, #0
 800237a:	2600      	movs	r6, #0
 800237c:	051b      	lsls	r3, r3, #20
 800237e:	432b      	orrs	r3, r5
 8002380:	07e4      	lsls	r4, r4, #31
 8002382:	4323      	orrs	r3, r4
 8002384:	0030      	movs	r0, r6
 8002386:	0019      	movs	r1, r3
 8002388:	bd70      	pop	{r4, r5, r6, pc}
 800238a:	380b      	subs	r0, #11
 800238c:	4085      	lsls	r5, r0
 800238e:	055b      	lsls	r3, r3, #21
 8002390:	032d      	lsls	r5, r5, #12
 8002392:	2600      	movs	r6, #0
 8002394:	0b2d      	lsrs	r5, r5, #12
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	e7f0      	b.n	800237c <__aeabi_i2d+0x3c>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	0000041e 	.word	0x0000041e

080023a0 <__aeabi_ui2d>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	1e04      	subs	r4, r0, #0
 80023a4:	d010      	beq.n	80023c8 <__aeabi_ui2d+0x28>
 80023a6:	f000 f8a7 	bl	80024f8 <__clzsi2>
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <__aeabi_ui2d+0x48>)
 80023ac:	1a1b      	subs	r3, r3, r0
 80023ae:	280a      	cmp	r0, #10
 80023b0:	dc11      	bgt.n	80023d6 <__aeabi_ui2d+0x36>
 80023b2:	220b      	movs	r2, #11
 80023b4:	0021      	movs	r1, r4
 80023b6:	1a12      	subs	r2, r2, r0
 80023b8:	40d1      	lsrs	r1, r2
 80023ba:	3015      	adds	r0, #21
 80023bc:	030a      	lsls	r2, r1, #12
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	4084      	lsls	r4, r0
 80023c2:	0b12      	lsrs	r2, r2, #12
 80023c4:	0d5b      	lsrs	r3, r3, #21
 80023c6:	e001      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023c8:	2300      	movs	r3, #0
 80023ca:	2200      	movs	r2, #0
 80023cc:	051b      	lsls	r3, r3, #20
 80023ce:	4313      	orrs	r3, r2
 80023d0:	0020      	movs	r0, r4
 80023d2:	0019      	movs	r1, r3
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	0022      	movs	r2, r4
 80023d8:	380b      	subs	r0, #11
 80023da:	4082      	lsls	r2, r0
 80023dc:	055b      	lsls	r3, r3, #21
 80023de:	0312      	lsls	r2, r2, #12
 80023e0:	2400      	movs	r4, #0
 80023e2:	0b12      	lsrs	r2, r2, #12
 80023e4:	0d5b      	lsrs	r3, r3, #21
 80023e6:	e7f1      	b.n	80023cc <__aeabi_ui2d+0x2c>
 80023e8:	0000041e 	.word	0x0000041e

080023ec <__aeabi_d2f>:
 80023ec:	0002      	movs	r2, r0
 80023ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023f0:	004b      	lsls	r3, r1, #1
 80023f2:	030d      	lsls	r5, r1, #12
 80023f4:	0f40      	lsrs	r0, r0, #29
 80023f6:	0d5b      	lsrs	r3, r3, #21
 80023f8:	0fcc      	lsrs	r4, r1, #31
 80023fa:	0a6d      	lsrs	r5, r5, #9
 80023fc:	493a      	ldr	r1, [pc, #232]	; (80024e8 <__aeabi_d2f+0xfc>)
 80023fe:	4305      	orrs	r5, r0
 8002400:	1c58      	adds	r0, r3, #1
 8002402:	00d7      	lsls	r7, r2, #3
 8002404:	4208      	tst	r0, r1
 8002406:	d00a      	beq.n	800241e <__aeabi_d2f+0x32>
 8002408:	4938      	ldr	r1, [pc, #224]	; (80024ec <__aeabi_d2f+0x100>)
 800240a:	1859      	adds	r1, r3, r1
 800240c:	29fe      	cmp	r1, #254	; 0xfe
 800240e:	dd16      	ble.n	800243e <__aeabi_d2f+0x52>
 8002410:	20ff      	movs	r0, #255	; 0xff
 8002412:	2200      	movs	r2, #0
 8002414:	05c0      	lsls	r0, r0, #23
 8002416:	4310      	orrs	r0, r2
 8002418:	07e4      	lsls	r4, r4, #31
 800241a:	4320      	orrs	r0, r4
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <__aeabi_d2f+0x44>
 8002422:	433d      	orrs	r5, r7
 8002424:	d026      	beq.n	8002474 <__aeabi_d2f+0x88>
 8002426:	2205      	movs	r2, #5
 8002428:	0192      	lsls	r2, r2, #6
 800242a:	0a52      	lsrs	r2, r2, #9
 800242c:	b2d8      	uxtb	r0, r3
 800242e:	e7f1      	b.n	8002414 <__aeabi_d2f+0x28>
 8002430:	432f      	orrs	r7, r5
 8002432:	d0ed      	beq.n	8002410 <__aeabi_d2f+0x24>
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	03d2      	lsls	r2, r2, #15
 8002438:	20ff      	movs	r0, #255	; 0xff
 800243a:	432a      	orrs	r2, r5
 800243c:	e7ea      	b.n	8002414 <__aeabi_d2f+0x28>
 800243e:	2900      	cmp	r1, #0
 8002440:	dd1b      	ble.n	800247a <__aeabi_d2f+0x8e>
 8002442:	0192      	lsls	r2, r2, #6
 8002444:	1e50      	subs	r0, r2, #1
 8002446:	4182      	sbcs	r2, r0
 8002448:	00ed      	lsls	r5, r5, #3
 800244a:	0f7f      	lsrs	r7, r7, #29
 800244c:	432a      	orrs	r2, r5
 800244e:	433a      	orrs	r2, r7
 8002450:	0753      	lsls	r3, r2, #29
 8002452:	d047      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002454:	230f      	movs	r3, #15
 8002456:	4013      	ands	r3, r2
 8002458:	2b04      	cmp	r3, #4
 800245a:	d000      	beq.n	800245e <__aeabi_d2f+0x72>
 800245c:	3204      	adds	r2, #4
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	04db      	lsls	r3, r3, #19
 8002462:	4013      	ands	r3, r2
 8002464:	d03e      	beq.n	80024e4 <__aeabi_d2f+0xf8>
 8002466:	1c48      	adds	r0, r1, #1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	d0d1      	beq.n	8002410 <__aeabi_d2f+0x24>
 800246c:	0192      	lsls	r2, r2, #6
 800246e:	0a52      	lsrs	r2, r2, #9
 8002470:	b2c0      	uxtb	r0, r0
 8002472:	e7cf      	b.n	8002414 <__aeabi_d2f+0x28>
 8002474:	2000      	movs	r0, #0
 8002476:	2200      	movs	r2, #0
 8002478:	e7cc      	b.n	8002414 <__aeabi_d2f+0x28>
 800247a:	000a      	movs	r2, r1
 800247c:	3217      	adds	r2, #23
 800247e:	db2f      	blt.n	80024e0 <__aeabi_d2f+0xf4>
 8002480:	2680      	movs	r6, #128	; 0x80
 8002482:	0436      	lsls	r6, r6, #16
 8002484:	432e      	orrs	r6, r5
 8002486:	251e      	movs	r5, #30
 8002488:	1a6d      	subs	r5, r5, r1
 800248a:	2d1f      	cmp	r5, #31
 800248c:	dd11      	ble.n	80024b2 <__aeabi_d2f+0xc6>
 800248e:	2202      	movs	r2, #2
 8002490:	4252      	negs	r2, r2
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	0031      	movs	r1, r6
 8002496:	40d1      	lsrs	r1, r2
 8002498:	2d20      	cmp	r5, #32
 800249a:	d004      	beq.n	80024a6 <__aeabi_d2f+0xba>
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <__aeabi_d2f+0x104>)
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	409e      	lsls	r6, r3
 80024a4:	4337      	orrs	r7, r6
 80024a6:	003a      	movs	r2, r7
 80024a8:	1e53      	subs	r3, r2, #1
 80024aa:	419a      	sbcs	r2, r3
 80024ac:	430a      	orrs	r2, r1
 80024ae:	2100      	movs	r1, #0
 80024b0:	e7ce      	b.n	8002450 <__aeabi_d2f+0x64>
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <__aeabi_d2f+0x108>)
 80024b4:	0038      	movs	r0, r7
 80024b6:	4694      	mov	ip, r2
 80024b8:	4463      	add	r3, ip
 80024ba:	4098      	lsls	r0, r3
 80024bc:	003a      	movs	r2, r7
 80024be:	1e41      	subs	r1, r0, #1
 80024c0:	4188      	sbcs	r0, r1
 80024c2:	409e      	lsls	r6, r3
 80024c4:	40ea      	lsrs	r2, r5
 80024c6:	4330      	orrs	r0, r6
 80024c8:	4302      	orrs	r2, r0
 80024ca:	2100      	movs	r1, #0
 80024cc:	0753      	lsls	r3, r2, #29
 80024ce:	d1c1      	bne.n	8002454 <__aeabi_d2f+0x68>
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	0013      	movs	r3, r2
 80024d4:	04c9      	lsls	r1, r1, #19
 80024d6:	2001      	movs	r0, #1
 80024d8:	400b      	ands	r3, r1
 80024da:	420a      	tst	r2, r1
 80024dc:	d1c6      	bne.n	800246c <__aeabi_d2f+0x80>
 80024de:	e7a3      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7a0      	b.n	8002426 <__aeabi_d2f+0x3a>
 80024e4:	000b      	movs	r3, r1
 80024e6:	e79f      	b.n	8002428 <__aeabi_d2f+0x3c>
 80024e8:	000007fe 	.word	0x000007fe
 80024ec:	fffffc80 	.word	0xfffffc80
 80024f0:	fffffca2 	.word	0xfffffca2
 80024f4:	fffffc82 	.word	0xfffffc82

080024f8 <__clzsi2>:
 80024f8:	211c      	movs	r1, #28
 80024fa:	2301      	movs	r3, #1
 80024fc:	041b      	lsls	r3, r3, #16
 80024fe:	4298      	cmp	r0, r3
 8002500:	d301      	bcc.n	8002506 <__clzsi2+0xe>
 8002502:	0c00      	lsrs	r0, r0, #16
 8002504:	3910      	subs	r1, #16
 8002506:	0a1b      	lsrs	r3, r3, #8
 8002508:	4298      	cmp	r0, r3
 800250a:	d301      	bcc.n	8002510 <__clzsi2+0x18>
 800250c:	0a00      	lsrs	r0, r0, #8
 800250e:	3908      	subs	r1, #8
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	4298      	cmp	r0, r3
 8002514:	d301      	bcc.n	800251a <__clzsi2+0x22>
 8002516:	0900      	lsrs	r0, r0, #4
 8002518:	3904      	subs	r1, #4
 800251a:	a202      	add	r2, pc, #8	; (adr r2, 8002524 <__clzsi2+0x2c>)
 800251c:	5c10      	ldrb	r0, [r2, r0]
 800251e:	1840      	adds	r0, r0, r1
 8002520:	4770      	bx	lr
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	02020304 	.word	0x02020304
 8002528:	01010101 	.word	0x01010101
	...

08002534 <__clzdi2>:
 8002534:	b510      	push	{r4, lr}
 8002536:	2900      	cmp	r1, #0
 8002538:	d103      	bne.n	8002542 <__clzdi2+0xe>
 800253a:	f7ff ffdd 	bl	80024f8 <__clzsi2>
 800253e:	3020      	adds	r0, #32
 8002540:	e002      	b.n	8002548 <__clzdi2+0x14>
 8002542:	0008      	movs	r0, r1
 8002544:	f7ff ffd8 	bl	80024f8 <__clzsi2>
 8002548:	bd10      	pop	{r4, pc}
 800254a:	46c0      	nop			; (mov r8, r8)

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b5b0      	push	{r4, r5, r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002550:	f000 fdea 	bl	8003128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002554:	f000 f84e 	bl	80025f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002558:	f000 f97a 	bl	8002850 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800255c:	f000 f944 	bl	80027e8 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002560:	f000 f89e 	bl	80026a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // System hello
  HAL_UART_Transmit ( HUART_DBG , (uint8_t*) hello , strlen (hello) , UART_TIMEOUT ) ;
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <main+0x94>)
 8002566:	681c      	ldr	r4, [r3, #0]
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <main+0x94>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0018      	movs	r0, r3
 800256e:	f7fd fdc9 	bl	8000104 <strlen>
 8002572:	0003      	movs	r3, r0
 8002574:	b29a      	uxth	r2, r3
 8002576:	23fa      	movs	r3, #250	; 0xfa
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	481a      	ldr	r0, [pc, #104]	; (80025e4 <main+0x98>)
 800257c:	0021      	movs	r1, r4
 800257e:	f002 fd1f 	bl	8004fc0 <HAL_UART_Transmit>

  HAL_Delay ( 1010 ) ; // just to be sure that RC is ticking
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <main+0x9c>)
 8002584:	0018      	movs	r0, r3
 8002586:	f000 fe55 	bl	8003234 <HAL_Delay>

  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <main+0xa0>)
 800258c:	0018      	movs	r0, r3
 800258e:	f000 fb53 	bl	8002c38 <my_rtc_get_dt_s>
  send_debug_logs ( rtc_dt_s ) ;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <main+0xa0>)
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f9bd 	bl	8002914 <send_debug_logs>

  if ( my_rtc_set_alarm ( 30 ) )
 800259a:	201e      	movs	r0, #30
 800259c:	f000 fb8e 	bl	8002cbc <my_rtc_set_alarm>
 80025a0:	1e03      	subs	r3, r0, #0
 80025a2:	d01b      	beq.n	80025dc <main+0x90>
  {
	  HAL_SuspendTick () ;
 80025a4:	f000 fe6a 	bl	800327c <HAL_SuspendTick>
	  HAL_PWR_EnterSTOPMode ( PWR_MAINREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80025a8:	2102      	movs	r1, #2
 80025aa:	2000      	movs	r0, #0
 80025ac:	f001 f8f0 	bl	8003790 <HAL_PWR_EnterSTOPMode>
	  HAL_ResumeTick () ;
 80025b0:	f000 fe72 	bl	8003298 <HAL_ResumeTick>

	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80025b4:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <main+0xa0>)
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fb3e 	bl	8002c38 <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <main+0xa0>)
 80025be:	0018      	movs	r0, r3
 80025c0:	f000 f9a8 	bl	8002914 <send_debug_logs>

	  send_debug_logs ( "Dupa" ) ;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <main+0xa4>)
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f9a4 	bl	8002914 <send_debug_logs>

	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <main+0xa0>)
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 fb32 	bl	8002c38 <my_rtc_get_dt_s>
	  send_debug_logs ( rtc_dt_s ) ;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <main+0xa0>)
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 f99c 	bl	8002914 <send_debug_logs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <main+0x90>
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000220 	.word	0x20000220
 80025e8:	000003f2 	.word	0x000003f2
 80025ec:	200002b4 	.word	0x200002b4
 80025f0:	0800a2d8 	.word	0x0800a2d8

080025f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b093      	sub	sp, #76	; 0x4c
 80025f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025fa:	2410      	movs	r4, #16
 80025fc:	193b      	adds	r3, r7, r4
 80025fe:	0018      	movs	r0, r3
 8002600:	2338      	movs	r3, #56	; 0x38
 8002602:	001a      	movs	r2, r3
 8002604:	2100      	movs	r1, #0
 8002606:	f004 ff99 	bl	800753c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800260a:	003b      	movs	r3, r7
 800260c:	0018      	movs	r0, r3
 800260e:	2310      	movs	r3, #16
 8002610:	001a      	movs	r2, r3
 8002612:	2100      	movs	r1, #0
 8002614:	f004 ff92 	bl	800753c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	0018      	movs	r0, r3
 800261e:	f001 f8ef 	bl	8003800 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002622:	f001 f8a7 	bl	8003774 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <SystemClock_Config+0xa8>)
 8002628:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800262a:	4b1c      	ldr	r3, [pc, #112]	; (800269c <SystemClock_Config+0xa8>)
 800262c:	2118      	movs	r1, #24
 800262e:	438a      	bics	r2, r1
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002632:	193b      	adds	r3, r7, r4
 8002634:	2206      	movs	r2, #6
 8002636:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002638:	193b      	adds	r3, r7, r4
 800263a:	2201      	movs	r2, #1
 800263c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800263e:	193b      	adds	r3, r7, r4
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	0052      	lsls	r2, r2, #1
 8002644:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002646:	193b      	adds	r3, r7, r4
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800264c:	193b      	adds	r3, r7, r4
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002652:	193b      	adds	r3, r7, r4
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002658:	193b      	adds	r3, r7, r4
 800265a:	0018      	movs	r0, r3
 800265c:	f001 f91c 	bl	8003898 <HAL_RCC_OscConfig>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002664:	f000 f994 	bl	8002990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002668:	003b      	movs	r3, r7
 800266a:	2207      	movs	r2, #7
 800266c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800266e:	003b      	movs	r3, r7
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002674:	003b      	movs	r3, r7
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800267a:	003b      	movs	r3, r7
 800267c:	2200      	movs	r2, #0
 800267e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002680:	003b      	movs	r3, r7
 8002682:	2100      	movs	r1, #0
 8002684:	0018      	movs	r0, r3
 8002686:	f001 fc21 	bl	8003ecc <HAL_RCC_ClockConfig>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d001      	beq.n	8002692 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800268e:	f000 f97f 	bl	8002990 <Error_Handler>
  }
}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b013      	add	sp, #76	; 0x4c
 8002698:	bd90      	pop	{r4, r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000

080026a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b090      	sub	sp, #64	; 0x40
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026a6:	232c      	movs	r3, #44	; 0x2c
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	0018      	movs	r0, r3
 80026ac:	2314      	movs	r3, #20
 80026ae:	001a      	movs	r2, r3
 80026b0:	2100      	movs	r1, #0
 80026b2:	f004 ff43 	bl	800753c <memset>
  RTC_DateTypeDef sDate = {0};
 80026b6:	2328      	movs	r3, #40	; 0x28
 80026b8:	18fb      	adds	r3, r7, r3
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80026be:	003b      	movs	r3, r7
 80026c0:	0018      	movs	r0, r3
 80026c2:	2328      	movs	r3, #40	; 0x28
 80026c4:	001a      	movs	r2, r3
 80026c6:	2100      	movs	r1, #0
 80026c8:	f004 ff38 	bl	800753c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026cc:	4b44      	ldr	r3, [pc, #272]	; (80027e0 <MX_RTC_Init+0x140>)
 80026ce:	4a45      	ldr	r2, [pc, #276]	; (80027e4 <MX_RTC_Init+0x144>)
 80026d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <MX_RTC_Init+0x140>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80026d8:	4b41      	ldr	r3, [pc, #260]	; (80027e0 <MX_RTC_Init+0x140>)
 80026da:	227f      	movs	r2, #127	; 0x7f
 80026dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80026de:	4b40      	ldr	r3, [pc, #256]	; (80027e0 <MX_RTC_Init+0x140>)
 80026e0:	22ff      	movs	r2, #255	; 0xff
 80026e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026e4:	4b3e      	ldr	r3, [pc, #248]	; (80027e0 <MX_RTC_Init+0x140>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026ea:	4b3d      	ldr	r3, [pc, #244]	; (80027e0 <MX_RTC_Init+0x140>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026f0:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <MX_RTC_Init+0x140>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <MX_RTC_Init+0x140>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	05d2      	lsls	r2, r2, #23
 80026fc:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <MX_RTC_Init+0x140>)
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002704:	4b36      	ldr	r3, [pc, #216]	; (80027e0 <MX_RTC_Init+0x140>)
 8002706:	0018      	movs	r0, r3
 8002708:	f001 ff04 	bl	8004514 <HAL_RTC_Init>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d001      	beq.n	8002714 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002710:	f000 f93e 	bl	8002990 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2200      	movs	r2, #0
 8002720:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2200      	movs	r2, #0
 8002726:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2200      	movs	r2, #0
 800272c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800273a:	1879      	adds	r1, r7, r1
 800273c:	4b28      	ldr	r3, [pc, #160]	; (80027e0 <MX_RTC_Init+0x140>)
 800273e:	2200      	movs	r2, #0
 8002740:	0018      	movs	r0, r3
 8002742:	f001 ff89 	bl	8004658 <HAL_RTC_SetTime>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800274a:	f000 f921 	bl	8002990 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 800274e:	2128      	movs	r1, #40	; 0x28
 8002750:	187b      	adds	r3, r7, r1
 8002752:	2206      	movs	r2, #6
 8002754:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2201      	movs	r2, #1
 800275a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2201      	movs	r2, #1
 8002760:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2200      	movs	r2, #0
 8002766:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002768:	1879      	adds	r1, r7, r1
 800276a:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <MX_RTC_Init+0x140>)
 800276c:	2200      	movs	r2, #0
 800276e:	0018      	movs	r0, r3
 8002770:	f002 f876 	bl	8004860 <HAL_RTC_SetDate>
 8002774:	1e03      	subs	r3, r0, #0
 8002776:	d001      	beq.n	800277c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002778:	f000 f90a 	bl	8002990 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800277c:	003b      	movs	r3, r7
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002782:	003b      	movs	r3, r7
 8002784:	2200      	movs	r2, #0
 8002786:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 10;
 8002788:	003b      	movs	r3, r7
 800278a:	220a      	movs	r2, #10
 800278c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800278e:	003b      	movs	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002794:	003b      	movs	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800279a:	003b      	movs	r3, r7
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027a0:	003b      	movs	r3, r7
 80027a2:	2200      	movs	r2, #0
 80027a4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027a6:	003b      	movs	r3, r7
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80027ac:	003b      	movs	r3, r7
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80027b2:	003b      	movs	r3, r7
 80027b4:	2220      	movs	r2, #32
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80027ba:	003b      	movs	r3, r7
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	0052      	lsls	r2, r2, #1
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80027c2:	0039      	movs	r1, r7
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <MX_RTC_Init+0x140>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	0018      	movs	r0, r3
 80027ca:	f002 f929 	bl	8004a20 <HAL_RTC_SetAlarm_IT>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d001      	beq.n	80027d6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80027d2:	f000 f8dd 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b010      	add	sp, #64	; 0x40
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	200001f4 	.word	0x200001f4
 80027e4:	40002800 	.word	0x40002800

080027e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <MX_USART2_UART_Init+0x60>)
 80027ee:	4a17      	ldr	r2, [pc, #92]	; (800284c <MX_USART2_UART_Init+0x64>)
 80027f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027f2:	4b15      	ldr	r3, [pc, #84]	; (8002848 <MX_USART2_UART_Init+0x60>)
 80027f4:	22e1      	movs	r2, #225	; 0xe1
 80027f6:	0252      	lsls	r2, r2, #9
 80027f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <MX_USART2_UART_Init+0x60>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <MX_USART2_UART_Init+0x60>)
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <MX_USART2_UART_Init+0x60>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <MX_USART2_UART_Init+0x60>)
 800280e:	220c      	movs	r2, #12
 8002810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <MX_USART2_UART_Init+0x60>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <MX_USART2_UART_Init+0x60>)
 800281a:	2200      	movs	r2, #0
 800281c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <MX_USART2_UART_Init+0x60>)
 8002820:	2200      	movs	r2, #0
 8002822:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <MX_USART2_UART_Init+0x60>)
 8002826:	2200      	movs	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <MX_USART2_UART_Init+0x60>)
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <MX_USART2_UART_Init+0x60>)
 8002832:	0018      	movs	r0, r3
 8002834:	f002 fb6e 	bl	8004f14 <HAL_UART_Init>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d001      	beq.n	8002840 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800283c:	f000 f8a8 	bl	8002990 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000220 	.word	0x20000220
 800284c:	40004400 	.word	0x40004400

08002850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002856:	240c      	movs	r4, #12
 8002858:	193b      	adds	r3, r7, r4
 800285a:	0018      	movs	r0, r3
 800285c:	2314      	movs	r3, #20
 800285e:	001a      	movs	r2, r3
 8002860:	2100      	movs	r1, #0
 8002862:	f004 fe6b 	bl	800753c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <MX_GPIO_Init+0xb8>)
 8002868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <MX_GPIO_Init+0xb8>)
 800286c:	2104      	movs	r1, #4
 800286e:	430a      	orrs	r2, r1
 8002870:	635a      	str	r2, [r3, #52]	; 0x34
 8002872:	4b25      	ldr	r3, [pc, #148]	; (8002908 <MX_GPIO_Init+0xb8>)
 8002874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800287e:	4b22      	ldr	r3, [pc, #136]	; (8002908 <MX_GPIO_Init+0xb8>)
 8002880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <MX_GPIO_Init+0xb8>)
 8002884:	2120      	movs	r1, #32
 8002886:	430a      	orrs	r2, r1
 8002888:	635a      	str	r2, [r3, #52]	; 0x34
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <MX_GPIO_Init+0xb8>)
 800288c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288e:	2220      	movs	r2, #32
 8002890:	4013      	ands	r3, r2
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_GPIO_Init+0xb8>)
 8002898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <MX_GPIO_Init+0xb8>)
 800289c:	2101      	movs	r1, #1
 800289e:	430a      	orrs	r2, r1
 80028a0:	635a      	str	r2, [r3, #52]	; 0x34
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <MX_GPIO_Init+0xb8>)
 80028a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <MX_GPIO_Init+0xbc>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	0018      	movs	r0, r3
 80028b6:	f000 ff3f 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	2204      	movs	r2, #4
 80028be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028c0:	193b      	adds	r3, r7, r4
 80028c2:	2288      	movs	r2, #136	; 0x88
 80028c4:	0352      	lsls	r2, r2, #13
 80028c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80028ce:	193b      	adds	r3, r7, r4
 80028d0:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <MX_GPIO_Init+0xc0>)
 80028d2:	0019      	movs	r1, r3
 80028d4:	0010      	movs	r0, r2
 80028d6:	f000 fdcb 	bl	8003470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 80028da:	0021      	movs	r1, r4
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	2240      	movs	r2, #64	; 0x40
 80028e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	2201      	movs	r2, #1
 80028e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	187b      	adds	r3, r7, r1
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	2200      	movs	r2, #0
 80028f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <MX_GPIO_Init+0xbc>)
 80028f8:	0019      	movs	r1, r3
 80028fa:	0010      	movs	r0, r2
 80028fc:	f000 fdb8 	bl	8003470 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b009      	add	sp, #36	; 0x24
 8002906:	bd90      	pop	{r4, r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	50000800 	.word	0x50000800
 8002910:	50001400 	.word	0x50001400

08002914 <send_debug_logs>:

/* USER CODE BEGIN 4 */
void send_debug_logs ( char* p_tx_buffer )
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f7fd fbf0 	bl	8000104 <strlen>
 8002924:	0003      	movs	r3, r0
 8002926:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2bfa      	cmp	r3, #250	; 0xfa
 800292c:	d908      	bls.n	8002940 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800292e:	23fa      	movs	r3, #250	; 0xfa
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	490d      	ldr	r1, [pc, #52]	; (8002968 <send_debug_logs+0x54>)
 8002934:	480d      	ldr	r0, [pc, #52]	; (800296c <send_debug_logs+0x58>)
 8002936:	222a      	movs	r2, #42	; 0x2a
 8002938:	f002 fb42 	bl	8004fc0 <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800293c:	23fa      	movs	r3, #250	; 0xfa
 800293e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	b29a      	uxth	r2, r3
 8002944:	23fa      	movs	r3, #250	; 0xfa
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4808      	ldr	r0, [pc, #32]	; (800296c <send_debug_logs+0x58>)
 800294c:	f002 fb38 	bl	8004fc0 <HAL_UART_Transmit>
    HAL_UART_Transmit ( HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8002950:	23fa      	movs	r3, #250	; 0xfa
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4906      	ldr	r1, [pc, #24]	; (8002970 <send_debug_logs+0x5c>)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <send_debug_logs+0x58>)
 8002958:	2201      	movs	r2, #1
 800295a:	f002 fb31 	bl	8004fc0 <HAL_UART_Transmit>
}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	46bd      	mov	sp, r7
 8002962:	b004      	add	sp, #16
 8002964:	bd80      	pop	{r7, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	0800a2e0 	.word	0x0800a2e0
 800296c:	20000220 	.word	0x20000220
 8002970:	0800a30c 	.word	0x0800a30c

08002974 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef *hrtc )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	send_debug_logs ( "HAL_RTC_AlarmAEventCallback\n" ) ;
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_RTC_AlarmAEventCallback+0x18>)
 800297e:	0018      	movs	r0, r3
 8002980:	f7ff ffc8 	bl	8002914 <send_debug_logs>
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0800a310 	.word	0x0800a310

08002990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002994:	b672      	cpsid	i
}
 8002996:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002998:	e7fe      	b.n	8002998 <Error_Handler+0x8>
	...

0800299c <my_conv_rtc2timestamp>:
	return i ;
}

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	78db      	ldrb	r3, [r3, #3]
 80029aa:	22fa      	movs	r2, #250	; 0xfa
 80029ac:	00d2      	lsls	r2, r2, #3
 80029ae:	4694      	mov	ip, r2
 80029b0:	4463      	add	r3, ip
 80029b2:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	0013      	movs	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	009a      	lsls	r2, r3, #2
 80029c2:	189a      	adds	r2, r3, r2
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	492c      	ldr	r1, [pc, #176]	; (8002a78 <my_conv_rtc2timestamp+0xdc>)
 80029c8:	468c      	mov	ip, r1
 80029ca:	4463      	add	r3, ip
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	18d3      	adds	r3, r2, r3
 80029d0:	4a2a      	ldr	r2, [pc, #168]	; (8002a7c <my_conv_rtc2timestamp+0xe0>)
 80029d2:	4694      	mov	ip, r2
 80029d4:	4463      	add	r3, ip
 80029d6:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 80029d8:	2300      	movs	r3, #0
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	e00a      	b.n	80029f4 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 80029de:	4a28      	ldr	r2, [pc, #160]	; (8002a80 <my_conv_rtc2timestamp+0xe4>)
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	18d3      	adds	r3, r2, r3
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	001a      	movs	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	189b      	adds	r3, r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	3301      	adds	r3, #1
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	785b      	ldrb	r3, [r3, #1]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dbee      	blt.n	80029de <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	785b      	ldrb	r3, [r3, #1]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d908      	bls.n	8002a1a <my_conv_rtc2timestamp+0x7e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f8de 	bl	8002bcc <my_conv_is_leap_year>
 8002a10:	1e03      	subs	r3, r0, #0
 8002a12:	d002      	beq.n	8002a1a <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3301      	adds	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	789b      	ldrb	r3, [r3, #2]
 8002a1e:	001a      	movs	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	18d3      	adds	r3, r2, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	011a      	lsls	r2, r3, #4
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	0113      	lsls	r3, r2, #4
 8002a36:	1a9b      	subs	r3, r3, r2
 8002a38:	01db      	lsls	r3, r3, #7
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	001a      	movs	r2, r3
 8002a42:	0013      	movs	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	011a      	lsls	r2, r3, #4
 8002a4a:	1ad2      	subs	r2, r2, r3
 8002a4c:	0113      	lsls	r3, r2, #4
 8002a4e:	001a      	movs	r2, r3
 8002a50:	0013      	movs	r3, r2
 8002a52:	18ca      	adds	r2, r1, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	785b      	ldrb	r3, [r3, #1]
 8002a58:	0019      	movs	r1, r3
 8002a5a:	000b      	movs	r3, r1
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a5b      	subs	r3, r3, r1
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	18d3      	adds	r3, r2, r3
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	7892      	ldrb	r2, [r2, #2]
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    return ts ;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
}
 8002a6e:	0018      	movs	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	b006      	add	sp, #24
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	fffff84f 	.word	0xfffff84f
 8002a7c:	fff50736 	.word	0xfff50736
 8002a80:	0800a3a4 	.word	0x0800a3a4

08002a84 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b08b      	sub	sp, #44	; 0x2c
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	213c      	movs	r1, #60	; 0x3c
 8002a94:	0018      	movs	r0, r3
 8002a96:	f7fd fbd7 	bl	8000248 <__aeabi_uidivmod>
 8002a9a:	000b      	movs	r3, r1
 8002a9c:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	213c      	movs	r1, #60	; 0x3c
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7fd fb4a 	bl	800013c <__udivsi3>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	213c      	movs	r1, #60	; 0x3c
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fd fbcb 	bl	8000248 <__aeabi_uidivmod>
 8002ab2:	000b      	movs	r3, r1
 8002ab4:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	22e1      	movs	r2, #225	; 0xe1
 8002aba:	0111      	lsls	r1, r2, #4
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7fd fb3d 	bl	800013c <__udivsi3>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	2118      	movs	r1, #24
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f7fd fbbe 	bl	8000248 <__aeabi_uidivmod>
 8002acc:	000b      	movs	r3, r1
 8002ace:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	493b      	ldr	r1, [pc, #236]	; (8002bc0 <my_conv_timestamp2rtc+0x13c>)
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fd fb31 	bl	800013c <__udivsi3>
 8002ada:	0003      	movs	r3, r0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8002ade:	4b39      	ldr	r3, [pc, #228]	; (8002bc4 <my_conv_timestamp2rtc+0x140>)
 8002ae0:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8002ae2:	e00d      	b.n	8002b00 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f000 f870 	bl	8002bcc <my_conv_is_leap_year>
 8002aec:	0003      	movs	r3, r0
 8002aee:	336e      	adds	r3, #110	; 0x6e
 8002af0:	33ff      	adds	r3, #255	; 0xff
 8002af2:	001a      	movs	r2, r3
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	3301      	adds	r3, #1
 8002afe:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f862 	bl	8002bcc <my_conv_is_leap_year>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	336e      	adds	r3, #110	; 0x6e
 8002b0c:	33ff      	adds	r3, #255	; 0xff
 8002b0e:	001a      	movs	r2, r3
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d2e6      	bcs.n	8002ae4 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8002b1a:	e018      	b.n	8002b4e <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <my_conv_timestamp2rtc+0x144>)
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	0052      	lsls	r2, r2, #1
 8002b22:	5ad3      	ldrh	r3, [r2, r3]
 8002b24:	001c      	movs	r4, r3
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d107      	bne.n	8002b3c <my_conv_timestamp2rtc+0xb8>
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f84c 	bl	8002bcc <my_conv_is_leap_year>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <my_conv_timestamp2rtc+0xb8>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <my_conv_timestamp2rtc+0xba>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	191b      	adds	r3, r3, r4
 8002b40:	001a      	movs	r2, r3
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <my_conv_timestamp2rtc+0x144>)
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	0052      	lsls	r2, r2, #1
 8002b54:	5ad3      	ldrh	r3, [r2, r3]
 8002b56:	001c      	movs	r4, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <my_conv_timestamp2rtc+0xea>
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 f833 	bl	8002bcc <my_conv_is_leap_year>
 8002b66:	1e03      	subs	r3, r0, #0
 8002b68:	d001      	beq.n	8002b6e <my_conv_timestamp2rtc+0xea>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <my_conv_timestamp2rtc+0xec>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	191b      	adds	r3, r3, r4
 8002b72:	001a      	movs	r2, r3
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d2d0      	bcs.n	8002b1c <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	3330      	adds	r3, #48	; 0x30
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	709a      	strb	r2, [r3, #2]
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b00b      	add	sp, #44	; 0x2c
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	00015180 	.word	0x00015180
 8002bc4:	000007b2 	.word	0x000007b2
 8002bc8:	0800a3b0 	.word	0x0800a3b0

08002bcc <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d106      	bne.n	8002bea <my_conv_is_leap_year+0x1e>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2164      	movs	r1, #100	; 0x64
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7fd fc1b 	bl	800041c <__aeabi_idivmod>
 8002be6:	1e0b      	subs	r3, r1, #0
 8002be8:	d107      	bne.n	8002bfa <my_conv_is_leap_year+0x2e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	22c8      	movs	r2, #200	; 0xc8
 8002bee:	0051      	lsls	r1, r2, #1
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fd fc13 	bl	800041c <__aeabi_idivmod>
 8002bf6:	1e0b      	subs	r3, r1, #0
 8002bf8:	d101      	bne.n	8002bfe <my_conv_is_leap_year+0x32>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <my_conv_is_leap_year+0x34>
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <my_rtc_get_dt+0x2c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f001 feb3 	bl	8004984 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <my_rtc_get_dt+0x2c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	0018      	movs	r0, r3
 8002c26:	f001 fdbf 	bl	80047a8 <HAL_RTC_GetTime>
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b002      	add	sp, #8
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	200001f4 	.word	0x200001f4

08002c38 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 8002c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3a:	b08d      	sub	sp, #52	; 0x34
 8002c3c:	af04      	add	r7, sp, #16
 8002c3e:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 8002c40:	2508      	movs	r5, #8
 8002c42:	1979      	adds	r1, r7, r5
 8002c44:	4b1b      	ldr	r3, [pc, #108]	; (8002cb4 <my_rtc_get_dt_s+0x7c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f001 fdad 	bl	80047a8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 8002c4e:	241c      	movs	r4, #28
 8002c50:	1939      	adds	r1, r7, r4
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <my_rtc_get_dt_s+0x7c>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	0018      	movs	r0, r3
 8002c58:	f001 fe94 	bl	8004984 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8002c5c:	0021      	movs	r1, r4
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	78db      	ldrb	r3, [r3, #3]
 8002c62:	22fa      	movs	r2, #250	; 0xfa
 8002c64:	00d2      	lsls	r2, r2, #3
 8002c66:	189a      	adds	r2, r3, r2
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	785b      	ldrb	r3, [r3, #1]
 8002c6c:	469c      	mov	ip, r3
 8002c6e:	187b      	adds	r3, r7, r1
 8002c70:	789b      	ldrb	r3, [r3, #2]
 8002c72:	001c      	movs	r4, r3
 8002c74:	0028      	movs	r0, r5
 8002c76:	183b      	adds	r3, r7, r0
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	001d      	movs	r5, r3
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	785b      	ldrb	r3, [r3, #1]
 8002c80:	001e      	movs	r6, r3
 8002c82:	183b      	adds	r3, r7, r0
 8002c84:	789b      	ldrb	r3, [r3, #2]
 8002c86:	490c      	ldr	r1, [pc, #48]	; (8002cb8 <my_rtc_get_dt_s+0x80>)
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	9303      	str	r3, [sp, #12]
 8002c8c:	9602      	str	r6, [sp, #8]
 8002c8e:	9501      	str	r5, [sp, #4]
 8002c90:	9400      	str	r4, [sp, #0]
 8002c92:	4663      	mov	r3, ip
 8002c94:	f004 fbe6 	bl	8007464 <siprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8002c98:	211c      	movs	r1, #28
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	78db      	ldrb	r3, [r3, #3]
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	22fa      	movs	r2, #250	; 0xfa
 8002ca2:	00d2      	lsls	r2, r2, #3
 8002ca4:	4694      	mov	ip, r2
 8002ca6:	4463      	add	r3, ip
 8002ca8:	b29b      	uxth	r3, r3
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b009      	add	sp, #36	; 0x24
 8002cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	200001f4 	.word	0x200001f4
 8002cb8:	0800a330 	.word	0x0800a330

08002cbc <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8002cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cbe:	b0a3      	sub	sp, #140	; 0x8c
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 8002cc4:	246c      	movs	r4, #108	; 0x6c
 8002cc6:	193a      	adds	r2, r7, r4
 8002cc8:	2580      	movs	r5, #128	; 0x80
 8002cca:	197b      	adds	r3, r7, r5
 8002ccc:	0011      	movs	r1, r2
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7ff ff9a 	bl	8002c08 <my_rtc_get_dt>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 8002cd4:	193a      	adds	r2, r7, r4
 8002cd6:	197b      	adds	r3, r7, r5
 8002cd8:	0011      	movs	r1, r2
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f7ff fe5e 	bl	800299c <my_conv_rtc2timestamp>
 8002ce0:	0002      	movs	r2, r0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	189b      	adds	r3, r3, r2
 8002ce6:	2684      	movs	r6, #132	; 0x84
 8002ce8:	19ba      	adds	r2, r7, r6
 8002cea:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 8002cec:	193a      	adds	r2, r7, r4
 8002cee:	1979      	adds	r1, r7, r5
 8002cf0:	19bb      	adds	r3, r7, r6
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff fec5 	bl	8002a84 <my_conv_timestamp2rtc>

	/** Enable the Alarm A
	  */
	a.AlarmTime.Hours = t.Hours ;
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	2144      	movs	r1, #68	; 0x44
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	785a      	ldrb	r2, [r3, #1]
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	789a      	ldrb	r2, [r3, #2]
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 8002d14:	0008      	movs	r0, r1
 8002d16:	183b      	adds	r3, r7, r0
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8002d1c:	183b      	adds	r3, r7, r0
 8002d1e:	2200      	movs	r2, #0
 8002d20:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 8002d22:	183b      	adds	r3, r7, r0
 8002d24:	2200      	movs	r2, #0
 8002d26:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 8002d28:	183b      	adds	r3, r7, r0
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 8002d2e:	183b      	adds	r3, r7, r0
 8002d30:	2200      	movs	r2, #0
 8002d32:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8002d34:	183b      	adds	r3, r7, r0
 8002d36:	2200      	movs	r2, #0
 8002d38:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	7899      	ldrb	r1, [r3, #2]
 8002d3e:	183b      	adds	r3, r7, r0
 8002d40:	2220      	movs	r2, #32
 8002d42:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8002d44:	183b      	adds	r3, r7, r0
 8002d46:	2280      	movs	r2, #128	; 0x80
 8002d48:	0052      	lsls	r2, r2, #1
 8002d4a:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8002d4c:	1839      	adds	r1, r7, r0
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <my_rtc_set_alarm+0xd8>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	0018      	movs	r0, r3
 8002d54:	f001 fe64 	bl	8004a20 <HAL_RTC_SetAlarm_IT>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d116      	bne.n	8002d8a <my_rtc_set_alarm+0xce>
	{
		char s[60] = {0} ;
 8002d5c:	2408      	movs	r4, #8
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2238      	movs	r2, #56	; 0x38
 8002d68:	2100      	movs	r1, #0
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f004 fbe6 	bl	800753c <memset>
		sprintf ( s , "Alarm set to %lu" , alarm_ts ) ;
 8002d70:	19bb      	adds	r3, r7, r6
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4908      	ldr	r1, [pc, #32]	; (8002d98 <my_rtc_set_alarm+0xdc>)
 8002d76:	193b      	adds	r3, r7, r4
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f004 fb73 	bl	8007464 <siprintf>
		send_debug_logs ( s ) ;
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	0018      	movs	r0, r3
 8002d82:	f7ff fdc7 	bl	8002914 <send_debug_logs>
		return true ;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <my_rtc_set_alarm+0xd0>
	}
	return false ;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b023      	add	sp, #140	; 0x8c
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	200001f4 	.word	0x200001f4
 8002d98:	0800a350 	.word	0x0800a350

08002d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002da2:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_MspInit+0x44>)
 8002da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da6:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_MspInit+0x44>)
 8002da8:	2101      	movs	r1, #1
 8002daa:	430a      	orrs	r2, r1
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_MspInit+0x44>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b09      	ldr	r3, [pc, #36]	; (8002de0 <HAL_MspInit+0x44>)
 8002dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_MspInit+0x44>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0549      	lsls	r1, r1, #21
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dc8:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_MspInit+0x44>)
 8002dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40021000 	.word	0x40021000

08002de4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b08f      	sub	sp, #60	; 0x3c
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dec:	2410      	movs	r4, #16
 8002dee:	193b      	adds	r3, r7, r4
 8002df0:	0018      	movs	r0, r3
 8002df2:	2328      	movs	r3, #40	; 0x28
 8002df4:	001a      	movs	r2, r3
 8002df6:	2100      	movs	r1, #0
 8002df8:	f004 fba0 	bl	800753c <memset>
  if(hrtc->Instance==RTC)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a19      	ldr	r2, [pc, #100]	; (8002e68 <HAL_RTC_MspInit+0x84>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d12c      	bne.n	8002e60 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	0292      	lsls	r2, r2, #10
 8002e0c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0052      	lsls	r2, r2, #1
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e16:	193b      	adds	r3, r7, r4
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f001 fa01 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 8002e1e:	1e03      	subs	r3, r0, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002e22:	f7ff fdb5 	bl	8002990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RTC_MspInit+0x88>)
 8002e28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RTC_MspInit+0x88>)
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	0209      	lsls	r1, r1, #8
 8002e30:	430a      	orrs	r2, r1
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <HAL_RTC_MspInit+0x88>)
 8002e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_RTC_MspInit+0x88>)
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	00c9      	lsls	r1, r1, #3
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_RTC_MspInit+0x88>)
 8002e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2100      	movs	r1, #0
 8002e54:	2002      	movs	r0, #2
 8002e56:	f000 fad9 	bl	800340c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	f000 faeb 	bl	8003436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b00f      	add	sp, #60	; 0x3c
 8002e66:	bd90      	pop	{r4, r7, pc}
 8002e68:	40002800 	.word	0x40002800
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e70:	b590      	push	{r4, r7, lr}
 8002e72:	b08b      	sub	sp, #44	; 0x2c
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	2414      	movs	r4, #20
 8002e7a:	193b      	adds	r3, r7, r4
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	2314      	movs	r3, #20
 8002e80:	001a      	movs	r2, r3
 8002e82:	2100      	movs	r1, #0
 8002e84:	f004 fb5a 	bl	800753c <memset>
  if(huart->Instance==USART2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1b      	ldr	r2, [pc, #108]	; (8002efc <HAL_UART_MspInit+0x8c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d130      	bne.n	8002ef4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	0289      	lsls	r1, r1, #10
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_UART_MspInit+0x90>)
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8002ec6:	0021      	movs	r1, r4
 8002ec8:	187b      	adds	r3, r7, r1
 8002eca:	220c      	movs	r2, #12
 8002ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	187b      	adds	r3, r7, r1
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	187b      	adds	r3, r7, r1
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	187a      	adds	r2, r7, r1
 8002ee8:	23a0      	movs	r3, #160	; 0xa0
 8002eea:	05db      	lsls	r3, r3, #23
 8002eec:	0011      	movs	r1, r2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fabe 	bl	8003470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b00b      	add	sp, #44	; 0x2c
 8002efa:	bd90      	pop	{r4, r7, pc}
 8002efc:	40004400 	.word	0x40004400
 8002f00:	40021000 	.word	0x40021000

08002f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f08:	e7fe      	b.n	8002f08 <NMI_Handler+0x4>

08002f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f0e:	e7fe      	b.n	8002f0e <HardFault_Handler+0x4>

08002f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f28:	f000 f968 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <RTC_TAMP_IRQHandler+0x14>)
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f001 feb0 	bl	8004ca0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	200001f4 	.word	0x200001f4

08002f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_kill>:

int _kill(int pid, int sig)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f62:	f004 fb57 	bl	8007614 <__errno>
 8002f66:	0003      	movs	r3, r0
 8002f68:	2216      	movs	r2, #22
 8002f6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	425b      	negs	r3, r3
}
 8002f70:	0018      	movs	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <_exit>:

void _exit (int status)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f80:	2301      	movs	r3, #1
 8002f82:	425a      	negs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff ffe5 	bl	8002f58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f8e:	e7fe      	b.n	8002f8e <_exit+0x16>

08002f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e00a      	b.n	8002fb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fa2:	e000      	b.n	8002fa6 <_read+0x16>
 8002fa4:	bf00      	nop
 8002fa6:	0001      	movs	r1, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	b2ca      	uxtb	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbf0      	blt.n	8002fa2 <_read+0x12>
  }

  return len;
 8002fc0:	687b      	ldr	r3, [r7, #4]
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b006      	add	sp, #24
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e009      	b.n	8002ff0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	60ba      	str	r2, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	e000      	b.n	8002fea <_write+0x20>
 8002fe8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3301      	adds	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	dbf1      	blt.n	8002fdc <_write+0x12>
  }
  return len;
 8002ff8:	687b      	ldr	r3, [r7, #4]
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b006      	add	sp, #24
 8003000:	bd80      	pop	{r7, pc}

08003002 <_close>:

int _close(int file)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800300a:	2301      	movs	r3, #1
 800300c:	425b      	negs	r3, r3
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b002      	add	sp, #8
 8003014:	bd80      	pop	{r7, pc}

08003016 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	0192      	lsls	r2, r2, #6
 8003026:	605a      	str	r2, [r3, #4]
  return 0;
 8003028:	2300      	movs	r3, #0
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}

08003032 <_isatty>:

int _isatty(int file)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800303a:	2301      	movs	r3, #1
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}

08003044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003050:	2300      	movs	r3, #0
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b004      	add	sp, #16
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <_sbrk+0x5c>)
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <_sbrk+0x60>)
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <_sbrk+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <_sbrk+0x64>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <_sbrk+0x68>)
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	18d3      	adds	r3, r2, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d207      	bcs.n	800309c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800308c:	f004 fac2 	bl	8007614 <__errno>
 8003090:	0003      	movs	r3, r0
 8003092:	220c      	movs	r2, #12
 8003094:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003096:	2301      	movs	r3, #1
 8003098:	425b      	negs	r3, r3
 800309a:	e009      	b.n	80030b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <_sbrk+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	18d2      	adds	r2, r2, r3
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <_sbrk+0x64>)
 80030ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b006      	add	sp, #24
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20002000 	.word	0x20002000
 80030bc:	00000400 	.word	0x00000400
 80030c0:	200002c8 	.word	0x200002c8
 80030c4:	20000420 	.word	0x20000420

080030c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030d4:	480d      	ldr	r0, [pc, #52]	; (800310c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030d8:	f7ff fff6 	bl	80030c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030dc:	480c      	ldr	r0, [pc, #48]	; (8003110 <LoopForever+0x6>)
  ldr r1, =_edata
 80030de:	490d      	ldr	r1, [pc, #52]	; (8003114 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <LoopForever+0xe>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <LoopForever+0x12>)
  ldr r4, =_ebss
 80030f4:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <LoopForever+0x16>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003102:	f004 fa8d 	bl	8007620 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003106:	f7ff fa21 	bl	800254c <main>

0800310a <LoopForever>:

LoopForever:
  b LoopForever
 800310a:	e7fe      	b.n	800310a <LoopForever>
  ldr   r0, =_estack
 800310c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003114:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8003118:	0800a87c 	.word	0x0800a87c
  ldr r2, =_sbss
 800311c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003120:	2000041c 	.word	0x2000041c

08003124 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC1_IRQHandler>
	...

08003128 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800312e:	1dfb      	adds	r3, r7, #7
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_Init+0x3c>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_Init+0x3c>)
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	0049      	lsls	r1, r1, #1
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003142:	2000      	movs	r0, #0
 8003144:	f000 f810 	bl	8003168 <HAL_InitTick>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d003      	beq.n	8003154 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	2201      	movs	r2, #1
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e001      	b.n	8003158 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003154:	f7ff fe22 	bl	8002d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	781b      	ldrb	r3, [r3, #0]
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40022000 	.word	0x40022000

08003168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003170:	230f      	movs	r3, #15
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_InitTick+0x88>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d02b      	beq.n	80031d8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003180:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <HAL_InitTick+0x8c>)
 8003182:	681c      	ldr	r4, [r3, #0]
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_InitTick+0x88>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	0019      	movs	r1, r3
 800318a:	23fa      	movs	r3, #250	; 0xfa
 800318c:	0098      	lsls	r0, r3, #2
 800318e:	f7fc ffd5 	bl	800013c <__udivsi3>
 8003192:	0003      	movs	r3, r0
 8003194:	0019      	movs	r1, r3
 8003196:	0020      	movs	r0, r4
 8003198:	f7fc ffd0 	bl	800013c <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	0018      	movs	r0, r3
 80031a0:	f000 f959 	bl	8003456 <HAL_SYSTICK_Config>
 80031a4:	1e03      	subs	r3, r0, #0
 80031a6:	d112      	bne.n	80031ce <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d80a      	bhi.n	80031c4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	2301      	movs	r3, #1
 80031b2:	425b      	negs	r3, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 f928 	bl	800340c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_InitTick+0x90>)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	e00d      	b.n	80031e0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80031c4:	230f      	movs	r3, #15
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e008      	b.n	80031e0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031ce:	230f      	movs	r3, #15
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e003      	b.n	80031e0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031d8:	230f      	movs	r3, #15
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80031e0:	230f      	movs	r3, #15
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	781b      	ldrb	r3, [r3, #0]
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b005      	add	sp, #20
 80031ec:	bd90      	pop	{r4, r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	2000000c 	.word	0x2000000c
 80031f4:	20000004 	.word	0x20000004
 80031f8:	20000008 	.word	0x20000008

080031fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_IncTick+0x1c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	001a      	movs	r2, r3
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_IncTick+0x20>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	18d2      	adds	r2, r2, r3
 800320c:	4b03      	ldr	r3, [pc, #12]	; (800321c <HAL_IncTick+0x20>)
 800320e:	601a      	str	r2, [r3, #0]
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	2000000c 	.word	0x2000000c
 800321c:	200002cc 	.word	0x200002cc

08003220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  return uwTick;
 8003224:	4b02      	ldr	r3, [pc, #8]	; (8003230 <HAL_GetTick+0x10>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	200002cc 	.word	0x200002cc

08003234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800323c:	f7ff fff0 	bl	8003220 <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	d005      	beq.n	800325a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <HAL_Delay+0x44>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	001a      	movs	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	189b      	adds	r3, r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	f7ff ffe0 	bl	8003220 <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d8f7      	bhi.n	800325c <HAL_Delay+0x28>
  {
  }
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b004      	add	sp, #16
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	2000000c 	.word	0x2000000c

0800327c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003280:	4b04      	ldr	r3, [pc, #16]	; (8003294 <HAL_SuspendTick+0x18>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_SuspendTick+0x18>)
 8003286:	2102      	movs	r1, #2
 8003288:	438a      	bics	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	e000e010 	.word	0xe000e010

08003298 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_ResumeTick+0x18>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	4b03      	ldr	r3, [pc, #12]	; (80032b0 <HAL_ResumeTick+0x18>)
 80032a2:	2102      	movs	r1, #2
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
}
 80032a8:	46c0      	nop			; (mov r8, r8)
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	0002      	movs	r2, r0
 80032bc:	1dfb      	adds	r3, r7, #7
 80032be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b7f      	cmp	r3, #127	; 0x7f
 80032c6:	d809      	bhi.n	80032dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	001a      	movs	r2, r3
 80032ce:	231f      	movs	r3, #31
 80032d0:	401a      	ands	r2, r3
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <__NVIC_EnableIRQ+0x30>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	4091      	lsls	r1, r2
 80032d8:	000a      	movs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	0002      	movs	r2, r0
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	1dfb      	adds	r3, r7, #7
 80032f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032f6:	1dfb      	adds	r3, r7, #7
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b7f      	cmp	r3, #127	; 0x7f
 80032fc:	d828      	bhi.n	8003350 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032fe:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <__NVIC_SetPriority+0xd4>)
 8003300:	1dfb      	adds	r3, r7, #7
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b25b      	sxtb	r3, r3
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	33c0      	adds	r3, #192	; 0xc0
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	589b      	ldr	r3, [r3, r2]
 800330e:	1dfa      	adds	r2, r7, #7
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	0011      	movs	r1, r2
 8003314:	2203      	movs	r2, #3
 8003316:	400a      	ands	r2, r1
 8003318:	00d2      	lsls	r2, r2, #3
 800331a:	21ff      	movs	r1, #255	; 0xff
 800331c:	4091      	lsls	r1, r2
 800331e:	000a      	movs	r2, r1
 8003320:	43d2      	mvns	r2, r2
 8003322:	401a      	ands	r2, r3
 8003324:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	22ff      	movs	r2, #255	; 0xff
 800332c:	401a      	ands	r2, r3
 800332e:	1dfb      	adds	r3, r7, #7
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	0018      	movs	r0, r3
 8003334:	2303      	movs	r3, #3
 8003336:	4003      	ands	r3, r0
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800333c:	481f      	ldr	r0, [pc, #124]	; (80033bc <__NVIC_SetPriority+0xd4>)
 800333e:	1dfb      	adds	r3, r7, #7
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	b25b      	sxtb	r3, r3
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	430a      	orrs	r2, r1
 8003348:	33c0      	adds	r3, #192	; 0xc0
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800334e:	e031      	b.n	80033b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003350:	4a1b      	ldr	r2, [pc, #108]	; (80033c0 <__NVIC_SetPriority+0xd8>)
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	0019      	movs	r1, r3
 8003358:	230f      	movs	r3, #15
 800335a:	400b      	ands	r3, r1
 800335c:	3b08      	subs	r3, #8
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3306      	adds	r3, #6
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	18d3      	adds	r3, r2, r3
 8003366:	3304      	adds	r3, #4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1dfa      	adds	r2, r7, #7
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	0011      	movs	r1, r2
 8003370:	2203      	movs	r2, #3
 8003372:	400a      	ands	r2, r1
 8003374:	00d2      	lsls	r2, r2, #3
 8003376:	21ff      	movs	r1, #255	; 0xff
 8003378:	4091      	lsls	r1, r2
 800337a:	000a      	movs	r2, r1
 800337c:	43d2      	mvns	r2, r2
 800337e:	401a      	ands	r2, r3
 8003380:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	22ff      	movs	r2, #255	; 0xff
 8003388:	401a      	ands	r2, r3
 800338a:	1dfb      	adds	r3, r7, #7
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	0018      	movs	r0, r3
 8003390:	2303      	movs	r3, #3
 8003392:	4003      	ands	r3, r0
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003398:	4809      	ldr	r0, [pc, #36]	; (80033c0 <__NVIC_SetPriority+0xd8>)
 800339a:	1dfb      	adds	r3, r7, #7
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	001c      	movs	r4, r3
 80033a0:	230f      	movs	r3, #15
 80033a2:	4023      	ands	r3, r4
 80033a4:	3b08      	subs	r3, #8
 80033a6:	089b      	lsrs	r3, r3, #2
 80033a8:	430a      	orrs	r2, r1
 80033aa:	3306      	adds	r3, #6
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	18c3      	adds	r3, r0, r3
 80033b0:	3304      	adds	r3, #4
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b003      	add	sp, #12
 80033ba:	bd90      	pop	{r4, r7, pc}
 80033bc:	e000e100 	.word	0xe000e100
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	1e5a      	subs	r2, r3, #1
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	045b      	lsls	r3, r3, #17
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d301      	bcc.n	80033dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d8:	2301      	movs	r3, #1
 80033da:	e010      	b.n	80033fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <SysTick_Config+0x44>)
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	3a01      	subs	r2, #1
 80033e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033e4:	2301      	movs	r3, #1
 80033e6:	425b      	negs	r3, r3
 80033e8:	2103      	movs	r1, #3
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7ff ff7c 	bl	80032e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <SysTick_Config+0x44>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033f6:	4b04      	ldr	r3, [pc, #16]	; (8003408 <SysTick_Config+0x44>)
 80033f8:	2207      	movs	r2, #7
 80033fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b002      	add	sp, #8
 8003404:	bd80      	pop	{r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	e000e010 	.word	0xe000e010

0800340c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	210f      	movs	r1, #15
 8003418:	187b      	adds	r3, r7, r1
 800341a:	1c02      	adds	r2, r0, #0
 800341c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	187b      	adds	r3, r7, r1
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b25b      	sxtb	r3, r3
 8003426:	0011      	movs	r1, r2
 8003428:	0018      	movs	r0, r3
 800342a:	f7ff ff5d 	bl	80032e8 <__NVIC_SetPriority>
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b004      	add	sp, #16
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	0002      	movs	r2, r0
 800343e:	1dfb      	adds	r3, r7, #7
 8003440:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b25b      	sxtb	r3, r3
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff ff33 	bl	80032b4 <__NVIC_EnableIRQ>
}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	46bd      	mov	sp, r7
 8003452:	b002      	add	sp, #8
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0018      	movs	r0, r3
 8003462:	f7ff ffaf 	bl	80033c4 <SysTick_Config>
 8003466:	0003      	movs	r3, r0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b002      	add	sp, #8
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347e:	e147      	b.n	8003710 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2101      	movs	r1, #1
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4091      	lsls	r1, r2
 800348a:	000a      	movs	r2, r1
 800348c:	4013      	ands	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d100      	bne.n	8003498 <HAL_GPIO_Init+0x28>
 8003496:	e138      	b.n	800370a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d005      	beq.n	80034b0 <HAL_GPIO_Init+0x40>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2203      	movs	r2, #3
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d130      	bne.n	8003512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	409a      	lsls	r2, r3
 80034be:	0013      	movs	r3, r2
 80034c0:	43da      	mvns	r2, r3
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	409a      	lsls	r2, r3
 80034d2:	0013      	movs	r3, r2
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e6:	2201      	movs	r2, #1
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	409a      	lsls	r2, r3
 80034ec:	0013      	movs	r3, r2
 80034ee:	43da      	mvns	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	4013      	ands	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	2201      	movs	r2, #1
 80034fe:	401a      	ands	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	409a      	lsls	r2, r3
 8003504:	0013      	movs	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2203      	movs	r2, #3
 8003518:	4013      	ands	r3, r2
 800351a:	2b03      	cmp	r3, #3
 800351c:	d017      	beq.n	800354e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	2203      	movs	r2, #3
 800352a:	409a      	lsls	r2, r3
 800352c:	0013      	movs	r3, r2
 800352e:	43da      	mvns	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	409a      	lsls	r2, r3
 8003540:	0013      	movs	r3, r2
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2203      	movs	r2, #3
 8003554:	4013      	ands	r3, r2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d123      	bne.n	80035a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	08da      	lsrs	r2, r3, #3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3208      	adds	r2, #8
 8003562:	0092      	lsls	r2, r2, #2
 8003564:	58d3      	ldr	r3, [r2, r3]
 8003566:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2207      	movs	r2, #7
 800356c:	4013      	ands	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	220f      	movs	r2, #15
 8003572:	409a      	lsls	r2, r3
 8003574:	0013      	movs	r3, r2
 8003576:	43da      	mvns	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2107      	movs	r1, #7
 8003586:	400b      	ands	r3, r1
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	409a      	lsls	r2, r3
 800358c:	0013      	movs	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	08da      	lsrs	r2, r3, #3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3208      	adds	r2, #8
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	2203      	movs	r2, #3
 80035ae:	409a      	lsls	r2, r3
 80035b0:	0013      	movs	r3, r2
 80035b2:	43da      	mvns	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2203      	movs	r2, #3
 80035c0:	401a      	ands	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	409a      	lsls	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	23c0      	movs	r3, #192	; 0xc0
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	4013      	ands	r3, r2
 80035e0:	d100      	bne.n	80035e4 <HAL_GPIO_Init+0x174>
 80035e2:	e092      	b.n	800370a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80035e4:	4a50      	ldr	r2, [pc, #320]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	089b      	lsrs	r3, r3, #2
 80035ea:	3318      	adds	r3, #24
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	589b      	ldr	r3, [r3, r2]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2203      	movs	r2, #3
 80035f6:	4013      	ands	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	220f      	movs	r2, #15
 80035fc:	409a      	lsls	r2, r3
 80035fe:	0013      	movs	r3, r2
 8003600:	43da      	mvns	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	23a0      	movs	r3, #160	; 0xa0
 800360c:	05db      	lsls	r3, r3, #23
 800360e:	429a      	cmp	r2, r3
 8003610:	d013      	beq.n	800363a <HAL_GPIO_Init+0x1ca>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a45      	ldr	r2, [pc, #276]	; (800372c <HAL_GPIO_Init+0x2bc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00d      	beq.n	8003636 <HAL_GPIO_Init+0x1c6>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a44      	ldr	r2, [pc, #272]	; (8003730 <HAL_GPIO_Init+0x2c0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <HAL_GPIO_Init+0x1c2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a43      	ldr	r2, [pc, #268]	; (8003734 <HAL_GPIO_Init+0x2c4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_GPIO_Init+0x1be>
 800362a:	2303      	movs	r3, #3
 800362c:	e006      	b.n	800363c <HAL_GPIO_Init+0x1cc>
 800362e:	2305      	movs	r3, #5
 8003630:	e004      	b.n	800363c <HAL_GPIO_Init+0x1cc>
 8003632:	2302      	movs	r3, #2
 8003634:	e002      	b.n	800363c <HAL_GPIO_Init+0x1cc>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_GPIO_Init+0x1cc>
 800363a:	2300      	movs	r3, #0
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	2103      	movs	r1, #3
 8003640:	400a      	ands	r2, r1
 8003642:	00d2      	lsls	r2, r2, #3
 8003644:	4093      	lsls	r3, r2
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800364c:	4936      	ldr	r1, [pc, #216]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	3318      	adds	r3, #24
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800365a:	4b33      	ldr	r3, [pc, #204]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	43da      	mvns	r2, r3
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	035b      	lsls	r3, r3, #13
 8003672:	4013      	ands	r3, r2
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003684:	4b28      	ldr	r3, [pc, #160]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43da      	mvns	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4013      	ands	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	039b      	lsls	r3, r3, #14
 800369c:	4013      	ands	r3, r2
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036a8:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036ae:	4a1e      	ldr	r2, [pc, #120]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80036b0:	2384      	movs	r3, #132	; 0x84
 80036b2:	58d3      	ldr	r3, [r2, r3]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	43da      	mvns	r2, r3
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	029b      	lsls	r3, r3, #10
 80036c8:	4013      	ands	r3, r2
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d4:	4914      	ldr	r1, [pc, #80]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80036d6:	2284      	movs	r2, #132	; 0x84
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80036dc:	4a12      	ldr	r2, [pc, #72]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 80036de:	2380      	movs	r3, #128	; 0x80
 80036e0:	58d3      	ldr	r3, [r2, r3]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43da      	mvns	r2, r3
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	025b      	lsls	r3, r3, #9
 80036f6:	4013      	ands	r3, r2
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003702:	4909      	ldr	r1, [pc, #36]	; (8003728 <HAL_GPIO_Init+0x2b8>)
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	40da      	lsrs	r2, r3
 8003718:	1e13      	subs	r3, r2, #0
 800371a:	d000      	beq.n	800371e <HAL_GPIO_Init+0x2ae>
 800371c:	e6b0      	b.n	8003480 <HAL_GPIO_Init+0x10>
  }
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b006      	add	sp, #24
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021800 	.word	0x40021800
 800372c:	50000400 	.word	0x50000400
 8003730:	50000800 	.word	0x50000800
 8003734:	50000c00 	.word	0x50000c00

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	0008      	movs	r0, r1
 8003742:	0011      	movs	r1, r2
 8003744:	1cbb      	adds	r3, r7, #2
 8003746:	1c02      	adds	r2, r0, #0
 8003748:	801a      	strh	r2, [r3, #0]
 800374a:	1c7b      	adds	r3, r7, #1
 800374c:	1c0a      	adds	r2, r1, #0
 800374e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003750:	1c7b      	adds	r3, r7, #1
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d004      	beq.n	8003762 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003758:	1cbb      	adds	r3, r7, #2
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003760:	e003      	b.n	800376a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003762:	1cbb      	adds	r3, r7, #2
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_PWR_EnableBkUpAccess+0x18>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b03      	ldr	r3, [pc, #12]	; (800378c <HAL_PWR_EnableBkUpAccess+0x18>)
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	0049      	lsls	r1, r1, #1
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	000a      	movs	r2, r1
 800379a:	1cfb      	adds	r3, r7, #3
 800379c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_PWR_EnterSTOPMode+0x68>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2207      	movs	r2, #7
 80037aa:	4393      	bics	r3, r2
 80037ac:	001a      	movs	r2, r3
 80037ae:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_PWR_EnterSTOPMode+0x68>)
 80037b0:	2101      	movs	r1, #1
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e005      	b.n	80037c4 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_PWR_EnterSTOPMode+0x68>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_PWR_EnterSTOPMode+0x68>)
 80037be:	2107      	movs	r1, #7
 80037c0:	438a      	bics	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <HAL_PWR_EnterSTOPMode+0x6c>)
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <HAL_PWR_EnterSTOPMode+0x6c>)
 80037ca:	2104      	movs	r1, #4
 80037cc:	430a      	orrs	r2, r1
 80037ce:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80037d0:	1cfb      	adds	r3, r7, #3
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80037d8:	bf30      	wfi
 80037da:	e002      	b.n	80037e2 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80037dc:	bf40      	sev
    __WFE();
 80037de:	bf20      	wfe
    __WFE();
 80037e0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_PWR_EnterSTOPMode+0x6c>)
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_PWR_EnterSTOPMode+0x6c>)
 80037e8:	2104      	movs	r1, #4
 80037ea:	438a      	bics	r2, r1
 80037ec:	611a      	str	r2, [r3, #16]
}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	40007000 	.word	0x40007000
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003808:	4b19      	ldr	r3, [pc, #100]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	430a      	orrs	r2, r1
 8003818:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d11f      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	0013      	movs	r3, r2
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	189b      	adds	r3, r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4912      	ldr	r1, [pc, #72]	; (800387c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003832:	0018      	movs	r0, r3
 8003834:	f7fc fc82 	bl	800013c <__udivsi3>
 8003838:	0003      	movs	r3, r0
 800383a:	3301      	adds	r3, #1
 800383c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800383e:	e008      	b.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	3b01      	subs	r3, #1
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	e001      	b.n	8003852 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e009      	b.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003852:	4b07      	ldr	r3, [pc, #28]	; (8003870 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	2380      	movs	r3, #128	; 0x80
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	401a      	ands	r2, r3
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	429a      	cmp	r2, r3
 8003862:	d0ed      	beq.n	8003840 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b004      	add	sp, #16
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	40007000 	.word	0x40007000
 8003874:	fffff9ff 	.word	0xfffff9ff
 8003878:	20000004 	.word	0x20000004
 800387c:	000f4240 	.word	0x000f4240

08003880 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	23e0      	movs	r3, #224	; 0xe0
 800388a:	01db      	lsls	r3, r3, #7
 800388c:	4013      	ands	r3, r2
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40021000 	.word	0x40021000

08003898 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e2fe      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2201      	movs	r2, #1
 80038b0:	4013      	ands	r3, r2
 80038b2:	d100      	bne.n	80038b6 <HAL_RCC_OscConfig+0x1e>
 80038b4:	e07c      	b.n	80039b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b6:	4bc3      	ldr	r3, [pc, #780]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2238      	movs	r2, #56	; 0x38
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c0:	4bc0      	ldr	r3, [pc, #768]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2203      	movs	r2, #3
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_OscConfig+0x3e>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d002      	beq.n	80038dc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d10b      	bne.n	80038f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	4bb9      	ldr	r3, [pc, #740]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	2380      	movs	r3, #128	; 0x80
 80038e2:	029b      	lsls	r3, r3, #10
 80038e4:	4013      	ands	r3, r2
 80038e6:	d062      	beq.n	80039ae <HAL_RCC_OscConfig+0x116>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d15e      	bne.n	80039ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e2d9      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	025b      	lsls	r3, r3, #9
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_OscConfig+0x78>
 8003900:	4bb0      	ldr	r3, [pc, #704]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4baf      	ldr	r3, [pc, #700]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	0249      	lsls	r1, r1, #9
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e020      	b.n	8003952 <HAL_RCC_OscConfig+0xba>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	23a0      	movs	r3, #160	; 0xa0
 8003916:	02db      	lsls	r3, r3, #11
 8003918:	429a      	cmp	r2, r3
 800391a:	d10e      	bne.n	800393a <HAL_RCC_OscConfig+0xa2>
 800391c:	4ba9      	ldr	r3, [pc, #676]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4ba8      	ldr	r3, [pc, #672]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	02c9      	lsls	r1, r1, #11
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	4ba6      	ldr	r3, [pc, #664]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4ba5      	ldr	r3, [pc, #660]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	0249      	lsls	r1, r1, #9
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e00b      	b.n	8003952 <HAL_RCC_OscConfig+0xba>
 800393a:	4ba2      	ldr	r3, [pc, #648]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4ba1      	ldr	r3, [pc, #644]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003940:	49a1      	ldr	r1, [pc, #644]	; (8003bc8 <HAL_RCC_OscConfig+0x330>)
 8003942:	400a      	ands	r2, r1
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	4b9f      	ldr	r3, [pc, #636]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b9e      	ldr	r3, [pc, #632]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 800394c:	499f      	ldr	r1, [pc, #636]	; (8003bcc <HAL_RCC_OscConfig+0x334>)
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d014      	beq.n	8003984 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7ff fc61 	bl	8003220 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003964:	f7ff fc5c 	bl	8003220 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e298      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003976:	4b93      	ldr	r3, [pc, #588]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	4013      	ands	r3, r2
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xcc>
 8003982:	e015      	b.n	80039b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7ff fc4c 	bl	8003220 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398e:	f7ff fc47 	bl	8003220 <HAL_GetTick>
 8003992:	0002      	movs	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b64      	cmp	r3, #100	; 0x64
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e283      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039a0:	4b88      	ldr	r3, [pc, #544]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	029b      	lsls	r3, r3, #10
 80039a8:	4013      	ands	r3, r2
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0xf6>
 80039ac:	e000      	b.n	80039b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2202      	movs	r2, #2
 80039b6:	4013      	ands	r3, r2
 80039b8:	d100      	bne.n	80039bc <HAL_RCC_OscConfig+0x124>
 80039ba:	e099      	b.n	8003af0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2238      	movs	r2, #56	; 0x38
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039c6:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2203      	movs	r2, #3
 80039cc:	4013      	ands	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d102      	bne.n	80039dc <HAL_RCC_OscConfig+0x144>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d002      	beq.n	80039e2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d135      	bne.n	8003a4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e2:	4b78      	ldr	r3, [pc, #480]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4013      	ands	r3, r2
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x162>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e256      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b72      	ldr	r3, [pc, #456]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	4a74      	ldr	r2, [pc, #464]	; (8003bd0 <HAL_RCC_OscConfig+0x338>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	0019      	movs	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	021a      	lsls	r2, r3, #8
 8003a0a:	4b6e      	ldr	r3, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d112      	bne.n	8003a3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a16:	4b6b      	ldr	r3, [pc, #428]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6e      	ldr	r2, [pc, #440]	; (8003bd4 <HAL_RCC_OscConfig+0x33c>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	0019      	movs	r1, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003a2a:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	0adb      	lsrs	r3, r3, #11
 8003a30:	2207      	movs	r2, #7
 8003a32:	4013      	ands	r3, r2
 8003a34:	4a68      	ldr	r2, [pc, #416]	; (8003bd8 <HAL_RCC_OscConfig+0x340>)
 8003a36:	40da      	lsrs	r2, r3
 8003a38:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <HAL_RCC_OscConfig+0x344>)
 8003a3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x348>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff fb91 	bl	8003168 <HAL_InitTick>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d051      	beq.n	8003aee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e22c      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d030      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003a56:	4b5b      	ldr	r3, [pc, #364]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a5e      	ldr	r2, [pc, #376]	; (8003bd4 <HAL_RCC_OscConfig+0x33c>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	4b57      	ldr	r3, [pc, #348]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a66:	430a      	orrs	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003a6a:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	0049      	lsls	r1, r1, #1
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7ff fbd2 	bl	8003220 <HAL_GetTick>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a82:	f7ff fbcd 	bl	8003220 <HAL_GetTick>
 8003a86:	0002      	movs	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e209      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a94:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa0:	4b48      	ldr	r3, [pc, #288]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a4a      	ldr	r2, [pc, #296]	; (8003bd0 <HAL_RCC_OscConfig+0x338>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	4b44      	ldr	r3, [pc, #272]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
 8003ab6:	e01b      	b.n	8003af0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003ab8:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	4949      	ldr	r1, [pc, #292]	; (8003be4 <HAL_RCC_OscConfig+0x34c>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7ff fbac 	bl	8003220 <HAL_GetTick>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ace:	f7ff fba7 	bl	8003220 <HAL_GetTick>
 8003ad2:	0002      	movs	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e1e3      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ae0:	4b38      	ldr	r3, [pc, #224]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x236>
 8003aec:	e000      	b.n	8003af0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2208      	movs	r2, #8
 8003af6:	4013      	ands	r3, r2
 8003af8:	d047      	beq.n	8003b8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003afa:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2238      	movs	r2, #56	; 0x38
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b18      	cmp	r3, #24
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b06:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d03c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x2f2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d138      	bne.n	8003b8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e1c5      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d019      	beq.n	8003b58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003b24:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003b26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7ff fb76 	bl	8003220 <HAL_GetTick>
 8003b34:	0003      	movs	r3, r0
 8003b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7ff fb71 	bl	8003220 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1ad      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b50:	2202      	movs	r2, #2
 8003b52:	4013      	ands	r3, r2
 8003b54:	d0f1      	beq.n	8003b3a <HAL_RCC_OscConfig+0x2a2>
 8003b56:	e018      	b.n	8003b8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b5c:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003b5e:	2101      	movs	r1, #1
 8003b60:	438a      	bics	r2, r1
 8003b62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b64:	f7ff fb5c 	bl	8003220 <HAL_GetTick>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6e:	f7ff fb57 	bl	8003220 <HAL_GetTick>
 8003b72:	0002      	movs	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e193      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b84:	2202      	movs	r2, #2
 8003b86:	4013      	ands	r3, r2
 8003b88:	d1f1      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2204      	movs	r2, #4
 8003b90:	4013      	ands	r3, r2
 8003b92:	d100      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2fe>
 8003b94:	e0c6      	b.n	8003d24 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b96:	231f      	movs	r3, #31
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2238      	movs	r2, #56	; 0x38
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d11e      	bne.n	8003be8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <HAL_RCC_OscConfig+0x32c>)
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x31e>
 8003bb4:	e0b6      	b.n	8003d24 <HAL_RCC_OscConfig+0x48c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d000      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x328>
 8003bbe:	e0b1      	b.n	8003d24 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e171      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	fffeffff 	.word	0xfffeffff
 8003bcc:	fffbffff 	.word	0xfffbffff
 8003bd0:	ffff80ff 	.word	0xffff80ff
 8003bd4:	ffffc7ff 	.word	0xffffc7ff
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	20000004 	.word	0x20000004
 8003be0:	20000008 	.word	0x20000008
 8003be4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003be8:	4bb1      	ldr	r3, [pc, #708]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	055b      	lsls	r3, r3, #21
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x360>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x362>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4bac      	ldr	r3, [pc, #688]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c02:	4bab      	ldr	r3, [pc, #684]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0549      	lsls	r1, r1, #21
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c0c:	4ba8      	ldr	r3, [pc, #672]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	055b      	lsls	r3, r3, #21
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003c1a:	231f      	movs	r3, #31
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c22:	4ba4      	ldr	r3, [pc, #656]	; (8003eb4 <HAL_RCC_OscConfig+0x61c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d11a      	bne.n	8003c64 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c2e:	4ba1      	ldr	r3, [pc, #644]	; (8003eb4 <HAL_RCC_OscConfig+0x61c>)
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4ba0      	ldr	r3, [pc, #640]	; (8003eb4 <HAL_RCC_OscConfig+0x61c>)
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	0049      	lsls	r1, r1, #1
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003c3c:	f7ff faf0 	bl	8003220 <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c46:	f7ff faeb 	bl	8003220 <HAL_GetTick>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e127      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c58:	4b96      	ldr	r3, [pc, #600]	; (8003eb4 <HAL_RCC_OscConfig+0x61c>)
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4013      	ands	r3, r2
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3e2>
 8003c6c:	4b90      	ldr	r3, [pc, #576]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c70:	4b8f      	ldr	r3, [pc, #572]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c72:	2101      	movs	r1, #1
 8003c74:	430a      	orrs	r2, r1
 8003c76:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c78:	e01c      	b.n	8003cb4 <HAL_RCC_OscConfig+0x41c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x404>
 8003c82:	4b8b      	ldr	r3, [pc, #556]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c86:	4b8a      	ldr	r3, [pc, #552]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c88:	2104      	movs	r1, #4
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c8e:	4b88      	ldr	r3, [pc, #544]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c92:	4b87      	ldr	r3, [pc, #540]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c94:	2101      	movs	r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0x41c>
 8003c9c:	4b84      	ldr	r3, [pc, #528]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003c9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ca0:	4b83      	ldr	r3, [pc, #524]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ca8:	4b81      	ldr	r3, [pc, #516]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003caa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cac:	4b80      	ldr	r3, [pc, #512]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003cae:	2104      	movs	r1, #4
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d014      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7ff fab0 	bl	8003220 <HAL_GetTick>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc4:	e009      	b.n	8003cda <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7ff faab 	bl	8003220 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	4a79      	ldr	r2, [pc, #484]	; (8003eb8 <HAL_RCC_OscConfig+0x620>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0e6      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cda:	4b75      	ldr	r3, [pc, #468]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cde:	2202      	movs	r2, #2
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x42e>
 8003ce4:	e013      	b.n	8003d0e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce6:	f7ff fa9b 	bl	8003220 <HAL_GetTick>
 8003cea:	0003      	movs	r3, r0
 8003cec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cee:	e009      	b.n	8003d04 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7ff fa96 	bl	8003220 <HAL_GetTick>
 8003cf4:	0002      	movs	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	4a6f      	ldr	r2, [pc, #444]	; (8003eb8 <HAL_RCC_OscConfig+0x620>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0d1      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d04:	4b6a      	ldr	r3, [pc, #424]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d08:	2202      	movs	r2, #2
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d0e:	231f      	movs	r3, #31
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d1c:	4b64      	ldr	r3, [pc, #400]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d1e:	4967      	ldr	r1, [pc, #412]	; (8003ebc <HAL_RCC_OscConfig+0x624>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d100      	bne.n	8003d2e <HAL_RCC_OscConfig+0x496>
 8003d2c:	e0bb      	b.n	8003ea6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d2e:	4b60      	ldr	r3, [pc, #384]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2238      	movs	r2, #56	; 0x38
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d100      	bne.n	8003d3c <HAL_RCC_OscConfig+0x4a4>
 8003d3a:	e07b      	b.n	8003e34 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d156      	bne.n	8003df2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b5a      	ldr	r3, [pc, #360]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b59      	ldr	r3, [pc, #356]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d4a:	495d      	ldr	r1, [pc, #372]	; (8003ec0 <HAL_RCC_OscConfig+0x628>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7ff fa66 	bl	8003220 <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d5a:	f7ff fa61 	bl	8003220 <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e09d      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d6c:	4b50      	ldr	r3, [pc, #320]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	049b      	lsls	r3, r3, #18
 8003d74:	4013      	ands	r3, r2
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d78:	4b4d      	ldr	r3, [pc, #308]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a51      	ldr	r2, [pc, #324]	; (8003ec4 <HAL_RCC_OscConfig+0x62c>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	0019      	movs	r1, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1a      	ldr	r2, [r3, #32]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	431a      	orrs	r2, r3
 8003da6:	4b42      	ldr	r3, [pc, #264]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b40      	ldr	r3, [pc, #256]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b3f      	ldr	r3, [pc, #252]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	0449      	lsls	r1, r1, #17
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003dba:	4b3d      	ldr	r3, [pc, #244]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	0549      	lsls	r1, r1, #21
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7ff fa2a 	bl	8003220 <HAL_GetTick>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7ff fa25 	bl	8003220 <HAL_GetTick>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e061      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de4:	4b32      	ldr	r3, [pc, #200]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	049b      	lsls	r3, r3, #18
 8003dec:	4013      	ands	r3, r2
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x53a>
 8003df0:	e059      	b.n	8003ea6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b2f      	ldr	r3, [pc, #188]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b2e      	ldr	r3, [pc, #184]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003df8:	4931      	ldr	r1, [pc, #196]	; (8003ec0 <HAL_RCC_OscConfig+0x628>)
 8003dfa:	400a      	ands	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7ff fa0f 	bl	8003220 <HAL_GetTick>
 8003e02:	0003      	movs	r3, r0
 8003e04:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e08:	f7ff fa0a 	bl	8003220 <HAL_GetTick>
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e046      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	049b      	lsls	r3, r3, #18
 8003e22:	4013      	ands	r3, r2
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003e26:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003e2c:	4926      	ldr	r1, [pc, #152]	; (8003ec8 <HAL_RCC_OscConfig+0x630>)
 8003e2e:	400a      	ands	r2, r1
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	e038      	b.n	8003ea6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e033      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003e40:	4b1b      	ldr	r3, [pc, #108]	; (8003eb0 <HAL_RCC_OscConfig+0x618>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d126      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2270      	movs	r2, #112	; 0x70
 8003e58:	401a      	ands	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d11f      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	23fe      	movs	r3, #254	; 0xfe
 8003e66:	01db      	lsls	r3, r3, #7
 8003e68:	401a      	ands	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d116      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	23f8      	movs	r3, #248	; 0xf8
 8003e78:	039b      	lsls	r3, r3, #14
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d10e      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	23e0      	movs	r3, #224	; 0xe0
 8003e88:	051b      	lsls	r3, r3, #20
 8003e8a:	401a      	ands	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d106      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	0f5b      	lsrs	r3, r3, #29
 8003e98:	075a      	lsls	r2, r3, #29
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b008      	add	sp, #32
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40007000 	.word	0x40007000
 8003eb8:	00001388 	.word	0x00001388
 8003ebc:	efffffff 	.word	0xefffffff
 8003ec0:	feffffff 	.word	0xfeffffff
 8003ec4:	11c1808c 	.word	0x11c1808c
 8003ec8:	eefefffc 	.word	0xeefefffc

08003ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e0e9      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee0:	4b76      	ldr	r3, [pc, #472]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d91e      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eee:	4b73      	ldr	r3, [pc, #460]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	4393      	bics	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	4b70      	ldr	r3, [pc, #448]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f00:	f7ff f98e 	bl	8003220 <HAL_GetTick>
 8003f04:	0003      	movs	r3, r0
 8003f06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f08:	e009      	b.n	8003f1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f0a:	f7ff f989 	bl	8003220 <HAL_GetTick>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	4a6a      	ldr	r2, [pc, #424]	; (80040c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e0ca      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f1e:	4b67      	ldr	r3, [pc, #412]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2207      	movs	r2, #7
 8003f24:	4013      	ands	r3, r2
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1ee      	bne.n	8003f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2202      	movs	r2, #2
 8003f32:	4013      	ands	r3, r2
 8003f34:	d015      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	d006      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003f40:	4b60      	ldr	r3, [pc, #384]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4b5f      	ldr	r3, [pc, #380]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f46:	21e0      	movs	r1, #224	; 0xe0
 8003f48:	01c9      	lsls	r1, r1, #7
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4e:	4b5d      	ldr	r3, [pc, #372]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <HAL_RCC_ClockConfig+0x1fc>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	4b59      	ldr	r3, [pc, #356]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2201      	movs	r2, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d057      	beq.n	800401c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f74:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	029b      	lsls	r3, r3, #10
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d12b      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e097      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f8c:	4b4d      	ldr	r3, [pc, #308]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	049b      	lsls	r3, r3, #18
 8003f94:	4013      	ands	r3, r2
 8003f96:	d11f      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e08b      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa4:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4013      	ands	r3, r2
 8003fae:	d113      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e07f      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fbc:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d108      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e074      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fca:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fce:	2202      	movs	r2, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e06d      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fd8:	4b3a      	ldr	r3, [pc, #232]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2207      	movs	r2, #7
 8003fde:	4393      	bics	r3, r2
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fec:	f7ff f918 	bl	8003220 <HAL_GetTick>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff4:	e009      	b.n	800400a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff6:	f7ff f913 	bl	8003220 <HAL_GetTick>
 8003ffa:	0002      	movs	r2, r0
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	4a2f      	ldr	r2, [pc, #188]	; (80040c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e054      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2238      	movs	r2, #56	; 0x38
 8004010:	401a      	ands	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	429a      	cmp	r2, r3
 800401a:	d1ec      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2207      	movs	r2, #7
 8004022:	4013      	ands	r3, r2
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d21e      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2207      	movs	r2, #7
 8004030:	4393      	bics	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800403c:	f7ff f8f0 	bl	8003220 <HAL_GetTick>
 8004040:	0003      	movs	r3, r0
 8004042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004044:	e009      	b.n	800405a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004046:	f7ff f8eb 	bl	8003220 <HAL_GetTick>
 800404a:	0002      	movs	r2, r0
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <HAL_RCC_ClockConfig+0x1f4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e02c      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2207      	movs	r2, #7
 8004060:	4013      	ands	r3, r2
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d1ee      	bne.n	8004046 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2204      	movs	r2, #4
 800406e:	4013      	ands	r3, r2
 8004070:	d009      	beq.n	8004086 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004072:	4b14      	ldr	r3, [pc, #80]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4a15      	ldr	r2, [pc, #84]	; (80040cc <HAL_RCC_ClockConfig+0x200>)
 8004078:	4013      	ands	r3, r2
 800407a:	0019      	movs	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 8004082:	430a      	orrs	r2, r1
 8004084:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004086:	f000 f829 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 800408a:	0001      	movs	r1, r0
 800408c:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <HAL_RCC_ClockConfig+0x1f8>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	220f      	movs	r2, #15
 8004094:	401a      	ands	r2, r3
 8004096:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <HAL_RCC_ClockConfig+0x204>)
 8004098:	0092      	lsls	r2, r2, #2
 800409a:	58d3      	ldr	r3, [r2, r3]
 800409c:	221f      	movs	r2, #31
 800409e:	4013      	ands	r3, r2
 80040a0:	000a      	movs	r2, r1
 80040a2:	40da      	lsrs	r2, r3
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_ClockConfig+0x208>)
 80040a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_ClockConfig+0x20c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff f85b 	bl	8003168 <HAL_InitTick>
 80040b2:	0003      	movs	r3, r0
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b004      	add	sp, #16
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40022000 	.word	0x40022000
 80040c0:	00001388 	.word	0x00001388
 80040c4:	40021000 	.word	0x40021000
 80040c8:	fffff0ff 	.word	0xfffff0ff
 80040cc:	ffff8fff 	.word	0xffff8fff
 80040d0:	0800a3c8 	.word	0x0800a3c8
 80040d4:	20000004 	.word	0x20000004
 80040d8:	20000008 	.word	0x20000008

080040dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040e2:	4b3c      	ldr	r3, [pc, #240]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2238      	movs	r2, #56	; 0x38
 80040e8:	4013      	ands	r3, r2
 80040ea:	d10f      	bne.n	800410c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0adb      	lsrs	r3, r3, #11
 80040f2:	2207      	movs	r2, #7
 80040f4:	4013      	ands	r3, r2
 80040f6:	2201      	movs	r2, #1
 80040f8:	409a      	lsls	r2, r3
 80040fa:	0013      	movs	r3, r2
 80040fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	4835      	ldr	r0, [pc, #212]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004102:	f7fc f81b 	bl	800013c <__udivsi3>
 8004106:	0003      	movs	r3, r0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	e05d      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800410c:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2238      	movs	r2, #56	; 0x38
 8004112:	4013      	ands	r3, r2
 8004114:	2b08      	cmp	r3, #8
 8004116:	d102      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004118:	4b30      	ldr	r3, [pc, #192]	; (80041dc <HAL_RCC_GetSysClockFreq+0x100>)
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e054      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800411e:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2238      	movs	r2, #56	; 0x38
 8004124:	4013      	ands	r3, r2
 8004126:	2b10      	cmp	r3, #16
 8004128:	d138      	bne.n	800419c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800412a:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	2203      	movs	r2, #3
 8004130:	4013      	ands	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004134:	4b27      	ldr	r3, [pc, #156]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	2207      	movs	r2, #7
 800413c:	4013      	ands	r3, r2
 800413e:	3301      	adds	r3, #1
 8004140:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d10d      	bne.n	8004164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4824      	ldr	r0, [pc, #144]	; (80041dc <HAL_RCC_GetSysClockFreq+0x100>)
 800414c:	f7fb fff6 	bl	800013c <__udivsi3>
 8004150:	0003      	movs	r3, r0
 8004152:	0019      	movs	r1, r3
 8004154:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	227f      	movs	r2, #127	; 0x7f
 800415c:	4013      	ands	r3, r2
 800415e:	434b      	muls	r3, r1
 8004160:	617b      	str	r3, [r7, #20]
        break;
 8004162:	e00d      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	481c      	ldr	r0, [pc, #112]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004168:	f7fb ffe8 	bl	800013c <__udivsi3>
 800416c:	0003      	movs	r3, r0
 800416e:	0019      	movs	r1, r3
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	227f      	movs	r2, #127	; 0x7f
 8004178:	4013      	ands	r3, r2
 800417a:	434b      	muls	r3, r1
 800417c:	617b      	str	r3, [r7, #20]
        break;
 800417e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	0f5b      	lsrs	r3, r3, #29
 8004186:	2207      	movs	r2, #7
 8004188:	4013      	ands	r3, r2
 800418a:	3301      	adds	r3, #1
 800418c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	6978      	ldr	r0, [r7, #20]
 8004192:	f7fb ffd3 	bl	800013c <__udivsi3>
 8004196:	0003      	movs	r3, r0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	e015      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	2238      	movs	r2, #56	; 0x38
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d103      	bne.n	80041b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	2238      	movs	r2, #56	; 0x38
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b18      	cmp	r3, #24
 80041ba:	d103      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80041bc:	23fa      	movs	r3, #250	; 0xfa
 80041be:	01db      	lsls	r3, r3, #7
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	e001      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041c8:	693b      	ldr	r3, [r7, #16]
}
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b006      	add	sp, #24
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	40021000 	.word	0x40021000
 80041d8:	00f42400 	.word	0x00f42400
 80041dc:	007a1200 	.word	0x007a1200

080041e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e4:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80041e6:	681b      	ldr	r3, [r3, #0]
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	20000004 	.word	0x20000004

080041f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80041f8:	f7ff fff2 	bl	80041e0 <HAL_RCC_GetHCLKFreq>
 80041fc:	0004      	movs	r4, r0
 80041fe:	f7ff fb3f 	bl	8003880 <LL_RCC_GetAPB1Prescaler>
 8004202:	0003      	movs	r3, r0
 8004204:	0b1a      	lsrs	r2, r3, #12
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004208:	0092      	lsls	r2, r2, #2
 800420a:	58d3      	ldr	r3, [r2, r3]
 800420c:	221f      	movs	r2, #31
 800420e:	4013      	ands	r3, r2
 8004210:	40dc      	lsrs	r4, r3
 8004212:	0023      	movs	r3, r4
}
 8004214:	0018      	movs	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	bdb0      	pop	{r4, r5, r7, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	0800a408 	.word	0x0800a408

08004220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004228:	2313      	movs	r3, #19
 800422a:	18fb      	adds	r3, r7, r3
 800422c:	2200      	movs	r2, #0
 800422e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004230:	2312      	movs	r3, #18
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	2380      	movs	r3, #128	; 0x80
 800423e:	029b      	lsls	r3, r3, #10
 8004240:	4013      	ands	r3, r2
 8004242:	d100      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004244:	e0a3      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2011      	movs	r0, #17
 8004248:	183b      	adds	r3, r7, r0
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424e:	4ba5      	ldr	r3, [pc, #660]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004252:	2380      	movs	r3, #128	; 0x80
 8004254:	055b      	lsls	r3, r3, #21
 8004256:	4013      	ands	r3, r2
 8004258:	d110      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800425a:	4ba2      	ldr	r3, [pc, #648]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800425c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425e:	4ba1      	ldr	r3, [pc, #644]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004260:	2180      	movs	r1, #128	; 0x80
 8004262:	0549      	lsls	r1, r1, #21
 8004264:	430a      	orrs	r2, r1
 8004266:	63da      	str	r2, [r3, #60]	; 0x3c
 8004268:	4b9e      	ldr	r3, [pc, #632]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800426a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	055b      	lsls	r3, r3, #21
 8004270:	4013      	ands	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]
 8004274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004276:	183b      	adds	r3, r7, r0
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427c:	4b9a      	ldr	r3, [pc, #616]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4b99      	ldr	r3, [pc, #612]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004282:	2180      	movs	r1, #128	; 0x80
 8004284:	0049      	lsls	r1, r1, #1
 8004286:	430a      	orrs	r2, r1
 8004288:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800428a:	f7fe ffc9 	bl	8003220 <HAL_GetTick>
 800428e:	0003      	movs	r3, r0
 8004290:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004292:	e00b      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004294:	f7fe ffc4 	bl	8003220 <HAL_GetTick>
 8004298:	0002      	movs	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d904      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80042a2:	2313      	movs	r3, #19
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	2203      	movs	r2, #3
 80042a8:	701a      	strb	r2, [r3, #0]
        break;
 80042aa:	e005      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ac:	4b8e      	ldr	r3, [pc, #568]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	d0ed      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80042b8:	2313      	movs	r3, #19
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d154      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042c2:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042c6:	23c0      	movs	r3, #192	; 0xc0
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d019      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d014      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042de:	4b81      	ldr	r3, [pc, #516]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	4a82      	ldr	r2, [pc, #520]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042e8:	4b7e      	ldr	r3, [pc, #504]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042ec:	4b7d      	ldr	r3, [pc, #500]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	0249      	lsls	r1, r1, #9
 80042f2:	430a      	orrs	r2, r1
 80042f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042f6:	4b7b      	ldr	r3, [pc, #492]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042fa:	4b7a      	ldr	r3, [pc, #488]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80042fc:	497c      	ldr	r1, [pc, #496]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80042fe:	400a      	ands	r2, r1
 8004300:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004302:	4b78      	ldr	r3, [pc, #480]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2201      	movs	r2, #1
 800430c:	4013      	ands	r3, r2
 800430e:	d016      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe ff86 	bl	8003220 <HAL_GetTick>
 8004314:	0003      	movs	r3, r0
 8004316:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004318:	e00c      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fe ff81 	bl	8003220 <HAL_GetTick>
 800431e:	0002      	movs	r2, r0
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	4a73      	ldr	r2, [pc, #460]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d904      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800432a:	2313      	movs	r3, #19
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	2203      	movs	r2, #3
 8004330:	701a      	strb	r2, [r3, #0]
            break;
 8004332:	e004      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004334:	4b6b      	ldr	r3, [pc, #428]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004338:	2202      	movs	r2, #2
 800433a:	4013      	ands	r3, r2
 800433c:	d0ed      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800433e:	2313      	movs	r3, #19
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004348:	4b66      	ldr	r3, [pc, #408]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	4a67      	ldr	r2, [pc, #412]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004356:	4b63      	ldr	r3, [pc, #396]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004358:	430a      	orrs	r2, r1
 800435a:	65da      	str	r2, [r3, #92]	; 0x5c
 800435c:	e00c      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800435e:	2312      	movs	r3, #18
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	2213      	movs	r2, #19
 8004364:	18ba      	adds	r2, r7, r2
 8004366:	7812      	ldrb	r2, [r2, #0]
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e005      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	2312      	movs	r3, #18
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	2213      	movs	r2, #19
 8004372:	18ba      	adds	r2, r7, r2
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004378:	2311      	movs	r3, #17
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d105      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004382:	4b58      	ldr	r3, [pc, #352]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004386:	4b57      	ldr	r3, [pc, #348]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004388:	495b      	ldr	r1, [pc, #364]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800438a:	400a      	ands	r2, r1
 800438c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	4013      	ands	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004398:	4b52      	ldr	r3, [pc, #328]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	2203      	movs	r2, #3
 800439e:	4393      	bics	r3, r2
 80043a0:	0019      	movs	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4b4f      	ldr	r3, [pc, #316]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043a8:	430a      	orrs	r2, r1
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2210      	movs	r2, #16
 80043b2:	4013      	ands	r3, r2
 80043b4:	d009      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043b6:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	4a50      	ldr	r2, [pc, #320]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80043bc:	4013      	ands	r3, r2
 80043be:	0019      	movs	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c6:	430a      	orrs	r2, r1
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4013      	ands	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043d6:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	4a49      	ldr	r2, [pc, #292]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043dc:	4013      	ands	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043e6:	430a      	orrs	r2, r1
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	2380      	movs	r3, #128	; 0x80
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4013      	ands	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	4a42      	ldr	r2, [pc, #264]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80043fc:	4013      	ands	r3, r2
 80043fe:	0019      	movs	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004406:	430a      	orrs	r2, r1
 8004408:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2220      	movs	r2, #32
 8004410:	4013      	ands	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004414:	4b33      	ldr	r3, [pc, #204]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	4a3b      	ldr	r2, [pc, #236]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800441a:	4013      	ands	r3, r2
 800441c:	0019      	movs	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004424:	430a      	orrs	r2, r1
 8004426:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	01db      	lsls	r3, r3, #7
 8004430:	4013      	ands	r3, r2
 8004432:	d015      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	0899      	lsrs	r1, r3, #2
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	4b28      	ldr	r3, [pc, #160]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004442:	430a      	orrs	r2, r1
 8004444:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	05db      	lsls	r3, r3, #23
 800444e:	429a      	cmp	r2, r3
 8004450:	d106      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004452:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	0249      	lsls	r1, r1, #9
 800445c:	430a      	orrs	r2, r1
 800445e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	039b      	lsls	r3, r3, #14
 8004468:	4013      	ands	r3, r2
 800446a:	d016      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800446c:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004472:	4013      	ands	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1a      	ldr	r2, [r3, #32]
 800447a:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800447c:	430a      	orrs	r2, r1
 800447e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1a      	ldr	r2, [r3, #32]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	03db      	lsls	r3, r3, #15
 8004488:	429a      	cmp	r2, r3
 800448a:	d106      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800448c:	4b15      	ldr	r3, [pc, #84]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	0449      	lsls	r1, r1, #17
 8004496:	430a      	orrs	r2, r1
 8004498:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	011b      	lsls	r3, r3, #4
 80044a2:	4013      	ands	r3, r2
 80044a4:	d016      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	4a19      	ldr	r2, [pc, #100]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80044ac:	4013      	ands	r3, r2
 80044ae:	0019      	movs	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044b6:	430a      	orrs	r2, r1
 80044b8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	01db      	lsls	r3, r3, #7
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d106      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	0249      	lsls	r1, r1, #9
 80044d0:	430a      	orrs	r2, r1
 80044d2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80044d4:	2312      	movs	r3, #18
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	781b      	ldrb	r3, [r3, #0]
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	b006      	add	sp, #24
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	40021000 	.word	0x40021000
 80044e8:	40007000 	.word	0x40007000
 80044ec:	fffffcff 	.word	0xfffffcff
 80044f0:	fffeffff 	.word	0xfffeffff
 80044f4:	00001388 	.word	0x00001388
 80044f8:	efffffff 	.word	0xefffffff
 80044fc:	fffff3ff 	.word	0xfffff3ff
 8004500:	fff3ffff 	.word	0xfff3ffff
 8004504:	ffcfffff 	.word	0xffcfffff
 8004508:	ffffcfff 	.word	0xffffcfff
 800450c:	ffbfffff 	.word	0xffbfffff
 8004510:	ffff3fff 	.word	0xffff3fff

08004514 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004514:	b5b0      	push	{r4, r5, r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800451c:	230f      	movs	r3, #15
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	2201      	movs	r2, #1
 8004522:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d100      	bne.n	800452c <HAL_RTC_Init+0x18>
 800452a:	e08c      	b.n	8004646 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2229      	movs	r2, #41	; 0x29
 8004530:	5c9b      	ldrb	r3, [r3, r2]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10b      	bne.n	8004550 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2228      	movs	r2, #40	; 0x28
 800453c:	2100      	movs	r1, #0
 800453e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2288      	movs	r2, #136	; 0x88
 8004544:	0212      	lsls	r2, r2, #8
 8004546:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f7fe fc4a 	bl	8002de4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2229      	movs	r2, #41	; 0x29
 8004554:	2102      	movs	r1, #2
 8004556:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2210      	movs	r2, #16
 8004560:	4013      	ands	r3, r2
 8004562:	2b10      	cmp	r3, #16
 8004564:	d062      	beq.n	800462c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	22ca      	movs	r2, #202	; 0xca
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2253      	movs	r2, #83	; 0x53
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004576:	250f      	movs	r5, #15
 8004578:	197c      	adds	r4, r7, r5
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fbf4 	bl	8004d6a <RTC_EnterInitMode>
 8004582:	0003      	movs	r3, r0
 8004584:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004586:	0028      	movs	r0, r5
 8004588:	183b      	adds	r3, r7, r0
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d12c      	bne.n	80045ea <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	492e      	ldr	r1, [pc, #184]	; (8004654 <HAL_RTC_Init+0x140>)
 800459c:	400a      	ands	r2, r1
 800459e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6999      	ldr	r1, [r3, #24]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6912      	ldr	r2, [r2, #16]
 80045c6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6919      	ldr	r1, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	041a      	lsls	r2, r3, #16
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80045dc:	183c      	adds	r4, r7, r0
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 fc05 	bl	8004df0 <RTC_ExitInitMode>
 80045e6:	0003      	movs	r3, r0
 80045e8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80045ea:	230f      	movs	r3, #15
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d116      	bne.n	8004622 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	00d2      	lsls	r2, r2, #3
 8004600:	08d2      	lsrs	r2, r2, #3
 8004602:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
 800462a:	e003      	b.n	8004634 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800462c:	230f      	movs	r3, #15
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004634:	230f      	movs	r3, #15
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2229      	movs	r2, #41	; 0x29
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004646:	230f      	movs	r3, #15
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	781b      	ldrb	r3, [r3, #0]
}
 800464c:	0018      	movs	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	b004      	add	sp, #16
 8004652:	bdb0      	pop	{r4, r5, r7, pc}
 8004654:	fb8fffbf 	.word	0xfb8fffbf

08004658 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004658:	b5b0      	push	{r4, r5, r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2228      	movs	r2, #40	; 0x28
 8004668:	5c9b      	ldrb	r3, [r3, r2]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_RTC_SetTime+0x1a>
 800466e:	2302      	movs	r3, #2
 8004670:	e092      	b.n	8004798 <HAL_RTC_SetTime+0x140>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2228      	movs	r2, #40	; 0x28
 8004676:	2101      	movs	r1, #1
 8004678:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2229      	movs	r2, #41	; 0x29
 800467e:	2102      	movs	r1, #2
 8004680:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	22ca      	movs	r2, #202	; 0xca
 8004688:	625a      	str	r2, [r3, #36]	; 0x24
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2253      	movs	r2, #83	; 0x53
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004692:	2513      	movs	r5, #19
 8004694:	197c      	adds	r4, r7, r5
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	0018      	movs	r0, r3
 800469a:	f000 fb66 	bl	8004d6a <RTC_EnterInitMode>
 800469e:	0003      	movs	r3, r0
 80046a0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80046a2:	197b      	adds	r3, r7, r5
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d162      	bne.n	8004770 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d125      	bne.n	80046fc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2240      	movs	r2, #64	; 0x40
 80046b8:	4013      	ands	r3, r2
 80046ba:	d102      	bne.n	80046c2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 fbd6 	bl	8004e78 <RTC_ByteToBcd2>
 80046cc:	0003      	movs	r3, r0
 80046ce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 fbcf 	bl	8004e78 <RTC_ByteToBcd2>
 80046da:	0003      	movs	r3, r0
 80046dc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046de:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	789b      	ldrb	r3, [r3, #2]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 fbc7 	bl	8004e78 <RTC_ByteToBcd2>
 80046ea:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80046ec:	0022      	movs	r2, r4
 80046ee:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	78db      	ldrb	r3, [r3, #3]
 80046f4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	e017      	b.n	800472c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	4013      	ands	r3, r2
 8004706:	d102      	bne.n	800470e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2200      	movs	r2, #0
 800470c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800471a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004720:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	78db      	ldrb	r3, [r3, #3]
 8004726:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	491b      	ldr	r1, [pc, #108]	; (80047a0 <HAL_RTC_SetTime+0x148>)
 8004734:	400a      	ands	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4918      	ldr	r1, [pc, #96]	; (80047a4 <HAL_RTC_SetTime+0x14c>)
 8004744:	400a      	ands	r2, r1
 8004746:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	431a      	orrs	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004760:	2313      	movs	r3, #19
 8004762:	18fc      	adds	r4, r7, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 fb42 	bl	8004df0 <RTC_ExitInitMode>
 800476c:	0003      	movs	r3, r0
 800476e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	22ff      	movs	r2, #255	; 0xff
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8004778:	2313      	movs	r3, #19
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d103      	bne.n	800478a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2229      	movs	r2, #41	; 0x29
 8004786:	2101      	movs	r1, #1
 8004788:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2228      	movs	r2, #40	; 0x28
 800478e:	2100      	movs	r1, #0
 8004790:	5499      	strb	r1, [r3, r2]

  return status;
 8004792:	2313      	movs	r3, #19
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	781b      	ldrb	r3, [r3, #0]
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b006      	add	sp, #24
 800479e:	bdb0      	pop	{r4, r5, r7, pc}
 80047a0:	007f7f7f 	.word	0x007f7f7f
 80047a4:	fffbffff 	.word	0xfffbffff

080047a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	045b      	lsls	r3, r3, #17
 80047c6:	0c5a      	lsrs	r2, r3, #17
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a22      	ldr	r2, [pc, #136]	; (800485c <HAL_RTC_GetTime+0xb4>)
 80047d4:	4013      	ands	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	223f      	movs	r2, #63	; 0x3f
 80047e0:	4013      	ands	r3, r2
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	0a1b      	lsrs	r3, r3, #8
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	227f      	movs	r2, #127	; 0x7f
 80047f0:	4013      	ands	r3, r2
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	227f      	movs	r2, #127	; 0x7f
 80047fe:	4013      	ands	r3, r2
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	0d9b      	lsrs	r3, r3, #22
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2201      	movs	r2, #1
 800480e:	4013      	ands	r3, r2
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11a      	bne.n	8004852 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	0018      	movs	r0, r3
 8004822:	f000 fb51 	bl	8004ec8 <RTC_Bcd2ToByte>
 8004826:	0003      	movs	r3, r0
 8004828:	001a      	movs	r2, r3
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 fb48 	bl	8004ec8 <RTC_Bcd2ToByte>
 8004838:	0003      	movs	r3, r0
 800483a:	001a      	movs	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	789b      	ldrb	r3, [r3, #2]
 8004844:	0018      	movs	r0, r3
 8004846:	f000 fb3f 	bl	8004ec8 <RTC_Bcd2ToByte>
 800484a:	0003      	movs	r3, r0
 800484c:	001a      	movs	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b006      	add	sp, #24
 800485a:	bd80      	pop	{r7, pc}
 800485c:	007f7f7f 	.word	0x007f7f7f

08004860 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004860:	b5b0      	push	{r4, r5, r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2228      	movs	r2, #40	; 0x28
 8004870:	5c9b      	ldrb	r3, [r3, r2]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d101      	bne.n	800487a <HAL_RTC_SetDate+0x1a>
 8004876:	2302      	movs	r3, #2
 8004878:	e07e      	b.n	8004978 <HAL_RTC_SetDate+0x118>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2228      	movs	r2, #40	; 0x28
 800487e:	2101      	movs	r1, #1
 8004880:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2229      	movs	r2, #41	; 0x29
 8004886:	2102      	movs	r1, #2
 8004888:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10e      	bne.n	80048ae <HAL_RTC_SetDate+0x4e>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	001a      	movs	r2, r3
 8004896:	2310      	movs	r3, #16
 8004898:	4013      	ands	r3, r2
 800489a:	d008      	beq.n	80048ae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	785b      	ldrb	r3, [r3, #1]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4393      	bics	r3, r2
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	330a      	adds	r3, #10
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11c      	bne.n	80048ee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	78db      	ldrb	r3, [r3, #3]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 fadd 	bl	8004e78 <RTC_ByteToBcd2>
 80048be:	0003      	movs	r3, r0
 80048c0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	0018      	movs	r0, r3
 80048c8:	f000 fad6 	bl	8004e78 <RTC_ByteToBcd2>
 80048cc:	0003      	movs	r3, r0
 80048ce:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048d0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	789b      	ldrb	r3, [r3, #2]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f000 face 	bl	8004e78 <RTC_ByteToBcd2>
 80048dc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80048de:	0022      	movs	r2, r4
 80048e0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80048e8:	4313      	orrs	r3, r2
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e00e      	b.n	800490c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	78db      	ldrb	r3, [r3, #3]
 80048f2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	785b      	ldrb	r3, [r3, #1]
 80048f8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80048fa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004900:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004908:	4313      	orrs	r3, r2
 800490a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	22ca      	movs	r2, #202	; 0xca
 8004912:	625a      	str	r2, [r3, #36]	; 0x24
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2253      	movs	r2, #83	; 0x53
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800491c:	2513      	movs	r5, #19
 800491e:	197c      	adds	r4, r7, r5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	0018      	movs	r0, r3
 8004924:	f000 fa21 	bl	8004d6a <RTC_EnterInitMode>
 8004928:	0003      	movs	r3, r0
 800492a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800492c:	0028      	movs	r0, r5
 800492e:	183b      	adds	r3, r7, r0
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10c      	bne.n	8004950 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4910      	ldr	r1, [pc, #64]	; (8004980 <HAL_RTC_SetDate+0x120>)
 800493e:	400a      	ands	r2, r1
 8004940:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004942:	183c      	adds	r4, r7, r0
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	0018      	movs	r0, r3
 8004948:	f000 fa52 	bl	8004df0 <RTC_ExitInitMode>
 800494c:	0003      	movs	r3, r0
 800494e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	22ff      	movs	r2, #255	; 0xff
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004958:	2313      	movs	r3, #19
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2229      	movs	r2, #41	; 0x29
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2228      	movs	r2, #40	; 0x28
 800496e:	2100      	movs	r1, #0
 8004970:	5499      	strb	r1, [r3, r2]

  return status;
 8004972:	2313      	movs	r3, #19
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	781b      	ldrb	r3, [r3, #0]
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	b006      	add	sp, #24
 800497e:	bdb0      	pop	{r4, r5, r7, pc}
 8004980:	00ffff3f 	.word	0x00ffff3f

08004984 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <HAL_RTC_GetDate+0x98>)
 8004998:	4013      	ands	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	221f      	movs	r2, #31
 80049ae:	4013      	ands	r3, r2
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	223f      	movs	r2, #63	; 0x3f
 80049bc:	4013      	ands	r3, r2
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	0b5b      	lsrs	r3, r3, #13
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2207      	movs	r2, #7
 80049cc:	4013      	ands	r3, r2
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d11a      	bne.n	8004a10 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	78db      	ldrb	r3, [r3, #3]
 80049de:	0018      	movs	r0, r3
 80049e0:	f000 fa72 	bl	8004ec8 <RTC_Bcd2ToByte>
 80049e4:	0003      	movs	r3, r0
 80049e6:	001a      	movs	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	785b      	ldrb	r3, [r3, #1]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f000 fa69 	bl	8004ec8 <RTC_Bcd2ToByte>
 80049f6:	0003      	movs	r3, r0
 80049f8:	001a      	movs	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	789b      	ldrb	r3, [r3, #2]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 fa60 	bl	8004ec8 <RTC_Bcd2ToByte>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b006      	add	sp, #24
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	00ffff3f 	.word	0x00ffff3f

08004a20 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b089      	sub	sp, #36	; 0x24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2228      	movs	r2, #40	; 0x28
 8004a30:	5c9b      	ldrb	r3, [r3, r2]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_RTC_SetAlarm_IT+0x1a>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e127      	b.n	8004c8a <HAL_RTC_SetAlarm_IT+0x26a>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2228      	movs	r2, #40	; 0x28
 8004a3e:	2101      	movs	r1, #1
 8004a40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2229      	movs	r2, #41	; 0x29
 8004a46:	2102      	movs	r1, #2
 8004a48:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d136      	bne.n	8004abe <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2240      	movs	r2, #64	; 0x40
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d102      	bne.n	8004a62 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 fa06 	bl	8004e78 <RTC_ByteToBcd2>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	785b      	ldrb	r3, [r3, #1]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 f9ff 	bl	8004e78 <RTC_ByteToBcd2>
 8004a7a:	0003      	movs	r3, r0
 8004a7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004a7e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	789b      	ldrb	r3, [r3, #2]
 8004a84:	0018      	movs	r0, r3
 8004a86:	f000 f9f7 	bl	8004e78 <RTC_ByteToBcd2>
 8004a8a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004a8c:	0022      	movs	r2, r4
 8004a8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	78db      	ldrb	r3, [r3, #3]
 8004a94:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004a96:	431a      	orrs	r2, r3
 8004a98:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	5c9b      	ldrb	r3, [r3, r2]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f000 f9e9 	bl	8004e78 <RTC_ByteToBcd2>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004aaa:	0022      	movs	r2, r4
 8004aac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004ab2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	e022      	b.n	8004b04 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2240      	movs	r2, #64	; 0x40
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004adc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004ae2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	78db      	ldrb	r3, [r3, #3]
 8004ae8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004aea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2120      	movs	r1, #32
 8004af0:	5c5b      	ldrb	r3, [r3, r1]
 8004af2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004af4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004afa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	22ca      	movs	r2, #202	; 0xca
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2253      	movs	r2, #83	; 0x53
 8004b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d14c      	bne.n	8004bc6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4957      	ldr	r1, [pc, #348]	; (8004c94 <HAL_RTC_SetAlarm_IT+0x274>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2101      	movs	r1, #1
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004b4c:	f7fe fb68 	bl	8003220 <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b54:	e016      	b.n	8004b84 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004b56:	f7fe fb63 	bl	8003220 <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	23fa      	movs	r3, #250	; 0xfa
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d90d      	bls.n	8004b84 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2229      	movs	r2, #41	; 0x29
 8004b74:	2103      	movs	r1, #3
 8004b76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2228      	movs	r2, #40	; 0x28
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e082      	b.n	8004c8a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d0e2      	beq.n	8004b56 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	0049      	lsls	r1, r1, #1
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699a      	ldr	r2, [r3, #24]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2180      	movs	r1, #128	; 0x80
 8004bbe:	0149      	lsls	r1, r1, #5
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	619a      	str	r2, [r3, #24]
 8004bc4:	e04b      	b.n	8004c5e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4931      	ldr	r1, [pc, #196]	; (8004c98 <HAL_RTC_SetAlarm_IT+0x278>)
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2102      	movs	r1, #2
 8004be2:	430a      	orrs	r2, r1
 8004be4:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8004be6:	f7fe fb1b 	bl	8003220 <HAL_GetTick>
 8004bea:	0003      	movs	r3, r0
 8004bec:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004bee:	e016      	b.n	8004c1e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004bf0:	f7fe fb16 	bl	8003220 <HAL_GetTick>
 8004bf4:	0002      	movs	r2, r0
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	1ad2      	subs	r2, r2, r3
 8004bfa:	23fa      	movs	r3, #250	; 0xfa
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d90d      	bls.n	8004c1e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	22ff      	movs	r2, #255	; 0xff
 8004c08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2229      	movs	r2, #41	; 0x29
 8004c0e:	2103      	movs	r1, #3
 8004c10:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2228      	movs	r2, #40	; 0x28
 8004c16:	2100      	movs	r1, #0
 8004c18:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e035      	b.n	8004c8a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2202      	movs	r2, #2
 8004c26:	4013      	ands	r3, r2
 8004c28:	d0e2      	beq.n	8004bf0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69fa      	ldr	r2, [r7, #28]
 8004c30:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	0089      	lsls	r1, r1, #2
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	0189      	lsls	r1, r1, #6
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004c5e:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	58d3      	ldr	r3, [r2, r3]
 8004c64:	490d      	ldr	r1, [pc, #52]	; (8004c9c <HAL_RTC_SetAlarm_IT+0x27c>)
 8004c66:	2280      	movs	r2, #128	; 0x80
 8004c68:	0312      	lsls	r2, r2, #12
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	2280      	movs	r2, #128	; 0x80
 8004c6e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2229      	movs	r2, #41	; 0x29
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2228      	movs	r2, #40	; 0x28
 8004c84:	2100      	movs	r1, #0
 8004c86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	b009      	add	sp, #36	; 0x24
 8004c90:	bd90      	pop	{r4, r7, pc}
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	fffffeff 	.word	0xfffffeff
 8004c98:	fffffdff 	.word	0xfffffdff
 8004c9c:	40021800 	.word	0x40021800

08004ca0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	2380      	movs	r3, #128	; 0x80
 8004cb0:	015b      	lsls	r3, r3, #5
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d011      	beq.n	8004cda <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f7fd fe4d 	bl	8002974 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699a      	ldr	r2, [r3, #24]
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	019b      	lsls	r3, r3, #6
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d011      	beq.n	8004d0c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cee:	2202      	movs	r2, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d00b      	beq.n	8004d0c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2102      	movs	r1, #2
 8004d00:	430a      	orrs	r2, r1
 8004d02:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	0018      	movs	r0, r3
 8004d08:	f000 f8fb 	bl	8004f02 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2229      	movs	r2, #41	; 0x29
 8004d10:	2101      	movs	r1, #1
 8004d12:	5499      	strb	r1, [r3, r2]
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b002      	add	sp, #8
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	21a0      	movs	r1, #160	; 0xa0
 8004d30:	438a      	bics	r2, r1
 8004d32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004d34:	f7fe fa74 	bl	8003220 <HAL_GetTick>
 8004d38:	0003      	movs	r3, r0
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004d3c:	e00a      	b.n	8004d54 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d3e:	f7fe fa6f 	bl	8003220 <HAL_GetTick>
 8004d42:	0002      	movs	r2, r0
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad2      	subs	r2, r2, r3
 8004d48:	23fa      	movs	r3, #250	; 0xfa
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d901      	bls.n	8004d54 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d0ee      	beq.n	8004d3e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8004d72:	230f      	movs	r3, #15
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	2240      	movs	r2, #64	; 0x40
 8004d82:	4013      	ands	r3, r2
 8004d84:	d12c      	bne.n	8004de0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2180      	movs	r1, #128	; 0x80
 8004d92:	430a      	orrs	r2, r1
 8004d94:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004d96:	f7fe fa43 	bl	8003220 <HAL_GetTick>
 8004d9a:	0003      	movs	r3, r0
 8004d9c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004d9e:	e014      	b.n	8004dca <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004da0:	f7fe fa3e 	bl	8003220 <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	200f      	movs	r0, #15
 8004dac:	183b      	adds	r3, r7, r0
 8004dae:	1839      	adds	r1, r7, r0
 8004db0:	7809      	ldrb	r1, [r1, #0]
 8004db2:	7019      	strb	r1, [r3, #0]
 8004db4:	23fa      	movs	r3, #250	; 0xfa
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d906      	bls.n	8004dca <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8004dbc:	183b      	adds	r3, r7, r0
 8004dbe:	2203      	movs	r2, #3
 8004dc0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2229      	movs	r2, #41	; 0x29
 8004dc6:	2103      	movs	r1, #3
 8004dc8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2240      	movs	r2, #64	; 0x40
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d104      	bne.n	8004de0 <RTC_EnterInitMode+0x76>
 8004dd6:	230f      	movs	r3, #15
 8004dd8:	18fb      	adds	r3, r7, r3
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d1df      	bne.n	8004da0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004de0:	230f      	movs	r3, #15
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	781b      	ldrb	r3, [r3, #0]
}
 8004de6:	0018      	movs	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b004      	add	sp, #16
 8004dec:	bd80      	pop	{r7, pc}
	...

08004df0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df8:	240f      	movs	r4, #15
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004e00:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <RTC_ExitInitMode+0x84>)
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <RTC_ExitInitMode+0x84>)
 8004e06:	2180      	movs	r1, #128	; 0x80
 8004e08:	438a      	bics	r2, r1
 8004e0a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <RTC_ExitInitMode+0x84>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2220      	movs	r2, #32
 8004e12:	4013      	ands	r3, r2
 8004e14:	d10d      	bne.n	8004e32 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f7ff ff7f 	bl	8004d1c <HAL_RTC_WaitForSynchro>
 8004e1e:	1e03      	subs	r3, r0, #0
 8004e20:	d021      	beq.n	8004e66 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2229      	movs	r2, #41	; 0x29
 8004e26:	2103      	movs	r1, #3
 8004e28:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	2203      	movs	r2, #3
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	e019      	b.n	8004e66 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <RTC_ExitInitMode+0x84>)
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <RTC_ExitInitMode+0x84>)
 8004e38:	2120      	movs	r1, #32
 8004e3a:	438a      	bics	r2, r1
 8004e3c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f7ff ff6b 	bl	8004d1c <HAL_RTC_WaitForSynchro>
 8004e46:	1e03      	subs	r3, r0, #0
 8004e48:	d007      	beq.n	8004e5a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2229      	movs	r2, #41	; 0x29
 8004e4e:	2103      	movs	r1, #3
 8004e50:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8004e52:	230f      	movs	r3, #15
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	2203      	movs	r2, #3
 8004e58:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <RTC_ExitInitMode+0x84>)
 8004e5c:	699a      	ldr	r2, [r3, #24]
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <RTC_ExitInitMode+0x84>)
 8004e60:	2120      	movs	r1, #32
 8004e62:	430a      	orrs	r2, r1
 8004e64:	619a      	str	r2, [r3, #24]
  }

  return status;
 8004e66:	230f      	movs	r3, #15
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
}
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b005      	add	sp, #20
 8004e72:	bd90      	pop	{r4, r7, pc}
 8004e74:	40002800 	.word	0x40002800

08004e78 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	0002      	movs	r2, r0
 8004e80:	1dfb      	adds	r3, r7, #7
 8004e82:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004e88:	230b      	movs	r3, #11
 8004e8a:	18fb      	adds	r3, r7, r3
 8004e8c:	1dfa      	adds	r2, r7, #7
 8004e8e:	7812      	ldrb	r2, [r2, #0]
 8004e90:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8004e92:	e008      	b.n	8004ea6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004e9a:	220b      	movs	r2, #11
 8004e9c:	18bb      	adds	r3, r7, r2
 8004e9e:	18ba      	adds	r2, r7, r2
 8004ea0:	7812      	ldrb	r2, [r2, #0]
 8004ea2:	3a0a      	subs	r2, #10
 8004ea4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8004ea6:	210b      	movs	r1, #11
 8004ea8:	187b      	adds	r3, r7, r1
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b09      	cmp	r3, #9
 8004eae:	d8f1      	bhi.n	8004e94 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	011b      	lsls	r3, r3, #4
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	187b      	adds	r3, r7, r1
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	b2db      	uxtb	r3, r3
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b004      	add	sp, #16
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	0002      	movs	r2, r0
 8004ed0:	1dfb      	adds	r3, r7, #7
 8004ed2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8004ed4:	1dfb      	adds	r3, r7, #7
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	001a      	movs	r2, r3
 8004ede:	0013      	movs	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	189b      	adds	r3, r3, r2
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	1dfb      	adds	r3, r7, #7
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	210f      	movs	r1, #15
 8004ef2:	400b      	ands	r3, r1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	18d3      	adds	r3, r2, r3
 8004ef8:	b2db      	uxtb	r3, r3
}
 8004efa:	0018      	movs	r0, r3
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b004      	add	sp, #16
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b082      	sub	sp, #8
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e046      	b.n	8004fb4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2288      	movs	r2, #136	; 0x88
 8004f2a:	589b      	ldr	r3, [r3, r2]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d107      	bne.n	8004f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2284      	movs	r2, #132	; 0x84
 8004f34:	2100      	movs	r1, #0
 8004f36:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f7fd ff98 	bl	8002e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2288      	movs	r2, #136	; 0x88
 8004f44:	2124      	movs	r1, #36	; 0x24
 8004f46:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2101      	movs	r1, #1
 8004f54:	438a      	bics	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 f8cc 	bl	80050f8 <UART_SetConfig>
 8004f60:	0003      	movs	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e024      	b.n	8004fb4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	0018      	movs	r0, r3
 8004f76:	f000 fb37 	bl	80055e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	490d      	ldr	r1, [pc, #52]	; (8004fbc <HAL_UART_Init+0xa8>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	212a      	movs	r1, #42	; 0x2a
 8004f96:	438a      	bics	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 fbcf 	bl	8005750 <UART_CheckIdleState>
 8004fb2:	0003      	movs	r3, r0
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b002      	add	sp, #8
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	ffffb7ff 	.word	0xffffb7ff

08004fc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	1dbb      	adds	r3, r7, #6
 8004fce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2288      	movs	r2, #136	; 0x88
 8004fd4:	589b      	ldr	r3, [r3, r2]
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d000      	beq.n	8004fdc <HAL_UART_Transmit+0x1c>
 8004fda:	e088      	b.n	80050ee <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_UART_Transmit+0x2a>
 8004fe2:	1dbb      	adds	r3, r7, #6
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e080      	b.n	80050f0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	015b      	lsls	r3, r3, #5
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d109      	bne.n	800500e <HAL_UART_Transmit+0x4e>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2201      	movs	r2, #1
 8005006:	4013      	ands	r3, r2
 8005008:	d001      	beq.n	800500e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e070      	b.n	80050f0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2290      	movs	r2, #144	; 0x90
 8005012:	2100      	movs	r1, #0
 8005014:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2288      	movs	r2, #136	; 0x88
 800501a:	2121      	movs	r1, #33	; 0x21
 800501c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800501e:	f7fe f8ff 	bl	8003220 <HAL_GetTick>
 8005022:	0003      	movs	r3, r0
 8005024:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1dba      	adds	r2, r7, #6
 800502a:	2154      	movs	r1, #84	; 0x54
 800502c:	8812      	ldrh	r2, [r2, #0]
 800502e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	1dba      	adds	r2, r7, #6
 8005034:	2156      	movs	r1, #86	; 0x56
 8005036:	8812      	ldrh	r2, [r2, #0]
 8005038:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	015b      	lsls	r3, r3, #5
 8005042:	429a      	cmp	r2, r3
 8005044:	d108      	bne.n	8005058 <HAL_UART_Transmit+0x98>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d104      	bne.n	8005058 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e003      	b.n	8005060 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005060:	e02c      	b.n	80050bc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	0013      	movs	r3, r2
 800506c:	2200      	movs	r2, #0
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	f000 fbbc 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d001      	beq.n	800507c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e039      	b.n	80050f0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	881b      	ldrh	r3, [r3, #0]
 8005086:	001a      	movs	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	05d2      	lsls	r2, r2, #23
 800508e:	0dd2      	lsrs	r2, r2, #23
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	3302      	adds	r3, #2
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e007      	b.n	80050aa <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	781a      	ldrb	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	3301      	adds	r3, #1
 80050a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2256      	movs	r2, #86	; 0x56
 80050ae:	5a9b      	ldrh	r3, [r3, r2]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b299      	uxth	r1, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2256      	movs	r2, #86	; 0x56
 80050ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2256      	movs	r2, #86	; 0x56
 80050c0:	5a9b      	ldrh	r3, [r3, r2]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1cc      	bne.n	8005062 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	0013      	movs	r3, r2
 80050d2:	2200      	movs	r2, #0
 80050d4:	2140      	movs	r1, #64	; 0x40
 80050d6:	f000 fb89 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 80050da:	1e03      	subs	r3, r0, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e006      	b.n	80050f0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2288      	movs	r2, #136	; 0x88
 80050e6:	2120      	movs	r1, #32
 80050e8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e000      	b.n	80050f0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
  }
}
 80050f0:	0018      	movs	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b008      	add	sp, #32
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b5b0      	push	{r4, r5, r7, lr}
 80050fa:	b090      	sub	sp, #64	; 0x40
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005100:	231a      	movs	r3, #26
 8005102:	2220      	movs	r2, #32
 8005104:	189b      	adds	r3, r3, r2
 8005106:	19db      	adds	r3, r3, r7
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	431a      	orrs	r2, r3
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	431a      	orrs	r2, r3
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4313      	orrs	r3, r2
 8005122:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4ac4      	ldr	r2, [pc, #784]	; (800543c <UART_SetConfig+0x344>)
 800512c:	4013      	ands	r3, r2
 800512e:	0019      	movs	r1, r3
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005136:	430b      	orrs	r3, r1
 8005138:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4abf      	ldr	r2, [pc, #764]	; (8005440 <UART_SetConfig+0x348>)
 8005142:	4013      	ands	r3, r2
 8005144:	0018      	movs	r0, r3
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	68d9      	ldr	r1, [r3, #12]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	0003      	movs	r3, r0
 8005150:	430b      	orrs	r3, r1
 8005152:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4ab9      	ldr	r2, [pc, #740]	; (8005444 <UART_SetConfig+0x34c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800516a:	4313      	orrs	r3, r2
 800516c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800516e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4ab4      	ldr	r2, [pc, #720]	; (8005448 <UART_SetConfig+0x350>)
 8005176:	4013      	ands	r3, r2
 8005178:	0019      	movs	r1, r3
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005180:	430b      	orrs	r3, r1
 8005182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	220f      	movs	r2, #15
 800518c:	4393      	bics	r3, r2
 800518e:	0018      	movs	r0, r3
 8005190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005192:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	0003      	movs	r3, r0
 800519a:	430b      	orrs	r3, r1
 800519c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4aaa      	ldr	r2, [pc, #680]	; (800544c <UART_SetConfig+0x354>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d131      	bne.n	800520c <UART_SetConfig+0x114>
 80051a8:	4ba9      	ldr	r3, [pc, #676]	; (8005450 <UART_SetConfig+0x358>)
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	2203      	movs	r2, #3
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d01d      	beq.n	80051f0 <UART_SetConfig+0xf8>
 80051b4:	d823      	bhi.n	80051fe <UART_SetConfig+0x106>
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d00c      	beq.n	80051d4 <UART_SetConfig+0xdc>
 80051ba:	d820      	bhi.n	80051fe <UART_SetConfig+0x106>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <UART_SetConfig+0xce>
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d00e      	beq.n	80051e2 <UART_SetConfig+0xea>
 80051c4:	e01b      	b.n	80051fe <UART_SetConfig+0x106>
 80051c6:	231b      	movs	r3, #27
 80051c8:	2220      	movs	r2, #32
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	19db      	adds	r3, r3, r7
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	e071      	b.n	80052b8 <UART_SetConfig+0x1c0>
 80051d4:	231b      	movs	r3, #27
 80051d6:	2220      	movs	r2, #32
 80051d8:	189b      	adds	r3, r3, r2
 80051da:	19db      	adds	r3, r3, r7
 80051dc:	2202      	movs	r2, #2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	e06a      	b.n	80052b8 <UART_SetConfig+0x1c0>
 80051e2:	231b      	movs	r3, #27
 80051e4:	2220      	movs	r2, #32
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	19db      	adds	r3, r3, r7
 80051ea:	2204      	movs	r2, #4
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e063      	b.n	80052b8 <UART_SetConfig+0x1c0>
 80051f0:	231b      	movs	r3, #27
 80051f2:	2220      	movs	r2, #32
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	19db      	adds	r3, r3, r7
 80051f8:	2208      	movs	r2, #8
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e05c      	b.n	80052b8 <UART_SetConfig+0x1c0>
 80051fe:	231b      	movs	r3, #27
 8005200:	2220      	movs	r2, #32
 8005202:	189b      	adds	r3, r3, r2
 8005204:	19db      	adds	r3, r3, r7
 8005206:	2210      	movs	r2, #16
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e055      	b.n	80052b8 <UART_SetConfig+0x1c0>
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a90      	ldr	r2, [pc, #576]	; (8005454 <UART_SetConfig+0x35c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d106      	bne.n	8005224 <UART_SetConfig+0x12c>
 8005216:	231b      	movs	r3, #27
 8005218:	2220      	movs	r2, #32
 800521a:	189b      	adds	r3, r3, r2
 800521c:	19db      	adds	r3, r3, r7
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	e049      	b.n	80052b8 <UART_SetConfig+0x1c0>
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a86      	ldr	r2, [pc, #536]	; (8005444 <UART_SetConfig+0x34c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d13e      	bne.n	80052ac <UART_SetConfig+0x1b4>
 800522e:	4b88      	ldr	r3, [pc, #544]	; (8005450 <UART_SetConfig+0x358>)
 8005230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005232:	23c0      	movs	r3, #192	; 0xc0
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	4013      	ands	r3, r2
 8005238:	22c0      	movs	r2, #192	; 0xc0
 800523a:	0112      	lsls	r2, r2, #4
 800523c:	4293      	cmp	r3, r2
 800523e:	d027      	beq.n	8005290 <UART_SetConfig+0x198>
 8005240:	22c0      	movs	r2, #192	; 0xc0
 8005242:	0112      	lsls	r2, r2, #4
 8005244:	4293      	cmp	r3, r2
 8005246:	d82a      	bhi.n	800529e <UART_SetConfig+0x1a6>
 8005248:	2280      	movs	r2, #128	; 0x80
 800524a:	0112      	lsls	r2, r2, #4
 800524c:	4293      	cmp	r3, r2
 800524e:	d011      	beq.n	8005274 <UART_SetConfig+0x17c>
 8005250:	2280      	movs	r2, #128	; 0x80
 8005252:	0112      	lsls	r2, r2, #4
 8005254:	4293      	cmp	r3, r2
 8005256:	d822      	bhi.n	800529e <UART_SetConfig+0x1a6>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d004      	beq.n	8005266 <UART_SetConfig+0x16e>
 800525c:	2280      	movs	r2, #128	; 0x80
 800525e:	00d2      	lsls	r2, r2, #3
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <UART_SetConfig+0x18a>
 8005264:	e01b      	b.n	800529e <UART_SetConfig+0x1a6>
 8005266:	231b      	movs	r3, #27
 8005268:	2220      	movs	r2, #32
 800526a:	189b      	adds	r3, r3, r2
 800526c:	19db      	adds	r3, r3, r7
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	e021      	b.n	80052b8 <UART_SetConfig+0x1c0>
 8005274:	231b      	movs	r3, #27
 8005276:	2220      	movs	r2, #32
 8005278:	189b      	adds	r3, r3, r2
 800527a:	19db      	adds	r3, r3, r7
 800527c:	2202      	movs	r2, #2
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e01a      	b.n	80052b8 <UART_SetConfig+0x1c0>
 8005282:	231b      	movs	r3, #27
 8005284:	2220      	movs	r2, #32
 8005286:	189b      	adds	r3, r3, r2
 8005288:	19db      	adds	r3, r3, r7
 800528a:	2204      	movs	r2, #4
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e013      	b.n	80052b8 <UART_SetConfig+0x1c0>
 8005290:	231b      	movs	r3, #27
 8005292:	2220      	movs	r2, #32
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	2208      	movs	r2, #8
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e00c      	b.n	80052b8 <UART_SetConfig+0x1c0>
 800529e:	231b      	movs	r3, #27
 80052a0:	2220      	movs	r2, #32
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	19db      	adds	r3, r3, r7
 80052a6:	2210      	movs	r2, #16
 80052a8:	701a      	strb	r2, [r3, #0]
 80052aa:	e005      	b.n	80052b8 <UART_SetConfig+0x1c0>
 80052ac:	231b      	movs	r3, #27
 80052ae:	2220      	movs	r2, #32
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	2210      	movs	r2, #16
 80052b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a61      	ldr	r2, [pc, #388]	; (8005444 <UART_SetConfig+0x34c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d000      	beq.n	80052c4 <UART_SetConfig+0x1cc>
 80052c2:	e092      	b.n	80053ea <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052c4:	231b      	movs	r3, #27
 80052c6:	2220      	movs	r2, #32
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	19db      	adds	r3, r3, r7
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b08      	cmp	r3, #8
 80052d0:	d015      	beq.n	80052fe <UART_SetConfig+0x206>
 80052d2:	dc18      	bgt.n	8005306 <UART_SetConfig+0x20e>
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d00d      	beq.n	80052f4 <UART_SetConfig+0x1fc>
 80052d8:	dc15      	bgt.n	8005306 <UART_SetConfig+0x20e>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <UART_SetConfig+0x1ec>
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d005      	beq.n	80052ee <UART_SetConfig+0x1f6>
 80052e2:	e010      	b.n	8005306 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe ff86 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 80052e8:	0003      	movs	r3, r0
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ec:	e014      	b.n	8005318 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ee:	4b5a      	ldr	r3, [pc, #360]	; (8005458 <UART_SetConfig+0x360>)
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052f2:	e011      	b.n	8005318 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052f4:	f7fe fef2 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 80052f8:	0003      	movs	r3, r0
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052fc:	e00c      	b.n	8005318 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052fe:	2380      	movs	r3, #128	; 0x80
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005304:	e008      	b.n	8005318 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800530a:	231a      	movs	r3, #26
 800530c:	2220      	movs	r2, #32
 800530e:	189b      	adds	r3, r3, r2
 8005310:	19db      	adds	r3, r3, r7
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
        break;
 8005316:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	2b00      	cmp	r3, #0
 800531c:	d100      	bne.n	8005320 <UART_SetConfig+0x228>
 800531e:	e147      	b.n	80055b0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005324:	4b4d      	ldr	r3, [pc, #308]	; (800545c <UART_SetConfig+0x364>)
 8005326:	0052      	lsls	r2, r2, #1
 8005328:	5ad3      	ldrh	r3, [r2, r3]
 800532a:	0019      	movs	r1, r3
 800532c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800532e:	f7fa ff05 	bl	800013c <__udivsi3>
 8005332:	0003      	movs	r3, r0
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	0013      	movs	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	189b      	adds	r3, r3, r2
 8005340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005342:	429a      	cmp	r2, r3
 8005344:	d305      	bcc.n	8005352 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800534c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534e:	429a      	cmp	r2, r3
 8005350:	d906      	bls.n	8005360 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005352:	231a      	movs	r3, #26
 8005354:	2220      	movs	r2, #32
 8005356:	189b      	adds	r3, r3, r2
 8005358:	19db      	adds	r3, r3, r7
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e127      	b.n	80055b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800536c:	4b3b      	ldr	r3, [pc, #236]	; (800545c <UART_SetConfig+0x364>)
 800536e:	0052      	lsls	r2, r2, #1
 8005370:	5ad3      	ldrh	r3, [r2, r3]
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	69b8      	ldr	r0, [r7, #24]
 800537e:	69f9      	ldr	r1, [r7, #28]
 8005380:	f7fb f890 	bl	80004a4 <__aeabi_uldivmod>
 8005384:	0002      	movs	r2, r0
 8005386:	000b      	movs	r3, r1
 8005388:	0e11      	lsrs	r1, r2, #24
 800538a:	021d      	lsls	r5, r3, #8
 800538c:	430d      	orrs	r5, r1
 800538e:	0214      	lsls	r4, r2, #8
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68b8      	ldr	r0, [r7, #8]
 800539e:	68f9      	ldr	r1, [r7, #12]
 80053a0:	1900      	adds	r0, r0, r4
 80053a2:	4169      	adcs	r1, r5
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f7fb f877 	bl	80004a4 <__aeabi_uldivmod>
 80053b6:	0002      	movs	r2, r0
 80053b8:	000b      	movs	r3, r1
 80053ba:	0013      	movs	r3, r2
 80053bc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c0:	23c0      	movs	r3, #192	; 0xc0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d309      	bcc.n	80053dc <UART_SetConfig+0x2e4>
 80053c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	035b      	lsls	r3, r3, #13
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d204      	bcs.n	80053dc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d8:	60da      	str	r2, [r3, #12]
 80053da:	e0e9      	b.n	80055b0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80053dc:	231a      	movs	r3, #26
 80053de:	2220      	movs	r2, #32
 80053e0:	189b      	adds	r3, r3, r2
 80053e2:	19db      	adds	r3, r3, r7
 80053e4:	2201      	movs	r2, #1
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e0e2      	b.n	80055b0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d000      	beq.n	80053f8 <UART_SetConfig+0x300>
 80053f6:	e083      	b.n	8005500 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80053f8:	231b      	movs	r3, #27
 80053fa:	2220      	movs	r2, #32
 80053fc:	189b      	adds	r3, r3, r2
 80053fe:	19db      	adds	r3, r3, r7
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b08      	cmp	r3, #8
 8005404:	d015      	beq.n	8005432 <UART_SetConfig+0x33a>
 8005406:	dc2b      	bgt.n	8005460 <UART_SetConfig+0x368>
 8005408:	2b04      	cmp	r3, #4
 800540a:	d00d      	beq.n	8005428 <UART_SetConfig+0x330>
 800540c:	dc28      	bgt.n	8005460 <UART_SetConfig+0x368>
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <UART_SetConfig+0x320>
 8005412:	2b02      	cmp	r3, #2
 8005414:	d005      	beq.n	8005422 <UART_SetConfig+0x32a>
 8005416:	e023      	b.n	8005460 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005418:	f7fe feec 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 800541c:	0003      	movs	r3, r0
 800541e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005420:	e027      	b.n	8005472 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <UART_SetConfig+0x360>)
 8005424:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005426:	e024      	b.n	8005472 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005428:	f7fe fe58 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 800542c:	0003      	movs	r3, r0
 800542e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005430:	e01f      	b.n	8005472 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	021b      	lsls	r3, r3, #8
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005438:	e01b      	b.n	8005472 <UART_SetConfig+0x37a>
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	cfff69f3 	.word	0xcfff69f3
 8005440:	ffffcfff 	.word	0xffffcfff
 8005444:	40008000 	.word	0x40008000
 8005448:	11fff4ff 	.word	0x11fff4ff
 800544c:	40013800 	.word	0x40013800
 8005450:	40021000 	.word	0x40021000
 8005454:	40004400 	.word	0x40004400
 8005458:	00f42400 	.word	0x00f42400
 800545c:	0800a428 	.word	0x0800a428
      default:
        pclk = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005464:	231a      	movs	r3, #26
 8005466:	2220      	movs	r2, #32
 8005468:	189b      	adds	r3, r3, r2
 800546a:	19db      	adds	r3, r3, r7
 800546c:	2201      	movs	r2, #1
 800546e:	701a      	strb	r2, [r3, #0]
        break;
 8005470:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005474:	2b00      	cmp	r3, #0
 8005476:	d100      	bne.n	800547a <UART_SetConfig+0x382>
 8005478:	e09a      	b.n	80055b0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800547e:	4b58      	ldr	r3, [pc, #352]	; (80055e0 <UART_SetConfig+0x4e8>)
 8005480:	0052      	lsls	r2, r2, #1
 8005482:	5ad3      	ldrh	r3, [r2, r3]
 8005484:	0019      	movs	r1, r3
 8005486:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005488:	f7fa fe58 	bl	800013c <__udivsi3>
 800548c:	0003      	movs	r3, r0
 800548e:	005a      	lsls	r2, r3, #1
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	18d2      	adds	r2, r2, r3
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	0019      	movs	r1, r3
 800549e:	0010      	movs	r0, r2
 80054a0:	f7fa fe4c 	bl	800013c <__udivsi3>
 80054a4:	0003      	movs	r3, r0
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	2b0f      	cmp	r3, #15
 80054ac:	d921      	bls.n	80054f2 <UART_SetConfig+0x3fa>
 80054ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	025b      	lsls	r3, r3, #9
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d21c      	bcs.n	80054f2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	200e      	movs	r0, #14
 80054be:	2420      	movs	r4, #32
 80054c0:	1903      	adds	r3, r0, r4
 80054c2:	19db      	adds	r3, r3, r7
 80054c4:	210f      	movs	r1, #15
 80054c6:	438a      	bics	r2, r1
 80054c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	085b      	lsrs	r3, r3, #1
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	2207      	movs	r2, #7
 80054d2:	4013      	ands	r3, r2
 80054d4:	b299      	uxth	r1, r3
 80054d6:	1903      	adds	r3, r0, r4
 80054d8:	19db      	adds	r3, r3, r7
 80054da:	1902      	adds	r2, r0, r4
 80054dc:	19d2      	adds	r2, r2, r7
 80054de:	8812      	ldrh	r2, [r2, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1902      	adds	r2, r0, r4
 80054ea:	19d2      	adds	r2, r2, r7
 80054ec:	8812      	ldrh	r2, [r2, #0]
 80054ee:	60da      	str	r2, [r3, #12]
 80054f0:	e05e      	b.n	80055b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80054f2:	231a      	movs	r3, #26
 80054f4:	2220      	movs	r2, #32
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	19db      	adds	r3, r3, r7
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e057      	b.n	80055b0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005500:	231b      	movs	r3, #27
 8005502:	2220      	movs	r2, #32
 8005504:	189b      	adds	r3, r3, r2
 8005506:	19db      	adds	r3, r3, r7
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b08      	cmp	r3, #8
 800550c:	d015      	beq.n	800553a <UART_SetConfig+0x442>
 800550e:	dc18      	bgt.n	8005542 <UART_SetConfig+0x44a>
 8005510:	2b04      	cmp	r3, #4
 8005512:	d00d      	beq.n	8005530 <UART_SetConfig+0x438>
 8005514:	dc15      	bgt.n	8005542 <UART_SetConfig+0x44a>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <UART_SetConfig+0x428>
 800551a:	2b02      	cmp	r3, #2
 800551c:	d005      	beq.n	800552a <UART_SetConfig+0x432>
 800551e:	e010      	b.n	8005542 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005520:	f7fe fe68 	bl	80041f4 <HAL_RCC_GetPCLK1Freq>
 8005524:	0003      	movs	r3, r0
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005528:	e014      	b.n	8005554 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800552a:	4b2e      	ldr	r3, [pc, #184]	; (80055e4 <UART_SetConfig+0x4ec>)
 800552c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800552e:	e011      	b.n	8005554 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005530:	f7fe fdd4 	bl	80040dc <HAL_RCC_GetSysClockFreq>
 8005534:	0003      	movs	r3, r0
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005538:	e00c      	b.n	8005554 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553a:	2380      	movs	r3, #128	; 0x80
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005540:	e008      	b.n	8005554 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005546:	231a      	movs	r3, #26
 8005548:	2220      	movs	r2, #32
 800554a:	189b      	adds	r3, r3, r2
 800554c:	19db      	adds	r3, r3, r7
 800554e:	2201      	movs	r2, #1
 8005550:	701a      	strb	r2, [r3, #0]
        break;
 8005552:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02a      	beq.n	80055b0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800555e:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <UART_SetConfig+0x4e8>)
 8005560:	0052      	lsls	r2, r2, #1
 8005562:	5ad3      	ldrh	r3, [r2, r3]
 8005564:	0019      	movs	r1, r3
 8005566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005568:	f7fa fde8 	bl	800013c <__udivsi3>
 800556c:	0003      	movs	r3, r0
 800556e:	001a      	movs	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	18d2      	adds	r2, r2, r3
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	0019      	movs	r1, r3
 800557e:	0010      	movs	r0, r2
 8005580:	f7fa fddc 	bl	800013c <__udivsi3>
 8005584:	0003      	movs	r3, r0
 8005586:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	2b0f      	cmp	r3, #15
 800558c:	d90a      	bls.n	80055a4 <UART_SetConfig+0x4ac>
 800558e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	025b      	lsls	r3, r3, #9
 8005594:	429a      	cmp	r2, r3
 8005596:	d205      	bcs.n	80055a4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	b29a      	uxth	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60da      	str	r2, [r3, #12]
 80055a2:	e005      	b.n	80055b0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80055a4:	231a      	movs	r3, #26
 80055a6:	2220      	movs	r2, #32
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	226a      	movs	r2, #106	; 0x6a
 80055b4:	2101      	movs	r1, #1
 80055b6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	2268      	movs	r2, #104	; 0x68
 80055bc:	2101      	movs	r1, #1
 80055be:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	2200      	movs	r2, #0
 80055c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	2200      	movs	r2, #0
 80055ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80055cc:	231a      	movs	r3, #26
 80055ce:	2220      	movs	r2, #32
 80055d0:	189b      	adds	r3, r3, r2
 80055d2:	19db      	adds	r3, r3, r7
 80055d4:	781b      	ldrb	r3, [r3, #0]
}
 80055d6:	0018      	movs	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	b010      	add	sp, #64	; 0x40
 80055dc:	bdb0      	pop	{r4, r5, r7, pc}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	0800a428 	.word	0x0800a428
 80055e4:	00f42400 	.word	0x00f42400

080055e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	d00b      	beq.n	8005612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4a4a      	ldr	r2, [pc, #296]	; (800572c <UART_AdvFeatureConfig+0x144>)
 8005602:	4013      	ands	r3, r2
 8005604:	0019      	movs	r1, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	2202      	movs	r2, #2
 8005618:	4013      	ands	r3, r2
 800561a:	d00b      	beq.n	8005634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4a43      	ldr	r2, [pc, #268]	; (8005730 <UART_AdvFeatureConfig+0x148>)
 8005624:	4013      	ands	r3, r2
 8005626:	0019      	movs	r1, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	2204      	movs	r2, #4
 800563a:	4013      	ands	r3, r2
 800563c:	d00b      	beq.n	8005656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4a3b      	ldr	r2, [pc, #236]	; (8005734 <UART_AdvFeatureConfig+0x14c>)
 8005646:	4013      	ands	r3, r2
 8005648:	0019      	movs	r1, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	2208      	movs	r2, #8
 800565c:	4013      	ands	r3, r2
 800565e:	d00b      	beq.n	8005678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4a34      	ldr	r2, [pc, #208]	; (8005738 <UART_AdvFeatureConfig+0x150>)
 8005668:	4013      	ands	r3, r2
 800566a:	0019      	movs	r1, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	2210      	movs	r2, #16
 800567e:	4013      	ands	r3, r2
 8005680:	d00b      	beq.n	800569a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a2c      	ldr	r2, [pc, #176]	; (800573c <UART_AdvFeatureConfig+0x154>)
 800568a:	4013      	ands	r3, r2
 800568c:	0019      	movs	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	2220      	movs	r2, #32
 80056a0:	4013      	ands	r3, r2
 80056a2:	d00b      	beq.n	80056bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	4a25      	ldr	r2, [pc, #148]	; (8005740 <UART_AdvFeatureConfig+0x158>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	0019      	movs	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	4013      	ands	r3, r2
 80056c4:	d01d      	beq.n	8005702 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	4a1d      	ldr	r2, [pc, #116]	; (8005744 <UART_AdvFeatureConfig+0x15c>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	0019      	movs	r1, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	035b      	lsls	r3, r3, #13
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d10b      	bne.n	8005702 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a15      	ldr	r2, [pc, #84]	; (8005748 <UART_AdvFeatureConfig+0x160>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	0019      	movs	r1, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	4013      	ands	r3, r2
 800570a:	d00b      	beq.n	8005724 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4a0e      	ldr	r2, [pc, #56]	; (800574c <UART_AdvFeatureConfig+0x164>)
 8005714:	4013      	ands	r3, r2
 8005716:	0019      	movs	r1, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }
}
 8005724:	46c0      	nop			; (mov r8, r8)
 8005726:	46bd      	mov	sp, r7
 8005728:	b002      	add	sp, #8
 800572a:	bd80      	pop	{r7, pc}
 800572c:	fffdffff 	.word	0xfffdffff
 8005730:	fffeffff 	.word	0xfffeffff
 8005734:	fffbffff 	.word	0xfffbffff
 8005738:	ffff7fff 	.word	0xffff7fff
 800573c:	ffffefff 	.word	0xffffefff
 8005740:	ffffdfff 	.word	0xffffdfff
 8005744:	ffefffff 	.word	0xffefffff
 8005748:	ff9fffff 	.word	0xff9fffff
 800574c:	fff7ffff 	.word	0xfff7ffff

08005750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2290      	movs	r2, #144	; 0x90
 800575c:	2100      	movs	r1, #0
 800575e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005760:	f7fd fd5e 	bl	8003220 <HAL_GetTick>
 8005764:	0003      	movs	r3, r0
 8005766:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2208      	movs	r2, #8
 8005770:	4013      	ands	r3, r2
 8005772:	2b08      	cmp	r3, #8
 8005774:	d10c      	bne.n	8005790 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2280      	movs	r2, #128	; 0x80
 800577a:	0391      	lsls	r1, r2, #14
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	4a1a      	ldr	r2, [pc, #104]	; (80057e8 <UART_CheckIdleState+0x98>)
 8005780:	9200      	str	r2, [sp, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	f000 f832 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 8005788:	1e03      	subs	r3, r0, #0
 800578a:	d001      	beq.n	8005790 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e026      	b.n	80057de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2204      	movs	r2, #4
 8005798:	4013      	ands	r3, r2
 800579a:	2b04      	cmp	r3, #4
 800579c:	d10c      	bne.n	80057b8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	03d1      	lsls	r1, r2, #15
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <UART_CheckIdleState+0x98>)
 80057a8:	9200      	str	r2, [sp, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f000 f81e 	bl	80057ec <UART_WaitOnFlagUntilTimeout>
 80057b0:	1e03      	subs	r3, r0, #0
 80057b2:	d001      	beq.n	80057b8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e012      	b.n	80057de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2288      	movs	r2, #136	; 0x88
 80057bc:	2120      	movs	r1, #32
 80057be:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	228c      	movs	r2, #140	; 0x8c
 80057c4:	2120      	movs	r1, #32
 80057c6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2284      	movs	r2, #132	; 0x84
 80057d8:	2100      	movs	r1, #0
 80057da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	0018      	movs	r0, r3
 80057e0:	46bd      	mov	sp, r7
 80057e2:	b004      	add	sp, #16
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	01ffffff 	.word	0x01ffffff

080057ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b094      	sub	sp, #80	; 0x50
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	1dfb      	adds	r3, r7, #7
 80057fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fc:	e0a7      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005800:	3301      	adds	r3, #1
 8005802:	d100      	bne.n	8005806 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005804:	e0a3      	b.n	800594e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005806:	f7fd fd0b 	bl	8003220 <HAL_GetTick>
 800580a:	0002      	movs	r2, r0
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005812:	429a      	cmp	r2, r3
 8005814:	d302      	bcc.n	800581c <UART_WaitOnFlagUntilTimeout+0x30>
 8005816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005818:	2b00      	cmp	r3, #0
 800581a:	d13f      	bne.n	800589c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800581c:	f3ef 8310 	mrs	r3, PRIMASK
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005824:	647b      	str	r3, [r7, #68]	; 0x44
 8005826:	2301      	movs	r3, #1
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	f383 8810 	msr	PRIMASK, r3
}
 8005830:	46c0      	nop			; (mov r8, r8)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	494e      	ldr	r1, [pc, #312]	; (8005978 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800583e:	400a      	ands	r2, r1
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005844:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	f383 8810 	msr	PRIMASK, r3
}
 800584c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800584e:	f3ef 8310 	mrs	r3, PRIMASK
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005856:	643b      	str	r3, [r7, #64]	; 0x40
 8005858:	2301      	movs	r3, #1
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689a      	ldr	r2, [r3, #8]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2101      	movs	r1, #1
 8005870:	438a      	bics	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587a:	f383 8810 	msr	PRIMASK, r3
}
 800587e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2288      	movs	r2, #136	; 0x88
 8005884:	2120      	movs	r1, #32
 8005886:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	228c      	movs	r2, #140	; 0x8c
 800588c:	2120      	movs	r1, #32
 800588e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2284      	movs	r2, #132	; 0x84
 8005894:	2100      	movs	r1, #0
 8005896:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e069      	b.n	8005970 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2204      	movs	r2, #4
 80058a4:	4013      	ands	r3, r2
 80058a6:	d052      	beq.n	800594e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69da      	ldr	r2, [r3, #28]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	401a      	ands	r2, r3
 80058b4:	2380      	movs	r3, #128	; 0x80
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d148      	bne.n	800594e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2280      	movs	r2, #128	; 0x80
 80058c2:	0112      	lsls	r2, r2, #4
 80058c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058c6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ca:	613b      	str	r3, [r7, #16]
  return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d0:	2301      	movs	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f383 8810 	msr	PRIMASK, r3
}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4924      	ldr	r1, [pc, #144]	; (8005978 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80058e8:	400a      	ands	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	f383 8810 	msr	PRIMASK, r3
}
 80058f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f8:	f3ef 8310 	mrs	r3, PRIMASK
 80058fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80058fe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005900:	64bb      	str	r3, [r7, #72]	; 0x48
 8005902:	2301      	movs	r3, #1
 8005904:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f383 8810 	msr	PRIMASK, r3
}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2101      	movs	r1, #1
 800591a:	438a      	bics	r2, r1
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	f383 8810 	msr	PRIMASK, r3
}
 8005928:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2288      	movs	r2, #136	; 0x88
 800592e:	2120      	movs	r1, #32
 8005930:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	228c      	movs	r2, #140	; 0x8c
 8005936:	2120      	movs	r1, #32
 8005938:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2290      	movs	r2, #144	; 0x90
 800593e:	2120      	movs	r1, #32
 8005940:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2284      	movs	r2, #132	; 0x84
 8005946:	2100      	movs	r1, #0
 8005948:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e010      	b.n	8005970 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	425a      	negs	r2, r3
 800595e:	4153      	adcs	r3, r2
 8005960:	b2db      	uxtb	r3, r3
 8005962:	001a      	movs	r2, r3
 8005964:	1dfb      	adds	r3, r7, #7
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d100      	bne.n	800596e <UART_WaitOnFlagUntilTimeout+0x182>
 800596c:	e747      	b.n	80057fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	0018      	movs	r0, r3
 8005972:	46bd      	mov	sp, r7
 8005974:	b014      	add	sp, #80	; 0x50
 8005976:	bd80      	pop	{r7, pc}
 8005978:	fffffe5f 	.word	0xfffffe5f

0800597c <sulp>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	0016      	movs	r6, r2
 8005980:	000d      	movs	r5, r1
 8005982:	f003 fd2d 	bl	80093e0 <__ulp>
 8005986:	2e00      	cmp	r6, #0
 8005988:	d00d      	beq.n	80059a6 <sulp+0x2a>
 800598a:	236b      	movs	r3, #107	; 0x6b
 800598c:	006a      	lsls	r2, r5, #1
 800598e:	0d52      	lsrs	r2, r2, #21
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	dd07      	ble.n	80059a6 <sulp+0x2a>
 8005996:	2400      	movs	r4, #0
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <sulp+0x2c>)
 800599a:	051b      	lsls	r3, r3, #20
 800599c:	189d      	adds	r5, r3, r2
 800599e:	002b      	movs	r3, r5
 80059a0:	0022      	movs	r2, r4
 80059a2:	f7fb fe35 	bl	8001610 <__aeabi_dmul>
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
 80059a8:	3ff00000 	.word	0x3ff00000

080059ac <_strtod_l>:
 80059ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ae:	b0a1      	sub	sp, #132	; 0x84
 80059b0:	9219      	str	r2, [sp, #100]	; 0x64
 80059b2:	2200      	movs	r2, #0
 80059b4:	2600      	movs	r6, #0
 80059b6:	2700      	movs	r7, #0
 80059b8:	9004      	str	r0, [sp, #16]
 80059ba:	9107      	str	r1, [sp, #28]
 80059bc:	921c      	str	r2, [sp, #112]	; 0x70
 80059be:	911b      	str	r1, [sp, #108]	; 0x6c
 80059c0:	780a      	ldrb	r2, [r1, #0]
 80059c2:	2a2b      	cmp	r2, #43	; 0x2b
 80059c4:	d055      	beq.n	8005a72 <_strtod_l+0xc6>
 80059c6:	d841      	bhi.n	8005a4c <_strtod_l+0xa0>
 80059c8:	2a0d      	cmp	r2, #13
 80059ca:	d83b      	bhi.n	8005a44 <_strtod_l+0x98>
 80059cc:	2a08      	cmp	r2, #8
 80059ce:	d83b      	bhi.n	8005a48 <_strtod_l+0x9c>
 80059d0:	2a00      	cmp	r2, #0
 80059d2:	d044      	beq.n	8005a5e <_strtod_l+0xb2>
 80059d4:	2200      	movs	r2, #0
 80059d6:	920f      	str	r2, [sp, #60]	; 0x3c
 80059d8:	2100      	movs	r1, #0
 80059da:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80059dc:	9109      	str	r1, [sp, #36]	; 0x24
 80059de:	782a      	ldrb	r2, [r5, #0]
 80059e0:	2a30      	cmp	r2, #48	; 0x30
 80059e2:	d000      	beq.n	80059e6 <_strtod_l+0x3a>
 80059e4:	e085      	b.n	8005af2 <_strtod_l+0x146>
 80059e6:	786a      	ldrb	r2, [r5, #1]
 80059e8:	3120      	adds	r1, #32
 80059ea:	438a      	bics	r2, r1
 80059ec:	2a58      	cmp	r2, #88	; 0x58
 80059ee:	d000      	beq.n	80059f2 <_strtod_l+0x46>
 80059f0:	e075      	b.n	8005ade <_strtod_l+0x132>
 80059f2:	9302      	str	r3, [sp, #8]
 80059f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059f6:	4a97      	ldr	r2, [pc, #604]	; (8005c54 <_strtod_l+0x2a8>)
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	ab1c      	add	r3, sp, #112	; 0x70
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	9804      	ldr	r0, [sp, #16]
 8005a00:	ab1d      	add	r3, sp, #116	; 0x74
 8005a02:	a91b      	add	r1, sp, #108	; 0x6c
 8005a04:	f002 fda4 	bl	8008550 <__gethex>
 8005a08:	230f      	movs	r3, #15
 8005a0a:	0002      	movs	r2, r0
 8005a0c:	401a      	ands	r2, r3
 8005a0e:	0004      	movs	r4, r0
 8005a10:	9205      	str	r2, [sp, #20]
 8005a12:	4218      	tst	r0, r3
 8005a14:	d005      	beq.n	8005a22 <_strtod_l+0x76>
 8005a16:	2a06      	cmp	r2, #6
 8005a18:	d12d      	bne.n	8005a76 <_strtod_l+0xca>
 8005a1a:	1c6b      	adds	r3, r5, #1
 8005a1c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a1e:	2300      	movs	r3, #0
 8005a20:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a22:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <_strtod_l+0x82>
 8005a28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01b      	beq.n	8005a6c <_strtod_l+0xc0>
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	0032      	movs	r2, r6
 8005a38:	061b      	lsls	r3, r3, #24
 8005a3a:	18fb      	adds	r3, r7, r3
 8005a3c:	0010      	movs	r0, r2
 8005a3e:	0019      	movs	r1, r3
 8005a40:	b021      	add	sp, #132	; 0x84
 8005a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a44:	2a20      	cmp	r2, #32
 8005a46:	d1c5      	bne.n	80059d4 <_strtod_l+0x28>
 8005a48:	3101      	adds	r1, #1
 8005a4a:	e7b8      	b.n	80059be <_strtod_l+0x12>
 8005a4c:	2a2d      	cmp	r2, #45	; 0x2d
 8005a4e:	d1c1      	bne.n	80059d4 <_strtod_l+0x28>
 8005a50:	3a2c      	subs	r2, #44	; 0x2c
 8005a52:	920f      	str	r2, [sp, #60]	; 0x3c
 8005a54:	1c4a      	adds	r2, r1, #1
 8005a56:	921b      	str	r2, [sp, #108]	; 0x6c
 8005a58:	784a      	ldrb	r2, [r1, #1]
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d1bc      	bne.n	80059d8 <_strtod_l+0x2c>
 8005a5e:	9b07      	ldr	r3, [sp, #28]
 8005a60:	931b      	str	r3, [sp, #108]	; 0x6c
 8005a62:	2300      	movs	r3, #0
 8005a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1dd      	bne.n	8005a28 <_strtod_l+0x7c>
 8005a6c:	0032      	movs	r2, r6
 8005a6e:	003b      	movs	r3, r7
 8005a70:	e7e4      	b.n	8005a3c <_strtod_l+0x90>
 8005a72:	2200      	movs	r2, #0
 8005a74:	e7ed      	b.n	8005a52 <_strtod_l+0xa6>
 8005a76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d007      	beq.n	8005a8c <_strtod_l+0xe0>
 8005a7c:	2135      	movs	r1, #53	; 0x35
 8005a7e:	a81e      	add	r0, sp, #120	; 0x78
 8005a80:	f003 fd9f 	bl	80095c2 <__copybits>
 8005a84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a86:	9804      	ldr	r0, [sp, #16]
 8005a88:	f003 f968 	bl	8008d5c <_Bfree>
 8005a8c:	9805      	ldr	r0, [sp, #20]
 8005a8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005a90:	3801      	subs	r0, #1
 8005a92:	2804      	cmp	r0, #4
 8005a94:	d806      	bhi.n	8005aa4 <_strtod_l+0xf8>
 8005a96:	f7fa fb3d 	bl	8000114 <__gnu_thumb1_case_uqi>
 8005a9a:	0312      	.short	0x0312
 8005a9c:	1e1c      	.short	0x1e1c
 8005a9e:	12          	.byte	0x12
 8005a9f:	00          	.byte	0x00
 8005aa0:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8005aa2:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8005aa4:	05e4      	lsls	r4, r4, #23
 8005aa6:	d502      	bpl.n	8005aae <_strtod_l+0x102>
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	061b      	lsls	r3, r3, #24
 8005aac:	431f      	orrs	r7, r3
 8005aae:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <_strtod_l+0x2ac>)
 8005ab0:	423b      	tst	r3, r7
 8005ab2:	d1b6      	bne.n	8005a22 <_strtod_l+0x76>
 8005ab4:	f001 fdae 	bl	8007614 <__errno>
 8005ab8:	2322      	movs	r3, #34	; 0x22
 8005aba:	6003      	str	r3, [r0, #0]
 8005abc:	e7b1      	b.n	8005a22 <_strtod_l+0x76>
 8005abe:	4967      	ldr	r1, [pc, #412]	; (8005c5c <_strtod_l+0x2b0>)
 8005ac0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005ac2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8005ac4:	400a      	ands	r2, r1
 8005ac6:	4966      	ldr	r1, [pc, #408]	; (8005c60 <_strtod_l+0x2b4>)
 8005ac8:	185b      	adds	r3, r3, r1
 8005aca:	051b      	lsls	r3, r3, #20
 8005acc:	431a      	orrs	r2, r3
 8005ace:	0017      	movs	r7, r2
 8005ad0:	e7e8      	b.n	8005aa4 <_strtod_l+0xf8>
 8005ad2:	4f61      	ldr	r7, [pc, #388]	; (8005c58 <_strtod_l+0x2ac>)
 8005ad4:	e7e6      	b.n	8005aa4 <_strtod_l+0xf8>
 8005ad6:	2601      	movs	r6, #1
 8005ad8:	4f62      	ldr	r7, [pc, #392]	; (8005c64 <_strtod_l+0x2b8>)
 8005ada:	4276      	negs	r6, r6
 8005adc:	e7e2      	b.n	8005aa4 <_strtod_l+0xf8>
 8005ade:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b30      	cmp	r3, #48	; 0x30
 8005ae8:	d0f9      	beq.n	8005ade <_strtod_l+0x132>
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d099      	beq.n	8005a22 <_strtod_l+0x76>
 8005aee:	2301      	movs	r3, #1
 8005af0:	9309      	str	r3, [sp, #36]	; 0x24
 8005af2:	2500      	movs	r5, #0
 8005af4:	220a      	movs	r2, #10
 8005af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005af8:	950d      	str	r5, [sp, #52]	; 0x34
 8005afa:	9310      	str	r3, [sp, #64]	; 0x40
 8005afc:	9508      	str	r5, [sp, #32]
 8005afe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005b00:	7804      	ldrb	r4, [r0, #0]
 8005b02:	0023      	movs	r3, r4
 8005b04:	3b30      	subs	r3, #48	; 0x30
 8005b06:	b2d9      	uxtb	r1, r3
 8005b08:	2909      	cmp	r1, #9
 8005b0a:	d927      	bls.n	8005b5c <_strtod_l+0x1b0>
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4956      	ldr	r1, [pc, #344]	; (8005c68 <_strtod_l+0x2bc>)
 8005b10:	f001 fd1c 	bl	800754c <strncmp>
 8005b14:	2800      	cmp	r0, #0
 8005b16:	d031      	beq.n	8005b7c <_strtod_l+0x1d0>
 8005b18:	2000      	movs	r0, #0
 8005b1a:	0023      	movs	r3, r4
 8005b1c:	4684      	mov	ip, r0
 8005b1e:	9a08      	ldr	r2, [sp, #32]
 8005b20:	900c      	str	r0, [sp, #48]	; 0x30
 8005b22:	9205      	str	r2, [sp, #20]
 8005b24:	2220      	movs	r2, #32
 8005b26:	0019      	movs	r1, r3
 8005b28:	4391      	bics	r1, r2
 8005b2a:	000a      	movs	r2, r1
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	9106      	str	r1, [sp, #24]
 8005b30:	2a45      	cmp	r2, #69	; 0x45
 8005b32:	d000      	beq.n	8005b36 <_strtod_l+0x18a>
 8005b34:	e0c2      	b.n	8005cbc <_strtod_l+0x310>
 8005b36:	9b05      	ldr	r3, [sp, #20]
 8005b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b3a:	4303      	orrs	r3, r0
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	428b      	cmp	r3, r1
 8005b40:	d08d      	beq.n	8005a5e <_strtod_l+0xb2>
 8005b42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b44:	9307      	str	r3, [sp, #28]
 8005b46:	3301      	adds	r3, #1
 8005b48:	931b      	str	r3, [sp, #108]	; 0x6c
 8005b4a:	9b07      	ldr	r3, [sp, #28]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b2b      	cmp	r3, #43	; 0x2b
 8005b50:	d071      	beq.n	8005c36 <_strtod_l+0x28a>
 8005b52:	000c      	movs	r4, r1
 8005b54:	2b2d      	cmp	r3, #45	; 0x2d
 8005b56:	d174      	bne.n	8005c42 <_strtod_l+0x296>
 8005b58:	2401      	movs	r4, #1
 8005b5a:	e06d      	b.n	8005c38 <_strtod_l+0x28c>
 8005b5c:	9908      	ldr	r1, [sp, #32]
 8005b5e:	2908      	cmp	r1, #8
 8005b60:	dc09      	bgt.n	8005b76 <_strtod_l+0x1ca>
 8005b62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b64:	4351      	muls	r1, r2
 8005b66:	185b      	adds	r3, r3, r1
 8005b68:	930d      	str	r3, [sp, #52]	; 0x34
 8005b6a:	9b08      	ldr	r3, [sp, #32]
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	3301      	adds	r3, #1
 8005b70:	9308      	str	r3, [sp, #32]
 8005b72:	901b      	str	r0, [sp, #108]	; 0x6c
 8005b74:	e7c3      	b.n	8005afe <_strtod_l+0x152>
 8005b76:	4355      	muls	r5, r2
 8005b78:	195d      	adds	r5, r3, r5
 8005b7a:	e7f6      	b.n	8005b6a <_strtod_l+0x1be>
 8005b7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	921b      	str	r2, [sp, #108]	; 0x6c
 8005b82:	9a08      	ldr	r2, [sp, #32]
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	d03a      	beq.n	8005c00 <_strtod_l+0x254>
 8005b8a:	900c      	str	r0, [sp, #48]	; 0x30
 8005b8c:	9205      	str	r2, [sp, #20]
 8005b8e:	001a      	movs	r2, r3
 8005b90:	3a30      	subs	r2, #48	; 0x30
 8005b92:	2a09      	cmp	r2, #9
 8005b94:	d912      	bls.n	8005bbc <_strtod_l+0x210>
 8005b96:	2201      	movs	r2, #1
 8005b98:	4694      	mov	ip, r2
 8005b9a:	e7c3      	b.n	8005b24 <_strtod_l+0x178>
 8005b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	921b      	str	r2, [sp, #108]	; 0x6c
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	2b30      	cmp	r3, #48	; 0x30
 8005ba8:	d0f8      	beq.n	8005b9c <_strtod_l+0x1f0>
 8005baa:	001a      	movs	r2, r3
 8005bac:	3a31      	subs	r2, #49	; 0x31
 8005bae:	2a08      	cmp	r2, #8
 8005bb0:	d83c      	bhi.n	8005c2c <_strtod_l+0x280>
 8005bb2:	900c      	str	r0, [sp, #48]	; 0x30
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005bb8:	9005      	str	r0, [sp, #20]
 8005bba:	9210      	str	r2, [sp, #64]	; 0x40
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	1c41      	adds	r1, r0, #1
 8005bc0:	3a30      	subs	r2, #48	; 0x30
 8005bc2:	2b30      	cmp	r3, #48	; 0x30
 8005bc4:	d016      	beq.n	8005bf4 <_strtod_l+0x248>
 8005bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005bc8:	185b      	adds	r3, r3, r1
 8005bca:	930c      	str	r3, [sp, #48]	; 0x30
 8005bcc:	9b05      	ldr	r3, [sp, #20]
 8005bce:	210a      	movs	r1, #10
 8005bd0:	469c      	mov	ip, r3
 8005bd2:	4484      	add	ip, r0
 8005bd4:	4563      	cmp	r3, ip
 8005bd6:	d115      	bne.n	8005c04 <_strtod_l+0x258>
 8005bd8:	9905      	ldr	r1, [sp, #20]
 8005bda:	9b05      	ldr	r3, [sp, #20]
 8005bdc:	3101      	adds	r1, #1
 8005bde:	1809      	adds	r1, r1, r0
 8005be0:	181b      	adds	r3, r3, r0
 8005be2:	9105      	str	r1, [sp, #20]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	dc19      	bgt.n	8005c1c <_strtod_l+0x270>
 8005be8:	230a      	movs	r3, #10
 8005bea:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005bec:	434b      	muls	r3, r1
 8005bee:	2100      	movs	r1, #0
 8005bf0:	18d3      	adds	r3, r2, r3
 8005bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8005bf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bf6:	0008      	movs	r0, r1
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	e7c6      	b.n	8005b8e <_strtod_l+0x1e2>
 8005c00:	9808      	ldr	r0, [sp, #32]
 8005c02:	e7d0      	b.n	8005ba6 <_strtod_l+0x1fa>
 8005c04:	1c5c      	adds	r4, r3, #1
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	dc04      	bgt.n	8005c14 <_strtod_l+0x268>
 8005c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0c:	434b      	muls	r3, r1
 8005c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005c10:	0023      	movs	r3, r4
 8005c12:	e7df      	b.n	8005bd4 <_strtod_l+0x228>
 8005c14:	2c10      	cmp	r4, #16
 8005c16:	dcfb      	bgt.n	8005c10 <_strtod_l+0x264>
 8005c18:	434d      	muls	r5, r1
 8005c1a:	e7f9      	b.n	8005c10 <_strtod_l+0x264>
 8005c1c:	9b05      	ldr	r3, [sp, #20]
 8005c1e:	2100      	movs	r1, #0
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	dce7      	bgt.n	8005bf4 <_strtod_l+0x248>
 8005c24:	230a      	movs	r3, #10
 8005c26:	435d      	muls	r5, r3
 8005c28:	1955      	adds	r5, r2, r5
 8005c2a:	e7e3      	b.n	8005bf4 <_strtod_l+0x248>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	920c      	str	r2, [sp, #48]	; 0x30
 8005c30:	9205      	str	r2, [sp, #20]
 8005c32:	3201      	adds	r2, #1
 8005c34:	e7b0      	b.n	8005b98 <_strtod_l+0x1ec>
 8005c36:	2400      	movs	r4, #0
 8005c38:	9b07      	ldr	r3, [sp, #28]
 8005c3a:	3302      	adds	r3, #2
 8005c3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005c3e:	9b07      	ldr	r3, [sp, #28]
 8005c40:	789b      	ldrb	r3, [r3, #2]
 8005c42:	001a      	movs	r2, r3
 8005c44:	3a30      	subs	r2, #48	; 0x30
 8005c46:	2a09      	cmp	r2, #9
 8005c48:	d914      	bls.n	8005c74 <_strtod_l+0x2c8>
 8005c4a:	9a07      	ldr	r2, [sp, #28]
 8005c4c:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c4e:	2200      	movs	r2, #0
 8005c50:	e033      	b.n	8005cba <_strtod_l+0x30e>
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	0800a444 	.word	0x0800a444
 8005c58:	7ff00000 	.word	0x7ff00000
 8005c5c:	ffefffff 	.word	0xffefffff
 8005c60:	00000433 	.word	0x00000433
 8005c64:	7fffffff 	.word	0x7fffffff
 8005c68:	0800a440 	.word	0x0800a440
 8005c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	921b      	str	r2, [sp, #108]	; 0x6c
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b30      	cmp	r3, #48	; 0x30
 8005c76:	d0f9      	beq.n	8005c6c <_strtod_l+0x2c0>
 8005c78:	2200      	movs	r2, #0
 8005c7a:	9206      	str	r2, [sp, #24]
 8005c7c:	001a      	movs	r2, r3
 8005c7e:	3a31      	subs	r2, #49	; 0x31
 8005c80:	2a08      	cmp	r2, #8
 8005c82:	d81b      	bhi.n	8005cbc <_strtod_l+0x310>
 8005c84:	3b30      	subs	r3, #48	; 0x30
 8005c86:	930e      	str	r3, [sp, #56]	; 0x38
 8005c88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c8a:	9306      	str	r3, [sp, #24]
 8005c8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	911b      	str	r1, [sp, #108]	; 0x6c
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	001a      	movs	r2, r3
 8005c96:	3a30      	subs	r2, #48	; 0x30
 8005c98:	2a09      	cmp	r2, #9
 8005c9a:	d93a      	bls.n	8005d12 <_strtod_l+0x366>
 8005c9c:	9a06      	ldr	r2, [sp, #24]
 8005c9e:	1a8a      	subs	r2, r1, r2
 8005ca0:	49b2      	ldr	r1, [pc, #712]	; (8005f6c <_strtod_l+0x5c0>)
 8005ca2:	9106      	str	r1, [sp, #24]
 8005ca4:	2a08      	cmp	r2, #8
 8005ca6:	dc04      	bgt.n	8005cb2 <_strtod_l+0x306>
 8005ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005caa:	9206      	str	r2, [sp, #24]
 8005cac:	428a      	cmp	r2, r1
 8005cae:	dd00      	ble.n	8005cb2 <_strtod_l+0x306>
 8005cb0:	9106      	str	r1, [sp, #24]
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	d002      	beq.n	8005cbc <_strtod_l+0x310>
 8005cb6:	9a06      	ldr	r2, [sp, #24]
 8005cb8:	4252      	negs	r2, r2
 8005cba:	9206      	str	r2, [sp, #24]
 8005cbc:	9a05      	ldr	r2, [sp, #20]
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	d14d      	bne.n	8005d5e <_strtod_l+0x3b2>
 8005cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cc4:	4310      	orrs	r0, r2
 8005cc6:	d000      	beq.n	8005cca <_strtod_l+0x31e>
 8005cc8:	e6ab      	b.n	8005a22 <_strtod_l+0x76>
 8005cca:	4662      	mov	r2, ip
 8005ccc:	2a00      	cmp	r2, #0
 8005cce:	d000      	beq.n	8005cd2 <_strtod_l+0x326>
 8005cd0:	e6c5      	b.n	8005a5e <_strtod_l+0xb2>
 8005cd2:	2b69      	cmp	r3, #105	; 0x69
 8005cd4:	d027      	beq.n	8005d26 <_strtod_l+0x37a>
 8005cd6:	dc23      	bgt.n	8005d20 <_strtod_l+0x374>
 8005cd8:	2b49      	cmp	r3, #73	; 0x49
 8005cda:	d024      	beq.n	8005d26 <_strtod_l+0x37a>
 8005cdc:	2b4e      	cmp	r3, #78	; 0x4e
 8005cde:	d000      	beq.n	8005ce2 <_strtod_l+0x336>
 8005ce0:	e6bd      	b.n	8005a5e <_strtod_l+0xb2>
 8005ce2:	49a3      	ldr	r1, [pc, #652]	; (8005f70 <_strtod_l+0x5c4>)
 8005ce4:	a81b      	add	r0, sp, #108	; 0x6c
 8005ce6:	f002 fe69 	bl	80089bc <__match>
 8005cea:	2800      	cmp	r0, #0
 8005cec:	d100      	bne.n	8005cf0 <_strtod_l+0x344>
 8005cee:	e6b6      	b.n	8005a5e <_strtod_l+0xb2>
 8005cf0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b28      	cmp	r3, #40	; 0x28
 8005cf6:	d12c      	bne.n	8005d52 <_strtod_l+0x3a6>
 8005cf8:	499e      	ldr	r1, [pc, #632]	; (8005f74 <_strtod_l+0x5c8>)
 8005cfa:	aa1e      	add	r2, sp, #120	; 0x78
 8005cfc:	a81b      	add	r0, sp, #108	; 0x6c
 8005cfe:	f002 fe71 	bl	80089e4 <__hexnan>
 8005d02:	2805      	cmp	r0, #5
 8005d04:	d125      	bne.n	8005d52 <_strtod_l+0x3a6>
 8005d06:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005d08:	4a9b      	ldr	r2, [pc, #620]	; (8005f78 <_strtod_l+0x5cc>)
 8005d0a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	0017      	movs	r7, r2
 8005d10:	e687      	b.n	8005a22 <_strtod_l+0x76>
 8005d12:	220a      	movs	r2, #10
 8005d14:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005d16:	434a      	muls	r2, r1
 8005d18:	18d2      	adds	r2, r2, r3
 8005d1a:	3a30      	subs	r2, #48	; 0x30
 8005d1c:	920e      	str	r2, [sp, #56]	; 0x38
 8005d1e:	e7b5      	b.n	8005c8c <_strtod_l+0x2e0>
 8005d20:	2b6e      	cmp	r3, #110	; 0x6e
 8005d22:	d0de      	beq.n	8005ce2 <_strtod_l+0x336>
 8005d24:	e69b      	b.n	8005a5e <_strtod_l+0xb2>
 8005d26:	4995      	ldr	r1, [pc, #596]	; (8005f7c <_strtod_l+0x5d0>)
 8005d28:	a81b      	add	r0, sp, #108	; 0x6c
 8005d2a:	f002 fe47 	bl	80089bc <__match>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d100      	bne.n	8005d34 <_strtod_l+0x388>
 8005d32:	e694      	b.n	8005a5e <_strtod_l+0xb2>
 8005d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d36:	4992      	ldr	r1, [pc, #584]	; (8005f80 <_strtod_l+0x5d4>)
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	a81b      	add	r0, sp, #108	; 0x6c
 8005d3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d3e:	f002 fe3d 	bl	80089bc <__match>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d102      	bne.n	8005d4c <_strtod_l+0x3a0>
 8005d46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d48:	3301      	adds	r3, #1
 8005d4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	4f8a      	ldr	r7, [pc, #552]	; (8005f78 <_strtod_l+0x5cc>)
 8005d50:	e667      	b.n	8005a22 <_strtod_l+0x76>
 8005d52:	488c      	ldr	r0, [pc, #560]	; (8005f84 <_strtod_l+0x5d8>)
 8005d54:	f001 fca0 	bl	8007698 <nan>
 8005d58:	0006      	movs	r6, r0
 8005d5a:	000f      	movs	r7, r1
 8005d5c:	e661      	b.n	8005a22 <_strtod_l+0x76>
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	9309      	str	r3, [sp, #36]	; 0x24
 8005d66:	9b08      	ldr	r3, [sp, #32]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <_strtod_l+0x3c4>
 8005d6c:	9b05      	ldr	r3, [sp, #20]
 8005d6e:	9308      	str	r3, [sp, #32]
 8005d70:	9c05      	ldr	r4, [sp, #20]
 8005d72:	2c10      	cmp	r4, #16
 8005d74:	dd00      	ble.n	8005d78 <_strtod_l+0x3cc>
 8005d76:	2410      	movs	r4, #16
 8005d78:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005d7a:	f7fc fb11 	bl	80023a0 <__aeabi_ui2d>
 8005d7e:	9b05      	ldr	r3, [sp, #20]
 8005d80:	0006      	movs	r6, r0
 8005d82:	000f      	movs	r7, r1
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	dd15      	ble.n	8005db4 <_strtod_l+0x408>
 8005d88:	0022      	movs	r2, r4
 8005d8a:	4b7f      	ldr	r3, [pc, #508]	; (8005f88 <_strtod_l+0x5dc>)
 8005d8c:	3a09      	subs	r2, #9
 8005d8e:	00d2      	lsls	r2, r2, #3
 8005d90:	189b      	adds	r3, r3, r2
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f7fb fc3b 	bl	8001610 <__aeabi_dmul>
 8005d9a:	0006      	movs	r6, r0
 8005d9c:	0028      	movs	r0, r5
 8005d9e:	000f      	movs	r7, r1
 8005da0:	f7fc fafe 	bl	80023a0 <__aeabi_ui2d>
 8005da4:	0002      	movs	r2, r0
 8005da6:	000b      	movs	r3, r1
 8005da8:	0030      	movs	r0, r6
 8005daa:	0039      	movs	r1, r7
 8005dac:	f7fa fcd6 	bl	800075c <__aeabi_dadd>
 8005db0:	0006      	movs	r6, r0
 8005db2:	000f      	movs	r7, r1
 8005db4:	9b05      	ldr	r3, [sp, #20]
 8005db6:	2b0f      	cmp	r3, #15
 8005db8:	dc39      	bgt.n	8005e2e <_strtod_l+0x482>
 8005dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d100      	bne.n	8005dc2 <_strtod_l+0x416>
 8005dc0:	e62f      	b.n	8005a22 <_strtod_l+0x76>
 8005dc2:	dd24      	ble.n	8005e0e <_strtod_l+0x462>
 8005dc4:	2b16      	cmp	r3, #22
 8005dc6:	dc09      	bgt.n	8005ddc <_strtod_l+0x430>
 8005dc8:	496f      	ldr	r1, [pc, #444]	; (8005f88 <_strtod_l+0x5dc>)
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	18c9      	adds	r1, r1, r3
 8005dce:	0032      	movs	r2, r6
 8005dd0:	6808      	ldr	r0, [r1, #0]
 8005dd2:	6849      	ldr	r1, [r1, #4]
 8005dd4:	003b      	movs	r3, r7
 8005dd6:	f7fb fc1b 	bl	8001610 <__aeabi_dmul>
 8005dda:	e7bd      	b.n	8005d58 <_strtod_l+0x3ac>
 8005ddc:	2325      	movs	r3, #37	; 0x25
 8005dde:	9a05      	ldr	r2, [sp, #20]
 8005de0:	1a9b      	subs	r3, r3, r2
 8005de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005de4:	4293      	cmp	r3, r2
 8005de6:	db22      	blt.n	8005e2e <_strtod_l+0x482>
 8005de8:	240f      	movs	r4, #15
 8005dea:	9b05      	ldr	r3, [sp, #20]
 8005dec:	4d66      	ldr	r5, [pc, #408]	; (8005f88 <_strtod_l+0x5dc>)
 8005dee:	1ae4      	subs	r4, r4, r3
 8005df0:	00e1      	lsls	r1, r4, #3
 8005df2:	1869      	adds	r1, r5, r1
 8005df4:	0032      	movs	r2, r6
 8005df6:	6808      	ldr	r0, [r1, #0]
 8005df8:	6849      	ldr	r1, [r1, #4]
 8005dfa:	003b      	movs	r3, r7
 8005dfc:	f7fb fc08 	bl	8001610 <__aeabi_dmul>
 8005e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e02:	1b1c      	subs	r4, r3, r4
 8005e04:	00e4      	lsls	r4, r4, #3
 8005e06:	192d      	adds	r5, r5, r4
 8005e08:	682a      	ldr	r2, [r5, #0]
 8005e0a:	686b      	ldr	r3, [r5, #4]
 8005e0c:	e7e3      	b.n	8005dd6 <_strtod_l+0x42a>
 8005e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e10:	3316      	adds	r3, #22
 8005e12:	db0c      	blt.n	8005e2e <_strtod_l+0x482>
 8005e14:	9906      	ldr	r1, [sp, #24]
 8005e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e18:	4b5b      	ldr	r3, [pc, #364]	; (8005f88 <_strtod_l+0x5dc>)
 8005e1a:	1a52      	subs	r2, r2, r1
 8005e1c:	00d2      	lsls	r2, r2, #3
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	0030      	movs	r0, r6
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	0039      	movs	r1, r7
 8005e28:	f7fa fff8 	bl	8000e1c <__aeabi_ddiv>
 8005e2c:	e794      	b.n	8005d58 <_strtod_l+0x3ac>
 8005e2e:	9b05      	ldr	r3, [sp, #20]
 8005e30:	1b1c      	subs	r4, r3, r4
 8005e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e34:	18e4      	adds	r4, r4, r3
 8005e36:	2c00      	cmp	r4, #0
 8005e38:	dd72      	ble.n	8005f20 <_strtod_l+0x574>
 8005e3a:	220f      	movs	r2, #15
 8005e3c:	0023      	movs	r3, r4
 8005e3e:	4013      	ands	r3, r2
 8005e40:	4214      	tst	r4, r2
 8005e42:	d00a      	beq.n	8005e5a <_strtod_l+0x4ae>
 8005e44:	4950      	ldr	r1, [pc, #320]	; (8005f88 <_strtod_l+0x5dc>)
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	18c9      	adds	r1, r1, r3
 8005e4a:	0032      	movs	r2, r6
 8005e4c:	6808      	ldr	r0, [r1, #0]
 8005e4e:	6849      	ldr	r1, [r1, #4]
 8005e50:	003b      	movs	r3, r7
 8005e52:	f7fb fbdd 	bl	8001610 <__aeabi_dmul>
 8005e56:	0006      	movs	r6, r0
 8005e58:	000f      	movs	r7, r1
 8005e5a:	230f      	movs	r3, #15
 8005e5c:	439c      	bics	r4, r3
 8005e5e:	d04a      	beq.n	8005ef6 <_strtod_l+0x54a>
 8005e60:	3326      	adds	r3, #38	; 0x26
 8005e62:	33ff      	adds	r3, #255	; 0xff
 8005e64:	429c      	cmp	r4, r3
 8005e66:	dd22      	ble.n	8005eae <_strtod_l+0x502>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9305      	str	r3, [sp, #20]
 8005e6c:	9306      	str	r3, [sp, #24]
 8005e6e:	930d      	str	r3, [sp, #52]	; 0x34
 8005e70:	9308      	str	r3, [sp, #32]
 8005e72:	2322      	movs	r3, #34	; 0x22
 8005e74:	2600      	movs	r6, #0
 8005e76:	9a04      	ldr	r2, [sp, #16]
 8005e78:	4f3f      	ldr	r7, [pc, #252]	; (8005f78 <_strtod_l+0x5cc>)
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e7e:	42b3      	cmp	r3, r6
 8005e80:	d100      	bne.n	8005e84 <_strtod_l+0x4d8>
 8005e82:	e5ce      	b.n	8005a22 <_strtod_l+0x76>
 8005e84:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005e86:	9804      	ldr	r0, [sp, #16]
 8005e88:	f002 ff68 	bl	8008d5c <_Bfree>
 8005e8c:	9908      	ldr	r1, [sp, #32]
 8005e8e:	9804      	ldr	r0, [sp, #16]
 8005e90:	f002 ff64 	bl	8008d5c <_Bfree>
 8005e94:	9906      	ldr	r1, [sp, #24]
 8005e96:	9804      	ldr	r0, [sp, #16]
 8005e98:	f002 ff60 	bl	8008d5c <_Bfree>
 8005e9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e9e:	9804      	ldr	r0, [sp, #16]
 8005ea0:	f002 ff5c 	bl	8008d5c <_Bfree>
 8005ea4:	9905      	ldr	r1, [sp, #20]
 8005ea6:	9804      	ldr	r0, [sp, #16]
 8005ea8:	f002 ff58 	bl	8008d5c <_Bfree>
 8005eac:	e5b9      	b.n	8005a22 <_strtod_l+0x76>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	0030      	movs	r0, r6
 8005eb2:	0039      	movs	r1, r7
 8005eb4:	4d35      	ldr	r5, [pc, #212]	; (8005f8c <_strtod_l+0x5e0>)
 8005eb6:	1124      	asrs	r4, r4, #4
 8005eb8:	9307      	str	r3, [sp, #28]
 8005eba:	2c01      	cmp	r4, #1
 8005ebc:	dc1e      	bgt.n	8005efc <_strtod_l+0x550>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <_strtod_l+0x51a>
 8005ec2:	0006      	movs	r6, r0
 8005ec4:	000f      	movs	r7, r1
 8005ec6:	4b32      	ldr	r3, [pc, #200]	; (8005f90 <_strtod_l+0x5e4>)
 8005ec8:	9a07      	ldr	r2, [sp, #28]
 8005eca:	18ff      	adds	r7, r7, r3
 8005ecc:	4b2f      	ldr	r3, [pc, #188]	; (8005f8c <_strtod_l+0x5e0>)
 8005ece:	00d2      	lsls	r2, r2, #3
 8005ed0:	189d      	adds	r5, r3, r2
 8005ed2:	6828      	ldr	r0, [r5, #0]
 8005ed4:	6869      	ldr	r1, [r5, #4]
 8005ed6:	0032      	movs	r2, r6
 8005ed8:	003b      	movs	r3, r7
 8005eda:	f7fb fb99 	bl	8001610 <__aeabi_dmul>
 8005ede:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <_strtod_l+0x5cc>)
 8005ee0:	4a2c      	ldr	r2, [pc, #176]	; (8005f94 <_strtod_l+0x5e8>)
 8005ee2:	0006      	movs	r6, r0
 8005ee4:	400b      	ands	r3, r1
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d8be      	bhi.n	8005e68 <_strtod_l+0x4bc>
 8005eea:	4a2b      	ldr	r2, [pc, #172]	; (8005f98 <_strtod_l+0x5ec>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d913      	bls.n	8005f18 <_strtod_l+0x56c>
 8005ef0:	2601      	movs	r6, #1
 8005ef2:	4f2a      	ldr	r7, [pc, #168]	; (8005f9c <_strtod_l+0x5f0>)
 8005ef4:	4276      	negs	r6, r6
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9307      	str	r3, [sp, #28]
 8005efa:	e088      	b.n	800600e <_strtod_l+0x662>
 8005efc:	2201      	movs	r2, #1
 8005efe:	4214      	tst	r4, r2
 8005f00:	d004      	beq.n	8005f0c <_strtod_l+0x560>
 8005f02:	682a      	ldr	r2, [r5, #0]
 8005f04:	686b      	ldr	r3, [r5, #4]
 8005f06:	f7fb fb83 	bl	8001610 <__aeabi_dmul>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	9a07      	ldr	r2, [sp, #28]
 8005f0e:	1064      	asrs	r4, r4, #1
 8005f10:	3201      	adds	r2, #1
 8005f12:	9207      	str	r2, [sp, #28]
 8005f14:	3508      	adds	r5, #8
 8005f16:	e7d0      	b.n	8005eba <_strtod_l+0x50e>
 8005f18:	23d4      	movs	r3, #212	; 0xd4
 8005f1a:	049b      	lsls	r3, r3, #18
 8005f1c:	18cf      	adds	r7, r1, r3
 8005f1e:	e7ea      	b.n	8005ef6 <_strtod_l+0x54a>
 8005f20:	2c00      	cmp	r4, #0
 8005f22:	d0e8      	beq.n	8005ef6 <_strtod_l+0x54a>
 8005f24:	4264      	negs	r4, r4
 8005f26:	230f      	movs	r3, #15
 8005f28:	0022      	movs	r2, r4
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	421c      	tst	r4, r3
 8005f2e:	d00a      	beq.n	8005f46 <_strtod_l+0x59a>
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <_strtod_l+0x5dc>)
 8005f32:	00d2      	lsls	r2, r2, #3
 8005f34:	189b      	adds	r3, r3, r2
 8005f36:	0030      	movs	r0, r6
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	0039      	movs	r1, r7
 8005f3e:	f7fa ff6d 	bl	8000e1c <__aeabi_ddiv>
 8005f42:	0006      	movs	r6, r0
 8005f44:	000f      	movs	r7, r1
 8005f46:	1124      	asrs	r4, r4, #4
 8005f48:	d0d5      	beq.n	8005ef6 <_strtod_l+0x54a>
 8005f4a:	2c1f      	cmp	r4, #31
 8005f4c:	dd28      	ble.n	8005fa0 <_strtod_l+0x5f4>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9305      	str	r3, [sp, #20]
 8005f52:	9306      	str	r3, [sp, #24]
 8005f54:	930d      	str	r3, [sp, #52]	; 0x34
 8005f56:	9308      	str	r3, [sp, #32]
 8005f58:	2322      	movs	r3, #34	; 0x22
 8005f5a:	9a04      	ldr	r2, [sp, #16]
 8005f5c:	2600      	movs	r6, #0
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f62:	2700      	movs	r7, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d18d      	bne.n	8005e84 <_strtod_l+0x4d8>
 8005f68:	e55b      	b.n	8005a22 <_strtod_l+0x76>
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	00004e1f 	.word	0x00004e1f
 8005f70:	0800a4a5 	.word	0x0800a4a5
 8005f74:	0800a458 	.word	0x0800a458
 8005f78:	7ff00000 	.word	0x7ff00000
 8005f7c:	0800a49d 	.word	0x0800a49d
 8005f80:	0800a4dc 	.word	0x0800a4dc
 8005f84:	0800a869 	.word	0x0800a869
 8005f88:	0800a648 	.word	0x0800a648
 8005f8c:	0800a620 	.word	0x0800a620
 8005f90:	fcb00000 	.word	0xfcb00000
 8005f94:	7ca00000 	.word	0x7ca00000
 8005f98:	7c900000 	.word	0x7c900000
 8005f9c:	7fefffff 	.word	0x7fefffff
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	0022      	movs	r2, r4
 8005fa4:	401a      	ands	r2, r3
 8005fa6:	9207      	str	r2, [sp, #28]
 8005fa8:	421c      	tst	r4, r3
 8005faa:	d001      	beq.n	8005fb0 <_strtod_l+0x604>
 8005fac:	335a      	adds	r3, #90	; 0x5a
 8005fae:	9307      	str	r3, [sp, #28]
 8005fb0:	0030      	movs	r0, r6
 8005fb2:	0039      	movs	r1, r7
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4dc4      	ldr	r5, [pc, #784]	; (80062c8 <_strtod_l+0x91c>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	4214      	tst	r4, r2
 8005fbc:	d004      	beq.n	8005fc8 <_strtod_l+0x61c>
 8005fbe:	682a      	ldr	r2, [r5, #0]
 8005fc0:	686b      	ldr	r3, [r5, #4]
 8005fc2:	f7fb fb25 	bl	8001610 <__aeabi_dmul>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	1064      	asrs	r4, r4, #1
 8005fca:	3508      	adds	r5, #8
 8005fcc:	2c00      	cmp	r4, #0
 8005fce:	d1f3      	bne.n	8005fb8 <_strtod_l+0x60c>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <_strtod_l+0x62c>
 8005fd4:	0006      	movs	r6, r0
 8005fd6:	000f      	movs	r7, r1
 8005fd8:	9b07      	ldr	r3, [sp, #28]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00f      	beq.n	8005ffe <_strtod_l+0x652>
 8005fde:	236b      	movs	r3, #107	; 0x6b
 8005fe0:	007a      	lsls	r2, r7, #1
 8005fe2:	0d52      	lsrs	r2, r2, #21
 8005fe4:	0039      	movs	r1, r7
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dd08      	ble.n	8005ffe <_strtod_l+0x652>
 8005fec:	2b1f      	cmp	r3, #31
 8005fee:	dc00      	bgt.n	8005ff2 <_strtod_l+0x646>
 8005ff0:	e121      	b.n	8006236 <_strtod_l+0x88a>
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	2b34      	cmp	r3, #52	; 0x34
 8005ff6:	dc00      	bgt.n	8005ffa <_strtod_l+0x64e>
 8005ff8:	e116      	b.n	8006228 <_strtod_l+0x87c>
 8005ffa:	27dc      	movs	r7, #220	; 0xdc
 8005ffc:	04bf      	lsls	r7, r7, #18
 8005ffe:	2200      	movs	r2, #0
 8006000:	2300      	movs	r3, #0
 8006002:	0030      	movs	r0, r6
 8006004:	0039      	movs	r1, r7
 8006006:	f7fa fa1f 	bl	8000448 <__aeabi_dcmpeq>
 800600a:	2800      	cmp	r0, #0
 800600c:	d19f      	bne.n	8005f4e <_strtod_l+0x5a2>
 800600e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006010:	9a08      	ldr	r2, [sp, #32]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006016:	9b05      	ldr	r3, [sp, #20]
 8006018:	9804      	ldr	r0, [sp, #16]
 800601a:	f002 ff07 	bl	8008e2c <__s2b>
 800601e:	900d      	str	r0, [sp, #52]	; 0x34
 8006020:	2800      	cmp	r0, #0
 8006022:	d100      	bne.n	8006026 <_strtod_l+0x67a>
 8006024:	e720      	b.n	8005e68 <_strtod_l+0x4bc>
 8006026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006028:	9906      	ldr	r1, [sp, #24]
 800602a:	17da      	asrs	r2, r3, #31
 800602c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800602e:	1a5b      	subs	r3, r3, r1
 8006030:	401a      	ands	r2, r3
 8006032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006034:	9215      	str	r2, [sp, #84]	; 0x54
 8006036:	43db      	mvns	r3, r3
 8006038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800603a:	17db      	asrs	r3, r3, #31
 800603c:	401a      	ands	r2, r3
 800603e:	2300      	movs	r3, #0
 8006040:	9218      	str	r2, [sp, #96]	; 0x60
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	9306      	str	r3, [sp, #24]
 8006046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006048:	9804      	ldr	r0, [sp, #16]
 800604a:	6859      	ldr	r1, [r3, #4]
 800604c:	f002 fe42 	bl	8008cd4 <_Balloc>
 8006050:	9008      	str	r0, [sp, #32]
 8006052:	2800      	cmp	r0, #0
 8006054:	d100      	bne.n	8006058 <_strtod_l+0x6ac>
 8006056:	e70c      	b.n	8005e72 <_strtod_l+0x4c6>
 8006058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800605a:	300c      	adds	r0, #12
 800605c:	0019      	movs	r1, r3
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	310c      	adds	r1, #12
 8006062:	3202      	adds	r2, #2
 8006064:	0092      	lsls	r2, r2, #2
 8006066:	f001 fb0d 	bl	8007684 <memcpy>
 800606a:	ab1e      	add	r3, sp, #120	; 0x78
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	ab1d      	add	r3, sp, #116	; 0x74
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	0032      	movs	r2, r6
 8006074:	003b      	movs	r3, r7
 8006076:	9804      	ldr	r0, [sp, #16]
 8006078:	9610      	str	r6, [sp, #64]	; 0x40
 800607a:	9711      	str	r7, [sp, #68]	; 0x44
 800607c:	f003 fa18 	bl	80094b0 <__d2b>
 8006080:	901c      	str	r0, [sp, #112]	; 0x70
 8006082:	2800      	cmp	r0, #0
 8006084:	d100      	bne.n	8006088 <_strtod_l+0x6dc>
 8006086:	e6f4      	b.n	8005e72 <_strtod_l+0x4c6>
 8006088:	2101      	movs	r1, #1
 800608a:	9804      	ldr	r0, [sp, #16]
 800608c:	f002 ff62 	bl	8008f54 <__i2b>
 8006090:	9006      	str	r0, [sp, #24]
 8006092:	2800      	cmp	r0, #0
 8006094:	d100      	bne.n	8006098 <_strtod_l+0x6ec>
 8006096:	e6ec      	b.n	8005e72 <_strtod_l+0x4c6>
 8006098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800609a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800609c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800609e:	1ad4      	subs	r4, r2, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	db01      	blt.n	80060a8 <_strtod_l+0x6fc>
 80060a4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80060a6:	195d      	adds	r5, r3, r5
 80060a8:	9907      	ldr	r1, [sp, #28]
 80060aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80060ac:	1a5b      	subs	r3, r3, r1
 80060ae:	2136      	movs	r1, #54	; 0x36
 80060b0:	189b      	adds	r3, r3, r2
 80060b2:	1a8a      	subs	r2, r1, r2
 80060b4:	4985      	ldr	r1, [pc, #532]	; (80062cc <_strtod_l+0x920>)
 80060b6:	2001      	movs	r0, #1
 80060b8:	468c      	mov	ip, r1
 80060ba:	2100      	movs	r1, #0
 80060bc:	3b01      	subs	r3, #1
 80060be:	9114      	str	r1, [sp, #80]	; 0x50
 80060c0:	9012      	str	r0, [sp, #72]	; 0x48
 80060c2:	4563      	cmp	r3, ip
 80060c4:	da07      	bge.n	80060d6 <_strtod_l+0x72a>
 80060c6:	4661      	mov	r1, ip
 80060c8:	1ac9      	subs	r1, r1, r3
 80060ca:	1a52      	subs	r2, r2, r1
 80060cc:	291f      	cmp	r1, #31
 80060ce:	dd00      	ble.n	80060d2 <_strtod_l+0x726>
 80060d0:	e0b6      	b.n	8006240 <_strtod_l+0x894>
 80060d2:	4088      	lsls	r0, r1
 80060d4:	9012      	str	r0, [sp, #72]	; 0x48
 80060d6:	18ab      	adds	r3, r5, r2
 80060d8:	930c      	str	r3, [sp, #48]	; 0x30
 80060da:	18a4      	adds	r4, r4, r2
 80060dc:	9b07      	ldr	r3, [sp, #28]
 80060de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060e0:	191c      	adds	r4, r3, r4
 80060e2:	002b      	movs	r3, r5
 80060e4:	4295      	cmp	r5, r2
 80060e6:	dd00      	ble.n	80060ea <_strtod_l+0x73e>
 80060e8:	0013      	movs	r3, r2
 80060ea:	42a3      	cmp	r3, r4
 80060ec:	dd00      	ble.n	80060f0 <_strtod_l+0x744>
 80060ee:	0023      	movs	r3, r4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	dd04      	ble.n	80060fe <_strtod_l+0x752>
 80060f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060f6:	1ae4      	subs	r4, r4, r3
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	920c      	str	r2, [sp, #48]	; 0x30
 80060fc:	1aed      	subs	r5, r5, r3
 80060fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006100:	2b00      	cmp	r3, #0
 8006102:	dd17      	ble.n	8006134 <_strtod_l+0x788>
 8006104:	001a      	movs	r2, r3
 8006106:	9906      	ldr	r1, [sp, #24]
 8006108:	9804      	ldr	r0, [sp, #16]
 800610a:	f002 ffeb 	bl	80090e4 <__pow5mult>
 800610e:	9006      	str	r0, [sp, #24]
 8006110:	2800      	cmp	r0, #0
 8006112:	d100      	bne.n	8006116 <_strtod_l+0x76a>
 8006114:	e6ad      	b.n	8005e72 <_strtod_l+0x4c6>
 8006116:	0001      	movs	r1, r0
 8006118:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800611a:	9804      	ldr	r0, [sp, #16]
 800611c:	f002 ff32 	bl	8008f84 <__multiply>
 8006120:	900e      	str	r0, [sp, #56]	; 0x38
 8006122:	2800      	cmp	r0, #0
 8006124:	d100      	bne.n	8006128 <_strtod_l+0x77c>
 8006126:	e6a4      	b.n	8005e72 <_strtod_l+0x4c6>
 8006128:	991c      	ldr	r1, [sp, #112]	; 0x70
 800612a:	9804      	ldr	r0, [sp, #16]
 800612c:	f002 fe16 	bl	8008d5c <_Bfree>
 8006130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006132:	931c      	str	r3, [sp, #112]	; 0x70
 8006134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006136:	2b00      	cmp	r3, #0
 8006138:	dd00      	ble.n	800613c <_strtod_l+0x790>
 800613a:	e087      	b.n	800624c <_strtod_l+0x8a0>
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	dd08      	ble.n	8006154 <_strtod_l+0x7a8>
 8006142:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006144:	9908      	ldr	r1, [sp, #32]
 8006146:	9804      	ldr	r0, [sp, #16]
 8006148:	f002 ffcc 	bl	80090e4 <__pow5mult>
 800614c:	9008      	str	r0, [sp, #32]
 800614e:	2800      	cmp	r0, #0
 8006150:	d100      	bne.n	8006154 <_strtod_l+0x7a8>
 8006152:	e68e      	b.n	8005e72 <_strtod_l+0x4c6>
 8006154:	2c00      	cmp	r4, #0
 8006156:	dd08      	ble.n	800616a <_strtod_l+0x7be>
 8006158:	0022      	movs	r2, r4
 800615a:	9908      	ldr	r1, [sp, #32]
 800615c:	9804      	ldr	r0, [sp, #16]
 800615e:	f003 f81d 	bl	800919c <__lshift>
 8006162:	9008      	str	r0, [sp, #32]
 8006164:	2800      	cmp	r0, #0
 8006166:	d100      	bne.n	800616a <_strtod_l+0x7be>
 8006168:	e683      	b.n	8005e72 <_strtod_l+0x4c6>
 800616a:	2d00      	cmp	r5, #0
 800616c:	dd08      	ble.n	8006180 <_strtod_l+0x7d4>
 800616e:	002a      	movs	r2, r5
 8006170:	9906      	ldr	r1, [sp, #24]
 8006172:	9804      	ldr	r0, [sp, #16]
 8006174:	f003 f812 	bl	800919c <__lshift>
 8006178:	9006      	str	r0, [sp, #24]
 800617a:	2800      	cmp	r0, #0
 800617c:	d100      	bne.n	8006180 <_strtod_l+0x7d4>
 800617e:	e678      	b.n	8005e72 <_strtod_l+0x4c6>
 8006180:	9a08      	ldr	r2, [sp, #32]
 8006182:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006184:	9804      	ldr	r0, [sp, #16]
 8006186:	f003 f893 	bl	80092b0 <__mdiff>
 800618a:	9005      	str	r0, [sp, #20]
 800618c:	2800      	cmp	r0, #0
 800618e:	d100      	bne.n	8006192 <_strtod_l+0x7e6>
 8006190:	e66f      	b.n	8005e72 <_strtod_l+0x4c6>
 8006192:	2200      	movs	r2, #0
 8006194:	68c3      	ldr	r3, [r0, #12]
 8006196:	9906      	ldr	r1, [sp, #24]
 8006198:	60c2      	str	r2, [r0, #12]
 800619a:	930c      	str	r3, [sp, #48]	; 0x30
 800619c:	f003 f86c 	bl	8009278 <__mcmp>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	da5d      	bge.n	8006260 <_strtod_l+0x8b4>
 80061a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061a6:	4333      	orrs	r3, r6
 80061a8:	d000      	beq.n	80061ac <_strtod_l+0x800>
 80061aa:	e088      	b.n	80062be <_strtod_l+0x912>
 80061ac:	033b      	lsls	r3, r7, #12
 80061ae:	d000      	beq.n	80061b2 <_strtod_l+0x806>
 80061b0:	e085      	b.n	80062be <_strtod_l+0x912>
 80061b2:	22d6      	movs	r2, #214	; 0xd6
 80061b4:	4b46      	ldr	r3, [pc, #280]	; (80062d0 <_strtod_l+0x924>)
 80061b6:	04d2      	lsls	r2, r2, #19
 80061b8:	403b      	ands	r3, r7
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d97f      	bls.n	80062be <_strtod_l+0x912>
 80061be:	9b05      	ldr	r3, [sp, #20]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d103      	bne.n	80061ce <_strtod_l+0x822>
 80061c6:	9b05      	ldr	r3, [sp, #20]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	dd77      	ble.n	80062be <_strtod_l+0x912>
 80061ce:	9905      	ldr	r1, [sp, #20]
 80061d0:	2201      	movs	r2, #1
 80061d2:	9804      	ldr	r0, [sp, #16]
 80061d4:	f002 ffe2 	bl	800919c <__lshift>
 80061d8:	9906      	ldr	r1, [sp, #24]
 80061da:	9005      	str	r0, [sp, #20]
 80061dc:	f003 f84c 	bl	8009278 <__mcmp>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	dd6c      	ble.n	80062be <_strtod_l+0x912>
 80061e4:	9907      	ldr	r1, [sp, #28]
 80061e6:	003b      	movs	r3, r7
 80061e8:	4a39      	ldr	r2, [pc, #228]	; (80062d0 <_strtod_l+0x924>)
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d100      	bne.n	80061f0 <_strtod_l+0x844>
 80061ee:	e094      	b.n	800631a <_strtod_l+0x96e>
 80061f0:	0011      	movs	r1, r2
 80061f2:	20d6      	movs	r0, #214	; 0xd6
 80061f4:	4039      	ands	r1, r7
 80061f6:	04c0      	lsls	r0, r0, #19
 80061f8:	4281      	cmp	r1, r0
 80061fa:	dd00      	ble.n	80061fe <_strtod_l+0x852>
 80061fc:	e08d      	b.n	800631a <_strtod_l+0x96e>
 80061fe:	23dc      	movs	r3, #220	; 0xdc
 8006200:	049b      	lsls	r3, r3, #18
 8006202:	4299      	cmp	r1, r3
 8006204:	dc00      	bgt.n	8006208 <_strtod_l+0x85c>
 8006206:	e6a7      	b.n	8005f58 <_strtod_l+0x5ac>
 8006208:	0030      	movs	r0, r6
 800620a:	0039      	movs	r1, r7
 800620c:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <_strtod_l+0x928>)
 800620e:	2200      	movs	r2, #0
 8006210:	f7fb f9fe 	bl	8001610 <__aeabi_dmul>
 8006214:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <_strtod_l+0x924>)
 8006216:	0006      	movs	r6, r0
 8006218:	000f      	movs	r7, r1
 800621a:	420b      	tst	r3, r1
 800621c:	d000      	beq.n	8006220 <_strtod_l+0x874>
 800621e:	e631      	b.n	8005e84 <_strtod_l+0x4d8>
 8006220:	2322      	movs	r3, #34	; 0x22
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	e62d      	b.n	8005e84 <_strtod_l+0x4d8>
 8006228:	234b      	movs	r3, #75	; 0x4b
 800622a:	1a9a      	subs	r2, r3, r2
 800622c:	3b4c      	subs	r3, #76	; 0x4c
 800622e:	4093      	lsls	r3, r2
 8006230:	4019      	ands	r1, r3
 8006232:	000f      	movs	r7, r1
 8006234:	e6e3      	b.n	8005ffe <_strtod_l+0x652>
 8006236:	2201      	movs	r2, #1
 8006238:	4252      	negs	r2, r2
 800623a:	409a      	lsls	r2, r3
 800623c:	4016      	ands	r6, r2
 800623e:	e6de      	b.n	8005ffe <_strtod_l+0x652>
 8006240:	4925      	ldr	r1, [pc, #148]	; (80062d8 <_strtod_l+0x92c>)
 8006242:	1acb      	subs	r3, r1, r3
 8006244:	0001      	movs	r1, r0
 8006246:	4099      	lsls	r1, r3
 8006248:	9114      	str	r1, [sp, #80]	; 0x50
 800624a:	e743      	b.n	80060d4 <_strtod_l+0x728>
 800624c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800624e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006250:	9804      	ldr	r0, [sp, #16]
 8006252:	f002 ffa3 	bl	800919c <__lshift>
 8006256:	901c      	str	r0, [sp, #112]	; 0x70
 8006258:	2800      	cmp	r0, #0
 800625a:	d000      	beq.n	800625e <_strtod_l+0x8b2>
 800625c:	e76e      	b.n	800613c <_strtod_l+0x790>
 800625e:	e608      	b.n	8005e72 <_strtod_l+0x4c6>
 8006260:	970e      	str	r7, [sp, #56]	; 0x38
 8006262:	2800      	cmp	r0, #0
 8006264:	d177      	bne.n	8006356 <_strtod_l+0x9aa>
 8006266:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006268:	033b      	lsls	r3, r7, #12
 800626a:	0b1b      	lsrs	r3, r3, #12
 800626c:	2a00      	cmp	r2, #0
 800626e:	d039      	beq.n	80062e4 <_strtod_l+0x938>
 8006270:	4a1a      	ldr	r2, [pc, #104]	; (80062dc <_strtod_l+0x930>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d139      	bne.n	80062ea <_strtod_l+0x93e>
 8006276:	2101      	movs	r1, #1
 8006278:	9b07      	ldr	r3, [sp, #28]
 800627a:	4249      	negs	r1, r1
 800627c:	0032      	movs	r2, r6
 800627e:	0008      	movs	r0, r1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <_strtod_l+0x8f0>
 8006284:	24d4      	movs	r4, #212	; 0xd4
 8006286:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <_strtod_l+0x924>)
 8006288:	0008      	movs	r0, r1
 800628a:	403b      	ands	r3, r7
 800628c:	04e4      	lsls	r4, r4, #19
 800628e:	42a3      	cmp	r3, r4
 8006290:	d804      	bhi.n	800629c <_strtod_l+0x8f0>
 8006292:	306c      	adds	r0, #108	; 0x6c
 8006294:	0d1b      	lsrs	r3, r3, #20
 8006296:	1ac3      	subs	r3, r0, r3
 8006298:	4099      	lsls	r1, r3
 800629a:	0008      	movs	r0, r1
 800629c:	4282      	cmp	r2, r0
 800629e:	d124      	bne.n	80062ea <_strtod_l+0x93e>
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <_strtod_l+0x934>)
 80062a2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80062a4:	4299      	cmp	r1, r3
 80062a6:	d102      	bne.n	80062ae <_strtod_l+0x902>
 80062a8:	3201      	adds	r2, #1
 80062aa:	d100      	bne.n	80062ae <_strtod_l+0x902>
 80062ac:	e5e1      	b.n	8005e72 <_strtod_l+0x4c6>
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <_strtod_l+0x924>)
 80062b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062b2:	2600      	movs	r6, #0
 80062b4:	401a      	ands	r2, r3
 80062b6:	0013      	movs	r3, r2
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	0352      	lsls	r2, r2, #13
 80062bc:	189f      	adds	r7, r3, r2
 80062be:	9b07      	ldr	r3, [sp, #28]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1a1      	bne.n	8006208 <_strtod_l+0x85c>
 80062c4:	e5de      	b.n	8005e84 <_strtod_l+0x4d8>
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	0800a470 	.word	0x0800a470
 80062cc:	fffffc02 	.word	0xfffffc02
 80062d0:	7ff00000 	.word	0x7ff00000
 80062d4:	39500000 	.word	0x39500000
 80062d8:	fffffbe2 	.word	0xfffffbe2
 80062dc:	000fffff 	.word	0x000fffff
 80062e0:	7fefffff 	.word	0x7fefffff
 80062e4:	4333      	orrs	r3, r6
 80062e6:	d100      	bne.n	80062ea <_strtod_l+0x93e>
 80062e8:	e77c      	b.n	80061e4 <_strtod_l+0x838>
 80062ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01d      	beq.n	800632c <_strtod_l+0x980>
 80062f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062f4:	4213      	tst	r3, r2
 80062f6:	d0e2      	beq.n	80062be <_strtod_l+0x912>
 80062f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80062fa:	0030      	movs	r0, r6
 80062fc:	0039      	movs	r1, r7
 80062fe:	9a07      	ldr	r2, [sp, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d017      	beq.n	8006334 <_strtod_l+0x988>
 8006304:	f7ff fb3a 	bl	800597c <sulp>
 8006308:	0002      	movs	r2, r0
 800630a:	000b      	movs	r3, r1
 800630c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800630e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006310:	f7fa fa24 	bl	800075c <__aeabi_dadd>
 8006314:	0006      	movs	r6, r0
 8006316:	000f      	movs	r7, r1
 8006318:	e7d1      	b.n	80062be <_strtod_l+0x912>
 800631a:	2601      	movs	r6, #1
 800631c:	4013      	ands	r3, r2
 800631e:	4a98      	ldr	r2, [pc, #608]	; (8006580 <_strtod_l+0xbd4>)
 8006320:	4276      	negs	r6, r6
 8006322:	189b      	adds	r3, r3, r2
 8006324:	4a97      	ldr	r2, [pc, #604]	; (8006584 <_strtod_l+0xbd8>)
 8006326:	431a      	orrs	r2, r3
 8006328:	0017      	movs	r7, r2
 800632a:	e7c8      	b.n	80062be <_strtod_l+0x912>
 800632c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800632e:	4233      	tst	r3, r6
 8006330:	d0c5      	beq.n	80062be <_strtod_l+0x912>
 8006332:	e7e1      	b.n	80062f8 <_strtod_l+0x94c>
 8006334:	f7ff fb22 	bl	800597c <sulp>
 8006338:	0002      	movs	r2, r0
 800633a:	000b      	movs	r3, r1
 800633c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800633e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006340:	f7fb fc28 	bl	8001b94 <__aeabi_dsub>
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	0006      	movs	r6, r0
 800634a:	000f      	movs	r7, r1
 800634c:	f7fa f87c 	bl	8000448 <__aeabi_dcmpeq>
 8006350:	2800      	cmp	r0, #0
 8006352:	d0b4      	beq.n	80062be <_strtod_l+0x912>
 8006354:	e600      	b.n	8005f58 <_strtod_l+0x5ac>
 8006356:	9906      	ldr	r1, [sp, #24]
 8006358:	9805      	ldr	r0, [sp, #20]
 800635a:	f003 f909 	bl	8009570 <__ratio>
 800635e:	2380      	movs	r3, #128	; 0x80
 8006360:	2200      	movs	r2, #0
 8006362:	05db      	lsls	r3, r3, #23
 8006364:	0004      	movs	r4, r0
 8006366:	000d      	movs	r5, r1
 8006368:	f7fa f87e 	bl	8000468 <__aeabi_dcmple>
 800636c:	2800      	cmp	r0, #0
 800636e:	d06d      	beq.n	800644c <_strtod_l+0xaa0>
 8006370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006372:	2b00      	cmp	r3, #0
 8006374:	d000      	beq.n	8006378 <_strtod_l+0x9cc>
 8006376:	e07e      	b.n	8006476 <_strtod_l+0xaca>
 8006378:	2e00      	cmp	r6, #0
 800637a:	d158      	bne.n	800642e <_strtod_l+0xa82>
 800637c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800637e:	031b      	lsls	r3, r3, #12
 8006380:	d000      	beq.n	8006384 <_strtod_l+0x9d8>
 8006382:	e07f      	b.n	8006484 <_strtod_l+0xad8>
 8006384:	2200      	movs	r2, #0
 8006386:	0020      	movs	r0, r4
 8006388:	0029      	movs	r1, r5
 800638a:	4b7f      	ldr	r3, [pc, #508]	; (8006588 <_strtod_l+0xbdc>)
 800638c:	f7fa f862 	bl	8000454 <__aeabi_dcmplt>
 8006390:	2800      	cmp	r0, #0
 8006392:	d158      	bne.n	8006446 <_strtod_l+0xa9a>
 8006394:	0020      	movs	r0, r4
 8006396:	0029      	movs	r1, r5
 8006398:	2200      	movs	r2, #0
 800639a:	4b7c      	ldr	r3, [pc, #496]	; (800658c <_strtod_l+0xbe0>)
 800639c:	f7fb f938 	bl	8001610 <__aeabi_dmul>
 80063a0:	0004      	movs	r4, r0
 80063a2:	000d      	movs	r5, r1
 80063a4:	2380      	movs	r3, #128	; 0x80
 80063a6:	061b      	lsls	r3, r3, #24
 80063a8:	940a      	str	r4, [sp, #40]	; 0x28
 80063aa:	18eb      	adds	r3, r5, r3
 80063ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80063ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063b2:	9212      	str	r2, [sp, #72]	; 0x48
 80063b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80063b6:	4a76      	ldr	r2, [pc, #472]	; (8006590 <_strtod_l+0xbe4>)
 80063b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ba:	4013      	ands	r3, r2
 80063bc:	9314      	str	r3, [sp, #80]	; 0x50
 80063be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063c0:	4b74      	ldr	r3, [pc, #464]	; (8006594 <_strtod_l+0xbe8>)
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d000      	beq.n	80063c8 <_strtod_l+0xa1c>
 80063c6:	e091      	b.n	80064ec <_strtod_l+0xb40>
 80063c8:	4a73      	ldr	r2, [pc, #460]	; (8006598 <_strtod_l+0xbec>)
 80063ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063cc:	4694      	mov	ip, r2
 80063ce:	4463      	add	r3, ip
 80063d0:	001f      	movs	r7, r3
 80063d2:	0030      	movs	r0, r6
 80063d4:	0019      	movs	r1, r3
 80063d6:	f003 f803 	bl	80093e0 <__ulp>
 80063da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063de:	f7fb f917 	bl	8001610 <__aeabi_dmul>
 80063e2:	0032      	movs	r2, r6
 80063e4:	003b      	movs	r3, r7
 80063e6:	f7fa f9b9 	bl	800075c <__aeabi_dadd>
 80063ea:	4a69      	ldr	r2, [pc, #420]	; (8006590 <_strtod_l+0xbe4>)
 80063ec:	4b6b      	ldr	r3, [pc, #428]	; (800659c <_strtod_l+0xbf0>)
 80063ee:	0006      	movs	r6, r0
 80063f0:	400a      	ands	r2, r1
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d949      	bls.n	800648a <_strtod_l+0xade>
 80063f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063f8:	4b69      	ldr	r3, [pc, #420]	; (80065a0 <_strtod_l+0xbf4>)
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d103      	bne.n	8006406 <_strtod_l+0xa5a>
 80063fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006400:	3301      	adds	r3, #1
 8006402:	d100      	bne.n	8006406 <_strtod_l+0xa5a>
 8006404:	e535      	b.n	8005e72 <_strtod_l+0x4c6>
 8006406:	2601      	movs	r6, #1
 8006408:	4f65      	ldr	r7, [pc, #404]	; (80065a0 <_strtod_l+0xbf4>)
 800640a:	4276      	negs	r6, r6
 800640c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800640e:	9804      	ldr	r0, [sp, #16]
 8006410:	f002 fca4 	bl	8008d5c <_Bfree>
 8006414:	9908      	ldr	r1, [sp, #32]
 8006416:	9804      	ldr	r0, [sp, #16]
 8006418:	f002 fca0 	bl	8008d5c <_Bfree>
 800641c:	9906      	ldr	r1, [sp, #24]
 800641e:	9804      	ldr	r0, [sp, #16]
 8006420:	f002 fc9c 	bl	8008d5c <_Bfree>
 8006424:	9905      	ldr	r1, [sp, #20]
 8006426:	9804      	ldr	r0, [sp, #16]
 8006428:	f002 fc98 	bl	8008d5c <_Bfree>
 800642c:	e60b      	b.n	8006046 <_strtod_l+0x69a>
 800642e:	2e01      	cmp	r6, #1
 8006430:	d103      	bne.n	800643a <_strtod_l+0xa8e>
 8006432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d100      	bne.n	800643a <_strtod_l+0xa8e>
 8006438:	e58e      	b.n	8005f58 <_strtod_l+0x5ac>
 800643a:	2300      	movs	r3, #0
 800643c:	4c59      	ldr	r4, [pc, #356]	; (80065a4 <_strtod_l+0xbf8>)
 800643e:	930a      	str	r3, [sp, #40]	; 0x28
 8006440:	940b      	str	r4, [sp, #44]	; 0x2c
 8006442:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006444:	e01c      	b.n	8006480 <_strtod_l+0xad4>
 8006446:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006448:	4d50      	ldr	r5, [pc, #320]	; (800658c <_strtod_l+0xbe0>)
 800644a:	e7ab      	b.n	80063a4 <_strtod_l+0x9f8>
 800644c:	2200      	movs	r2, #0
 800644e:	0020      	movs	r0, r4
 8006450:	0029      	movs	r1, r5
 8006452:	4b4e      	ldr	r3, [pc, #312]	; (800658c <_strtod_l+0xbe0>)
 8006454:	f7fb f8dc 	bl	8001610 <__aeabi_dmul>
 8006458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800645a:	0004      	movs	r4, r0
 800645c:	000b      	movs	r3, r1
 800645e:	000d      	movs	r5, r1
 8006460:	2a00      	cmp	r2, #0
 8006462:	d104      	bne.n	800646e <_strtod_l+0xac2>
 8006464:	2280      	movs	r2, #128	; 0x80
 8006466:	0612      	lsls	r2, r2, #24
 8006468:	900a      	str	r0, [sp, #40]	; 0x28
 800646a:	188b      	adds	r3, r1, r2
 800646c:	e79e      	b.n	80063ac <_strtod_l+0xa00>
 800646e:	0002      	movs	r2, r0
 8006470:	920a      	str	r2, [sp, #40]	; 0x28
 8006472:	930b      	str	r3, [sp, #44]	; 0x2c
 8006474:	e79b      	b.n	80063ae <_strtod_l+0xa02>
 8006476:	2300      	movs	r3, #0
 8006478:	4c43      	ldr	r4, [pc, #268]	; (8006588 <_strtod_l+0xbdc>)
 800647a:	930a      	str	r3, [sp, #40]	; 0x28
 800647c:	940b      	str	r4, [sp, #44]	; 0x2c
 800647e:	2400      	movs	r4, #0
 8006480:	4d41      	ldr	r5, [pc, #260]	; (8006588 <_strtod_l+0xbdc>)
 8006482:	e794      	b.n	80063ae <_strtod_l+0xa02>
 8006484:	2300      	movs	r3, #0
 8006486:	4c47      	ldr	r4, [pc, #284]	; (80065a4 <_strtod_l+0xbf8>)
 8006488:	e7f7      	b.n	800647a <_strtod_l+0xace>
 800648a:	23d4      	movs	r3, #212	; 0xd4
 800648c:	049b      	lsls	r3, r3, #18
 800648e:	18cf      	adds	r7, r1, r3
 8006490:	9b07      	ldr	r3, [sp, #28]
 8006492:	970e      	str	r7, [sp, #56]	; 0x38
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1b9      	bne.n	800640c <_strtod_l+0xa60>
 8006498:	4b3d      	ldr	r3, [pc, #244]	; (8006590 <_strtod_l+0xbe4>)
 800649a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800649c:	403b      	ands	r3, r7
 800649e:	429a      	cmp	r2, r3
 80064a0:	d1b4      	bne.n	800640c <_strtod_l+0xa60>
 80064a2:	0020      	movs	r0, r4
 80064a4:	0029      	movs	r1, r5
 80064a6:	f7fa f83b 	bl	8000520 <__aeabi_d2lz>
 80064aa:	f7fa f875 	bl	8000598 <__aeabi_l2d>
 80064ae:	0002      	movs	r2, r0
 80064b0:	000b      	movs	r3, r1
 80064b2:	0020      	movs	r0, r4
 80064b4:	0029      	movs	r1, r5
 80064b6:	f7fb fb6d 	bl	8001b94 <__aeabi_dsub>
 80064ba:	033b      	lsls	r3, r7, #12
 80064bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064be:	0b1b      	lsrs	r3, r3, #12
 80064c0:	4333      	orrs	r3, r6
 80064c2:	4313      	orrs	r3, r2
 80064c4:	0004      	movs	r4, r0
 80064c6:	000d      	movs	r5, r1
 80064c8:	4a37      	ldr	r2, [pc, #220]	; (80065a8 <_strtod_l+0xbfc>)
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d054      	beq.n	8006578 <_strtod_l+0xbcc>
 80064ce:	4b37      	ldr	r3, [pc, #220]	; (80065ac <_strtod_l+0xc00>)
 80064d0:	f7f9 ffc0 	bl	8000454 <__aeabi_dcmplt>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d000      	beq.n	80064da <_strtod_l+0xb2e>
 80064d8:	e4d4      	b.n	8005e84 <_strtod_l+0x4d8>
 80064da:	0020      	movs	r0, r4
 80064dc:	0029      	movs	r1, r5
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <_strtod_l+0xc04>)
 80064e0:	4b2a      	ldr	r3, [pc, #168]	; (800658c <_strtod_l+0xbe0>)
 80064e2:	f7f9 ffcb 	bl	800047c <__aeabi_dcmpgt>
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d090      	beq.n	800640c <_strtod_l+0xa60>
 80064ea:	e4cb      	b.n	8005e84 <_strtod_l+0x4d8>
 80064ec:	9b07      	ldr	r3, [sp, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d02b      	beq.n	800654a <_strtod_l+0xb9e>
 80064f2:	23d4      	movs	r3, #212	; 0xd4
 80064f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80064f6:	04db      	lsls	r3, r3, #19
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d826      	bhi.n	800654a <_strtod_l+0xb9e>
 80064fc:	0020      	movs	r0, r4
 80064fe:	0029      	movs	r1, r5
 8006500:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <_strtod_l+0xc08>)
 8006502:	4b2d      	ldr	r3, [pc, #180]	; (80065b8 <_strtod_l+0xc0c>)
 8006504:	f7f9 ffb0 	bl	8000468 <__aeabi_dcmple>
 8006508:	2800      	cmp	r0, #0
 800650a:	d017      	beq.n	800653c <_strtod_l+0xb90>
 800650c:	0020      	movs	r0, r4
 800650e:	0029      	movs	r1, r5
 8006510:	f7f9 ffe8 	bl	80004e4 <__aeabi_d2uiz>
 8006514:	2800      	cmp	r0, #0
 8006516:	d100      	bne.n	800651a <_strtod_l+0xb6e>
 8006518:	3001      	adds	r0, #1
 800651a:	f7fb ff41 	bl	80023a0 <__aeabi_ui2d>
 800651e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006520:	0004      	movs	r4, r0
 8006522:	000b      	movs	r3, r1
 8006524:	000d      	movs	r5, r1
 8006526:	2a00      	cmp	r2, #0
 8006528:	d122      	bne.n	8006570 <_strtod_l+0xbc4>
 800652a:	2280      	movs	r2, #128	; 0x80
 800652c:	0612      	lsls	r2, r2, #24
 800652e:	188b      	adds	r3, r1, r2
 8006530:	9016      	str	r0, [sp, #88]	; 0x58
 8006532:	9317      	str	r3, [sp, #92]	; 0x5c
 8006534:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006538:	9212      	str	r2, [sp, #72]	; 0x48
 800653a:	9313      	str	r3, [sp, #76]	; 0x4c
 800653c:	22d6      	movs	r2, #214	; 0xd6
 800653e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006540:	04d2      	lsls	r2, r2, #19
 8006542:	189b      	adds	r3, r3, r2
 8006544:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006546:	1a9b      	subs	r3, r3, r2
 8006548:	9313      	str	r3, [sp, #76]	; 0x4c
 800654a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800654c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800654e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006550:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8006552:	f002 ff45 	bl	80093e0 <__ulp>
 8006556:	0002      	movs	r2, r0
 8006558:	000b      	movs	r3, r1
 800655a:	0030      	movs	r0, r6
 800655c:	0039      	movs	r1, r7
 800655e:	f7fb f857 	bl	8001610 <__aeabi_dmul>
 8006562:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006564:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006566:	f7fa f8f9 	bl	800075c <__aeabi_dadd>
 800656a:	0006      	movs	r6, r0
 800656c:	000f      	movs	r7, r1
 800656e:	e78f      	b.n	8006490 <_strtod_l+0xae4>
 8006570:	0002      	movs	r2, r0
 8006572:	9216      	str	r2, [sp, #88]	; 0x58
 8006574:	9317      	str	r3, [sp, #92]	; 0x5c
 8006576:	e7dd      	b.n	8006534 <_strtod_l+0xb88>
 8006578:	4b10      	ldr	r3, [pc, #64]	; (80065bc <_strtod_l+0xc10>)
 800657a:	f7f9 ff6b 	bl	8000454 <__aeabi_dcmplt>
 800657e:	e7b2      	b.n	80064e6 <_strtod_l+0xb3a>
 8006580:	fff00000 	.word	0xfff00000
 8006584:	000fffff 	.word	0x000fffff
 8006588:	3ff00000 	.word	0x3ff00000
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	7ff00000 	.word	0x7ff00000
 8006594:	7fe00000 	.word	0x7fe00000
 8006598:	fcb00000 	.word	0xfcb00000
 800659c:	7c9fffff 	.word	0x7c9fffff
 80065a0:	7fefffff 	.word	0x7fefffff
 80065a4:	bff00000 	.word	0xbff00000
 80065a8:	94a03595 	.word	0x94a03595
 80065ac:	3fdfffff 	.word	0x3fdfffff
 80065b0:	35afe535 	.word	0x35afe535
 80065b4:	ffc00000 	.word	0xffc00000
 80065b8:	41dfffff 	.word	0x41dfffff
 80065bc:	3fcfffff 	.word	0x3fcfffff

080065c0 <_strtod_r>:
 80065c0:	b510      	push	{r4, lr}
 80065c2:	4b02      	ldr	r3, [pc, #8]	; (80065cc <_strtod_r+0xc>)
 80065c4:	f7ff f9f2 	bl	80059ac <_strtod_l>
 80065c8:	bd10      	pop	{r4, pc}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	2000001c 	.word	0x2000001c

080065d0 <__cvt>:
 80065d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d2:	001e      	movs	r6, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	0014      	movs	r4, r2
 80065d8:	b08b      	sub	sp, #44	; 0x2c
 80065da:	429e      	cmp	r6, r3
 80065dc:	da04      	bge.n	80065e8 <__cvt+0x18>
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	0609      	lsls	r1, r1, #24
 80065e2:	1873      	adds	r3, r6, r1
 80065e4:	001e      	movs	r6, r3
 80065e6:	232d      	movs	r3, #45	; 0x2d
 80065e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80065ec:	7013      	strb	r3, [r2, #0]
 80065ee:	2320      	movs	r3, #32
 80065f0:	2203      	movs	r2, #3
 80065f2:	439f      	bics	r7, r3
 80065f4:	2f46      	cmp	r7, #70	; 0x46
 80065f6:	d007      	beq.n	8006608 <__cvt+0x38>
 80065f8:	003b      	movs	r3, r7
 80065fa:	3b45      	subs	r3, #69	; 0x45
 80065fc:	4259      	negs	r1, r3
 80065fe:	414b      	adcs	r3, r1
 8006600:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006602:	3a01      	subs	r2, #1
 8006604:	18cb      	adds	r3, r1, r3
 8006606:	9310      	str	r3, [sp, #64]	; 0x40
 8006608:	ab09      	add	r3, sp, #36	; 0x24
 800660a:	9304      	str	r3, [sp, #16]
 800660c:	ab08      	add	r3, sp, #32
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006612:	9200      	str	r2, [sp, #0]
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006618:	0022      	movs	r2, r4
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	0033      	movs	r3, r6
 800661e:	f001 f8d5 	bl	80077cc <_dtoa_r>
 8006622:	0005      	movs	r5, r0
 8006624:	2f47      	cmp	r7, #71	; 0x47
 8006626:	d102      	bne.n	800662e <__cvt+0x5e>
 8006628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800662a:	07db      	lsls	r3, r3, #31
 800662c:	d528      	bpl.n	8006680 <__cvt+0xb0>
 800662e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006630:	18eb      	adds	r3, r5, r3
 8006632:	9307      	str	r3, [sp, #28]
 8006634:	2f46      	cmp	r7, #70	; 0x46
 8006636:	d114      	bne.n	8006662 <__cvt+0x92>
 8006638:	782b      	ldrb	r3, [r5, #0]
 800663a:	2b30      	cmp	r3, #48	; 0x30
 800663c:	d10c      	bne.n	8006658 <__cvt+0x88>
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	0020      	movs	r0, r4
 8006644:	0031      	movs	r1, r6
 8006646:	f7f9 feff 	bl	8000448 <__aeabi_dcmpeq>
 800664a:	2800      	cmp	r0, #0
 800664c:	d104      	bne.n	8006658 <__cvt+0x88>
 800664e:	2301      	movs	r3, #1
 8006650:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800665a:	9a07      	ldr	r2, [sp, #28]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	18d3      	adds	r3, r2, r3
 8006660:	9307      	str	r3, [sp, #28]
 8006662:	2200      	movs	r2, #0
 8006664:	2300      	movs	r3, #0
 8006666:	0020      	movs	r0, r4
 8006668:	0031      	movs	r1, r6
 800666a:	f7f9 feed 	bl	8000448 <__aeabi_dcmpeq>
 800666e:	2800      	cmp	r0, #0
 8006670:	d001      	beq.n	8006676 <__cvt+0xa6>
 8006672:	9b07      	ldr	r3, [sp, #28]
 8006674:	9309      	str	r3, [sp, #36]	; 0x24
 8006676:	2230      	movs	r2, #48	; 0x30
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	9907      	ldr	r1, [sp, #28]
 800667c:	428b      	cmp	r3, r1
 800667e:	d306      	bcc.n	800668e <__cvt+0xbe>
 8006680:	0028      	movs	r0, r5
 8006682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006684:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006686:	1b5b      	subs	r3, r3, r5
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	b00b      	add	sp, #44	; 0x2c
 800668c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	9109      	str	r1, [sp, #36]	; 0x24
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	e7f0      	b.n	8006678 <__cvt+0xa8>

08006696 <__exponent>:
 8006696:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006698:	1c83      	adds	r3, r0, #2
 800669a:	b087      	sub	sp, #28
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	0005      	movs	r5, r0
 80066a0:	000c      	movs	r4, r1
 80066a2:	232b      	movs	r3, #43	; 0x2b
 80066a4:	7002      	strb	r2, [r0, #0]
 80066a6:	2900      	cmp	r1, #0
 80066a8:	da01      	bge.n	80066ae <__exponent+0x18>
 80066aa:	424c      	negs	r4, r1
 80066ac:	3302      	adds	r3, #2
 80066ae:	706b      	strb	r3, [r5, #1]
 80066b0:	2c09      	cmp	r4, #9
 80066b2:	dd2f      	ble.n	8006714 <__exponent+0x7e>
 80066b4:	270a      	movs	r7, #10
 80066b6:	ab04      	add	r3, sp, #16
 80066b8:	1dde      	adds	r6, r3, #7
 80066ba:	0020      	movs	r0, r4
 80066bc:	0039      	movs	r1, r7
 80066be:	9601      	str	r6, [sp, #4]
 80066c0:	f7f9 feac 	bl	800041c <__aeabi_idivmod>
 80066c4:	3e01      	subs	r6, #1
 80066c6:	3130      	adds	r1, #48	; 0x30
 80066c8:	0020      	movs	r0, r4
 80066ca:	7031      	strb	r1, [r6, #0]
 80066cc:	0039      	movs	r1, r7
 80066ce:	9402      	str	r4, [sp, #8]
 80066d0:	f7f9 fdbe 	bl	8000250 <__divsi3>
 80066d4:	9b02      	ldr	r3, [sp, #8]
 80066d6:	0004      	movs	r4, r0
 80066d8:	2b63      	cmp	r3, #99	; 0x63
 80066da:	dcee      	bgt.n	80066ba <__exponent+0x24>
 80066dc:	9b01      	ldr	r3, [sp, #4]
 80066de:	3430      	adds	r4, #48	; 0x30
 80066e0:	1e9a      	subs	r2, r3, #2
 80066e2:	0013      	movs	r3, r2
 80066e4:	9903      	ldr	r1, [sp, #12]
 80066e6:	7014      	strb	r4, [r2, #0]
 80066e8:	a804      	add	r0, sp, #16
 80066ea:	3007      	adds	r0, #7
 80066ec:	4298      	cmp	r0, r3
 80066ee:	d80c      	bhi.n	800670a <__exponent+0x74>
 80066f0:	2300      	movs	r3, #0
 80066f2:	4282      	cmp	r2, r0
 80066f4:	d804      	bhi.n	8006700 <__exponent+0x6a>
 80066f6:	aa04      	add	r2, sp, #16
 80066f8:	3309      	adds	r3, #9
 80066fa:	189b      	adds	r3, r3, r2
 80066fc:	9a01      	ldr	r2, [sp, #4]
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	9a03      	ldr	r2, [sp, #12]
 8006702:	18d3      	adds	r3, r2, r3
 8006704:	1b58      	subs	r0, r3, r5
 8006706:	b007      	add	sp, #28
 8006708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800670a:	7818      	ldrb	r0, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	7008      	strb	r0, [r1, #0]
 8006710:	3101      	adds	r1, #1
 8006712:	e7e9      	b.n	80066e8 <__exponent+0x52>
 8006714:	2330      	movs	r3, #48	; 0x30
 8006716:	3430      	adds	r4, #48	; 0x30
 8006718:	70ab      	strb	r3, [r5, #2]
 800671a:	70ec      	strb	r4, [r5, #3]
 800671c:	1d2b      	adds	r3, r5, #4
 800671e:	e7f1      	b.n	8006704 <__exponent+0x6e>

08006720 <_printf_float>:
 8006720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006722:	b095      	sub	sp, #84	; 0x54
 8006724:	000c      	movs	r4, r1
 8006726:	9208      	str	r2, [sp, #32]
 8006728:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800672a:	9309      	str	r3, [sp, #36]	; 0x24
 800672c:	0007      	movs	r7, r0
 800672e:	f000 ff1f 	bl	8007570 <_localeconv_r>
 8006732:	6803      	ldr	r3, [r0, #0]
 8006734:	0018      	movs	r0, r3
 8006736:	930c      	str	r3, [sp, #48]	; 0x30
 8006738:	f7f9 fce4 	bl	8000104 <strlen>
 800673c:	2300      	movs	r3, #0
 800673e:	9312      	str	r3, [sp, #72]	; 0x48
 8006740:	7e23      	ldrb	r3, [r4, #24]
 8006742:	2207      	movs	r2, #7
 8006744:	930a      	str	r3, [sp, #40]	; 0x28
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	900d      	str	r0, [sp, #52]	; 0x34
 800674a:	930b      	str	r3, [sp, #44]	; 0x2c
 800674c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800674e:	682b      	ldr	r3, [r5, #0]
 8006750:	05c9      	lsls	r1, r1, #23
 8006752:	d547      	bpl.n	80067e4 <_printf_float+0xc4>
 8006754:	189b      	adds	r3, r3, r2
 8006756:	4393      	bics	r3, r2
 8006758:	001a      	movs	r2, r3
 800675a:	3208      	adds	r2, #8
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	681e      	ldr	r6, [r3, #0]
 8006760:	685d      	ldr	r5, [r3, #4]
 8006762:	0032      	movs	r2, r6
 8006764:	002b      	movs	r3, r5
 8006766:	64a2      	str	r2, [r4, #72]	; 0x48
 8006768:	64e3      	str	r3, [r4, #76]	; 0x4c
 800676a:	2201      	movs	r2, #1
 800676c:	006b      	lsls	r3, r5, #1
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	930e      	str	r3, [sp, #56]	; 0x38
 8006772:	0030      	movs	r0, r6
 8006774:	4bab      	ldr	r3, [pc, #684]	; (8006a24 <_printf_float+0x304>)
 8006776:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006778:	4252      	negs	r2, r2
 800677a:	f7fb fd8d 	bl	8002298 <__aeabi_dcmpun>
 800677e:	2800      	cmp	r0, #0
 8006780:	d132      	bne.n	80067e8 <_printf_float+0xc8>
 8006782:	2201      	movs	r2, #1
 8006784:	0030      	movs	r0, r6
 8006786:	4ba7      	ldr	r3, [pc, #668]	; (8006a24 <_printf_float+0x304>)
 8006788:	990e      	ldr	r1, [sp, #56]	; 0x38
 800678a:	4252      	negs	r2, r2
 800678c:	f7f9 fe6c 	bl	8000468 <__aeabi_dcmple>
 8006790:	2800      	cmp	r0, #0
 8006792:	d129      	bne.n	80067e8 <_printf_float+0xc8>
 8006794:	2200      	movs	r2, #0
 8006796:	2300      	movs	r3, #0
 8006798:	0030      	movs	r0, r6
 800679a:	0029      	movs	r1, r5
 800679c:	f7f9 fe5a 	bl	8000454 <__aeabi_dcmplt>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d003      	beq.n	80067ac <_printf_float+0x8c>
 80067a4:	0023      	movs	r3, r4
 80067a6:	222d      	movs	r2, #45	; 0x2d
 80067a8:	3343      	adds	r3, #67	; 0x43
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ae:	4d9e      	ldr	r5, [pc, #632]	; (8006a28 <_printf_float+0x308>)
 80067b0:	2b47      	cmp	r3, #71	; 0x47
 80067b2:	d900      	bls.n	80067b6 <_printf_float+0x96>
 80067b4:	4d9d      	ldr	r5, [pc, #628]	; (8006a2c <_printf_float+0x30c>)
 80067b6:	2303      	movs	r3, #3
 80067b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ba:	6123      	str	r3, [r4, #16]
 80067bc:	3301      	adds	r3, #1
 80067be:	439a      	bics	r2, r3
 80067c0:	2300      	movs	r3, #0
 80067c2:	6022      	str	r2, [r4, #0]
 80067c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	0021      	movs	r1, r4
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	0038      	movs	r0, r7
 80067ce:	9b08      	ldr	r3, [sp, #32]
 80067d0:	aa13      	add	r2, sp, #76	; 0x4c
 80067d2:	f000 f9fb 	bl	8006bcc <_printf_common>
 80067d6:	3001      	adds	r0, #1
 80067d8:	d000      	beq.n	80067dc <_printf_float+0xbc>
 80067da:	e0a3      	b.n	8006924 <_printf_float+0x204>
 80067dc:	2001      	movs	r0, #1
 80067de:	4240      	negs	r0, r0
 80067e0:	b015      	add	sp, #84	; 0x54
 80067e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e4:	3307      	adds	r3, #7
 80067e6:	e7b6      	b.n	8006756 <_printf_float+0x36>
 80067e8:	0032      	movs	r2, r6
 80067ea:	002b      	movs	r3, r5
 80067ec:	0030      	movs	r0, r6
 80067ee:	0029      	movs	r1, r5
 80067f0:	f7fb fd52 	bl	8002298 <__aeabi_dcmpun>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d00b      	beq.n	8006810 <_printf_float+0xf0>
 80067f8:	2d00      	cmp	r5, #0
 80067fa:	da03      	bge.n	8006804 <_printf_float+0xe4>
 80067fc:	0023      	movs	r3, r4
 80067fe:	222d      	movs	r2, #45	; 0x2d
 8006800:	3343      	adds	r3, #67	; 0x43
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	4d8a      	ldr	r5, [pc, #552]	; (8006a30 <_printf_float+0x310>)
 8006808:	2b47      	cmp	r3, #71	; 0x47
 800680a:	d9d4      	bls.n	80067b6 <_printf_float+0x96>
 800680c:	4d89      	ldr	r5, [pc, #548]	; (8006a34 <_printf_float+0x314>)
 800680e:	e7d2      	b.n	80067b6 <_printf_float+0x96>
 8006810:	2220      	movs	r2, #32
 8006812:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006814:	6863      	ldr	r3, [r4, #4]
 8006816:	4391      	bics	r1, r2
 8006818:	910e      	str	r1, [sp, #56]	; 0x38
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	d14a      	bne.n	80068b4 <_printf_float+0x194>
 800681e:	3307      	adds	r3, #7
 8006820:	6063      	str	r3, [r4, #4]
 8006822:	2380      	movs	r3, #128	; 0x80
 8006824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	4313      	orrs	r3, r2
 800682a:	2200      	movs	r2, #0
 800682c:	9206      	str	r2, [sp, #24]
 800682e:	aa12      	add	r2, sp, #72	; 0x48
 8006830:	9205      	str	r2, [sp, #20]
 8006832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006834:	6023      	str	r3, [r4, #0]
 8006836:	9204      	str	r2, [sp, #16]
 8006838:	aa11      	add	r2, sp, #68	; 0x44
 800683a:	9203      	str	r2, [sp, #12]
 800683c:	2223      	movs	r2, #35	; 0x23
 800683e:	a908      	add	r1, sp, #32
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	1852      	adds	r2, r2, r1
 8006846:	9202      	str	r2, [sp, #8]
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	0032      	movs	r2, r6
 800684c:	002b      	movs	r3, r5
 800684e:	0038      	movs	r0, r7
 8006850:	f7ff febe 	bl	80065d0 <__cvt>
 8006854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006856:	0005      	movs	r5, r0
 8006858:	2b47      	cmp	r3, #71	; 0x47
 800685a:	d109      	bne.n	8006870 <_printf_float+0x150>
 800685c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800685e:	1cda      	adds	r2, r3, #3
 8006860:	db02      	blt.n	8006868 <_printf_float+0x148>
 8006862:	6862      	ldr	r2, [r4, #4]
 8006864:	4293      	cmp	r3, r2
 8006866:	dd49      	ble.n	80068fc <_printf_float+0x1dc>
 8006868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686a:	3b02      	subs	r3, #2
 800686c:	b2db      	uxtb	r3, r3
 800686e:	930a      	str	r3, [sp, #40]	; 0x28
 8006870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006872:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006874:	2b65      	cmp	r3, #101	; 0x65
 8006876:	d824      	bhi.n	80068c2 <_printf_float+0x1a2>
 8006878:	0020      	movs	r0, r4
 800687a:	001a      	movs	r2, r3
 800687c:	3901      	subs	r1, #1
 800687e:	3050      	adds	r0, #80	; 0x50
 8006880:	9111      	str	r1, [sp, #68]	; 0x44
 8006882:	f7ff ff08 	bl	8006696 <__exponent>
 8006886:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006888:	900b      	str	r0, [sp, #44]	; 0x2c
 800688a:	1813      	adds	r3, r2, r0
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	2a01      	cmp	r2, #1
 8006890:	dc02      	bgt.n	8006898 <_printf_float+0x178>
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	07d2      	lsls	r2, r2, #31
 8006896:	d501      	bpl.n	800689c <_printf_float+0x17c>
 8006898:	3301      	adds	r3, #1
 800689a:	6123      	str	r3, [r4, #16]
 800689c:	2323      	movs	r3, #35	; 0x23
 800689e:	aa08      	add	r2, sp, #32
 80068a0:	189b      	adds	r3, r3, r2
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d100      	bne.n	80068aa <_printf_float+0x18a>
 80068a8:	e78d      	b.n	80067c6 <_printf_float+0xa6>
 80068aa:	0023      	movs	r3, r4
 80068ac:	222d      	movs	r2, #45	; 0x2d
 80068ae:	3343      	adds	r3, #67	; 0x43
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e788      	b.n	80067c6 <_printf_float+0xa6>
 80068b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068b6:	2a47      	cmp	r2, #71	; 0x47
 80068b8:	d1b3      	bne.n	8006822 <_printf_float+0x102>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1b1      	bne.n	8006822 <_printf_float+0x102>
 80068be:	3301      	adds	r3, #1
 80068c0:	e7ae      	b.n	8006820 <_printf_float+0x100>
 80068c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068c4:	2b66      	cmp	r3, #102	; 0x66
 80068c6:	d11b      	bne.n	8006900 <_printf_float+0x1e0>
 80068c8:	6863      	ldr	r3, [r4, #4]
 80068ca:	2900      	cmp	r1, #0
 80068cc:	dd09      	ble.n	80068e2 <_printf_float+0x1c2>
 80068ce:	6121      	str	r1, [r4, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <_printf_float+0x1ba>
 80068d4:	6822      	ldr	r2, [r4, #0]
 80068d6:	07d2      	lsls	r2, r2, #31
 80068d8:	d50b      	bpl.n	80068f2 <_printf_float+0x1d2>
 80068da:	3301      	adds	r3, #1
 80068dc:	185b      	adds	r3, r3, r1
 80068de:	6123      	str	r3, [r4, #16]
 80068e0:	e007      	b.n	80068f2 <_printf_float+0x1d2>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d103      	bne.n	80068ee <_printf_float+0x1ce>
 80068e6:	2201      	movs	r2, #1
 80068e8:	6821      	ldr	r1, [r4, #0]
 80068ea:	4211      	tst	r1, r2
 80068ec:	d000      	beq.n	80068f0 <_printf_float+0x1d0>
 80068ee:	1c9a      	adds	r2, r3, #2
 80068f0:	6122      	str	r2, [r4, #16]
 80068f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80068f6:	2300      	movs	r3, #0
 80068f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80068fa:	e7cf      	b.n	800689c <_printf_float+0x17c>
 80068fc:	2367      	movs	r3, #103	; 0x67
 80068fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006900:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006902:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006904:	4299      	cmp	r1, r3
 8006906:	db06      	blt.n	8006916 <_printf_float+0x1f6>
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	6121      	str	r1, [r4, #16]
 800690c:	07db      	lsls	r3, r3, #31
 800690e:	d5f0      	bpl.n	80068f2 <_printf_float+0x1d2>
 8006910:	3101      	adds	r1, #1
 8006912:	6121      	str	r1, [r4, #16]
 8006914:	e7ed      	b.n	80068f2 <_printf_float+0x1d2>
 8006916:	2201      	movs	r2, #1
 8006918:	2900      	cmp	r1, #0
 800691a:	dc01      	bgt.n	8006920 <_printf_float+0x200>
 800691c:	1892      	adds	r2, r2, r2
 800691e:	1a52      	subs	r2, r2, r1
 8006920:	189b      	adds	r3, r3, r2
 8006922:	e7dc      	b.n	80068de <_printf_float+0x1be>
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	0553      	lsls	r3, r2, #21
 8006928:	d408      	bmi.n	800693c <_printf_float+0x21c>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	002a      	movs	r2, r5
 800692e:	0038      	movs	r0, r7
 8006930:	9908      	ldr	r1, [sp, #32]
 8006932:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006934:	47a8      	blx	r5
 8006936:	3001      	adds	r0, #1
 8006938:	d12a      	bne.n	8006990 <_printf_float+0x270>
 800693a:	e74f      	b.n	80067dc <_printf_float+0xbc>
 800693c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693e:	2b65      	cmp	r3, #101	; 0x65
 8006940:	d800      	bhi.n	8006944 <_printf_float+0x224>
 8006942:	e0ec      	b.n	8006b1e <_printf_float+0x3fe>
 8006944:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006946:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006948:	2200      	movs	r2, #0
 800694a:	2300      	movs	r3, #0
 800694c:	f7f9 fd7c 	bl	8000448 <__aeabi_dcmpeq>
 8006950:	2800      	cmp	r0, #0
 8006952:	d034      	beq.n	80069be <_printf_float+0x29e>
 8006954:	2301      	movs	r3, #1
 8006956:	0038      	movs	r0, r7
 8006958:	4a37      	ldr	r2, [pc, #220]	; (8006a38 <_printf_float+0x318>)
 800695a:	9908      	ldr	r1, [sp, #32]
 800695c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800695e:	47a8      	blx	r5
 8006960:	3001      	adds	r0, #1
 8006962:	d100      	bne.n	8006966 <_printf_float+0x246>
 8006964:	e73a      	b.n	80067dc <_printf_float+0xbc>
 8006966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006968:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800696a:	429a      	cmp	r2, r3
 800696c:	db02      	blt.n	8006974 <_printf_float+0x254>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	07db      	lsls	r3, r3, #31
 8006972:	d50d      	bpl.n	8006990 <_printf_float+0x270>
 8006974:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006976:	0038      	movs	r0, r7
 8006978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800697a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800697c:	9908      	ldr	r1, [sp, #32]
 800697e:	47a8      	blx	r5
 8006980:	2500      	movs	r5, #0
 8006982:	3001      	adds	r0, #1
 8006984:	d100      	bne.n	8006988 <_printf_float+0x268>
 8006986:	e729      	b.n	80067dc <_printf_float+0xbc>
 8006988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800698a:	3b01      	subs	r3, #1
 800698c:	42ab      	cmp	r3, r5
 800698e:	dc0a      	bgt.n	80069a6 <_printf_float+0x286>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	079b      	lsls	r3, r3, #30
 8006994:	d500      	bpl.n	8006998 <_printf_float+0x278>
 8006996:	e116      	b.n	8006bc6 <_printf_float+0x4a6>
 8006998:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800699a:	68e0      	ldr	r0, [r4, #12]
 800699c:	4298      	cmp	r0, r3
 800699e:	db00      	blt.n	80069a2 <_printf_float+0x282>
 80069a0:	e71e      	b.n	80067e0 <_printf_float+0xc0>
 80069a2:	0018      	movs	r0, r3
 80069a4:	e71c      	b.n	80067e0 <_printf_float+0xc0>
 80069a6:	0022      	movs	r2, r4
 80069a8:	2301      	movs	r3, #1
 80069aa:	0038      	movs	r0, r7
 80069ac:	9908      	ldr	r1, [sp, #32]
 80069ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80069b0:	321a      	adds	r2, #26
 80069b2:	47b0      	blx	r6
 80069b4:	3001      	adds	r0, #1
 80069b6:	d100      	bne.n	80069ba <_printf_float+0x29a>
 80069b8:	e710      	b.n	80067dc <_printf_float+0xbc>
 80069ba:	3501      	adds	r5, #1
 80069bc:	e7e4      	b.n	8006988 <_printf_float+0x268>
 80069be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dc3b      	bgt.n	8006a3c <_printf_float+0x31c>
 80069c4:	2301      	movs	r3, #1
 80069c6:	0038      	movs	r0, r7
 80069c8:	4a1b      	ldr	r2, [pc, #108]	; (8006a38 <_printf_float+0x318>)
 80069ca:	9908      	ldr	r1, [sp, #32]
 80069cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80069ce:	47b0      	blx	r6
 80069d0:	3001      	adds	r0, #1
 80069d2:	d100      	bne.n	80069d6 <_printf_float+0x2b6>
 80069d4:	e702      	b.n	80067dc <_printf_float+0xbc>
 80069d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069da:	4313      	orrs	r3, r2
 80069dc:	d102      	bne.n	80069e4 <_printf_float+0x2c4>
 80069de:	6823      	ldr	r3, [r4, #0]
 80069e0:	07db      	lsls	r3, r3, #31
 80069e2:	d5d5      	bpl.n	8006990 <_printf_float+0x270>
 80069e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069e6:	0038      	movs	r0, r7
 80069e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069ea:	9908      	ldr	r1, [sp, #32]
 80069ec:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80069ee:	47b0      	blx	r6
 80069f0:	2300      	movs	r3, #0
 80069f2:	3001      	adds	r0, #1
 80069f4:	d100      	bne.n	80069f8 <_printf_float+0x2d8>
 80069f6:	e6f1      	b.n	80067dc <_printf_float+0xbc>
 80069f8:	930a      	str	r3, [sp, #40]	; 0x28
 80069fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069fe:	425b      	negs	r3, r3
 8006a00:	4293      	cmp	r3, r2
 8006a02:	dc01      	bgt.n	8006a08 <_printf_float+0x2e8>
 8006a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a06:	e791      	b.n	800692c <_printf_float+0x20c>
 8006a08:	0022      	movs	r2, r4
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	0038      	movs	r0, r7
 8006a0e:	9908      	ldr	r1, [sp, #32]
 8006a10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006a12:	321a      	adds	r2, #26
 8006a14:	47b0      	blx	r6
 8006a16:	3001      	adds	r0, #1
 8006a18:	d100      	bne.n	8006a1c <_printf_float+0x2fc>
 8006a1a:	e6df      	b.n	80067dc <_printf_float+0xbc>
 8006a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1e:	3301      	adds	r3, #1
 8006a20:	e7ea      	b.n	80069f8 <_printf_float+0x2d8>
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	7fefffff 	.word	0x7fefffff
 8006a28:	0800a498 	.word	0x0800a498
 8006a2c:	0800a49c 	.word	0x0800a49c
 8006a30:	0800a4a0 	.word	0x0800a4a0
 8006a34:	0800a4a4 	.word	0x0800a4a4
 8006a38:	0800a4a8 	.word	0x0800a4a8
 8006a3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a40:	920a      	str	r2, [sp, #40]	; 0x28
 8006a42:	429a      	cmp	r2, r3
 8006a44:	dd00      	ble.n	8006a48 <_printf_float+0x328>
 8006a46:	930a      	str	r3, [sp, #40]	; 0x28
 8006a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	dc3d      	bgt.n	8006aca <_printf_float+0x3aa>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	930e      	str	r3, [sp, #56]	; 0x38
 8006a52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a54:	43db      	mvns	r3, r3
 8006a56:	17db      	asrs	r3, r3, #31
 8006a58:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a62:	4013      	ands	r3, r2
 8006a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	dc36      	bgt.n	8006adc <_printf_float+0x3bc>
 8006a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a72:	429a      	cmp	r2, r3
 8006a74:	db40      	blt.n	8006af8 <_printf_float+0x3d8>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	07db      	lsls	r3, r3, #31
 8006a7a:	d43d      	bmi.n	8006af8 <_printf_float+0x3d8>
 8006a7c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8006a7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a82:	1af3      	subs	r3, r6, r3
 8006a84:	1ab6      	subs	r6, r6, r2
 8006a86:	429e      	cmp	r6, r3
 8006a88:	dd00      	ble.n	8006a8c <_printf_float+0x36c>
 8006a8a:	001e      	movs	r6, r3
 8006a8c:	2e00      	cmp	r6, #0
 8006a8e:	dc3c      	bgt.n	8006b0a <_printf_float+0x3ea>
 8006a90:	2300      	movs	r3, #0
 8006a92:	930a      	str	r3, [sp, #40]	; 0x28
 8006a94:	43f3      	mvns	r3, r6
 8006a96:	17db      	asrs	r3, r3, #31
 8006a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a9a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aa2:	4032      	ands	r2, r6
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	dc00      	bgt.n	8006aae <_printf_float+0x38e>
 8006aac:	e770      	b.n	8006990 <_printf_float+0x270>
 8006aae:	0022      	movs	r2, r4
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	0038      	movs	r0, r7
 8006ab4:	9908      	ldr	r1, [sp, #32]
 8006ab6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ab8:	321a      	adds	r2, #26
 8006aba:	47a8      	blx	r5
 8006abc:	3001      	adds	r0, #1
 8006abe:	d100      	bne.n	8006ac2 <_printf_float+0x3a2>
 8006ac0:	e68c      	b.n	80067dc <_printf_float+0xbc>
 8006ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac8:	e7e7      	b.n	8006a9a <_printf_float+0x37a>
 8006aca:	002a      	movs	r2, r5
 8006acc:	0038      	movs	r0, r7
 8006ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad0:	9908      	ldr	r1, [sp, #32]
 8006ad2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ad4:	47b0      	blx	r6
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	d1b9      	bne.n	8006a4e <_printf_float+0x32e>
 8006ada:	e67f      	b.n	80067dc <_printf_float+0xbc>
 8006adc:	0022      	movs	r2, r4
 8006ade:	2301      	movs	r3, #1
 8006ae0:	0038      	movs	r0, r7
 8006ae2:	9908      	ldr	r1, [sp, #32]
 8006ae4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ae6:	321a      	adds	r2, #26
 8006ae8:	47b0      	blx	r6
 8006aea:	3001      	adds	r0, #1
 8006aec:	d100      	bne.n	8006af0 <_printf_float+0x3d0>
 8006aee:	e675      	b.n	80067dc <_printf_float+0xbc>
 8006af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006af2:	3301      	adds	r3, #1
 8006af4:	930e      	str	r3, [sp, #56]	; 0x38
 8006af6:	e7b0      	b.n	8006a5a <_printf_float+0x33a>
 8006af8:	0038      	movs	r0, r7
 8006afa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006afe:	9908      	ldr	r1, [sp, #32]
 8006b00:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b02:	47b0      	blx	r6
 8006b04:	3001      	adds	r0, #1
 8006b06:	d1b9      	bne.n	8006a7c <_printf_float+0x35c>
 8006b08:	e668      	b.n	80067dc <_printf_float+0xbc>
 8006b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b0c:	0038      	movs	r0, r7
 8006b0e:	18ea      	adds	r2, r5, r3
 8006b10:	9908      	ldr	r1, [sp, #32]
 8006b12:	0033      	movs	r3, r6
 8006b14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b16:	47a8      	blx	r5
 8006b18:	3001      	adds	r0, #1
 8006b1a:	d1b9      	bne.n	8006a90 <_printf_float+0x370>
 8006b1c:	e65e      	b.n	80067dc <_printf_float+0xbc>
 8006b1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	dc02      	bgt.n	8006b2a <_printf_float+0x40a>
 8006b24:	2301      	movs	r3, #1
 8006b26:	421a      	tst	r2, r3
 8006b28:	d03a      	beq.n	8006ba0 <_printf_float+0x480>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	002a      	movs	r2, r5
 8006b2e:	0038      	movs	r0, r7
 8006b30:	9908      	ldr	r1, [sp, #32]
 8006b32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b34:	47b0      	blx	r6
 8006b36:	3001      	adds	r0, #1
 8006b38:	d100      	bne.n	8006b3c <_printf_float+0x41c>
 8006b3a:	e64f      	b.n	80067dc <_printf_float+0xbc>
 8006b3c:	0038      	movs	r0, r7
 8006b3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b42:	9908      	ldr	r1, [sp, #32]
 8006b44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b46:	47b0      	blx	r6
 8006b48:	3001      	adds	r0, #1
 8006b4a:	d100      	bne.n	8006b4e <_printf_float+0x42e>
 8006b4c:	e646      	b.n	80067dc <_printf_float+0xbc>
 8006b4e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006b50:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b54:	2200      	movs	r2, #0
 8006b56:	001e      	movs	r6, r3
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f7f9 fc75 	bl	8000448 <__aeabi_dcmpeq>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d11c      	bne.n	8006b9c <_printf_float+0x47c>
 8006b62:	0033      	movs	r3, r6
 8006b64:	1c6a      	adds	r2, r5, #1
 8006b66:	3b01      	subs	r3, #1
 8006b68:	0038      	movs	r0, r7
 8006b6a:	9908      	ldr	r1, [sp, #32]
 8006b6c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b6e:	47a8      	blx	r5
 8006b70:	3001      	adds	r0, #1
 8006b72:	d10f      	bne.n	8006b94 <_printf_float+0x474>
 8006b74:	e632      	b.n	80067dc <_printf_float+0xbc>
 8006b76:	0022      	movs	r2, r4
 8006b78:	2301      	movs	r3, #1
 8006b7a:	0038      	movs	r0, r7
 8006b7c:	9908      	ldr	r1, [sp, #32]
 8006b7e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b80:	321a      	adds	r2, #26
 8006b82:	47b0      	blx	r6
 8006b84:	3001      	adds	r0, #1
 8006b86:	d100      	bne.n	8006b8a <_printf_float+0x46a>
 8006b88:	e628      	b.n	80067dc <_printf_float+0xbc>
 8006b8a:	3501      	adds	r5, #1
 8006b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	dcf0      	bgt.n	8006b76 <_printf_float+0x456>
 8006b94:	0022      	movs	r2, r4
 8006b96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b98:	3250      	adds	r2, #80	; 0x50
 8006b9a:	e6c8      	b.n	800692e <_printf_float+0x20e>
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	e7f5      	b.n	8006b8c <_printf_float+0x46c>
 8006ba0:	002a      	movs	r2, r5
 8006ba2:	e7e1      	b.n	8006b68 <_printf_float+0x448>
 8006ba4:	0022      	movs	r2, r4
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	0038      	movs	r0, r7
 8006baa:	9908      	ldr	r1, [sp, #32]
 8006bac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006bae:	3219      	adds	r2, #25
 8006bb0:	47b0      	blx	r6
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	d100      	bne.n	8006bb8 <_printf_float+0x498>
 8006bb6:	e611      	b.n	80067dc <_printf_float+0xbc>
 8006bb8:	3501      	adds	r5, #1
 8006bba:	68e3      	ldr	r3, [r4, #12]
 8006bbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bbe:	1a9b      	subs	r3, r3, r2
 8006bc0:	42ab      	cmp	r3, r5
 8006bc2:	dcef      	bgt.n	8006ba4 <_printf_float+0x484>
 8006bc4:	e6e8      	b.n	8006998 <_printf_float+0x278>
 8006bc6:	2500      	movs	r5, #0
 8006bc8:	e7f7      	b.n	8006bba <_printf_float+0x49a>
 8006bca:	46c0      	nop			; (mov r8, r8)

08006bcc <_printf_common>:
 8006bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bce:	0016      	movs	r6, r2
 8006bd0:	9301      	str	r3, [sp, #4]
 8006bd2:	688a      	ldr	r2, [r1, #8]
 8006bd4:	690b      	ldr	r3, [r1, #16]
 8006bd6:	000c      	movs	r4, r1
 8006bd8:	9000      	str	r0, [sp, #0]
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	da00      	bge.n	8006be0 <_printf_common+0x14>
 8006bde:	0013      	movs	r3, r2
 8006be0:	0022      	movs	r2, r4
 8006be2:	6033      	str	r3, [r6, #0]
 8006be4:	3243      	adds	r2, #67	; 0x43
 8006be6:	7812      	ldrb	r2, [r2, #0]
 8006be8:	2a00      	cmp	r2, #0
 8006bea:	d001      	beq.n	8006bf0 <_printf_common+0x24>
 8006bec:	3301      	adds	r3, #1
 8006bee:	6033      	str	r3, [r6, #0]
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	069b      	lsls	r3, r3, #26
 8006bf4:	d502      	bpl.n	8006bfc <_printf_common+0x30>
 8006bf6:	6833      	ldr	r3, [r6, #0]
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	6033      	str	r3, [r6, #0]
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	2306      	movs	r3, #6
 8006c00:	0015      	movs	r5, r2
 8006c02:	401d      	ands	r5, r3
 8006c04:	421a      	tst	r2, r3
 8006c06:	d027      	beq.n	8006c58 <_printf_common+0x8c>
 8006c08:	0023      	movs	r3, r4
 8006c0a:	3343      	adds	r3, #67	; 0x43
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	1e5a      	subs	r2, r3, #1
 8006c10:	4193      	sbcs	r3, r2
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	0692      	lsls	r2, r2, #26
 8006c16:	d430      	bmi.n	8006c7a <_printf_common+0xae>
 8006c18:	0022      	movs	r2, r4
 8006c1a:	9901      	ldr	r1, [sp, #4]
 8006c1c:	9800      	ldr	r0, [sp, #0]
 8006c1e:	9d08      	ldr	r5, [sp, #32]
 8006c20:	3243      	adds	r2, #67	; 0x43
 8006c22:	47a8      	blx	r5
 8006c24:	3001      	adds	r0, #1
 8006c26:	d025      	beq.n	8006c74 <_printf_common+0xa8>
 8006c28:	2206      	movs	r2, #6
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	2500      	movs	r5, #0
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d105      	bne.n	8006c40 <_printf_common+0x74>
 8006c34:	6833      	ldr	r3, [r6, #0]
 8006c36:	68e5      	ldr	r5, [r4, #12]
 8006c38:	1aed      	subs	r5, r5, r3
 8006c3a:	43eb      	mvns	r3, r5
 8006c3c:	17db      	asrs	r3, r3, #31
 8006c3e:	401d      	ands	r5, r3
 8006c40:	68a3      	ldr	r3, [r4, #8]
 8006c42:	6922      	ldr	r2, [r4, #16]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	dd01      	ble.n	8006c4c <_printf_common+0x80>
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	18ed      	adds	r5, r5, r3
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	42b5      	cmp	r5, r6
 8006c50:	d120      	bne.n	8006c94 <_printf_common+0xc8>
 8006c52:	2000      	movs	r0, #0
 8006c54:	e010      	b.n	8006c78 <_printf_common+0xac>
 8006c56:	3501      	adds	r5, #1
 8006c58:	68e3      	ldr	r3, [r4, #12]
 8006c5a:	6832      	ldr	r2, [r6, #0]
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	42ab      	cmp	r3, r5
 8006c60:	ddd2      	ble.n	8006c08 <_printf_common+0x3c>
 8006c62:	0022      	movs	r2, r4
 8006c64:	2301      	movs	r3, #1
 8006c66:	9901      	ldr	r1, [sp, #4]
 8006c68:	9800      	ldr	r0, [sp, #0]
 8006c6a:	9f08      	ldr	r7, [sp, #32]
 8006c6c:	3219      	adds	r2, #25
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	d1f0      	bne.n	8006c56 <_printf_common+0x8a>
 8006c74:	2001      	movs	r0, #1
 8006c76:	4240      	negs	r0, r0
 8006c78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c7a:	2030      	movs	r0, #48	; 0x30
 8006c7c:	18e1      	adds	r1, r4, r3
 8006c7e:	3143      	adds	r1, #67	; 0x43
 8006c80:	7008      	strb	r0, [r1, #0]
 8006c82:	0021      	movs	r1, r4
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	3145      	adds	r1, #69	; 0x45
 8006c88:	7809      	ldrb	r1, [r1, #0]
 8006c8a:	18a2      	adds	r2, r4, r2
 8006c8c:	3243      	adds	r2, #67	; 0x43
 8006c8e:	3302      	adds	r3, #2
 8006c90:	7011      	strb	r1, [r2, #0]
 8006c92:	e7c1      	b.n	8006c18 <_printf_common+0x4c>
 8006c94:	0022      	movs	r2, r4
 8006c96:	2301      	movs	r3, #1
 8006c98:	9901      	ldr	r1, [sp, #4]
 8006c9a:	9800      	ldr	r0, [sp, #0]
 8006c9c:	9f08      	ldr	r7, [sp, #32]
 8006c9e:	321a      	adds	r2, #26
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d0e6      	beq.n	8006c74 <_printf_common+0xa8>
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7d1      	b.n	8006c4e <_printf_common+0x82>
	...

08006cac <_printf_i>:
 8006cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cae:	b08b      	sub	sp, #44	; 0x2c
 8006cb0:	9206      	str	r2, [sp, #24]
 8006cb2:	000a      	movs	r2, r1
 8006cb4:	3243      	adds	r2, #67	; 0x43
 8006cb6:	9307      	str	r3, [sp, #28]
 8006cb8:	9005      	str	r0, [sp, #20]
 8006cba:	9204      	str	r2, [sp, #16]
 8006cbc:	7e0a      	ldrb	r2, [r1, #24]
 8006cbe:	000c      	movs	r4, r1
 8006cc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cc2:	2a78      	cmp	r2, #120	; 0x78
 8006cc4:	d809      	bhi.n	8006cda <_printf_i+0x2e>
 8006cc6:	2a62      	cmp	r2, #98	; 0x62
 8006cc8:	d80b      	bhi.n	8006ce2 <_printf_i+0x36>
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	d100      	bne.n	8006cd0 <_printf_i+0x24>
 8006cce:	e0be      	b.n	8006e4e <_printf_i+0x1a2>
 8006cd0:	497c      	ldr	r1, [pc, #496]	; (8006ec4 <_printf_i+0x218>)
 8006cd2:	9103      	str	r1, [sp, #12]
 8006cd4:	2a58      	cmp	r2, #88	; 0x58
 8006cd6:	d100      	bne.n	8006cda <_printf_i+0x2e>
 8006cd8:	e093      	b.n	8006e02 <_printf_i+0x156>
 8006cda:	0026      	movs	r6, r4
 8006cdc:	3642      	adds	r6, #66	; 0x42
 8006cde:	7032      	strb	r2, [r6, #0]
 8006ce0:	e022      	b.n	8006d28 <_printf_i+0x7c>
 8006ce2:	0010      	movs	r0, r2
 8006ce4:	3863      	subs	r0, #99	; 0x63
 8006ce6:	2815      	cmp	r0, #21
 8006ce8:	d8f7      	bhi.n	8006cda <_printf_i+0x2e>
 8006cea:	f7f9 fa1d 	bl	8000128 <__gnu_thumb1_case_shi>
 8006cee:	0016      	.short	0x0016
 8006cf0:	fff6001f 	.word	0xfff6001f
 8006cf4:	fff6fff6 	.word	0xfff6fff6
 8006cf8:	001ffff6 	.word	0x001ffff6
 8006cfc:	fff6fff6 	.word	0xfff6fff6
 8006d00:	fff6fff6 	.word	0xfff6fff6
 8006d04:	003600a3 	.word	0x003600a3
 8006d08:	fff60083 	.word	0xfff60083
 8006d0c:	00b4fff6 	.word	0x00b4fff6
 8006d10:	0036fff6 	.word	0x0036fff6
 8006d14:	fff6fff6 	.word	0xfff6fff6
 8006d18:	0087      	.short	0x0087
 8006d1a:	0026      	movs	r6, r4
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	3642      	adds	r6, #66	; 0x42
 8006d20:	1d11      	adds	r1, r2, #4
 8006d22:	6019      	str	r1, [r3, #0]
 8006d24:	6813      	ldr	r3, [r2, #0]
 8006d26:	7033      	strb	r3, [r6, #0]
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0a2      	b.n	8006e72 <_printf_i+0x1c6>
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	6809      	ldr	r1, [r1, #0]
 8006d30:	1d02      	adds	r2, r0, #4
 8006d32:	060d      	lsls	r5, r1, #24
 8006d34:	d50b      	bpl.n	8006d4e <_printf_i+0xa2>
 8006d36:	6805      	ldr	r5, [r0, #0]
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	2d00      	cmp	r5, #0
 8006d3c:	da03      	bge.n	8006d46 <_printf_i+0x9a>
 8006d3e:	232d      	movs	r3, #45	; 0x2d
 8006d40:	9a04      	ldr	r2, [sp, #16]
 8006d42:	426d      	negs	r5, r5
 8006d44:	7013      	strb	r3, [r2, #0]
 8006d46:	4b5f      	ldr	r3, [pc, #380]	; (8006ec4 <_printf_i+0x218>)
 8006d48:	270a      	movs	r7, #10
 8006d4a:	9303      	str	r3, [sp, #12]
 8006d4c:	e01b      	b.n	8006d86 <_printf_i+0xda>
 8006d4e:	6805      	ldr	r5, [r0, #0]
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	0649      	lsls	r1, r1, #25
 8006d54:	d5f1      	bpl.n	8006d3a <_printf_i+0x8e>
 8006d56:	b22d      	sxth	r5, r5
 8006d58:	e7ef      	b.n	8006d3a <_printf_i+0x8e>
 8006d5a:	680d      	ldr	r5, [r1, #0]
 8006d5c:	6819      	ldr	r1, [r3, #0]
 8006d5e:	1d08      	adds	r0, r1, #4
 8006d60:	6018      	str	r0, [r3, #0]
 8006d62:	062e      	lsls	r6, r5, #24
 8006d64:	d501      	bpl.n	8006d6a <_printf_i+0xbe>
 8006d66:	680d      	ldr	r5, [r1, #0]
 8006d68:	e003      	b.n	8006d72 <_printf_i+0xc6>
 8006d6a:	066d      	lsls	r5, r5, #25
 8006d6c:	d5fb      	bpl.n	8006d66 <_printf_i+0xba>
 8006d6e:	680d      	ldr	r5, [r1, #0]
 8006d70:	b2ad      	uxth	r5, r5
 8006d72:	4b54      	ldr	r3, [pc, #336]	; (8006ec4 <_printf_i+0x218>)
 8006d74:	2708      	movs	r7, #8
 8006d76:	9303      	str	r3, [sp, #12]
 8006d78:	2a6f      	cmp	r2, #111	; 0x6f
 8006d7a:	d000      	beq.n	8006d7e <_printf_i+0xd2>
 8006d7c:	3702      	adds	r7, #2
 8006d7e:	0023      	movs	r3, r4
 8006d80:	2200      	movs	r2, #0
 8006d82:	3343      	adds	r3, #67	; 0x43
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	6863      	ldr	r3, [r4, #4]
 8006d88:	60a3      	str	r3, [r4, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	db03      	blt.n	8006d96 <_printf_i+0xea>
 8006d8e:	2104      	movs	r1, #4
 8006d90:	6822      	ldr	r2, [r4, #0]
 8006d92:	438a      	bics	r2, r1
 8006d94:	6022      	str	r2, [r4, #0]
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	d102      	bne.n	8006da0 <_printf_i+0xf4>
 8006d9a:	9e04      	ldr	r6, [sp, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00c      	beq.n	8006dba <_printf_i+0x10e>
 8006da0:	9e04      	ldr	r6, [sp, #16]
 8006da2:	0028      	movs	r0, r5
 8006da4:	0039      	movs	r1, r7
 8006da6:	f7f9 fa4f 	bl	8000248 <__aeabi_uidivmod>
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	3e01      	subs	r6, #1
 8006dae:	5c5b      	ldrb	r3, [r3, r1]
 8006db0:	7033      	strb	r3, [r6, #0]
 8006db2:	002b      	movs	r3, r5
 8006db4:	0005      	movs	r5, r0
 8006db6:	429f      	cmp	r7, r3
 8006db8:	d9f3      	bls.n	8006da2 <_printf_i+0xf6>
 8006dba:	2f08      	cmp	r7, #8
 8006dbc:	d109      	bne.n	8006dd2 <_printf_i+0x126>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	07db      	lsls	r3, r3, #31
 8006dc2:	d506      	bpl.n	8006dd2 <_printf_i+0x126>
 8006dc4:	6862      	ldr	r2, [r4, #4]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	dc02      	bgt.n	8006dd2 <_printf_i+0x126>
 8006dcc:	2330      	movs	r3, #48	; 0x30
 8006dce:	3e01      	subs	r6, #1
 8006dd0:	7033      	strb	r3, [r6, #0]
 8006dd2:	9b04      	ldr	r3, [sp, #16]
 8006dd4:	1b9b      	subs	r3, r3, r6
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	9b07      	ldr	r3, [sp, #28]
 8006dda:	0021      	movs	r1, r4
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	9805      	ldr	r0, [sp, #20]
 8006de0:	9b06      	ldr	r3, [sp, #24]
 8006de2:	aa09      	add	r2, sp, #36	; 0x24
 8006de4:	f7ff fef2 	bl	8006bcc <_printf_common>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d147      	bne.n	8006e7c <_printf_i+0x1d0>
 8006dec:	2001      	movs	r0, #1
 8006dee:	4240      	negs	r0, r0
 8006df0:	b00b      	add	sp, #44	; 0x2c
 8006df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006df4:	2220      	movs	r2, #32
 8006df6:	6809      	ldr	r1, [r1, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	6022      	str	r2, [r4, #0]
 8006dfc:	2278      	movs	r2, #120	; 0x78
 8006dfe:	4932      	ldr	r1, [pc, #200]	; (8006ec8 <_printf_i+0x21c>)
 8006e00:	9103      	str	r1, [sp, #12]
 8006e02:	0021      	movs	r1, r4
 8006e04:	3145      	adds	r1, #69	; 0x45
 8006e06:	700a      	strb	r2, [r1, #0]
 8006e08:	6819      	ldr	r1, [r3, #0]
 8006e0a:	6822      	ldr	r2, [r4, #0]
 8006e0c:	c920      	ldmia	r1!, {r5}
 8006e0e:	0610      	lsls	r0, r2, #24
 8006e10:	d402      	bmi.n	8006e18 <_printf_i+0x16c>
 8006e12:	0650      	lsls	r0, r2, #25
 8006e14:	d500      	bpl.n	8006e18 <_printf_i+0x16c>
 8006e16:	b2ad      	uxth	r5, r5
 8006e18:	6019      	str	r1, [r3, #0]
 8006e1a:	07d3      	lsls	r3, r2, #31
 8006e1c:	d502      	bpl.n	8006e24 <_printf_i+0x178>
 8006e1e:	2320      	movs	r3, #32
 8006e20:	4313      	orrs	r3, r2
 8006e22:	6023      	str	r3, [r4, #0]
 8006e24:	2710      	movs	r7, #16
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	d1a9      	bne.n	8006d7e <_printf_i+0xd2>
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	4393      	bics	r3, r2
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	e7a4      	b.n	8006d7e <_printf_i+0xd2>
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	680d      	ldr	r5, [r1, #0]
 8006e38:	1d10      	adds	r0, r2, #4
 8006e3a:	6949      	ldr	r1, [r1, #20]
 8006e3c:	6018      	str	r0, [r3, #0]
 8006e3e:	6813      	ldr	r3, [r2, #0]
 8006e40:	062e      	lsls	r6, r5, #24
 8006e42:	d501      	bpl.n	8006e48 <_printf_i+0x19c>
 8006e44:	6019      	str	r1, [r3, #0]
 8006e46:	e002      	b.n	8006e4e <_printf_i+0x1a2>
 8006e48:	066d      	lsls	r5, r5, #25
 8006e4a:	d5fb      	bpl.n	8006e44 <_printf_i+0x198>
 8006e4c:	8019      	strh	r1, [r3, #0]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9e04      	ldr	r6, [sp, #16]
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	e7c0      	b.n	8006dd8 <_printf_i+0x12c>
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	1d11      	adds	r1, r2, #4
 8006e5a:	6019      	str	r1, [r3, #0]
 8006e5c:	6816      	ldr	r6, [r2, #0]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	0030      	movs	r0, r6
 8006e62:	6862      	ldr	r2, [r4, #4]
 8006e64:	f000 fc03 	bl	800766e <memchr>
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	d001      	beq.n	8006e70 <_printf_i+0x1c4>
 8006e6c:	1b80      	subs	r0, r0, r6
 8006e6e:	6060      	str	r0, [r4, #4]
 8006e70:	6863      	ldr	r3, [r4, #4]
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	2300      	movs	r3, #0
 8006e76:	9a04      	ldr	r2, [sp, #16]
 8006e78:	7013      	strb	r3, [r2, #0]
 8006e7a:	e7ad      	b.n	8006dd8 <_printf_i+0x12c>
 8006e7c:	0032      	movs	r2, r6
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	9906      	ldr	r1, [sp, #24]
 8006e82:	9805      	ldr	r0, [sp, #20]
 8006e84:	9d07      	ldr	r5, [sp, #28]
 8006e86:	47a8      	blx	r5
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d0af      	beq.n	8006dec <_printf_i+0x140>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	079b      	lsls	r3, r3, #30
 8006e90:	d415      	bmi.n	8006ebe <_printf_i+0x212>
 8006e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e94:	68e0      	ldr	r0, [r4, #12]
 8006e96:	4298      	cmp	r0, r3
 8006e98:	daaa      	bge.n	8006df0 <_printf_i+0x144>
 8006e9a:	0018      	movs	r0, r3
 8006e9c:	e7a8      	b.n	8006df0 <_printf_i+0x144>
 8006e9e:	0022      	movs	r2, r4
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	9906      	ldr	r1, [sp, #24]
 8006ea4:	9805      	ldr	r0, [sp, #20]
 8006ea6:	9e07      	ldr	r6, [sp, #28]
 8006ea8:	3219      	adds	r2, #25
 8006eaa:	47b0      	blx	r6
 8006eac:	3001      	adds	r0, #1
 8006eae:	d09d      	beq.n	8006dec <_printf_i+0x140>
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	68e3      	ldr	r3, [r4, #12]
 8006eb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	dcf0      	bgt.n	8006e9e <_printf_i+0x1f2>
 8006ebc:	e7e9      	b.n	8006e92 <_printf_i+0x1e6>
 8006ebe:	2500      	movs	r5, #0
 8006ec0:	e7f7      	b.n	8006eb2 <_printf_i+0x206>
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	0800a4aa 	.word	0x0800a4aa
 8006ec8:	0800a4bb 	.word	0x0800a4bb

08006ecc <_scanf_float>:
 8006ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ece:	b08b      	sub	sp, #44	; 0x2c
 8006ed0:	0016      	movs	r6, r2
 8006ed2:	9002      	str	r0, [sp, #8]
 8006ed4:	22ae      	movs	r2, #174	; 0xae
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	9307      	str	r3, [sp, #28]
 8006eda:	688b      	ldr	r3, [r1, #8]
 8006edc:	000f      	movs	r7, r1
 8006ede:	1e59      	subs	r1, r3, #1
 8006ee0:	0052      	lsls	r2, r2, #1
 8006ee2:	9006      	str	r0, [sp, #24]
 8006ee4:	4291      	cmp	r1, r2
 8006ee6:	d905      	bls.n	8006ef4 <_scanf_float+0x28>
 8006ee8:	3b5e      	subs	r3, #94	; 0x5e
 8006eea:	3bff      	subs	r3, #255	; 0xff
 8006eec:	9306      	str	r3, [sp, #24]
 8006eee:	235e      	movs	r3, #94	; 0x5e
 8006ef0:	33ff      	adds	r3, #255	; 0xff
 8006ef2:	60bb      	str	r3, [r7, #8]
 8006ef4:	23f0      	movs	r3, #240	; 0xf0
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	603b      	str	r3, [r7, #0]
 8006efe:	003b      	movs	r3, r7
 8006f00:	2400      	movs	r4, #0
 8006f02:	331c      	adds	r3, #28
 8006f04:	001d      	movs	r5, r3
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	9403      	str	r4, [sp, #12]
 8006f0a:	9409      	str	r4, [sp, #36]	; 0x24
 8006f0c:	9408      	str	r4, [sp, #32]
 8006f0e:	9401      	str	r4, [sp, #4]
 8006f10:	9405      	str	r4, [sp, #20]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	d00a      	beq.n	8006f2e <_scanf_float+0x62>
 8006f18:	6833      	ldr	r3, [r6, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b4e      	cmp	r3, #78	; 0x4e
 8006f1e:	d844      	bhi.n	8006faa <_scanf_float+0xde>
 8006f20:	0018      	movs	r0, r3
 8006f22:	2b40      	cmp	r3, #64	; 0x40
 8006f24:	d82c      	bhi.n	8006f80 <_scanf_float+0xb4>
 8006f26:	382b      	subs	r0, #43	; 0x2b
 8006f28:	b2c1      	uxtb	r1, r0
 8006f2a:	290e      	cmp	r1, #14
 8006f2c:	d92a      	bls.n	8006f84 <_scanf_float+0xb8>
 8006f2e:	9b01      	ldr	r3, [sp, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <_scanf_float+0x70>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	4aa3      	ldr	r2, [pc, #652]	; (80071c4 <_scanf_float+0x2f8>)
 8006f38:	4013      	ands	r3, r2
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d900      	bls.n	8006f46 <_scanf_float+0x7a>
 8006f44:	e0f9      	b.n	800713a <_scanf_float+0x26e>
 8006f46:	24be      	movs	r4, #190	; 0xbe
 8006f48:	0064      	lsls	r4, r4, #1
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	429d      	cmp	r5, r3
 8006f4e:	d900      	bls.n	8006f52 <_scanf_float+0x86>
 8006f50:	e0e9      	b.n	8007126 <_scanf_float+0x25a>
 8006f52:	2301      	movs	r3, #1
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	e183      	b.n	8007260 <_scanf_float+0x394>
 8006f58:	0018      	movs	r0, r3
 8006f5a:	3861      	subs	r0, #97	; 0x61
 8006f5c:	280d      	cmp	r0, #13
 8006f5e:	d8e6      	bhi.n	8006f2e <_scanf_float+0x62>
 8006f60:	f7f9 f8e2 	bl	8000128 <__gnu_thumb1_case_shi>
 8006f64:	ffe50083 	.word	0xffe50083
 8006f68:	ffe5ffe5 	.word	0xffe5ffe5
 8006f6c:	00a200b6 	.word	0x00a200b6
 8006f70:	ffe5ffe5 	.word	0xffe5ffe5
 8006f74:	ffe50089 	.word	0xffe50089
 8006f78:	ffe5ffe5 	.word	0xffe5ffe5
 8006f7c:	0065ffe5 	.word	0x0065ffe5
 8006f80:	3841      	subs	r0, #65	; 0x41
 8006f82:	e7eb      	b.n	8006f5c <_scanf_float+0x90>
 8006f84:	280e      	cmp	r0, #14
 8006f86:	d8d2      	bhi.n	8006f2e <_scanf_float+0x62>
 8006f88:	f7f9 f8ce 	bl	8000128 <__gnu_thumb1_case_shi>
 8006f8c:	ffd1004b 	.word	0xffd1004b
 8006f90:	0098004b 	.word	0x0098004b
 8006f94:	0020ffd1 	.word	0x0020ffd1
 8006f98:	00400040 	.word	0x00400040
 8006f9c:	00400040 	.word	0x00400040
 8006fa0:	00400040 	.word	0x00400040
 8006fa4:	00400040 	.word	0x00400040
 8006fa8:	0040      	.short	0x0040
 8006faa:	2b6e      	cmp	r3, #110	; 0x6e
 8006fac:	d809      	bhi.n	8006fc2 <_scanf_float+0xf6>
 8006fae:	2b60      	cmp	r3, #96	; 0x60
 8006fb0:	d8d2      	bhi.n	8006f58 <_scanf_float+0x8c>
 8006fb2:	2b54      	cmp	r3, #84	; 0x54
 8006fb4:	d07d      	beq.n	80070b2 <_scanf_float+0x1e6>
 8006fb6:	2b59      	cmp	r3, #89	; 0x59
 8006fb8:	d1b9      	bne.n	8006f2e <_scanf_float+0x62>
 8006fba:	2c07      	cmp	r4, #7
 8006fbc:	d1b7      	bne.n	8006f2e <_scanf_float+0x62>
 8006fbe:	2408      	movs	r4, #8
 8006fc0:	e02c      	b.n	800701c <_scanf_float+0x150>
 8006fc2:	2b74      	cmp	r3, #116	; 0x74
 8006fc4:	d075      	beq.n	80070b2 <_scanf_float+0x1e6>
 8006fc6:	2b79      	cmp	r3, #121	; 0x79
 8006fc8:	d0f7      	beq.n	8006fba <_scanf_float+0xee>
 8006fca:	e7b0      	b.n	8006f2e <_scanf_float+0x62>
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	05c8      	lsls	r0, r1, #23
 8006fd0:	d51c      	bpl.n	800700c <_scanf_float+0x140>
 8006fd2:	2380      	movs	r3, #128	; 0x80
 8006fd4:	4399      	bics	r1, r3
 8006fd6:	9b01      	ldr	r3, [sp, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	9b06      	ldr	r3, [sp, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d003      	beq.n	8006fec <_scanf_float+0x120>
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	3201      	adds	r2, #1
 8006fe8:	9306      	str	r3, [sp, #24]
 8006fea:	60ba      	str	r2, [r7, #8]
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60bb      	str	r3, [r7, #8]
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	6873      	ldr	r3, [r6, #4]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	6073      	str	r3, [r6, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dc00      	bgt.n	8007004 <_scanf_float+0x138>
 8007002:	e086      	b.n	8007112 <_scanf_float+0x246>
 8007004:	6833      	ldr	r3, [r6, #0]
 8007006:	3301      	adds	r3, #1
 8007008:	6033      	str	r3, [r6, #0]
 800700a:	e782      	b.n	8006f12 <_scanf_float+0x46>
 800700c:	9a03      	ldr	r2, [sp, #12]
 800700e:	1912      	adds	r2, r2, r4
 8007010:	2a00      	cmp	r2, #0
 8007012:	d18c      	bne.n	8006f2e <_scanf_float+0x62>
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	496c      	ldr	r1, [pc, #432]	; (80071c8 <_scanf_float+0x2fc>)
 8007018:	400a      	ands	r2, r1
 800701a:	603a      	str	r2, [r7, #0]
 800701c:	702b      	strb	r3, [r5, #0]
 800701e:	3501      	adds	r5, #1
 8007020:	e7e4      	b.n	8006fec <_scanf_float+0x120>
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	420a      	tst	r2, r1
 8007028:	d081      	beq.n	8006f2e <_scanf_float+0x62>
 800702a:	438a      	bics	r2, r1
 800702c:	e7f5      	b.n	800701a <_scanf_float+0x14e>
 800702e:	9a03      	ldr	r2, [sp, #12]
 8007030:	2a00      	cmp	r2, #0
 8007032:	d10f      	bne.n	8007054 <_scanf_float+0x188>
 8007034:	9a01      	ldr	r2, [sp, #4]
 8007036:	2a00      	cmp	r2, #0
 8007038:	d10f      	bne.n	800705a <_scanf_float+0x18e>
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	21e0      	movs	r1, #224	; 0xe0
 800703e:	0010      	movs	r0, r2
 8007040:	00c9      	lsls	r1, r1, #3
 8007042:	4008      	ands	r0, r1
 8007044:	4288      	cmp	r0, r1
 8007046:	d108      	bne.n	800705a <_scanf_float+0x18e>
 8007048:	4960      	ldr	r1, [pc, #384]	; (80071cc <_scanf_float+0x300>)
 800704a:	400a      	ands	r2, r1
 800704c:	603a      	str	r2, [r7, #0]
 800704e:	2201      	movs	r2, #1
 8007050:	9203      	str	r2, [sp, #12]
 8007052:	e7e3      	b.n	800701c <_scanf_float+0x150>
 8007054:	9a03      	ldr	r2, [sp, #12]
 8007056:	2a02      	cmp	r2, #2
 8007058:	d059      	beq.n	800710e <_scanf_float+0x242>
 800705a:	2c01      	cmp	r4, #1
 800705c:	d002      	beq.n	8007064 <_scanf_float+0x198>
 800705e:	2c04      	cmp	r4, #4
 8007060:	d000      	beq.n	8007064 <_scanf_float+0x198>
 8007062:	e764      	b.n	8006f2e <_scanf_float+0x62>
 8007064:	3401      	adds	r4, #1
 8007066:	b2e4      	uxtb	r4, r4
 8007068:	e7d8      	b.n	800701c <_scanf_float+0x150>
 800706a:	9a03      	ldr	r2, [sp, #12]
 800706c:	2a01      	cmp	r2, #1
 800706e:	d000      	beq.n	8007072 <_scanf_float+0x1a6>
 8007070:	e75d      	b.n	8006f2e <_scanf_float+0x62>
 8007072:	2202      	movs	r2, #2
 8007074:	e7ec      	b.n	8007050 <_scanf_float+0x184>
 8007076:	2c00      	cmp	r4, #0
 8007078:	d110      	bne.n	800709c <_scanf_float+0x1d0>
 800707a:	9a01      	ldr	r2, [sp, #4]
 800707c:	2a00      	cmp	r2, #0
 800707e:	d000      	beq.n	8007082 <_scanf_float+0x1b6>
 8007080:	e758      	b.n	8006f34 <_scanf_float+0x68>
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	21e0      	movs	r1, #224	; 0xe0
 8007086:	0010      	movs	r0, r2
 8007088:	00c9      	lsls	r1, r1, #3
 800708a:	4008      	ands	r0, r1
 800708c:	4288      	cmp	r0, r1
 800708e:	d000      	beq.n	8007092 <_scanf_float+0x1c6>
 8007090:	e754      	b.n	8006f3c <_scanf_float+0x70>
 8007092:	494e      	ldr	r1, [pc, #312]	; (80071cc <_scanf_float+0x300>)
 8007094:	3401      	adds	r4, #1
 8007096:	400a      	ands	r2, r1
 8007098:	603a      	str	r2, [r7, #0]
 800709a:	e7bf      	b.n	800701c <_scanf_float+0x150>
 800709c:	21fd      	movs	r1, #253	; 0xfd
 800709e:	1ee2      	subs	r2, r4, #3
 80070a0:	420a      	tst	r2, r1
 80070a2:	d000      	beq.n	80070a6 <_scanf_float+0x1da>
 80070a4:	e743      	b.n	8006f2e <_scanf_float+0x62>
 80070a6:	e7dd      	b.n	8007064 <_scanf_float+0x198>
 80070a8:	2c02      	cmp	r4, #2
 80070aa:	d000      	beq.n	80070ae <_scanf_float+0x1e2>
 80070ac:	e73f      	b.n	8006f2e <_scanf_float+0x62>
 80070ae:	2403      	movs	r4, #3
 80070b0:	e7b4      	b.n	800701c <_scanf_float+0x150>
 80070b2:	2c06      	cmp	r4, #6
 80070b4:	d000      	beq.n	80070b8 <_scanf_float+0x1ec>
 80070b6:	e73a      	b.n	8006f2e <_scanf_float+0x62>
 80070b8:	2407      	movs	r4, #7
 80070ba:	e7af      	b.n	800701c <_scanf_float+0x150>
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	0591      	lsls	r1, r2, #22
 80070c0:	d400      	bmi.n	80070c4 <_scanf_float+0x1f8>
 80070c2:	e734      	b.n	8006f2e <_scanf_float+0x62>
 80070c4:	4942      	ldr	r1, [pc, #264]	; (80071d0 <_scanf_float+0x304>)
 80070c6:	400a      	ands	r2, r1
 80070c8:	603a      	str	r2, [r7, #0]
 80070ca:	9a01      	ldr	r2, [sp, #4]
 80070cc:	9205      	str	r2, [sp, #20]
 80070ce:	e7a5      	b.n	800701c <_scanf_float+0x150>
 80070d0:	21a0      	movs	r1, #160	; 0xa0
 80070d2:	2080      	movs	r0, #128	; 0x80
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	00c9      	lsls	r1, r1, #3
 80070d8:	4011      	ands	r1, r2
 80070da:	00c0      	lsls	r0, r0, #3
 80070dc:	4281      	cmp	r1, r0
 80070de:	d006      	beq.n	80070ee <_scanf_float+0x222>
 80070e0:	4202      	tst	r2, r0
 80070e2:	d100      	bne.n	80070e6 <_scanf_float+0x21a>
 80070e4:	e723      	b.n	8006f2e <_scanf_float+0x62>
 80070e6:	9901      	ldr	r1, [sp, #4]
 80070e8:	2900      	cmp	r1, #0
 80070ea:	d100      	bne.n	80070ee <_scanf_float+0x222>
 80070ec:	e726      	b.n	8006f3c <_scanf_float+0x70>
 80070ee:	0591      	lsls	r1, r2, #22
 80070f0:	d404      	bmi.n	80070fc <_scanf_float+0x230>
 80070f2:	9901      	ldr	r1, [sp, #4]
 80070f4:	9805      	ldr	r0, [sp, #20]
 80070f6:	9509      	str	r5, [sp, #36]	; 0x24
 80070f8:	1a09      	subs	r1, r1, r0
 80070fa:	9108      	str	r1, [sp, #32]
 80070fc:	4933      	ldr	r1, [pc, #204]	; (80071cc <_scanf_float+0x300>)
 80070fe:	400a      	ands	r2, r1
 8007100:	21c0      	movs	r1, #192	; 0xc0
 8007102:	0049      	lsls	r1, r1, #1
 8007104:	430a      	orrs	r2, r1
 8007106:	603a      	str	r2, [r7, #0]
 8007108:	2200      	movs	r2, #0
 800710a:	9201      	str	r2, [sp, #4]
 800710c:	e786      	b.n	800701c <_scanf_float+0x150>
 800710e:	2203      	movs	r2, #3
 8007110:	e79e      	b.n	8007050 <_scanf_float+0x184>
 8007112:	23c0      	movs	r3, #192	; 0xc0
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	0031      	movs	r1, r6
 8007118:	58fb      	ldr	r3, [r7, r3]
 800711a:	9802      	ldr	r0, [sp, #8]
 800711c:	4798      	blx	r3
 800711e:	2800      	cmp	r0, #0
 8007120:	d100      	bne.n	8007124 <_scanf_float+0x258>
 8007122:	e6f6      	b.n	8006f12 <_scanf_float+0x46>
 8007124:	e703      	b.n	8006f2e <_scanf_float+0x62>
 8007126:	3d01      	subs	r5, #1
 8007128:	593b      	ldr	r3, [r7, r4]
 800712a:	0032      	movs	r2, r6
 800712c:	7829      	ldrb	r1, [r5, #0]
 800712e:	9802      	ldr	r0, [sp, #8]
 8007130:	4798      	blx	r3
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	3b01      	subs	r3, #1
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	e707      	b.n	8006f4a <_scanf_float+0x7e>
 800713a:	1e63      	subs	r3, r4, #1
 800713c:	2b06      	cmp	r3, #6
 800713e:	d80e      	bhi.n	800715e <_scanf_float+0x292>
 8007140:	9503      	str	r5, [sp, #12]
 8007142:	2c02      	cmp	r4, #2
 8007144:	d920      	bls.n	8007188 <_scanf_float+0x2bc>
 8007146:	1b63      	subs	r3, r4, r5
 8007148:	b2db      	uxtb	r3, r3
 800714a:	9306      	str	r3, [sp, #24]
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	9a06      	ldr	r2, [sp, #24]
 8007150:	189b      	adds	r3, r3, r2
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b03      	cmp	r3, #3
 8007156:	d827      	bhi.n	80071a8 <_scanf_float+0x2dc>
 8007158:	3c03      	subs	r4, #3
 800715a:	b2e4      	uxtb	r4, r4
 800715c:	1b2d      	subs	r5, r5, r4
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	05da      	lsls	r2, r3, #23
 8007162:	d552      	bpl.n	800720a <_scanf_float+0x33e>
 8007164:	055b      	lsls	r3, r3, #21
 8007166:	d535      	bpl.n	80071d4 <_scanf_float+0x308>
 8007168:	24be      	movs	r4, #190	; 0xbe
 800716a:	0064      	lsls	r4, r4, #1
 800716c:	9b04      	ldr	r3, [sp, #16]
 800716e:	429d      	cmp	r5, r3
 8007170:	d800      	bhi.n	8007174 <_scanf_float+0x2a8>
 8007172:	e6ee      	b.n	8006f52 <_scanf_float+0x86>
 8007174:	3d01      	subs	r5, #1
 8007176:	593b      	ldr	r3, [r7, r4]
 8007178:	0032      	movs	r2, r6
 800717a:	7829      	ldrb	r1, [r5, #0]
 800717c:	9802      	ldr	r0, [sp, #8]
 800717e:	4798      	blx	r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	3b01      	subs	r3, #1
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	e7f1      	b.n	800716c <_scanf_float+0x2a0>
 8007188:	24be      	movs	r4, #190	; 0xbe
 800718a:	0064      	lsls	r4, r4, #1
 800718c:	9b04      	ldr	r3, [sp, #16]
 800718e:	429d      	cmp	r5, r3
 8007190:	d800      	bhi.n	8007194 <_scanf_float+0x2c8>
 8007192:	e6de      	b.n	8006f52 <_scanf_float+0x86>
 8007194:	3d01      	subs	r5, #1
 8007196:	593b      	ldr	r3, [r7, r4]
 8007198:	0032      	movs	r2, r6
 800719a:	7829      	ldrb	r1, [r5, #0]
 800719c:	9802      	ldr	r0, [sp, #8]
 800719e:	4798      	blx	r3
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	613b      	str	r3, [r7, #16]
 80071a6:	e7f1      	b.n	800718c <_scanf_float+0x2c0>
 80071a8:	9b03      	ldr	r3, [sp, #12]
 80071aa:	0032      	movs	r2, r6
 80071ac:	3b01      	subs	r3, #1
 80071ae:	7819      	ldrb	r1, [r3, #0]
 80071b0:	9303      	str	r3, [sp, #12]
 80071b2:	23be      	movs	r3, #190	; 0xbe
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	58fb      	ldr	r3, [r7, r3]
 80071b8:	9802      	ldr	r0, [sp, #8]
 80071ba:	4798      	blx	r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	3b01      	subs	r3, #1
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	e7c3      	b.n	800714c <_scanf_float+0x280>
 80071c4:	fffffeff 	.word	0xfffffeff
 80071c8:	fffffe7f 	.word	0xfffffe7f
 80071cc:	fffff87f 	.word	0xfffff87f
 80071d0:	fffffd7f 	.word	0xfffffd7f
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	1e6c      	subs	r4, r5, #1
 80071d8:	7821      	ldrb	r1, [r4, #0]
 80071da:	3b01      	subs	r3, #1
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	2965      	cmp	r1, #101	; 0x65
 80071e0:	d00c      	beq.n	80071fc <_scanf_float+0x330>
 80071e2:	2945      	cmp	r1, #69	; 0x45
 80071e4:	d00a      	beq.n	80071fc <_scanf_float+0x330>
 80071e6:	23be      	movs	r3, #190	; 0xbe
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	58fb      	ldr	r3, [r7, r3]
 80071ec:	0032      	movs	r2, r6
 80071ee:	9802      	ldr	r0, [sp, #8]
 80071f0:	4798      	blx	r3
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1eac      	subs	r4, r5, #2
 80071f6:	3b01      	subs	r3, #1
 80071f8:	7821      	ldrb	r1, [r4, #0]
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	23be      	movs	r3, #190	; 0xbe
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	0032      	movs	r2, r6
 8007202:	58fb      	ldr	r3, [r7, r3]
 8007204:	9802      	ldr	r0, [sp, #8]
 8007206:	4798      	blx	r3
 8007208:	0025      	movs	r5, r4
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	2310      	movs	r3, #16
 800720e:	0011      	movs	r1, r2
 8007210:	4019      	ands	r1, r3
 8007212:	9103      	str	r1, [sp, #12]
 8007214:	421a      	tst	r2, r3
 8007216:	d15b      	bne.n	80072d0 <_scanf_float+0x404>
 8007218:	22c0      	movs	r2, #192	; 0xc0
 800721a:	7029      	strb	r1, [r5, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	00d2      	lsls	r2, r2, #3
 8007220:	4013      	ands	r3, r2
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	00d2      	lsls	r2, r2, #3
 8007226:	4293      	cmp	r3, r2
 8007228:	d11d      	bne.n	8007266 <_scanf_float+0x39a>
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	9a01      	ldr	r2, [sp, #4]
 800722e:	9901      	ldr	r1, [sp, #4]
 8007230:	1a9a      	subs	r2, r3, r2
 8007232:	428b      	cmp	r3, r1
 8007234:	d124      	bne.n	8007280 <_scanf_float+0x3b4>
 8007236:	2200      	movs	r2, #0
 8007238:	9904      	ldr	r1, [sp, #16]
 800723a:	9802      	ldr	r0, [sp, #8]
 800723c:	f7ff f9c0 	bl	80065c0 <_strtod_r>
 8007240:	9b07      	ldr	r3, [sp, #28]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	0004      	movs	r4, r0
 8007246:	000d      	movs	r5, r1
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	0791      	lsls	r1, r2, #30
 800724c:	d525      	bpl.n	800729a <_scanf_float+0x3ce>
 800724e:	9907      	ldr	r1, [sp, #28]
 8007250:	1d1a      	adds	r2, r3, #4
 8007252:	600a      	str	r2, [r1, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	601c      	str	r4, [r3, #0]
 8007258:	605d      	str	r5, [r3, #4]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3301      	adds	r3, #1
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	9803      	ldr	r0, [sp, #12]
 8007262:	b00b      	add	sp, #44	; 0x2c
 8007264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007266:	9b08      	ldr	r3, [sp, #32]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0e4      	beq.n	8007236 <_scanf_float+0x36a>
 800726c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726e:	9a03      	ldr	r2, [sp, #12]
 8007270:	1c59      	adds	r1, r3, #1
 8007272:	9802      	ldr	r0, [sp, #8]
 8007274:	230a      	movs	r3, #10
 8007276:	f002 fa6f 	bl	8009758 <_strtol_r>
 800727a:	9b08      	ldr	r3, [sp, #32]
 800727c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800727e:	1ac2      	subs	r2, r0, r3
 8007280:	003b      	movs	r3, r7
 8007282:	3370      	adds	r3, #112	; 0x70
 8007284:	33ff      	adds	r3, #255	; 0xff
 8007286:	429d      	cmp	r5, r3
 8007288:	d302      	bcc.n	8007290 <_scanf_float+0x3c4>
 800728a:	003d      	movs	r5, r7
 800728c:	356f      	adds	r5, #111	; 0x6f
 800728e:	35ff      	adds	r5, #255	; 0xff
 8007290:	0028      	movs	r0, r5
 8007292:	4910      	ldr	r1, [pc, #64]	; (80072d4 <_scanf_float+0x408>)
 8007294:	f000 f8e6 	bl	8007464 <siprintf>
 8007298:	e7cd      	b.n	8007236 <_scanf_float+0x36a>
 800729a:	1d19      	adds	r1, r3, #4
 800729c:	0752      	lsls	r2, r2, #29
 800729e:	d502      	bpl.n	80072a6 <_scanf_float+0x3da>
 80072a0:	9a07      	ldr	r2, [sp, #28]
 80072a2:	6011      	str	r1, [r2, #0]
 80072a4:	e7d6      	b.n	8007254 <_scanf_float+0x388>
 80072a6:	9a07      	ldr	r2, [sp, #28]
 80072a8:	0020      	movs	r0, r4
 80072aa:	6011      	str	r1, [r2, #0]
 80072ac:	681e      	ldr	r6, [r3, #0]
 80072ae:	0022      	movs	r2, r4
 80072b0:	002b      	movs	r3, r5
 80072b2:	0029      	movs	r1, r5
 80072b4:	f7fa fff0 	bl	8002298 <__aeabi_dcmpun>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d004      	beq.n	80072c6 <_scanf_float+0x3fa>
 80072bc:	4806      	ldr	r0, [pc, #24]	; (80072d8 <_scanf_float+0x40c>)
 80072be:	f000 f9f1 	bl	80076a4 <nanf>
 80072c2:	6030      	str	r0, [r6, #0]
 80072c4:	e7c9      	b.n	800725a <_scanf_float+0x38e>
 80072c6:	0020      	movs	r0, r4
 80072c8:	0029      	movs	r1, r5
 80072ca:	f7fb f88f 	bl	80023ec <__aeabi_d2f>
 80072ce:	e7f8      	b.n	80072c2 <_scanf_float+0x3f6>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e63f      	b.n	8006f54 <_scanf_float+0x88>
 80072d4:	0800a4cc 	.word	0x0800a4cc
 80072d8:	0800a869 	.word	0x0800a869

080072dc <std>:
 80072dc:	2300      	movs	r3, #0
 80072de:	b510      	push	{r4, lr}
 80072e0:	0004      	movs	r4, r0
 80072e2:	6003      	str	r3, [r0, #0]
 80072e4:	6043      	str	r3, [r0, #4]
 80072e6:	6083      	str	r3, [r0, #8]
 80072e8:	8181      	strh	r1, [r0, #12]
 80072ea:	6643      	str	r3, [r0, #100]	; 0x64
 80072ec:	81c2      	strh	r2, [r0, #14]
 80072ee:	6103      	str	r3, [r0, #16]
 80072f0:	6143      	str	r3, [r0, #20]
 80072f2:	6183      	str	r3, [r0, #24]
 80072f4:	0019      	movs	r1, r3
 80072f6:	2208      	movs	r2, #8
 80072f8:	305c      	adds	r0, #92	; 0x5c
 80072fa:	f000 f91f 	bl	800753c <memset>
 80072fe:	4b0b      	ldr	r3, [pc, #44]	; (800732c <std+0x50>)
 8007300:	6224      	str	r4, [r4, #32]
 8007302:	6263      	str	r3, [r4, #36]	; 0x24
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <std+0x54>)
 8007306:	62a3      	str	r3, [r4, #40]	; 0x28
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <std+0x58>)
 800730a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <std+0x5c>)
 800730e:	6323      	str	r3, [r4, #48]	; 0x30
 8007310:	4b0a      	ldr	r3, [pc, #40]	; (800733c <std+0x60>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d005      	beq.n	8007322 <std+0x46>
 8007316:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <std+0x64>)
 8007318:	429c      	cmp	r4, r3
 800731a:	d002      	beq.n	8007322 <std+0x46>
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <std+0x68>)
 800731e:	429c      	cmp	r4, r3
 8007320:	d103      	bne.n	800732a <std+0x4e>
 8007322:	0020      	movs	r0, r4
 8007324:	3058      	adds	r0, #88	; 0x58
 8007326:	f000 f99f 	bl	8007668 <__retarget_lock_init_recursive>
 800732a:	bd10      	pop	{r4, pc}
 800732c:	080074a5 	.word	0x080074a5
 8007330:	080074cd 	.word	0x080074cd
 8007334:	08007505 	.word	0x08007505
 8007338:	08007531 	.word	0x08007531
 800733c:	200002d0 	.word	0x200002d0
 8007340:	20000338 	.word	0x20000338
 8007344:	200003a0 	.word	0x200003a0

08007348 <stdio_exit_handler>:
 8007348:	b510      	push	{r4, lr}
 800734a:	4a03      	ldr	r2, [pc, #12]	; (8007358 <stdio_exit_handler+0x10>)
 800734c:	4903      	ldr	r1, [pc, #12]	; (800735c <stdio_exit_handler+0x14>)
 800734e:	4804      	ldr	r0, [pc, #16]	; (8007360 <stdio_exit_handler+0x18>)
 8007350:	f000 f86c 	bl	800742c <_fwalk_sglue>
 8007354:	bd10      	pop	{r4, pc}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	20000010 	.word	0x20000010
 800735c:	08009b55 	.word	0x08009b55
 8007360:	20000188 	.word	0x20000188

08007364 <cleanup_stdio>:
 8007364:	6841      	ldr	r1, [r0, #4]
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <cleanup_stdio+0x30>)
 8007368:	b510      	push	{r4, lr}
 800736a:	0004      	movs	r4, r0
 800736c:	4299      	cmp	r1, r3
 800736e:	d001      	beq.n	8007374 <cleanup_stdio+0x10>
 8007370:	f002 fbf0 	bl	8009b54 <_fflush_r>
 8007374:	68a1      	ldr	r1, [r4, #8]
 8007376:	4b08      	ldr	r3, [pc, #32]	; (8007398 <cleanup_stdio+0x34>)
 8007378:	4299      	cmp	r1, r3
 800737a:	d002      	beq.n	8007382 <cleanup_stdio+0x1e>
 800737c:	0020      	movs	r0, r4
 800737e:	f002 fbe9 	bl	8009b54 <_fflush_r>
 8007382:	68e1      	ldr	r1, [r4, #12]
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <cleanup_stdio+0x38>)
 8007386:	4299      	cmp	r1, r3
 8007388:	d002      	beq.n	8007390 <cleanup_stdio+0x2c>
 800738a:	0020      	movs	r0, r4
 800738c:	f002 fbe2 	bl	8009b54 <_fflush_r>
 8007390:	bd10      	pop	{r4, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	200002d0 	.word	0x200002d0
 8007398:	20000338 	.word	0x20000338
 800739c:	200003a0 	.word	0x200003a0

080073a0 <global_stdio_init.part.0>:
 80073a0:	b510      	push	{r4, lr}
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <global_stdio_init.part.0+0x28>)
 80073a4:	4a09      	ldr	r2, [pc, #36]	; (80073cc <global_stdio_init.part.0+0x2c>)
 80073a6:	2104      	movs	r1, #4
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	4809      	ldr	r0, [pc, #36]	; (80073d0 <global_stdio_init.part.0+0x30>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	f7ff ff95 	bl	80072dc <std>
 80073b2:	2201      	movs	r2, #1
 80073b4:	2109      	movs	r1, #9
 80073b6:	4807      	ldr	r0, [pc, #28]	; (80073d4 <global_stdio_init.part.0+0x34>)
 80073b8:	f7ff ff90 	bl	80072dc <std>
 80073bc:	2202      	movs	r2, #2
 80073be:	2112      	movs	r1, #18
 80073c0:	4805      	ldr	r0, [pc, #20]	; (80073d8 <global_stdio_init.part.0+0x38>)
 80073c2:	f7ff ff8b 	bl	80072dc <std>
 80073c6:	bd10      	pop	{r4, pc}
 80073c8:	20000408 	.word	0x20000408
 80073cc:	08007349 	.word	0x08007349
 80073d0:	200002d0 	.word	0x200002d0
 80073d4:	20000338 	.word	0x20000338
 80073d8:	200003a0 	.word	0x200003a0

080073dc <__sfp_lock_acquire>:
 80073dc:	b510      	push	{r4, lr}
 80073de:	4802      	ldr	r0, [pc, #8]	; (80073e8 <__sfp_lock_acquire+0xc>)
 80073e0:	f000 f943 	bl	800766a <__retarget_lock_acquire_recursive>
 80073e4:	bd10      	pop	{r4, pc}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	20000411 	.word	0x20000411

080073ec <__sfp_lock_release>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4802      	ldr	r0, [pc, #8]	; (80073f8 <__sfp_lock_release+0xc>)
 80073f0:	f000 f93c 	bl	800766c <__retarget_lock_release_recursive>
 80073f4:	bd10      	pop	{r4, pc}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	20000411 	.word	0x20000411

080073fc <__sinit>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	0004      	movs	r4, r0
 8007400:	f7ff ffec 	bl	80073dc <__sfp_lock_acquire>
 8007404:	6a23      	ldr	r3, [r4, #32]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <__sinit+0x14>
 800740a:	f7ff ffef 	bl	80073ec <__sfp_lock_release>
 800740e:	bd10      	pop	{r4, pc}
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <__sinit+0x28>)
 8007412:	6223      	str	r3, [r4, #32]
 8007414:	4b04      	ldr	r3, [pc, #16]	; (8007428 <__sinit+0x2c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f6      	bne.n	800740a <__sinit+0xe>
 800741c:	f7ff ffc0 	bl	80073a0 <global_stdio_init.part.0>
 8007420:	e7f3      	b.n	800740a <__sinit+0xe>
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	08007365 	.word	0x08007365
 8007428:	20000408 	.word	0x20000408

0800742c <_fwalk_sglue>:
 800742c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800742e:	0014      	movs	r4, r2
 8007430:	2600      	movs	r6, #0
 8007432:	9000      	str	r0, [sp, #0]
 8007434:	9101      	str	r1, [sp, #4]
 8007436:	68a5      	ldr	r5, [r4, #8]
 8007438:	6867      	ldr	r7, [r4, #4]
 800743a:	3f01      	subs	r7, #1
 800743c:	d504      	bpl.n	8007448 <_fwalk_sglue+0x1c>
 800743e:	6824      	ldr	r4, [r4, #0]
 8007440:	2c00      	cmp	r4, #0
 8007442:	d1f8      	bne.n	8007436 <_fwalk_sglue+0xa>
 8007444:	0030      	movs	r0, r6
 8007446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007448:	89ab      	ldrh	r3, [r5, #12]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d908      	bls.n	8007460 <_fwalk_sglue+0x34>
 800744e:	220e      	movs	r2, #14
 8007450:	5eab      	ldrsh	r3, [r5, r2]
 8007452:	3301      	adds	r3, #1
 8007454:	d004      	beq.n	8007460 <_fwalk_sglue+0x34>
 8007456:	0029      	movs	r1, r5
 8007458:	9800      	ldr	r0, [sp, #0]
 800745a:	9b01      	ldr	r3, [sp, #4]
 800745c:	4798      	blx	r3
 800745e:	4306      	orrs	r6, r0
 8007460:	3568      	adds	r5, #104	; 0x68
 8007462:	e7ea      	b.n	800743a <_fwalk_sglue+0xe>

08007464 <siprintf>:
 8007464:	b40e      	push	{r1, r2, r3}
 8007466:	b500      	push	{lr}
 8007468:	490b      	ldr	r1, [pc, #44]	; (8007498 <siprintf+0x34>)
 800746a:	b09c      	sub	sp, #112	; 0x70
 800746c:	ab1d      	add	r3, sp, #116	; 0x74
 800746e:	9002      	str	r0, [sp, #8]
 8007470:	9006      	str	r0, [sp, #24]
 8007472:	9107      	str	r1, [sp, #28]
 8007474:	9104      	str	r1, [sp, #16]
 8007476:	4809      	ldr	r0, [pc, #36]	; (800749c <siprintf+0x38>)
 8007478:	4909      	ldr	r1, [pc, #36]	; (80074a0 <siprintf+0x3c>)
 800747a:	cb04      	ldmia	r3!, {r2}
 800747c:	9105      	str	r1, [sp, #20]
 800747e:	6800      	ldr	r0, [r0, #0]
 8007480:	a902      	add	r1, sp, #8
 8007482:	9301      	str	r3, [sp, #4]
 8007484:	f002 f9dc 	bl	8009840 <_svfiprintf_r>
 8007488:	2200      	movs	r2, #0
 800748a:	9b02      	ldr	r3, [sp, #8]
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	b01c      	add	sp, #112	; 0x70
 8007490:	bc08      	pop	{r3}
 8007492:	b003      	add	sp, #12
 8007494:	4718      	bx	r3
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	7fffffff 	.word	0x7fffffff
 800749c:	200001d4 	.word	0x200001d4
 80074a0:	ffff0208 	.word	0xffff0208

080074a4 <__sread>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	000c      	movs	r4, r1
 80074a8:	250e      	movs	r5, #14
 80074aa:	5f49      	ldrsh	r1, [r1, r5]
 80074ac:	f000 f88a 	bl	80075c4 <_read_r>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	db03      	blt.n	80074bc <__sread+0x18>
 80074b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80074b6:	181b      	adds	r3, r3, r0
 80074b8:	6563      	str	r3, [r4, #84]	; 0x54
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	4a02      	ldr	r2, [pc, #8]	; (80074c8 <__sread+0x24>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	e7f9      	b.n	80074ba <__sread+0x16>
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	ffffefff 	.word	0xffffefff

080074cc <__swrite>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	001f      	movs	r7, r3
 80074d0:	898b      	ldrh	r3, [r1, #12]
 80074d2:	0005      	movs	r5, r0
 80074d4:	000c      	movs	r4, r1
 80074d6:	0016      	movs	r6, r2
 80074d8:	05db      	lsls	r3, r3, #23
 80074da:	d505      	bpl.n	80074e8 <__swrite+0x1c>
 80074dc:	230e      	movs	r3, #14
 80074de:	5ec9      	ldrsh	r1, [r1, r3]
 80074e0:	2200      	movs	r2, #0
 80074e2:	2302      	movs	r3, #2
 80074e4:	f000 f85a 	bl	800759c <_lseek_r>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	4a05      	ldr	r2, [pc, #20]	; (8007500 <__swrite+0x34>)
 80074ec:	0028      	movs	r0, r5
 80074ee:	4013      	ands	r3, r2
 80074f0:	81a3      	strh	r3, [r4, #12]
 80074f2:	0032      	movs	r2, r6
 80074f4:	230e      	movs	r3, #14
 80074f6:	5ee1      	ldrsh	r1, [r4, r3]
 80074f8:	003b      	movs	r3, r7
 80074fa:	f000 f877 	bl	80075ec <_write_r>
 80074fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007500:	ffffefff 	.word	0xffffefff

08007504 <__sseek>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	000c      	movs	r4, r1
 8007508:	250e      	movs	r5, #14
 800750a:	5f49      	ldrsh	r1, [r1, r5]
 800750c:	f000 f846 	bl	800759c <_lseek_r>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	1c42      	adds	r2, r0, #1
 8007514:	d103      	bne.n	800751e <__sseek+0x1a>
 8007516:	4a05      	ldr	r2, [pc, #20]	; (800752c <__sseek+0x28>)
 8007518:	4013      	ands	r3, r2
 800751a:	81a3      	strh	r3, [r4, #12]
 800751c:	bd70      	pop	{r4, r5, r6, pc}
 800751e:	2280      	movs	r2, #128	; 0x80
 8007520:	0152      	lsls	r2, r2, #5
 8007522:	4313      	orrs	r3, r2
 8007524:	81a3      	strh	r3, [r4, #12]
 8007526:	6560      	str	r0, [r4, #84]	; 0x54
 8007528:	e7f8      	b.n	800751c <__sseek+0x18>
 800752a:	46c0      	nop			; (mov r8, r8)
 800752c:	ffffefff 	.word	0xffffefff

08007530 <__sclose>:
 8007530:	b510      	push	{r4, lr}
 8007532:	230e      	movs	r3, #14
 8007534:	5ec9      	ldrsh	r1, [r1, r3]
 8007536:	f000 f81f 	bl	8007578 <_close_r>
 800753a:	bd10      	pop	{r4, pc}

0800753c <memset>:
 800753c:	0003      	movs	r3, r0
 800753e:	1882      	adds	r2, r0, r2
 8007540:	4293      	cmp	r3, r2
 8007542:	d100      	bne.n	8007546 <memset+0xa>
 8007544:	4770      	bx	lr
 8007546:	7019      	strb	r1, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	e7f9      	b.n	8007540 <memset+0x4>

0800754c <strncmp>:
 800754c:	b530      	push	{r4, r5, lr}
 800754e:	0005      	movs	r5, r0
 8007550:	1e10      	subs	r0, r2, #0
 8007552:	d00b      	beq.n	800756c <strncmp+0x20>
 8007554:	2400      	movs	r4, #0
 8007556:	3a01      	subs	r2, #1
 8007558:	5d2b      	ldrb	r3, [r5, r4]
 800755a:	5d08      	ldrb	r0, [r1, r4]
 800755c:	4283      	cmp	r3, r0
 800755e:	d104      	bne.n	800756a <strncmp+0x1e>
 8007560:	42a2      	cmp	r2, r4
 8007562:	d002      	beq.n	800756a <strncmp+0x1e>
 8007564:	3401      	adds	r4, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1f6      	bne.n	8007558 <strncmp+0xc>
 800756a:	1a18      	subs	r0, r3, r0
 800756c:	bd30      	pop	{r4, r5, pc}
	...

08007570 <_localeconv_r>:
 8007570:	4800      	ldr	r0, [pc, #0]	; (8007574 <_localeconv_r+0x4>)
 8007572:	4770      	bx	lr
 8007574:	2000010c 	.word	0x2000010c

08007578 <_close_r>:
 8007578:	2300      	movs	r3, #0
 800757a:	b570      	push	{r4, r5, r6, lr}
 800757c:	4d06      	ldr	r5, [pc, #24]	; (8007598 <_close_r+0x20>)
 800757e:	0004      	movs	r4, r0
 8007580:	0008      	movs	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f7fb fd3d 	bl	8003002 <_close>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d103      	bne.n	8007594 <_close_r+0x1c>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d000      	beq.n	8007594 <_close_r+0x1c>
 8007592:	6023      	str	r3, [r4, #0]
 8007594:	bd70      	pop	{r4, r5, r6, pc}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	2000040c 	.word	0x2000040c

0800759c <_lseek_r>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	0004      	movs	r4, r0
 80075a0:	0008      	movs	r0, r1
 80075a2:	0011      	movs	r1, r2
 80075a4:	001a      	movs	r2, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	4d05      	ldr	r5, [pc, #20]	; (80075c0 <_lseek_r+0x24>)
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	f7fb fd4a 	bl	8003044 <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d103      	bne.n	80075bc <_lseek_r+0x20>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d000      	beq.n	80075bc <_lseek_r+0x20>
 80075ba:	6023      	str	r3, [r4, #0]
 80075bc:	bd70      	pop	{r4, r5, r6, pc}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	2000040c 	.word	0x2000040c

080075c4 <_read_r>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	0004      	movs	r4, r0
 80075c8:	0008      	movs	r0, r1
 80075ca:	0011      	movs	r1, r2
 80075cc:	001a      	movs	r2, r3
 80075ce:	2300      	movs	r3, #0
 80075d0:	4d05      	ldr	r5, [pc, #20]	; (80075e8 <_read_r+0x24>)
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fb fcdc 	bl	8002f90 <_read>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d103      	bne.n	80075e4 <_read_r+0x20>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d000      	beq.n	80075e4 <_read_r+0x20>
 80075e2:	6023      	str	r3, [r4, #0]
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	2000040c 	.word	0x2000040c

080075ec <_write_r>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	0004      	movs	r4, r0
 80075f0:	0008      	movs	r0, r1
 80075f2:	0011      	movs	r1, r2
 80075f4:	001a      	movs	r2, r3
 80075f6:	2300      	movs	r3, #0
 80075f8:	4d05      	ldr	r5, [pc, #20]	; (8007610 <_write_r+0x24>)
 80075fa:	602b      	str	r3, [r5, #0]
 80075fc:	f7fb fce5 	bl	8002fca <_write>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d103      	bne.n	800760c <_write_r+0x20>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d000      	beq.n	800760c <_write_r+0x20>
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	bd70      	pop	{r4, r5, r6, pc}
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	2000040c 	.word	0x2000040c

08007614 <__errno>:
 8007614:	4b01      	ldr	r3, [pc, #4]	; (800761c <__errno+0x8>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	4770      	bx	lr
 800761a:	46c0      	nop			; (mov r8, r8)
 800761c:	200001d4 	.word	0x200001d4

08007620 <__libc_init_array>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	2600      	movs	r6, #0
 8007624:	4c0c      	ldr	r4, [pc, #48]	; (8007658 <__libc_init_array+0x38>)
 8007626:	4d0d      	ldr	r5, [pc, #52]	; (800765c <__libc_init_array+0x3c>)
 8007628:	1b64      	subs	r4, r4, r5
 800762a:	10a4      	asrs	r4, r4, #2
 800762c:	42a6      	cmp	r6, r4
 800762e:	d109      	bne.n	8007644 <__libc_init_array+0x24>
 8007630:	2600      	movs	r6, #0
 8007632:	f002 fe35 	bl	800a2a0 <_init>
 8007636:	4c0a      	ldr	r4, [pc, #40]	; (8007660 <__libc_init_array+0x40>)
 8007638:	4d0a      	ldr	r5, [pc, #40]	; (8007664 <__libc_init_array+0x44>)
 800763a:	1b64      	subs	r4, r4, r5
 800763c:	10a4      	asrs	r4, r4, #2
 800763e:	42a6      	cmp	r6, r4
 8007640:	d105      	bne.n	800764e <__libc_init_array+0x2e>
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	00b3      	lsls	r3, r6, #2
 8007646:	58eb      	ldr	r3, [r5, r3]
 8007648:	4798      	blx	r3
 800764a:	3601      	adds	r6, #1
 800764c:	e7ee      	b.n	800762c <__libc_init_array+0xc>
 800764e:	00b3      	lsls	r3, r6, #2
 8007650:	58eb      	ldr	r3, [r5, r3]
 8007652:	4798      	blx	r3
 8007654:	3601      	adds	r6, #1
 8007656:	e7f2      	b.n	800763e <__libc_init_array+0x1e>
 8007658:	0800a874 	.word	0x0800a874
 800765c:	0800a874 	.word	0x0800a874
 8007660:	0800a878 	.word	0x0800a878
 8007664:	0800a874 	.word	0x0800a874

08007668 <__retarget_lock_init_recursive>:
 8007668:	4770      	bx	lr

0800766a <__retarget_lock_acquire_recursive>:
 800766a:	4770      	bx	lr

0800766c <__retarget_lock_release_recursive>:
 800766c:	4770      	bx	lr

0800766e <memchr>:
 800766e:	b2c9      	uxtb	r1, r1
 8007670:	1882      	adds	r2, r0, r2
 8007672:	4290      	cmp	r0, r2
 8007674:	d101      	bne.n	800767a <memchr+0xc>
 8007676:	2000      	movs	r0, #0
 8007678:	4770      	bx	lr
 800767a:	7803      	ldrb	r3, [r0, #0]
 800767c:	428b      	cmp	r3, r1
 800767e:	d0fb      	beq.n	8007678 <memchr+0xa>
 8007680:	3001      	adds	r0, #1
 8007682:	e7f6      	b.n	8007672 <memchr+0x4>

08007684 <memcpy>:
 8007684:	2300      	movs	r3, #0
 8007686:	b510      	push	{r4, lr}
 8007688:	429a      	cmp	r2, r3
 800768a:	d100      	bne.n	800768e <memcpy+0xa>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	5ccc      	ldrb	r4, [r1, r3]
 8007690:	54c4      	strb	r4, [r0, r3]
 8007692:	3301      	adds	r3, #1
 8007694:	e7f8      	b.n	8007688 <memcpy+0x4>
	...

08007698 <nan>:
 8007698:	2000      	movs	r0, #0
 800769a:	4901      	ldr	r1, [pc, #4]	; (80076a0 <nan+0x8>)
 800769c:	4770      	bx	lr
 800769e:	46c0      	nop			; (mov r8, r8)
 80076a0:	7ff80000 	.word	0x7ff80000

080076a4 <nanf>:
 80076a4:	4800      	ldr	r0, [pc, #0]	; (80076a8 <nanf+0x4>)
 80076a6:	4770      	bx	lr
 80076a8:	7fc00000 	.word	0x7fc00000

080076ac <quorem>:
 80076ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ae:	6902      	ldr	r2, [r0, #16]
 80076b0:	690b      	ldr	r3, [r1, #16]
 80076b2:	b089      	sub	sp, #36	; 0x24
 80076b4:	0007      	movs	r7, r0
 80076b6:	9104      	str	r1, [sp, #16]
 80076b8:	2000      	movs	r0, #0
 80076ba:	429a      	cmp	r2, r3
 80076bc:	db69      	blt.n	8007792 <quorem+0xe6>
 80076be:	3b01      	subs	r3, #1
 80076c0:	009c      	lsls	r4, r3, #2
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	000b      	movs	r3, r1
 80076c6:	3314      	adds	r3, #20
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	191b      	adds	r3, r3, r4
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	003b      	movs	r3, r7
 80076d0:	3314      	adds	r3, #20
 80076d2:	9303      	str	r3, [sp, #12]
 80076d4:	191c      	adds	r4, r3, r4
 80076d6:	9b05      	ldr	r3, [sp, #20]
 80076d8:	6826      	ldr	r6, [r4, #0]
 80076da:	681d      	ldr	r5, [r3, #0]
 80076dc:	0030      	movs	r0, r6
 80076de:	3501      	adds	r5, #1
 80076e0:	0029      	movs	r1, r5
 80076e2:	f7f8 fd2b 	bl	800013c <__udivsi3>
 80076e6:	9002      	str	r0, [sp, #8]
 80076e8:	42ae      	cmp	r6, r5
 80076ea:	d329      	bcc.n	8007740 <quorem+0x94>
 80076ec:	9b06      	ldr	r3, [sp, #24]
 80076ee:	2600      	movs	r6, #0
 80076f0:	469c      	mov	ip, r3
 80076f2:	9d03      	ldr	r5, [sp, #12]
 80076f4:	9606      	str	r6, [sp, #24]
 80076f6:	4662      	mov	r2, ip
 80076f8:	ca08      	ldmia	r2!, {r3}
 80076fa:	6828      	ldr	r0, [r5, #0]
 80076fc:	4694      	mov	ip, r2
 80076fe:	9a02      	ldr	r2, [sp, #8]
 8007700:	b299      	uxth	r1, r3
 8007702:	4351      	muls	r1, r2
 8007704:	0c1b      	lsrs	r3, r3, #16
 8007706:	4353      	muls	r3, r2
 8007708:	1989      	adds	r1, r1, r6
 800770a:	0c0a      	lsrs	r2, r1, #16
 800770c:	189b      	adds	r3, r3, r2
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	0c1e      	lsrs	r6, r3, #16
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	b282      	uxth	r2, r0
 8007716:	18d2      	adds	r2, r2, r3
 8007718:	466b      	mov	r3, sp
 800771a:	b289      	uxth	r1, r1
 800771c:	8b9b      	ldrh	r3, [r3, #28]
 800771e:	1a52      	subs	r2, r2, r1
 8007720:	0c01      	lsrs	r1, r0, #16
 8007722:	1ac9      	subs	r1, r1, r3
 8007724:	1413      	asrs	r3, r2, #16
 8007726:	18cb      	adds	r3, r1, r3
 8007728:	1419      	asrs	r1, r3, #16
 800772a:	b292      	uxth	r2, r2
 800772c:	041b      	lsls	r3, r3, #16
 800772e:	4313      	orrs	r3, r2
 8007730:	c508      	stmia	r5!, {r3}
 8007732:	9b05      	ldr	r3, [sp, #20]
 8007734:	9106      	str	r1, [sp, #24]
 8007736:	4563      	cmp	r3, ip
 8007738:	d2dd      	bcs.n	80076f6 <quorem+0x4a>
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d030      	beq.n	80077a2 <quorem+0xf6>
 8007740:	0038      	movs	r0, r7
 8007742:	9904      	ldr	r1, [sp, #16]
 8007744:	f001 fd98 	bl	8009278 <__mcmp>
 8007748:	2800      	cmp	r0, #0
 800774a:	db21      	blt.n	8007790 <quorem+0xe4>
 800774c:	0038      	movs	r0, r7
 800774e:	2600      	movs	r6, #0
 8007750:	9b02      	ldr	r3, [sp, #8]
 8007752:	9c04      	ldr	r4, [sp, #16]
 8007754:	3301      	adds	r3, #1
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	3014      	adds	r0, #20
 800775a:	3414      	adds	r4, #20
 800775c:	6803      	ldr	r3, [r0, #0]
 800775e:	cc02      	ldmia	r4!, {r1}
 8007760:	b29d      	uxth	r5, r3
 8007762:	19ad      	adds	r5, r5, r6
 8007764:	b28a      	uxth	r2, r1
 8007766:	1aaa      	subs	r2, r5, r2
 8007768:	0c09      	lsrs	r1, r1, #16
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	1a5b      	subs	r3, r3, r1
 800776e:	1411      	asrs	r1, r2, #16
 8007770:	185b      	adds	r3, r3, r1
 8007772:	141e      	asrs	r6, r3, #16
 8007774:	b292      	uxth	r2, r2
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	4313      	orrs	r3, r2
 800777a:	c008      	stmia	r0!, {r3}
 800777c:	9b05      	ldr	r3, [sp, #20]
 800777e:	42a3      	cmp	r3, r4
 8007780:	d2ec      	bcs.n	800775c <quorem+0xb0>
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	9a03      	ldr	r2, [sp, #12]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	18d3      	adds	r3, r2, r3
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	2a00      	cmp	r2, #0
 800778e:	d015      	beq.n	80077bc <quorem+0x110>
 8007790:	9802      	ldr	r0, [sp, #8]
 8007792:	b009      	add	sp, #36	; 0x24
 8007794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <quorem+0xfe>
 800779c:	9b01      	ldr	r3, [sp, #4]
 800779e:	3b01      	subs	r3, #1
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	3c04      	subs	r4, #4
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	d3f5      	bcc.n	8007796 <quorem+0xea>
 80077aa:	9b01      	ldr	r3, [sp, #4]
 80077ac:	613b      	str	r3, [r7, #16]
 80077ae:	e7c7      	b.n	8007740 <quorem+0x94>
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	2a00      	cmp	r2, #0
 80077b4:	d106      	bne.n	80077c4 <quorem+0x118>
 80077b6:	9a01      	ldr	r2, [sp, #4]
 80077b8:	3a01      	subs	r2, #1
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	9a03      	ldr	r2, [sp, #12]
 80077be:	3b04      	subs	r3, #4
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d3f5      	bcc.n	80077b0 <quorem+0x104>
 80077c4:	9b01      	ldr	r3, [sp, #4]
 80077c6:	613b      	str	r3, [r7, #16]
 80077c8:	e7e2      	b.n	8007790 <quorem+0xe4>
	...

080077cc <_dtoa_r>:
 80077cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ce:	0014      	movs	r4, r2
 80077d0:	001d      	movs	r5, r3
 80077d2:	69c6      	ldr	r6, [r0, #28]
 80077d4:	b09d      	sub	sp, #116	; 0x74
 80077d6:	9408      	str	r4, [sp, #32]
 80077d8:	9509      	str	r5, [sp, #36]	; 0x24
 80077da:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80077dc:	9004      	str	r0, [sp, #16]
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d10f      	bne.n	8007802 <_dtoa_r+0x36>
 80077e2:	2010      	movs	r0, #16
 80077e4:	f001 f9a6 	bl	8008b34 <malloc>
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	1e02      	subs	r2, r0, #0
 80077ec:	61d8      	str	r0, [r3, #28]
 80077ee:	d104      	bne.n	80077fa <_dtoa_r+0x2e>
 80077f0:	21ef      	movs	r1, #239	; 0xef
 80077f2:	4bc6      	ldr	r3, [pc, #792]	; (8007b0c <_dtoa_r+0x340>)
 80077f4:	48c6      	ldr	r0, [pc, #792]	; (8007b10 <_dtoa_r+0x344>)
 80077f6:	f002 f9fd 	bl	8009bf4 <__assert_func>
 80077fa:	6046      	str	r6, [r0, #4]
 80077fc:	6086      	str	r6, [r0, #8]
 80077fe:	6006      	str	r6, [r0, #0]
 8007800:	60c6      	str	r6, [r0, #12]
 8007802:	9b04      	ldr	r3, [sp, #16]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	6819      	ldr	r1, [r3, #0]
 8007808:	2900      	cmp	r1, #0
 800780a:	d00b      	beq.n	8007824 <_dtoa_r+0x58>
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	2301      	movs	r3, #1
 8007810:	4093      	lsls	r3, r2
 8007812:	604a      	str	r2, [r1, #4]
 8007814:	608b      	str	r3, [r1, #8]
 8007816:	9804      	ldr	r0, [sp, #16]
 8007818:	f001 faa0 	bl	8008d5c <_Bfree>
 800781c:	2200      	movs	r2, #0
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	2d00      	cmp	r5, #0
 8007826:	da1e      	bge.n	8007866 <_dtoa_r+0x9a>
 8007828:	2301      	movs	r3, #1
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	006b      	lsls	r3, r5, #1
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	9309      	str	r3, [sp, #36]	; 0x24
 8007832:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007834:	4bb7      	ldr	r3, [pc, #732]	; (8007b14 <_dtoa_r+0x348>)
 8007836:	4ab7      	ldr	r2, [pc, #732]	; (8007b14 <_dtoa_r+0x348>)
 8007838:	403b      	ands	r3, r7
 800783a:	4293      	cmp	r3, r2
 800783c:	d116      	bne.n	800786c <_dtoa_r+0xa0>
 800783e:	4bb6      	ldr	r3, [pc, #728]	; (8007b18 <_dtoa_r+0x34c>)
 8007840:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	033b      	lsls	r3, r7, #12
 8007846:	0b1b      	lsrs	r3, r3, #12
 8007848:	4323      	orrs	r3, r4
 800784a:	d101      	bne.n	8007850 <_dtoa_r+0x84>
 800784c:	f000 fdb5 	bl	80083ba <_dtoa_r+0xbee>
 8007850:	4bb2      	ldr	r3, [pc, #712]	; (8007b1c <_dtoa_r+0x350>)
 8007852:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007854:	9306      	str	r3, [sp, #24]
 8007856:	2a00      	cmp	r2, #0
 8007858:	d002      	beq.n	8007860 <_dtoa_r+0x94>
 800785a:	4bb1      	ldr	r3, [pc, #708]	; (8007b20 <_dtoa_r+0x354>)
 800785c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	9806      	ldr	r0, [sp, #24]
 8007862:	b01d      	add	sp, #116	; 0x74
 8007864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007866:	2300      	movs	r3, #0
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	e7e2      	b.n	8007832 <_dtoa_r+0x66>
 800786c:	9a08      	ldr	r2, [sp, #32]
 800786e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007870:	9210      	str	r2, [sp, #64]	; 0x40
 8007872:	9311      	str	r3, [sp, #68]	; 0x44
 8007874:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007876:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	f7f8 fde4 	bl	8000448 <__aeabi_dcmpeq>
 8007880:	1e06      	subs	r6, r0, #0
 8007882:	d009      	beq.n	8007898 <_dtoa_r+0xcc>
 8007884:	2301      	movs	r3, #1
 8007886:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	4ba6      	ldr	r3, [pc, #664]	; (8007b24 <_dtoa_r+0x358>)
 800788c:	9306      	str	r3, [sp, #24]
 800788e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0e5      	beq.n	8007860 <_dtoa_r+0x94>
 8007894:	4ba4      	ldr	r3, [pc, #656]	; (8007b28 <_dtoa_r+0x35c>)
 8007896:	e7e1      	b.n	800785c <_dtoa_r+0x90>
 8007898:	ab1a      	add	r3, sp, #104	; 0x68
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	ab1b      	add	r3, sp, #108	; 0x6c
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	9804      	ldr	r0, [sp, #16]
 80078a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078a6:	f001 fe03 	bl	80094b0 <__d2b>
 80078aa:	007a      	lsls	r2, r7, #1
 80078ac:	9005      	str	r0, [sp, #20]
 80078ae:	0d52      	lsrs	r2, r2, #21
 80078b0:	d100      	bne.n	80078b4 <_dtoa_r+0xe8>
 80078b2:	e07b      	b.n	80079ac <_dtoa_r+0x1e0>
 80078b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078b6:	9617      	str	r6, [sp, #92]	; 0x5c
 80078b8:	0319      	lsls	r1, r3, #12
 80078ba:	4b9c      	ldr	r3, [pc, #624]	; (8007b2c <_dtoa_r+0x360>)
 80078bc:	0b09      	lsrs	r1, r1, #12
 80078be:	430b      	orrs	r3, r1
 80078c0:	499b      	ldr	r1, [pc, #620]	; (8007b30 <_dtoa_r+0x364>)
 80078c2:	1857      	adds	r7, r2, r1
 80078c4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80078c8:	0019      	movs	r1, r3
 80078ca:	2200      	movs	r2, #0
 80078cc:	4b99      	ldr	r3, [pc, #612]	; (8007b34 <_dtoa_r+0x368>)
 80078ce:	f7fa f961 	bl	8001b94 <__aeabi_dsub>
 80078d2:	4a99      	ldr	r2, [pc, #612]	; (8007b38 <_dtoa_r+0x36c>)
 80078d4:	4b99      	ldr	r3, [pc, #612]	; (8007b3c <_dtoa_r+0x370>)
 80078d6:	f7f9 fe9b 	bl	8001610 <__aeabi_dmul>
 80078da:	4a99      	ldr	r2, [pc, #612]	; (8007b40 <_dtoa_r+0x374>)
 80078dc:	4b99      	ldr	r3, [pc, #612]	; (8007b44 <_dtoa_r+0x378>)
 80078de:	f7f8 ff3d 	bl	800075c <__aeabi_dadd>
 80078e2:	0004      	movs	r4, r0
 80078e4:	0038      	movs	r0, r7
 80078e6:	000d      	movs	r5, r1
 80078e8:	f7fa fd2a 	bl	8002340 <__aeabi_i2d>
 80078ec:	4a96      	ldr	r2, [pc, #600]	; (8007b48 <_dtoa_r+0x37c>)
 80078ee:	4b97      	ldr	r3, [pc, #604]	; (8007b4c <_dtoa_r+0x380>)
 80078f0:	f7f9 fe8e 	bl	8001610 <__aeabi_dmul>
 80078f4:	0002      	movs	r2, r0
 80078f6:	000b      	movs	r3, r1
 80078f8:	0020      	movs	r0, r4
 80078fa:	0029      	movs	r1, r5
 80078fc:	f7f8 ff2e 	bl	800075c <__aeabi_dadd>
 8007900:	0004      	movs	r4, r0
 8007902:	000d      	movs	r5, r1
 8007904:	f7fa fce6 	bl	80022d4 <__aeabi_d2iz>
 8007908:	2200      	movs	r2, #0
 800790a:	9003      	str	r0, [sp, #12]
 800790c:	2300      	movs	r3, #0
 800790e:	0020      	movs	r0, r4
 8007910:	0029      	movs	r1, r5
 8007912:	f7f8 fd9f 	bl	8000454 <__aeabi_dcmplt>
 8007916:	2800      	cmp	r0, #0
 8007918:	d00b      	beq.n	8007932 <_dtoa_r+0x166>
 800791a:	9803      	ldr	r0, [sp, #12]
 800791c:	f7fa fd10 	bl	8002340 <__aeabi_i2d>
 8007920:	002b      	movs	r3, r5
 8007922:	0022      	movs	r2, r4
 8007924:	f7f8 fd90 	bl	8000448 <__aeabi_dcmpeq>
 8007928:	4243      	negs	r3, r0
 800792a:	4158      	adcs	r0, r3
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	1a1b      	subs	r3, r3, r0
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	2301      	movs	r3, #1
 8007934:	9316      	str	r3, [sp, #88]	; 0x58
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	2b16      	cmp	r3, #22
 800793a:	d810      	bhi.n	800795e <_dtoa_r+0x192>
 800793c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800793e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007940:	9a03      	ldr	r2, [sp, #12]
 8007942:	4b83      	ldr	r3, [pc, #524]	; (8007b50 <_dtoa_r+0x384>)
 8007944:	00d2      	lsls	r2, r2, #3
 8007946:	189b      	adds	r3, r3, r2
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f7f8 fd82 	bl	8000454 <__aeabi_dcmplt>
 8007950:	2800      	cmp	r0, #0
 8007952:	d047      	beq.n	80079e4 <_dtoa_r+0x218>
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	3b01      	subs	r3, #1
 8007958:	9303      	str	r3, [sp, #12]
 800795a:	2300      	movs	r3, #0
 800795c:	9316      	str	r3, [sp, #88]	; 0x58
 800795e:	2200      	movs	r2, #0
 8007960:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007962:	920a      	str	r2, [sp, #40]	; 0x28
 8007964:	1bdb      	subs	r3, r3, r7
 8007966:	1e5a      	subs	r2, r3, #1
 8007968:	d53e      	bpl.n	80079e8 <_dtoa_r+0x21c>
 800796a:	2201      	movs	r2, #1
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	930a      	str	r3, [sp, #40]	; 0x28
 8007970:	2300      	movs	r3, #0
 8007972:	930c      	str	r3, [sp, #48]	; 0x30
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	2b00      	cmp	r3, #0
 8007978:	db38      	blt.n	80079ec <_dtoa_r+0x220>
 800797a:	9a03      	ldr	r2, [sp, #12]
 800797c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800797e:	4694      	mov	ip, r2
 8007980:	4463      	add	r3, ip
 8007982:	930c      	str	r3, [sp, #48]	; 0x30
 8007984:	2300      	movs	r3, #0
 8007986:	9213      	str	r2, [sp, #76]	; 0x4c
 8007988:	930d      	str	r3, [sp, #52]	; 0x34
 800798a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800798c:	2401      	movs	r4, #1
 800798e:	2b09      	cmp	r3, #9
 8007990:	d867      	bhi.n	8007a62 <_dtoa_r+0x296>
 8007992:	2b05      	cmp	r3, #5
 8007994:	dd02      	ble.n	800799c <_dtoa_r+0x1d0>
 8007996:	2400      	movs	r4, #0
 8007998:	3b04      	subs	r3, #4
 800799a:	9322      	str	r3, [sp, #136]	; 0x88
 800799c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800799e:	1e98      	subs	r0, r3, #2
 80079a0:	2803      	cmp	r0, #3
 80079a2:	d867      	bhi.n	8007a74 <_dtoa_r+0x2a8>
 80079a4:	f7f8 fbb6 	bl	8000114 <__gnu_thumb1_case_uqi>
 80079a8:	5b383a2b 	.word	0x5b383a2b
 80079ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079ae:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80079b0:	18f6      	adds	r6, r6, r3
 80079b2:	4b68      	ldr	r3, [pc, #416]	; (8007b54 <_dtoa_r+0x388>)
 80079b4:	18f2      	adds	r2, r6, r3
 80079b6:	2a20      	cmp	r2, #32
 80079b8:	dd0f      	ble.n	80079da <_dtoa_r+0x20e>
 80079ba:	2340      	movs	r3, #64	; 0x40
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	409f      	lsls	r7, r3
 80079c0:	4b65      	ldr	r3, [pc, #404]	; (8007b58 <_dtoa_r+0x38c>)
 80079c2:	0038      	movs	r0, r7
 80079c4:	18f3      	adds	r3, r6, r3
 80079c6:	40dc      	lsrs	r4, r3
 80079c8:	4320      	orrs	r0, r4
 80079ca:	f7fa fce9 	bl	80023a0 <__aeabi_ui2d>
 80079ce:	2201      	movs	r2, #1
 80079d0:	4b62      	ldr	r3, [pc, #392]	; (8007b5c <_dtoa_r+0x390>)
 80079d2:	1e77      	subs	r7, r6, #1
 80079d4:	18cb      	adds	r3, r1, r3
 80079d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80079d8:	e776      	b.n	80078c8 <_dtoa_r+0xfc>
 80079da:	2320      	movs	r3, #32
 80079dc:	0020      	movs	r0, r4
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	4098      	lsls	r0, r3
 80079e2:	e7f2      	b.n	80079ca <_dtoa_r+0x1fe>
 80079e4:	9016      	str	r0, [sp, #88]	; 0x58
 80079e6:	e7ba      	b.n	800795e <_dtoa_r+0x192>
 80079e8:	920c      	str	r2, [sp, #48]	; 0x30
 80079ea:	e7c3      	b.n	8007974 <_dtoa_r+0x1a8>
 80079ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ee:	9a03      	ldr	r2, [sp, #12]
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	930a      	str	r3, [sp, #40]	; 0x28
 80079f4:	4253      	negs	r3, r2
 80079f6:	930d      	str	r3, [sp, #52]	; 0x34
 80079f8:	2300      	movs	r3, #0
 80079fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80079fc:	e7c5      	b.n	800798a <_dtoa_r+0x1be>
 80079fe:	2300      	movs	r3, #0
 8007a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007a04:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a06:	9307      	str	r3, [sp, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dc13      	bgt.n	8007a34 <_dtoa_r+0x268>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	001a      	movs	r2, r3
 8007a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a12:	9307      	str	r3, [sp, #28]
 8007a14:	9223      	str	r2, [sp, #140]	; 0x8c
 8007a16:	e00d      	b.n	8007a34 <_dtoa_r+0x268>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e7f1      	b.n	8007a00 <_dtoa_r+0x234>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007a20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a22:	4694      	mov	ip, r2
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	4463      	add	r3, ip
 8007a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	9307      	str	r3, [sp, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dc00      	bgt.n	8007a34 <_dtoa_r+0x268>
 8007a32:	2301      	movs	r3, #1
 8007a34:	9a04      	ldr	r2, [sp, #16]
 8007a36:	2100      	movs	r1, #0
 8007a38:	69d0      	ldr	r0, [r2, #28]
 8007a3a:	2204      	movs	r2, #4
 8007a3c:	0015      	movs	r5, r2
 8007a3e:	3514      	adds	r5, #20
 8007a40:	429d      	cmp	r5, r3
 8007a42:	d91b      	bls.n	8007a7c <_dtoa_r+0x2b0>
 8007a44:	6041      	str	r1, [r0, #4]
 8007a46:	9804      	ldr	r0, [sp, #16]
 8007a48:	f001 f944 	bl	8008cd4 <_Balloc>
 8007a4c:	9006      	str	r0, [sp, #24]
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d117      	bne.n	8007a82 <_dtoa_r+0x2b6>
 8007a52:	21b0      	movs	r1, #176	; 0xb0
 8007a54:	4b42      	ldr	r3, [pc, #264]	; (8007b60 <_dtoa_r+0x394>)
 8007a56:	482e      	ldr	r0, [pc, #184]	; (8007b10 <_dtoa_r+0x344>)
 8007a58:	9a06      	ldr	r2, [sp, #24]
 8007a5a:	31ff      	adds	r1, #255	; 0xff
 8007a5c:	e6cb      	b.n	80077f6 <_dtoa_r+0x2a>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7dd      	b.n	8007a1e <_dtoa_r+0x252>
 8007a62:	2300      	movs	r3, #0
 8007a64:	940f      	str	r4, [sp, #60]	; 0x3c
 8007a66:	9322      	str	r3, [sp, #136]	; 0x88
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a6c:	9307      	str	r3, [sp, #28]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	3313      	adds	r3, #19
 8007a72:	e7cf      	b.n	8007a14 <_dtoa_r+0x248>
 8007a74:	2301      	movs	r3, #1
 8007a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a78:	3b02      	subs	r3, #2
 8007a7a:	e7f6      	b.n	8007a6a <_dtoa_r+0x29e>
 8007a7c:	3101      	adds	r1, #1
 8007a7e:	0052      	lsls	r2, r2, #1
 8007a80:	e7dc      	b.n	8007a3c <_dtoa_r+0x270>
 8007a82:	9b04      	ldr	r3, [sp, #16]
 8007a84:	9a06      	ldr	r2, [sp, #24]
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	9b07      	ldr	r3, [sp, #28]
 8007a8c:	2b0e      	cmp	r3, #14
 8007a8e:	d900      	bls.n	8007a92 <_dtoa_r+0x2c6>
 8007a90:	e0e5      	b.n	8007c5e <_dtoa_r+0x492>
 8007a92:	2c00      	cmp	r4, #0
 8007a94:	d100      	bne.n	8007a98 <_dtoa_r+0x2cc>
 8007a96:	e0e2      	b.n	8007c5e <_dtoa_r+0x492>
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd64      	ble.n	8007b68 <_dtoa_r+0x39c>
 8007a9e:	210f      	movs	r1, #15
 8007aa0:	9a03      	ldr	r2, [sp, #12]
 8007aa2:	4b2b      	ldr	r3, [pc, #172]	; (8007b50 <_dtoa_r+0x384>)
 8007aa4:	400a      	ands	r2, r1
 8007aa6:	00d2      	lsls	r2, r2, #3
 8007aa8:	189b      	adds	r3, r3, r2
 8007aaa:	681e      	ldr	r6, [r3, #0]
 8007aac:	685f      	ldr	r7, [r3, #4]
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	2402      	movs	r4, #2
 8007ab2:	111d      	asrs	r5, r3, #4
 8007ab4:	05db      	lsls	r3, r3, #23
 8007ab6:	d50a      	bpl.n	8007ace <_dtoa_r+0x302>
 8007ab8:	4b2a      	ldr	r3, [pc, #168]	; (8007b64 <_dtoa_r+0x398>)
 8007aba:	400d      	ands	r5, r1
 8007abc:	6a1a      	ldr	r2, [r3, #32]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007ac2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007ac4:	f7f9 f9aa 	bl	8000e1c <__aeabi_ddiv>
 8007ac8:	9008      	str	r0, [sp, #32]
 8007aca:	9109      	str	r1, [sp, #36]	; 0x24
 8007acc:	3401      	adds	r4, #1
 8007ace:	4b25      	ldr	r3, [pc, #148]	; (8007b64 <_dtoa_r+0x398>)
 8007ad0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ad2:	2d00      	cmp	r5, #0
 8007ad4:	d108      	bne.n	8007ae8 <_dtoa_r+0x31c>
 8007ad6:	9808      	ldr	r0, [sp, #32]
 8007ad8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ada:	0032      	movs	r2, r6
 8007adc:	003b      	movs	r3, r7
 8007ade:	f7f9 f99d 	bl	8000e1c <__aeabi_ddiv>
 8007ae2:	9008      	str	r0, [sp, #32]
 8007ae4:	9109      	str	r1, [sp, #36]	; 0x24
 8007ae6:	e05a      	b.n	8007b9e <_dtoa_r+0x3d2>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	421d      	tst	r5, r3
 8007aec:	d009      	beq.n	8007b02 <_dtoa_r+0x336>
 8007aee:	18e4      	adds	r4, r4, r3
 8007af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007af2:	0030      	movs	r0, r6
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	0039      	movs	r1, r7
 8007afa:	f7f9 fd89 	bl	8001610 <__aeabi_dmul>
 8007afe:	0006      	movs	r6, r0
 8007b00:	000f      	movs	r7, r1
 8007b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b04:	106d      	asrs	r5, r5, #1
 8007b06:	3308      	adds	r3, #8
 8007b08:	e7e2      	b.n	8007ad0 <_dtoa_r+0x304>
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	0800a4e6 	.word	0x0800a4e6
 8007b10:	0800a4fd 	.word	0x0800a4fd
 8007b14:	7ff00000 	.word	0x7ff00000
 8007b18:	0000270f 	.word	0x0000270f
 8007b1c:	0800a4e2 	.word	0x0800a4e2
 8007b20:	0800a4e5 	.word	0x0800a4e5
 8007b24:	0800a4a8 	.word	0x0800a4a8
 8007b28:	0800a4a9 	.word	0x0800a4a9
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	fffffc01 	.word	0xfffffc01
 8007b34:	3ff80000 	.word	0x3ff80000
 8007b38:	636f4361 	.word	0x636f4361
 8007b3c:	3fd287a7 	.word	0x3fd287a7
 8007b40:	8b60c8b3 	.word	0x8b60c8b3
 8007b44:	3fc68a28 	.word	0x3fc68a28
 8007b48:	509f79fb 	.word	0x509f79fb
 8007b4c:	3fd34413 	.word	0x3fd34413
 8007b50:	0800a648 	.word	0x0800a648
 8007b54:	00000432 	.word	0x00000432
 8007b58:	00000412 	.word	0x00000412
 8007b5c:	fe100000 	.word	0xfe100000
 8007b60:	0800a555 	.word	0x0800a555
 8007b64:	0800a620 	.word	0x0800a620
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	2402      	movs	r4, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d016      	beq.n	8007b9e <_dtoa_r+0x3d2>
 8007b70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007b72:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b74:	220f      	movs	r2, #15
 8007b76:	425d      	negs	r5, r3
 8007b78:	402a      	ands	r2, r5
 8007b7a:	4bdd      	ldr	r3, [pc, #884]	; (8007ef0 <_dtoa_r+0x724>)
 8007b7c:	00d2      	lsls	r2, r2, #3
 8007b7e:	189b      	adds	r3, r3, r2
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f7f9 fd44 	bl	8001610 <__aeabi_dmul>
 8007b88:	2701      	movs	r7, #1
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9008      	str	r0, [sp, #32]
 8007b8e:	9109      	str	r1, [sp, #36]	; 0x24
 8007b90:	4ed8      	ldr	r6, [pc, #864]	; (8007ef4 <_dtoa_r+0x728>)
 8007b92:	112d      	asrs	r5, r5, #4
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	d000      	beq.n	8007b9a <_dtoa_r+0x3ce>
 8007b98:	e091      	b.n	8007cbe <_dtoa_r+0x4f2>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1a1      	bne.n	8007ae2 <_dtoa_r+0x316>
 8007b9e:	9e08      	ldr	r6, [sp, #32]
 8007ba0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ba2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d100      	bne.n	8007baa <_dtoa_r+0x3de>
 8007ba8:	e094      	b.n	8007cd4 <_dtoa_r+0x508>
 8007baa:	2200      	movs	r2, #0
 8007bac:	0030      	movs	r0, r6
 8007bae:	0039      	movs	r1, r7
 8007bb0:	4bd1      	ldr	r3, [pc, #836]	; (8007ef8 <_dtoa_r+0x72c>)
 8007bb2:	f7f8 fc4f 	bl	8000454 <__aeabi_dcmplt>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d100      	bne.n	8007bbc <_dtoa_r+0x3f0>
 8007bba:	e08b      	b.n	8007cd4 <_dtoa_r+0x508>
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d100      	bne.n	8007bc4 <_dtoa_r+0x3f8>
 8007bc2:	e087      	b.n	8007cd4 <_dtoa_r+0x508>
 8007bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dd45      	ble.n	8007c56 <_dtoa_r+0x48a>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	930e      	str	r3, [sp, #56]	; 0x38
 8007bd2:	0030      	movs	r0, r6
 8007bd4:	4bc9      	ldr	r3, [pc, #804]	; (8007efc <_dtoa_r+0x730>)
 8007bd6:	0039      	movs	r1, r7
 8007bd8:	f7f9 fd1a 	bl	8001610 <__aeabi_dmul>
 8007bdc:	9008      	str	r0, [sp, #32]
 8007bde:	9109      	str	r1, [sp, #36]	; 0x24
 8007be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be2:	3401      	adds	r4, #1
 8007be4:	0020      	movs	r0, r4
 8007be6:	9e08      	ldr	r6, [sp, #32]
 8007be8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007bea:	9312      	str	r3, [sp, #72]	; 0x48
 8007bec:	f7fa fba8 	bl	8002340 <__aeabi_i2d>
 8007bf0:	0032      	movs	r2, r6
 8007bf2:	003b      	movs	r3, r7
 8007bf4:	f7f9 fd0c 	bl	8001610 <__aeabi_dmul>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	4bc1      	ldr	r3, [pc, #772]	; (8007f00 <_dtoa_r+0x734>)
 8007bfc:	f7f8 fdae 	bl	800075c <__aeabi_dadd>
 8007c00:	4ac0      	ldr	r2, [pc, #768]	; (8007f04 <_dtoa_r+0x738>)
 8007c02:	9014      	str	r0, [sp, #80]	; 0x50
 8007c04:	9115      	str	r1, [sp, #84]	; 0x54
 8007c06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c08:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8007c0a:	4694      	mov	ip, r2
 8007c0c:	9308      	str	r3, [sp, #32]
 8007c0e:	9409      	str	r4, [sp, #36]	; 0x24
 8007c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c12:	4463      	add	r3, ip
 8007c14:	9318      	str	r3, [sp, #96]	; 0x60
 8007c16:	9309      	str	r3, [sp, #36]	; 0x24
 8007c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d15e      	bne.n	8007cdc <_dtoa_r+0x510>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4bb9      	ldr	r3, [pc, #740]	; (8007f08 <_dtoa_r+0x73c>)
 8007c22:	0030      	movs	r0, r6
 8007c24:	0039      	movs	r1, r7
 8007c26:	f7f9 ffb5 	bl	8001b94 <__aeabi_dsub>
 8007c2a:	9a08      	ldr	r2, [sp, #32]
 8007c2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007c2e:	0004      	movs	r4, r0
 8007c30:	000d      	movs	r5, r1
 8007c32:	f7f8 fc23 	bl	800047c <__aeabi_dcmpgt>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d000      	beq.n	8007c3c <_dtoa_r+0x470>
 8007c3a:	e2b3      	b.n	80081a4 <_dtoa_r+0x9d8>
 8007c3c:	48b3      	ldr	r0, [pc, #716]	; (8007f0c <_dtoa_r+0x740>)
 8007c3e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007c40:	4684      	mov	ip, r0
 8007c42:	4461      	add	r1, ip
 8007c44:	000b      	movs	r3, r1
 8007c46:	0020      	movs	r0, r4
 8007c48:	0029      	movs	r1, r5
 8007c4a:	9a08      	ldr	r2, [sp, #32]
 8007c4c:	f7f8 fc02 	bl	8000454 <__aeabi_dcmplt>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d000      	beq.n	8007c56 <_dtoa_r+0x48a>
 8007c54:	e2a3      	b.n	800819e <_dtoa_r+0x9d2>
 8007c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c58:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8007c5a:	9308      	str	r3, [sp, #32]
 8007c5c:	9409      	str	r4, [sp, #36]	; 0x24
 8007c5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da00      	bge.n	8007c66 <_dtoa_r+0x49a>
 8007c64:	e179      	b.n	8007f5a <_dtoa_r+0x78e>
 8007c66:	9a03      	ldr	r2, [sp, #12]
 8007c68:	2a0e      	cmp	r2, #14
 8007c6a:	dd00      	ble.n	8007c6e <_dtoa_r+0x4a2>
 8007c6c:	e175      	b.n	8007f5a <_dtoa_r+0x78e>
 8007c6e:	4ba0      	ldr	r3, [pc, #640]	; (8007ef0 <_dtoa_r+0x724>)
 8007c70:	00d2      	lsls	r2, r2, #3
 8007c72:	189b      	adds	r3, r3, r2
 8007c74:	681e      	ldr	r6, [r3, #0]
 8007c76:	685f      	ldr	r7, [r3, #4]
 8007c78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	db00      	blt.n	8007c80 <_dtoa_r+0x4b4>
 8007c7e:	e0e5      	b.n	8007e4c <_dtoa_r+0x680>
 8007c80:	9b07      	ldr	r3, [sp, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dd00      	ble.n	8007c88 <_dtoa_r+0x4bc>
 8007c86:	e0e1      	b.n	8007e4c <_dtoa_r+0x680>
 8007c88:	d000      	beq.n	8007c8c <_dtoa_r+0x4c0>
 8007c8a:	e288      	b.n	800819e <_dtoa_r+0x9d2>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	0030      	movs	r0, r6
 8007c90:	0039      	movs	r1, r7
 8007c92:	4b9d      	ldr	r3, [pc, #628]	; (8007f08 <_dtoa_r+0x73c>)
 8007c94:	f7f9 fcbc 	bl	8001610 <__aeabi_dmul>
 8007c98:	9a08      	ldr	r2, [sp, #32]
 8007c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9c:	f7f8 fbf8 	bl	8000490 <__aeabi_dcmpge>
 8007ca0:	9e07      	ldr	r6, [sp, #28]
 8007ca2:	0037      	movs	r7, r6
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d000      	beq.n	8007caa <_dtoa_r+0x4de>
 8007ca8:	e25f      	b.n	800816a <_dtoa_r+0x99e>
 8007caa:	9b06      	ldr	r3, [sp, #24]
 8007cac:	9a06      	ldr	r2, [sp, #24]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	9308      	str	r3, [sp, #32]
 8007cb2:	2331      	movs	r3, #49	; 0x31
 8007cb4:	7013      	strb	r3, [r2, #0]
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	e25a      	b.n	8008174 <_dtoa_r+0x9a8>
 8007cbe:	423d      	tst	r5, r7
 8007cc0:	d005      	beq.n	8007cce <_dtoa_r+0x502>
 8007cc2:	6832      	ldr	r2, [r6, #0]
 8007cc4:	6873      	ldr	r3, [r6, #4]
 8007cc6:	f7f9 fca3 	bl	8001610 <__aeabi_dmul>
 8007cca:	003b      	movs	r3, r7
 8007ccc:	3401      	adds	r4, #1
 8007cce:	106d      	asrs	r5, r5, #1
 8007cd0:	3608      	adds	r6, #8
 8007cd2:	e75f      	b.n	8007b94 <_dtoa_r+0x3c8>
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	930e      	str	r3, [sp, #56]	; 0x38
 8007cd8:	9b07      	ldr	r3, [sp, #28]
 8007cda:	e783      	b.n	8007be4 <_dtoa_r+0x418>
 8007cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cde:	4b84      	ldr	r3, [pc, #528]	; (8007ef0 <_dtoa_r+0x724>)
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	00d2      	lsls	r2, r2, #3
 8007ce4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ce6:	189b      	adds	r3, r3, r2
 8007ce8:	9c08      	ldr	r4, [sp, #32]
 8007cea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	d051      	beq.n	8007d98 <_dtoa_r+0x5cc>
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	4986      	ldr	r1, [pc, #536]	; (8007f10 <_dtoa_r+0x744>)
 8007cf8:	f7f9 f890 	bl	8000e1c <__aeabi_ddiv>
 8007cfc:	0022      	movs	r2, r4
 8007cfe:	002b      	movs	r3, r5
 8007d00:	f7f9 ff48 	bl	8001b94 <__aeabi_dsub>
 8007d04:	9a06      	ldr	r2, [sp, #24]
 8007d06:	0004      	movs	r4, r0
 8007d08:	4694      	mov	ip, r2
 8007d0a:	000d      	movs	r5, r1
 8007d0c:	9b06      	ldr	r3, [sp, #24]
 8007d0e:	9314      	str	r3, [sp, #80]	; 0x50
 8007d10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d12:	4463      	add	r3, ip
 8007d14:	9318      	str	r3, [sp, #96]	; 0x60
 8007d16:	0039      	movs	r1, r7
 8007d18:	0030      	movs	r0, r6
 8007d1a:	f7fa fadb 	bl	80022d4 <__aeabi_d2iz>
 8007d1e:	9012      	str	r0, [sp, #72]	; 0x48
 8007d20:	f7fa fb0e 	bl	8002340 <__aeabi_i2d>
 8007d24:	0002      	movs	r2, r0
 8007d26:	000b      	movs	r3, r1
 8007d28:	0030      	movs	r0, r6
 8007d2a:	0039      	movs	r1, r7
 8007d2c:	f7f9 ff32 	bl	8001b94 <__aeabi_dsub>
 8007d30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d34:	3301      	adds	r3, #1
 8007d36:	9308      	str	r3, [sp, #32]
 8007d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d3a:	0006      	movs	r6, r0
 8007d3c:	3330      	adds	r3, #48	; 0x30
 8007d3e:	7013      	strb	r3, [r2, #0]
 8007d40:	0022      	movs	r2, r4
 8007d42:	002b      	movs	r3, r5
 8007d44:	000f      	movs	r7, r1
 8007d46:	f7f8 fb85 	bl	8000454 <__aeabi_dcmplt>
 8007d4a:	2800      	cmp	r0, #0
 8007d4c:	d174      	bne.n	8007e38 <_dtoa_r+0x66c>
 8007d4e:	0032      	movs	r2, r6
 8007d50:	003b      	movs	r3, r7
 8007d52:	2000      	movs	r0, #0
 8007d54:	4968      	ldr	r1, [pc, #416]	; (8007ef8 <_dtoa_r+0x72c>)
 8007d56:	f7f9 ff1d 	bl	8001b94 <__aeabi_dsub>
 8007d5a:	0022      	movs	r2, r4
 8007d5c:	002b      	movs	r3, r5
 8007d5e:	f7f8 fb79 	bl	8000454 <__aeabi_dcmplt>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d000      	beq.n	8007d68 <_dtoa_r+0x59c>
 8007d66:	e0d7      	b.n	8007f18 <_dtoa_r+0x74c>
 8007d68:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007d6a:	9a08      	ldr	r2, [sp, #32]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d100      	bne.n	8007d72 <_dtoa_r+0x5a6>
 8007d70:	e771      	b.n	8007c56 <_dtoa_r+0x48a>
 8007d72:	2200      	movs	r2, #0
 8007d74:	0020      	movs	r0, r4
 8007d76:	0029      	movs	r1, r5
 8007d78:	4b60      	ldr	r3, [pc, #384]	; (8007efc <_dtoa_r+0x730>)
 8007d7a:	f7f9 fc49 	bl	8001610 <__aeabi_dmul>
 8007d7e:	4b5f      	ldr	r3, [pc, #380]	; (8007efc <_dtoa_r+0x730>)
 8007d80:	0004      	movs	r4, r0
 8007d82:	000d      	movs	r5, r1
 8007d84:	0030      	movs	r0, r6
 8007d86:	0039      	movs	r1, r7
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f7f9 fc41 	bl	8001610 <__aeabi_dmul>
 8007d8e:	9b08      	ldr	r3, [sp, #32]
 8007d90:	0006      	movs	r6, r0
 8007d92:	000f      	movs	r7, r1
 8007d94:	9314      	str	r3, [sp, #80]	; 0x50
 8007d96:	e7be      	b.n	8007d16 <_dtoa_r+0x54a>
 8007d98:	0020      	movs	r0, r4
 8007d9a:	0029      	movs	r1, r5
 8007d9c:	f7f9 fc38 	bl	8001610 <__aeabi_dmul>
 8007da0:	9a06      	ldr	r2, [sp, #24]
 8007da2:	9b06      	ldr	r3, [sp, #24]
 8007da4:	4694      	mov	ip, r2
 8007da6:	9308      	str	r3, [sp, #32]
 8007da8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007daa:	9014      	str	r0, [sp, #80]	; 0x50
 8007dac:	9115      	str	r1, [sp, #84]	; 0x54
 8007dae:	4463      	add	r3, ip
 8007db0:	9319      	str	r3, [sp, #100]	; 0x64
 8007db2:	0030      	movs	r0, r6
 8007db4:	0039      	movs	r1, r7
 8007db6:	f7fa fa8d 	bl	80022d4 <__aeabi_d2iz>
 8007dba:	9018      	str	r0, [sp, #96]	; 0x60
 8007dbc:	f7fa fac0 	bl	8002340 <__aeabi_i2d>
 8007dc0:	0002      	movs	r2, r0
 8007dc2:	000b      	movs	r3, r1
 8007dc4:	0030      	movs	r0, r6
 8007dc6:	0039      	movs	r1, r7
 8007dc8:	f7f9 fee4 	bl	8001b94 <__aeabi_dsub>
 8007dcc:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007dce:	9b08      	ldr	r3, [sp, #32]
 8007dd0:	3630      	adds	r6, #48	; 0x30
 8007dd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007dd4:	701e      	strb	r6, [r3, #0]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	0004      	movs	r4, r0
 8007dda:	000d      	movs	r5, r1
 8007ddc:	9308      	str	r3, [sp, #32]
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d12d      	bne.n	8007e3e <_dtoa_r+0x672>
 8007de2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007de4:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007de6:	9a06      	ldr	r2, [sp, #24]
 8007de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dea:	4694      	mov	ip, r2
 8007dec:	4463      	add	r3, ip
 8007dee:	2200      	movs	r2, #0
 8007df0:	9308      	str	r3, [sp, #32]
 8007df2:	4b47      	ldr	r3, [pc, #284]	; (8007f10 <_dtoa_r+0x744>)
 8007df4:	f7f8 fcb2 	bl	800075c <__aeabi_dadd>
 8007df8:	0002      	movs	r2, r0
 8007dfa:	000b      	movs	r3, r1
 8007dfc:	0020      	movs	r0, r4
 8007dfe:	0029      	movs	r1, r5
 8007e00:	f7f8 fb3c 	bl	800047c <__aeabi_dcmpgt>
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d000      	beq.n	8007e0a <_dtoa_r+0x63e>
 8007e08:	e086      	b.n	8007f18 <_dtoa_r+0x74c>
 8007e0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e0e:	2000      	movs	r0, #0
 8007e10:	493f      	ldr	r1, [pc, #252]	; (8007f10 <_dtoa_r+0x744>)
 8007e12:	f7f9 febf 	bl	8001b94 <__aeabi_dsub>
 8007e16:	0002      	movs	r2, r0
 8007e18:	000b      	movs	r3, r1
 8007e1a:	0020      	movs	r0, r4
 8007e1c:	0029      	movs	r1, r5
 8007e1e:	f7f8 fb19 	bl	8000454 <__aeabi_dcmplt>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	d100      	bne.n	8007e28 <_dtoa_r+0x65c>
 8007e26:	e716      	b.n	8007c56 <_dtoa_r+0x48a>
 8007e28:	9b08      	ldr	r3, [sp, #32]
 8007e2a:	001a      	movs	r2, r3
 8007e2c:	3a01      	subs	r2, #1
 8007e2e:	9208      	str	r2, [sp, #32]
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	2a30      	cmp	r2, #48	; 0x30
 8007e34:	d0f8      	beq.n	8007e28 <_dtoa_r+0x65c>
 8007e36:	9308      	str	r3, [sp, #32]
 8007e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	e046      	b.n	8007ecc <_dtoa_r+0x700>
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4b2e      	ldr	r3, [pc, #184]	; (8007efc <_dtoa_r+0x730>)
 8007e42:	f7f9 fbe5 	bl	8001610 <__aeabi_dmul>
 8007e46:	0006      	movs	r6, r0
 8007e48:	000f      	movs	r7, r1
 8007e4a:	e7b2      	b.n	8007db2 <_dtoa_r+0x5e6>
 8007e4c:	9b06      	ldr	r3, [sp, #24]
 8007e4e:	9a06      	ldr	r2, [sp, #24]
 8007e50:	930a      	str	r3, [sp, #40]	; 0x28
 8007e52:	9b07      	ldr	r3, [sp, #28]
 8007e54:	9c08      	ldr	r4, [sp, #32]
 8007e56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	189b      	adds	r3, r3, r2
 8007e5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e5e:	0032      	movs	r2, r6
 8007e60:	003b      	movs	r3, r7
 8007e62:	0020      	movs	r0, r4
 8007e64:	0029      	movs	r1, r5
 8007e66:	f7f8 ffd9 	bl	8000e1c <__aeabi_ddiv>
 8007e6a:	f7fa fa33 	bl	80022d4 <__aeabi_d2iz>
 8007e6e:	9007      	str	r0, [sp, #28]
 8007e70:	f7fa fa66 	bl	8002340 <__aeabi_i2d>
 8007e74:	0032      	movs	r2, r6
 8007e76:	003b      	movs	r3, r7
 8007e78:	f7f9 fbca 	bl	8001610 <__aeabi_dmul>
 8007e7c:	0002      	movs	r2, r0
 8007e7e:	000b      	movs	r3, r1
 8007e80:	0020      	movs	r0, r4
 8007e82:	0029      	movs	r1, r5
 8007e84:	f7f9 fe86 	bl	8001b94 <__aeabi_dsub>
 8007e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8a:	001a      	movs	r2, r3
 8007e8c:	3201      	adds	r2, #1
 8007e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8007e90:	9208      	str	r2, [sp, #32]
 8007e92:	9a07      	ldr	r2, [sp, #28]
 8007e94:	3230      	adds	r2, #48	; 0x30
 8007e96:	701a      	strb	r2, [r3, #0]
 8007e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d14f      	bne.n	8007f3e <_dtoa_r+0x772>
 8007e9e:	0002      	movs	r2, r0
 8007ea0:	000b      	movs	r3, r1
 8007ea2:	f7f8 fc5b 	bl	800075c <__aeabi_dadd>
 8007ea6:	0032      	movs	r2, r6
 8007ea8:	003b      	movs	r3, r7
 8007eaa:	0004      	movs	r4, r0
 8007eac:	000d      	movs	r5, r1
 8007eae:	f7f8 fae5 	bl	800047c <__aeabi_dcmpgt>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d12e      	bne.n	8007f14 <_dtoa_r+0x748>
 8007eb6:	0032      	movs	r2, r6
 8007eb8:	003b      	movs	r3, r7
 8007eba:	0020      	movs	r0, r4
 8007ebc:	0029      	movs	r1, r5
 8007ebe:	f7f8 fac3 	bl	8000448 <__aeabi_dcmpeq>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d002      	beq.n	8007ecc <_dtoa_r+0x700>
 8007ec6:	9b07      	ldr	r3, [sp, #28]
 8007ec8:	07de      	lsls	r6, r3, #31
 8007eca:	d423      	bmi.n	8007f14 <_dtoa_r+0x748>
 8007ecc:	9905      	ldr	r1, [sp, #20]
 8007ece:	9804      	ldr	r0, [sp, #16]
 8007ed0:	f000 ff44 	bl	8008d5c <_Bfree>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	9a08      	ldr	r2, [sp, #32]
 8007ed8:	7013      	strb	r3, [r2, #0]
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ede:	3301      	adds	r3, #1
 8007ee0:	6013      	str	r3, [r2, #0]
 8007ee2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d100      	bne.n	8007eea <_dtoa_r+0x71e>
 8007ee8:	e4ba      	b.n	8007860 <_dtoa_r+0x94>
 8007eea:	9a08      	ldr	r2, [sp, #32]
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	e4b7      	b.n	8007860 <_dtoa_r+0x94>
 8007ef0:	0800a648 	.word	0x0800a648
 8007ef4:	0800a620 	.word	0x0800a620
 8007ef8:	3ff00000 	.word	0x3ff00000
 8007efc:	40240000 	.word	0x40240000
 8007f00:	401c0000 	.word	0x401c0000
 8007f04:	fcc00000 	.word	0xfcc00000
 8007f08:	40140000 	.word	0x40140000
 8007f0c:	7cc00000 	.word	0x7cc00000
 8007f10:	3fe00000 	.word	0x3fe00000
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	930e      	str	r3, [sp, #56]	; 0x38
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	9308      	str	r3, [sp, #32]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	2a39      	cmp	r2, #57	; 0x39
 8007f22:	d108      	bne.n	8007f36 <_dtoa_r+0x76a>
 8007f24:	9a06      	ldr	r2, [sp, #24]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d1f7      	bne.n	8007f1a <_dtoa_r+0x74e>
 8007f2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f2c:	9906      	ldr	r1, [sp, #24]
 8007f2e:	3201      	adds	r2, #1
 8007f30:	920e      	str	r2, [sp, #56]	; 0x38
 8007f32:	2230      	movs	r2, #48	; 0x30
 8007f34:	700a      	strb	r2, [r1, #0]
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	3201      	adds	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
 8007f3c:	e77c      	b.n	8007e38 <_dtoa_r+0x66c>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4ba9      	ldr	r3, [pc, #676]	; (80081e8 <_dtoa_r+0xa1c>)
 8007f42:	f7f9 fb65 	bl	8001610 <__aeabi_dmul>
 8007f46:	2200      	movs	r2, #0
 8007f48:	2300      	movs	r3, #0
 8007f4a:	0004      	movs	r4, r0
 8007f4c:	000d      	movs	r5, r1
 8007f4e:	f7f8 fa7b 	bl	8000448 <__aeabi_dcmpeq>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	d100      	bne.n	8007f58 <_dtoa_r+0x78c>
 8007f56:	e782      	b.n	8007e5e <_dtoa_r+0x692>
 8007f58:	e7b8      	b.n	8007ecc <_dtoa_r+0x700>
 8007f5a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007f5c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007f5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007f60:	2f00      	cmp	r7, #0
 8007f62:	d012      	beq.n	8007f8a <_dtoa_r+0x7be>
 8007f64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007f66:	2a01      	cmp	r2, #1
 8007f68:	dc6e      	bgt.n	8008048 <_dtoa_r+0x87c>
 8007f6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f6c:	2a00      	cmp	r2, #0
 8007f6e:	d065      	beq.n	800803c <_dtoa_r+0x870>
 8007f70:	4a9e      	ldr	r2, [pc, #632]	; (80081ec <_dtoa_r+0xa20>)
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f76:	2101      	movs	r1, #1
 8007f78:	18d2      	adds	r2, r2, r3
 8007f7a:	920a      	str	r2, [sp, #40]	; 0x28
 8007f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f7e:	9804      	ldr	r0, [sp, #16]
 8007f80:	18d3      	adds	r3, r2, r3
 8007f82:	930c      	str	r3, [sp, #48]	; 0x30
 8007f84:	f000 ffe6 	bl	8008f54 <__i2b>
 8007f88:	0007      	movs	r7, r0
 8007f8a:	2c00      	cmp	r4, #0
 8007f8c:	d00e      	beq.n	8007fac <_dtoa_r+0x7e0>
 8007f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	dd0b      	ble.n	8007fac <_dtoa_r+0x7e0>
 8007f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f96:	0023      	movs	r3, r4
 8007f98:	4294      	cmp	r4, r2
 8007f9a:	dd00      	ble.n	8007f9e <_dtoa_r+0x7d2>
 8007f9c:	0013      	movs	r3, r2
 8007f9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fa0:	1ae4      	subs	r4, r4, r3
 8007fa2:	1ad2      	subs	r2, r2, r3
 8007fa4:	920a      	str	r2, [sp, #40]	; 0x28
 8007fa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fa8:	1ad3      	subs	r3, r2, r3
 8007faa:	930c      	str	r3, [sp, #48]	; 0x30
 8007fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01e      	beq.n	8007ff0 <_dtoa_r+0x824>
 8007fb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d05c      	beq.n	8008072 <_dtoa_r+0x8a6>
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	dd10      	ble.n	8007fde <_dtoa_r+0x812>
 8007fbc:	0039      	movs	r1, r7
 8007fbe:	002a      	movs	r2, r5
 8007fc0:	9804      	ldr	r0, [sp, #16]
 8007fc2:	f001 f88f 	bl	80090e4 <__pow5mult>
 8007fc6:	9a05      	ldr	r2, [sp, #20]
 8007fc8:	0001      	movs	r1, r0
 8007fca:	0007      	movs	r7, r0
 8007fcc:	9804      	ldr	r0, [sp, #16]
 8007fce:	f000 ffd9 	bl	8008f84 <__multiply>
 8007fd2:	0006      	movs	r6, r0
 8007fd4:	9905      	ldr	r1, [sp, #20]
 8007fd6:	9804      	ldr	r0, [sp, #16]
 8007fd8:	f000 fec0 	bl	8008d5c <_Bfree>
 8007fdc:	9605      	str	r6, [sp, #20]
 8007fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fe0:	1b5a      	subs	r2, r3, r5
 8007fe2:	42ab      	cmp	r3, r5
 8007fe4:	d004      	beq.n	8007ff0 <_dtoa_r+0x824>
 8007fe6:	9905      	ldr	r1, [sp, #20]
 8007fe8:	9804      	ldr	r0, [sp, #16]
 8007fea:	f001 f87b 	bl	80090e4 <__pow5mult>
 8007fee:	9005      	str	r0, [sp, #20]
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	9804      	ldr	r0, [sp, #16]
 8007ff4:	f000 ffae 	bl	8008f54 <__i2b>
 8007ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ffa:	0006      	movs	r6, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dd3a      	ble.n	8008076 <_dtoa_r+0x8aa>
 8008000:	001a      	movs	r2, r3
 8008002:	0001      	movs	r1, r0
 8008004:	9804      	ldr	r0, [sp, #16]
 8008006:	f001 f86d 	bl	80090e4 <__pow5mult>
 800800a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800800c:	0006      	movs	r6, r0
 800800e:	2500      	movs	r5, #0
 8008010:	2b01      	cmp	r3, #1
 8008012:	dc38      	bgt.n	8008086 <_dtoa_r+0x8ba>
 8008014:	2500      	movs	r5, #0
 8008016:	9b08      	ldr	r3, [sp, #32]
 8008018:	42ab      	cmp	r3, r5
 800801a:	d130      	bne.n	800807e <_dtoa_r+0x8b2>
 800801c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801e:	031b      	lsls	r3, r3, #12
 8008020:	42ab      	cmp	r3, r5
 8008022:	d12c      	bne.n	800807e <_dtoa_r+0x8b2>
 8008024:	4b72      	ldr	r3, [pc, #456]	; (80081f0 <_dtoa_r+0xa24>)
 8008026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008028:	4213      	tst	r3, r2
 800802a:	d028      	beq.n	800807e <_dtoa_r+0x8b2>
 800802c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800802e:	3501      	adds	r5, #1
 8008030:	3301      	adds	r3, #1
 8008032:	930a      	str	r3, [sp, #40]	; 0x28
 8008034:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008036:	3301      	adds	r3, #1
 8008038:	930c      	str	r3, [sp, #48]	; 0x30
 800803a:	e020      	b.n	800807e <_dtoa_r+0x8b2>
 800803c:	2336      	movs	r3, #54	; 0x36
 800803e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008040:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008042:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008044:	1a9b      	subs	r3, r3, r2
 8008046:	e795      	b.n	8007f74 <_dtoa_r+0x7a8>
 8008048:	9b07      	ldr	r3, [sp, #28]
 800804a:	1e5d      	subs	r5, r3, #1
 800804c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800804e:	42ab      	cmp	r3, r5
 8008050:	db07      	blt.n	8008062 <_dtoa_r+0x896>
 8008052:	1b5d      	subs	r5, r3, r5
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008058:	2b00      	cmp	r3, #0
 800805a:	da8b      	bge.n	8007f74 <_dtoa_r+0x7a8>
 800805c:	1ae4      	subs	r4, r4, r3
 800805e:	2300      	movs	r3, #0
 8008060:	e788      	b.n	8007f74 <_dtoa_r+0x7a8>
 8008062:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008064:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008066:	1aeb      	subs	r3, r5, r3
 8008068:	18d3      	adds	r3, r2, r3
 800806a:	950d      	str	r5, [sp, #52]	; 0x34
 800806c:	9313      	str	r3, [sp, #76]	; 0x4c
 800806e:	2500      	movs	r5, #0
 8008070:	e7f0      	b.n	8008054 <_dtoa_r+0x888>
 8008072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008074:	e7b7      	b.n	8007fe6 <_dtoa_r+0x81a>
 8008076:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008078:	2500      	movs	r5, #0
 800807a:	2b01      	cmp	r3, #1
 800807c:	ddca      	ble.n	8008014 <_dtoa_r+0x848>
 800807e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008080:	2001      	movs	r0, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d008      	beq.n	8008098 <_dtoa_r+0x8cc>
 8008086:	6933      	ldr	r3, [r6, #16]
 8008088:	3303      	adds	r3, #3
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	18f3      	adds	r3, r6, r3
 800808e:	6858      	ldr	r0, [r3, #4]
 8008090:	f000 ff18 	bl	8008ec4 <__hi0bits>
 8008094:	2320      	movs	r3, #32
 8008096:	1a18      	subs	r0, r3, r0
 8008098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800809a:	1818      	adds	r0, r3, r0
 800809c:	0002      	movs	r2, r0
 800809e:	231f      	movs	r3, #31
 80080a0:	401a      	ands	r2, r3
 80080a2:	4218      	tst	r0, r3
 80080a4:	d047      	beq.n	8008136 <_dtoa_r+0x96a>
 80080a6:	3301      	adds	r3, #1
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	dd3f      	ble.n	800812e <_dtoa_r+0x962>
 80080ae:	231c      	movs	r3, #28
 80080b0:	1a9b      	subs	r3, r3, r2
 80080b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b4:	18e4      	adds	r4, r4, r3
 80080b6:	18d2      	adds	r2, r2, r3
 80080b8:	920a      	str	r2, [sp, #40]	; 0x28
 80080ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080bc:	18d3      	adds	r3, r2, r3
 80080be:	930c      	str	r3, [sp, #48]	; 0x30
 80080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	dd05      	ble.n	80080d2 <_dtoa_r+0x906>
 80080c6:	001a      	movs	r2, r3
 80080c8:	9905      	ldr	r1, [sp, #20]
 80080ca:	9804      	ldr	r0, [sp, #16]
 80080cc:	f001 f866 	bl	800919c <__lshift>
 80080d0:	9005      	str	r0, [sp, #20]
 80080d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dd05      	ble.n	80080e4 <_dtoa_r+0x918>
 80080d8:	0031      	movs	r1, r6
 80080da:	001a      	movs	r2, r3
 80080dc:	9804      	ldr	r0, [sp, #16]
 80080de:	f001 f85d 	bl	800919c <__lshift>
 80080e2:	0006      	movs	r6, r0
 80080e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d027      	beq.n	800813a <_dtoa_r+0x96e>
 80080ea:	0031      	movs	r1, r6
 80080ec:	9805      	ldr	r0, [sp, #20]
 80080ee:	f001 f8c3 	bl	8009278 <__mcmp>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	da21      	bge.n	800813a <_dtoa_r+0x96e>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	220a      	movs	r2, #10
 80080fa:	3b01      	subs	r3, #1
 80080fc:	9303      	str	r3, [sp, #12]
 80080fe:	9905      	ldr	r1, [sp, #20]
 8008100:	2300      	movs	r3, #0
 8008102:	9804      	ldr	r0, [sp, #16]
 8008104:	f000 fe4e 	bl	8008da4 <__multadd>
 8008108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800810a:	9005      	str	r0, [sp, #20]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d100      	bne.n	8008112 <_dtoa_r+0x946>
 8008110:	e15d      	b.n	80083ce <_dtoa_r+0xc02>
 8008112:	2300      	movs	r3, #0
 8008114:	0039      	movs	r1, r7
 8008116:	220a      	movs	r2, #10
 8008118:	9804      	ldr	r0, [sp, #16]
 800811a:	f000 fe43 	bl	8008da4 <__multadd>
 800811e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008120:	0007      	movs	r7, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	dc49      	bgt.n	80081ba <_dtoa_r+0x9ee>
 8008126:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008128:	2b02      	cmp	r3, #2
 800812a:	dc0e      	bgt.n	800814a <_dtoa_r+0x97e>
 800812c:	e045      	b.n	80081ba <_dtoa_r+0x9ee>
 800812e:	2b04      	cmp	r3, #4
 8008130:	d0c6      	beq.n	80080c0 <_dtoa_r+0x8f4>
 8008132:	331c      	adds	r3, #28
 8008134:	e7bd      	b.n	80080b2 <_dtoa_r+0x8e6>
 8008136:	0013      	movs	r3, r2
 8008138:	e7fb      	b.n	8008132 <_dtoa_r+0x966>
 800813a:	9b07      	ldr	r3, [sp, #28]
 800813c:	2b00      	cmp	r3, #0
 800813e:	dc36      	bgt.n	80081ae <_dtoa_r+0x9e2>
 8008140:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008142:	2b02      	cmp	r3, #2
 8008144:	dd33      	ble.n	80081ae <_dtoa_r+0x9e2>
 8008146:	9b07      	ldr	r3, [sp, #28]
 8008148:	930b      	str	r3, [sp, #44]	; 0x2c
 800814a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10c      	bne.n	800816a <_dtoa_r+0x99e>
 8008150:	0031      	movs	r1, r6
 8008152:	2205      	movs	r2, #5
 8008154:	9804      	ldr	r0, [sp, #16]
 8008156:	f000 fe25 	bl	8008da4 <__multadd>
 800815a:	0006      	movs	r6, r0
 800815c:	0001      	movs	r1, r0
 800815e:	9805      	ldr	r0, [sp, #20]
 8008160:	f001 f88a 	bl	8009278 <__mcmp>
 8008164:	2800      	cmp	r0, #0
 8008166:	dd00      	ble.n	800816a <_dtoa_r+0x99e>
 8008168:	e59f      	b.n	8007caa <_dtoa_r+0x4de>
 800816a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800816c:	43db      	mvns	r3, r3
 800816e:	9303      	str	r3, [sp, #12]
 8008170:	9b06      	ldr	r3, [sp, #24]
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	2500      	movs	r5, #0
 8008176:	0031      	movs	r1, r6
 8008178:	9804      	ldr	r0, [sp, #16]
 800817a:	f000 fdef 	bl	8008d5c <_Bfree>
 800817e:	2f00      	cmp	r7, #0
 8008180:	d100      	bne.n	8008184 <_dtoa_r+0x9b8>
 8008182:	e6a3      	b.n	8007ecc <_dtoa_r+0x700>
 8008184:	2d00      	cmp	r5, #0
 8008186:	d005      	beq.n	8008194 <_dtoa_r+0x9c8>
 8008188:	42bd      	cmp	r5, r7
 800818a:	d003      	beq.n	8008194 <_dtoa_r+0x9c8>
 800818c:	0029      	movs	r1, r5
 800818e:	9804      	ldr	r0, [sp, #16]
 8008190:	f000 fde4 	bl	8008d5c <_Bfree>
 8008194:	0039      	movs	r1, r7
 8008196:	9804      	ldr	r0, [sp, #16]
 8008198:	f000 fde0 	bl	8008d5c <_Bfree>
 800819c:	e696      	b.n	8007ecc <_dtoa_r+0x700>
 800819e:	2600      	movs	r6, #0
 80081a0:	0037      	movs	r7, r6
 80081a2:	e7e2      	b.n	800816a <_dtoa_r+0x99e>
 80081a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80081a8:	9303      	str	r3, [sp, #12]
 80081aa:	0037      	movs	r7, r6
 80081ac:	e57d      	b.n	8007caa <_dtoa_r+0x4de>
 80081ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d100      	bne.n	80081b6 <_dtoa_r+0x9ea>
 80081b4:	e0c3      	b.n	800833e <_dtoa_r+0xb72>
 80081b6:	9b07      	ldr	r3, [sp, #28]
 80081b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ba:	2c00      	cmp	r4, #0
 80081bc:	dd05      	ble.n	80081ca <_dtoa_r+0x9fe>
 80081be:	0039      	movs	r1, r7
 80081c0:	0022      	movs	r2, r4
 80081c2:	9804      	ldr	r0, [sp, #16]
 80081c4:	f000 ffea 	bl	800919c <__lshift>
 80081c8:	0007      	movs	r7, r0
 80081ca:	0038      	movs	r0, r7
 80081cc:	2d00      	cmp	r5, #0
 80081ce:	d024      	beq.n	800821a <_dtoa_r+0xa4e>
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	9804      	ldr	r0, [sp, #16]
 80081d4:	f000 fd7e 	bl	8008cd4 <_Balloc>
 80081d8:	1e04      	subs	r4, r0, #0
 80081da:	d111      	bne.n	8008200 <_dtoa_r+0xa34>
 80081dc:	0022      	movs	r2, r4
 80081de:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <_dtoa_r+0xa28>)
 80081e0:	4805      	ldr	r0, [pc, #20]	; (80081f8 <_dtoa_r+0xa2c>)
 80081e2:	4906      	ldr	r1, [pc, #24]	; (80081fc <_dtoa_r+0xa30>)
 80081e4:	f7ff fb07 	bl	80077f6 <_dtoa_r+0x2a>
 80081e8:	40240000 	.word	0x40240000
 80081ec:	00000433 	.word	0x00000433
 80081f0:	7ff00000 	.word	0x7ff00000
 80081f4:	0800a555 	.word	0x0800a555
 80081f8:	0800a4fd 	.word	0x0800a4fd
 80081fc:	000002ef 	.word	0x000002ef
 8008200:	0039      	movs	r1, r7
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	310c      	adds	r1, #12
 8008206:	3202      	adds	r2, #2
 8008208:	0092      	lsls	r2, r2, #2
 800820a:	300c      	adds	r0, #12
 800820c:	f7ff fa3a 	bl	8007684 <memcpy>
 8008210:	2201      	movs	r2, #1
 8008212:	0021      	movs	r1, r4
 8008214:	9804      	ldr	r0, [sp, #16]
 8008216:	f000 ffc1 	bl	800919c <__lshift>
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	3b01      	subs	r3, #1
 8008222:	189b      	adds	r3, r3, r2
 8008224:	2201      	movs	r2, #1
 8008226:	003d      	movs	r5, r7
 8008228:	0007      	movs	r7, r0
 800822a:	930e      	str	r3, [sp, #56]	; 0x38
 800822c:	9b08      	ldr	r3, [sp, #32]
 800822e:	4013      	ands	r3, r2
 8008230:	930d      	str	r3, [sp, #52]	; 0x34
 8008232:	0031      	movs	r1, r6
 8008234:	9805      	ldr	r0, [sp, #20]
 8008236:	f7ff fa39 	bl	80076ac <quorem>
 800823a:	0029      	movs	r1, r5
 800823c:	0004      	movs	r4, r0
 800823e:	900b      	str	r0, [sp, #44]	; 0x2c
 8008240:	9805      	ldr	r0, [sp, #20]
 8008242:	f001 f819 	bl	8009278 <__mcmp>
 8008246:	003a      	movs	r2, r7
 8008248:	900c      	str	r0, [sp, #48]	; 0x30
 800824a:	0031      	movs	r1, r6
 800824c:	9804      	ldr	r0, [sp, #16]
 800824e:	f001 f82f 	bl	80092b0 <__mdiff>
 8008252:	2201      	movs	r2, #1
 8008254:	68c3      	ldr	r3, [r0, #12]
 8008256:	3430      	adds	r4, #48	; 0x30
 8008258:	9008      	str	r0, [sp, #32]
 800825a:	920a      	str	r2, [sp, #40]	; 0x28
 800825c:	2b00      	cmp	r3, #0
 800825e:	d104      	bne.n	800826a <_dtoa_r+0xa9e>
 8008260:	0001      	movs	r1, r0
 8008262:	9805      	ldr	r0, [sp, #20]
 8008264:	f001 f808 	bl	8009278 <__mcmp>
 8008268:	900a      	str	r0, [sp, #40]	; 0x28
 800826a:	9908      	ldr	r1, [sp, #32]
 800826c:	9804      	ldr	r0, [sp, #16]
 800826e:	f000 fd75 	bl	8008d5c <_Bfree>
 8008272:	9b07      	ldr	r3, [sp, #28]
 8008274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008276:	3301      	adds	r3, #1
 8008278:	9308      	str	r3, [sp, #32]
 800827a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800827c:	4313      	orrs	r3, r2
 800827e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008280:	4313      	orrs	r3, r2
 8008282:	d109      	bne.n	8008298 <_dtoa_r+0xacc>
 8008284:	2c39      	cmp	r4, #57	; 0x39
 8008286:	d022      	beq.n	80082ce <_dtoa_r+0xb02>
 8008288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800828a:	2b00      	cmp	r3, #0
 800828c:	dd01      	ble.n	8008292 <_dtoa_r+0xac6>
 800828e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008290:	3431      	adds	r4, #49	; 0x31
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	701c      	strb	r4, [r3, #0]
 8008296:	e76e      	b.n	8008176 <_dtoa_r+0x9aa>
 8008298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800829a:	2b00      	cmp	r3, #0
 800829c:	db04      	blt.n	80082a8 <_dtoa_r+0xadc>
 800829e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80082a0:	4313      	orrs	r3, r2
 80082a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082a4:	4313      	orrs	r3, r2
 80082a6:	d11e      	bne.n	80082e6 <_dtoa_r+0xb1a>
 80082a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	ddf1      	ble.n	8008292 <_dtoa_r+0xac6>
 80082ae:	9905      	ldr	r1, [sp, #20]
 80082b0:	2201      	movs	r2, #1
 80082b2:	9804      	ldr	r0, [sp, #16]
 80082b4:	f000 ff72 	bl	800919c <__lshift>
 80082b8:	0031      	movs	r1, r6
 80082ba:	9005      	str	r0, [sp, #20]
 80082bc:	f000 ffdc 	bl	8009278 <__mcmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	dc02      	bgt.n	80082ca <_dtoa_r+0xafe>
 80082c4:	d1e5      	bne.n	8008292 <_dtoa_r+0xac6>
 80082c6:	07e3      	lsls	r3, r4, #31
 80082c8:	d5e3      	bpl.n	8008292 <_dtoa_r+0xac6>
 80082ca:	2c39      	cmp	r4, #57	; 0x39
 80082cc:	d1df      	bne.n	800828e <_dtoa_r+0xac2>
 80082ce:	2339      	movs	r3, #57	; 0x39
 80082d0:	9a07      	ldr	r2, [sp, #28]
 80082d2:	7013      	strb	r3, [r2, #0]
 80082d4:	9b08      	ldr	r3, [sp, #32]
 80082d6:	9308      	str	r3, [sp, #32]
 80082d8:	3b01      	subs	r3, #1
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	2a39      	cmp	r2, #57	; 0x39
 80082de:	d063      	beq.n	80083a8 <_dtoa_r+0xbdc>
 80082e0:	3201      	adds	r2, #1
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	e747      	b.n	8008176 <_dtoa_r+0x9aa>
 80082e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dd03      	ble.n	80082f4 <_dtoa_r+0xb28>
 80082ec:	2c39      	cmp	r4, #57	; 0x39
 80082ee:	d0ee      	beq.n	80082ce <_dtoa_r+0xb02>
 80082f0:	3401      	adds	r4, #1
 80082f2:	e7ce      	b.n	8008292 <_dtoa_r+0xac6>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	9a07      	ldr	r2, [sp, #28]
 80082f8:	701c      	strb	r4, [r3, #0]
 80082fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03e      	beq.n	800837e <_dtoa_r+0xbb2>
 8008300:	2300      	movs	r3, #0
 8008302:	220a      	movs	r2, #10
 8008304:	9905      	ldr	r1, [sp, #20]
 8008306:	9804      	ldr	r0, [sp, #16]
 8008308:	f000 fd4c 	bl	8008da4 <__multadd>
 800830c:	2300      	movs	r3, #0
 800830e:	9005      	str	r0, [sp, #20]
 8008310:	220a      	movs	r2, #10
 8008312:	0029      	movs	r1, r5
 8008314:	9804      	ldr	r0, [sp, #16]
 8008316:	42bd      	cmp	r5, r7
 8008318:	d106      	bne.n	8008328 <_dtoa_r+0xb5c>
 800831a:	f000 fd43 	bl	8008da4 <__multadd>
 800831e:	0005      	movs	r5, r0
 8008320:	0007      	movs	r7, r0
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	9307      	str	r3, [sp, #28]
 8008326:	e784      	b.n	8008232 <_dtoa_r+0xa66>
 8008328:	f000 fd3c 	bl	8008da4 <__multadd>
 800832c:	0039      	movs	r1, r7
 800832e:	0005      	movs	r5, r0
 8008330:	2300      	movs	r3, #0
 8008332:	220a      	movs	r2, #10
 8008334:	9804      	ldr	r0, [sp, #16]
 8008336:	f000 fd35 	bl	8008da4 <__multadd>
 800833a:	0007      	movs	r7, r0
 800833c:	e7f1      	b.n	8008322 <_dtoa_r+0xb56>
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	930b      	str	r3, [sp, #44]	; 0x2c
 8008342:	2500      	movs	r5, #0
 8008344:	0031      	movs	r1, r6
 8008346:	9805      	ldr	r0, [sp, #20]
 8008348:	f7ff f9b0 	bl	80076ac <quorem>
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	3030      	adds	r0, #48	; 0x30
 8008350:	5558      	strb	r0, [r3, r5]
 8008352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008354:	3501      	adds	r5, #1
 8008356:	0004      	movs	r4, r0
 8008358:	42ab      	cmp	r3, r5
 800835a:	dd07      	ble.n	800836c <_dtoa_r+0xba0>
 800835c:	2300      	movs	r3, #0
 800835e:	220a      	movs	r2, #10
 8008360:	9905      	ldr	r1, [sp, #20]
 8008362:	9804      	ldr	r0, [sp, #16]
 8008364:	f000 fd1e 	bl	8008da4 <__multadd>
 8008368:	9005      	str	r0, [sp, #20]
 800836a:	e7eb      	b.n	8008344 <_dtoa_r+0xb78>
 800836c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800836e:	2301      	movs	r3, #1
 8008370:	2a00      	cmp	r2, #0
 8008372:	dd00      	ble.n	8008376 <_dtoa_r+0xbaa>
 8008374:	0013      	movs	r3, r2
 8008376:	2500      	movs	r5, #0
 8008378:	9a06      	ldr	r2, [sp, #24]
 800837a:	18d3      	adds	r3, r2, r3
 800837c:	9308      	str	r3, [sp, #32]
 800837e:	9905      	ldr	r1, [sp, #20]
 8008380:	2201      	movs	r2, #1
 8008382:	9804      	ldr	r0, [sp, #16]
 8008384:	f000 ff0a 	bl	800919c <__lshift>
 8008388:	0031      	movs	r1, r6
 800838a:	9005      	str	r0, [sp, #20]
 800838c:	f000 ff74 	bl	8009278 <__mcmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	dc9f      	bgt.n	80082d4 <_dtoa_r+0xb08>
 8008394:	d101      	bne.n	800839a <_dtoa_r+0xbce>
 8008396:	07e4      	lsls	r4, r4, #31
 8008398:	d49c      	bmi.n	80082d4 <_dtoa_r+0xb08>
 800839a:	9b08      	ldr	r3, [sp, #32]
 800839c:	9308      	str	r3, [sp, #32]
 800839e:	3b01      	subs	r3, #1
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	2a30      	cmp	r2, #48	; 0x30
 80083a4:	d0fa      	beq.n	800839c <_dtoa_r+0xbd0>
 80083a6:	e6e6      	b.n	8008176 <_dtoa_r+0x9aa>
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d193      	bne.n	80082d6 <_dtoa_r+0xb0a>
 80083ae:	9b03      	ldr	r3, [sp, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	2331      	movs	r3, #49	; 0x31
 80083b6:	7013      	strb	r3, [r2, #0]
 80083b8:	e6dd      	b.n	8008176 <_dtoa_r+0x9aa>
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <_dtoa_r+0xc14>)
 80083bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80083be:	9306      	str	r3, [sp, #24]
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <_dtoa_r+0xc18>)
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	d001      	beq.n	80083ca <_dtoa_r+0xbfe>
 80083c6:	f7ff fa49 	bl	800785c <_dtoa_r+0x90>
 80083ca:	f7ff fa49 	bl	8007860 <_dtoa_r+0x94>
 80083ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	dcb6      	bgt.n	8008342 <_dtoa_r+0xb76>
 80083d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	dd00      	ble.n	80083dc <_dtoa_r+0xc10>
 80083da:	e6b6      	b.n	800814a <_dtoa_r+0x97e>
 80083dc:	e7b1      	b.n	8008342 <_dtoa_r+0xb76>
 80083de:	46c0      	nop			; (mov r8, r8)
 80083e0:	0800a4d9 	.word	0x0800a4d9
 80083e4:	0800a4e1 	.word	0x0800a4e1

080083e8 <_free_r>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	0005      	movs	r5, r0
 80083ec:	2900      	cmp	r1, #0
 80083ee:	d010      	beq.n	8008412 <_free_r+0x2a>
 80083f0:	1f0c      	subs	r4, r1, #4
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da00      	bge.n	80083fa <_free_r+0x12>
 80083f8:	18e4      	adds	r4, r4, r3
 80083fa:	0028      	movs	r0, r5
 80083fc:	f000 fc5a 	bl	8008cb4 <__malloc_lock>
 8008400:	4a1d      	ldr	r2, [pc, #116]	; (8008478 <_free_r+0x90>)
 8008402:	6813      	ldr	r3, [r2, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d105      	bne.n	8008414 <_free_r+0x2c>
 8008408:	6063      	str	r3, [r4, #4]
 800840a:	6014      	str	r4, [r2, #0]
 800840c:	0028      	movs	r0, r5
 800840e:	f000 fc59 	bl	8008cc4 <__malloc_unlock>
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	42a3      	cmp	r3, r4
 8008416:	d908      	bls.n	800842a <_free_r+0x42>
 8008418:	6820      	ldr	r0, [r4, #0]
 800841a:	1821      	adds	r1, r4, r0
 800841c:	428b      	cmp	r3, r1
 800841e:	d1f3      	bne.n	8008408 <_free_r+0x20>
 8008420:	6819      	ldr	r1, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	1809      	adds	r1, r1, r0
 8008426:	6021      	str	r1, [r4, #0]
 8008428:	e7ee      	b.n	8008408 <_free_r+0x20>
 800842a:	001a      	movs	r2, r3
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <_free_r+0x4e>
 8008432:	42a3      	cmp	r3, r4
 8008434:	d9f9      	bls.n	800842a <_free_r+0x42>
 8008436:	6811      	ldr	r1, [r2, #0]
 8008438:	1850      	adds	r0, r2, r1
 800843a:	42a0      	cmp	r0, r4
 800843c:	d10b      	bne.n	8008456 <_free_r+0x6e>
 800843e:	6820      	ldr	r0, [r4, #0]
 8008440:	1809      	adds	r1, r1, r0
 8008442:	1850      	adds	r0, r2, r1
 8008444:	6011      	str	r1, [r2, #0]
 8008446:	4283      	cmp	r3, r0
 8008448:	d1e0      	bne.n	800840c <_free_r+0x24>
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	1841      	adds	r1, r0, r1
 8008450:	6011      	str	r1, [r2, #0]
 8008452:	6053      	str	r3, [r2, #4]
 8008454:	e7da      	b.n	800840c <_free_r+0x24>
 8008456:	42a0      	cmp	r0, r4
 8008458:	d902      	bls.n	8008460 <_free_r+0x78>
 800845a:	230c      	movs	r3, #12
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	e7d5      	b.n	800840c <_free_r+0x24>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428b      	cmp	r3, r1
 8008466:	d103      	bne.n	8008470 <_free_r+0x88>
 8008468:	6819      	ldr	r1, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	1809      	adds	r1, r1, r0
 800846e:	6021      	str	r1, [r4, #0]
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	6054      	str	r4, [r2, #4]
 8008474:	e7ca      	b.n	800840c <_free_r+0x24>
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	20000414 	.word	0x20000414

0800847c <rshift>:
 800847c:	0002      	movs	r2, r0
 800847e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008480:	6904      	ldr	r4, [r0, #16]
 8008482:	114b      	asrs	r3, r1, #5
 8008484:	b085      	sub	sp, #20
 8008486:	3214      	adds	r2, #20
 8008488:	9302      	str	r3, [sp, #8]
 800848a:	114d      	asrs	r5, r1, #5
 800848c:	0013      	movs	r3, r2
 800848e:	42ac      	cmp	r4, r5
 8008490:	dd32      	ble.n	80084f8 <rshift+0x7c>
 8008492:	261f      	movs	r6, #31
 8008494:	000f      	movs	r7, r1
 8008496:	114b      	asrs	r3, r1, #5
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	00a5      	lsls	r5, r4, #2
 800849c:	18d3      	adds	r3, r2, r3
 800849e:	4037      	ands	r7, r6
 80084a0:	1955      	adds	r5, r2, r5
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	9701      	str	r7, [sp, #4]
 80084a6:	4231      	tst	r1, r6
 80084a8:	d10d      	bne.n	80084c6 <rshift+0x4a>
 80084aa:	0016      	movs	r6, r2
 80084ac:	0019      	movs	r1, r3
 80084ae:	428d      	cmp	r5, r1
 80084b0:	d836      	bhi.n	8008520 <rshift+0xa4>
 80084b2:	9900      	ldr	r1, [sp, #0]
 80084b4:	2300      	movs	r3, #0
 80084b6:	3903      	subs	r1, #3
 80084b8:	428d      	cmp	r5, r1
 80084ba:	d302      	bcc.n	80084c2 <rshift+0x46>
 80084bc:	9b02      	ldr	r3, [sp, #8]
 80084be:	1ae4      	subs	r4, r4, r3
 80084c0:	00a3      	lsls	r3, r4, #2
 80084c2:	18d3      	adds	r3, r2, r3
 80084c4:	e018      	b.n	80084f8 <rshift+0x7c>
 80084c6:	2120      	movs	r1, #32
 80084c8:	9e01      	ldr	r6, [sp, #4]
 80084ca:	9f01      	ldr	r7, [sp, #4]
 80084cc:	1b89      	subs	r1, r1, r6
 80084ce:	9e00      	ldr	r6, [sp, #0]
 80084d0:	9103      	str	r1, [sp, #12]
 80084d2:	ce02      	ldmia	r6!, {r1}
 80084d4:	4694      	mov	ip, r2
 80084d6:	40f9      	lsrs	r1, r7
 80084d8:	42b5      	cmp	r5, r6
 80084da:	d816      	bhi.n	800850a <rshift+0x8e>
 80084dc:	9e00      	ldr	r6, [sp, #0]
 80084de:	2300      	movs	r3, #0
 80084e0:	3601      	adds	r6, #1
 80084e2:	42b5      	cmp	r5, r6
 80084e4:	d303      	bcc.n	80084ee <rshift+0x72>
 80084e6:	9b02      	ldr	r3, [sp, #8]
 80084e8:	1ae3      	subs	r3, r4, r3
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	3b04      	subs	r3, #4
 80084ee:	18d3      	adds	r3, r2, r3
 80084f0:	6019      	str	r1, [r3, #0]
 80084f2:	2900      	cmp	r1, #0
 80084f4:	d000      	beq.n	80084f8 <rshift+0x7c>
 80084f6:	3304      	adds	r3, #4
 80084f8:	1a99      	subs	r1, r3, r2
 80084fa:	1089      	asrs	r1, r1, #2
 80084fc:	6101      	str	r1, [r0, #16]
 80084fe:	4293      	cmp	r3, r2
 8008500:	d101      	bne.n	8008506 <rshift+0x8a>
 8008502:	2300      	movs	r3, #0
 8008504:	6143      	str	r3, [r0, #20]
 8008506:	b005      	add	sp, #20
 8008508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800850a:	6837      	ldr	r7, [r6, #0]
 800850c:	9b03      	ldr	r3, [sp, #12]
 800850e:	409f      	lsls	r7, r3
 8008510:	430f      	orrs	r7, r1
 8008512:	4661      	mov	r1, ip
 8008514:	c180      	stmia	r1!, {r7}
 8008516:	468c      	mov	ip, r1
 8008518:	9b01      	ldr	r3, [sp, #4]
 800851a:	ce02      	ldmia	r6!, {r1}
 800851c:	40d9      	lsrs	r1, r3
 800851e:	e7db      	b.n	80084d8 <rshift+0x5c>
 8008520:	c980      	ldmia	r1!, {r7}
 8008522:	c680      	stmia	r6!, {r7}
 8008524:	e7c3      	b.n	80084ae <rshift+0x32>

08008526 <__hexdig_fun>:
 8008526:	0002      	movs	r2, r0
 8008528:	3a30      	subs	r2, #48	; 0x30
 800852a:	0003      	movs	r3, r0
 800852c:	2a09      	cmp	r2, #9
 800852e:	d802      	bhi.n	8008536 <__hexdig_fun+0x10>
 8008530:	3b20      	subs	r3, #32
 8008532:	b2d8      	uxtb	r0, r3
 8008534:	4770      	bx	lr
 8008536:	0002      	movs	r2, r0
 8008538:	3a61      	subs	r2, #97	; 0x61
 800853a:	2a05      	cmp	r2, #5
 800853c:	d801      	bhi.n	8008542 <__hexdig_fun+0x1c>
 800853e:	3b47      	subs	r3, #71	; 0x47
 8008540:	e7f7      	b.n	8008532 <__hexdig_fun+0xc>
 8008542:	001a      	movs	r2, r3
 8008544:	3a41      	subs	r2, #65	; 0x41
 8008546:	2000      	movs	r0, #0
 8008548:	2a05      	cmp	r2, #5
 800854a:	d8f3      	bhi.n	8008534 <__hexdig_fun+0xe>
 800854c:	3b27      	subs	r3, #39	; 0x27
 800854e:	e7f0      	b.n	8008532 <__hexdig_fun+0xc>

08008550 <__gethex>:
 8008550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008552:	b089      	sub	sp, #36	; 0x24
 8008554:	9307      	str	r3, [sp, #28]
 8008556:	2302      	movs	r3, #2
 8008558:	9201      	str	r2, [sp, #4]
 800855a:	680a      	ldr	r2, [r1, #0]
 800855c:	425b      	negs	r3, r3
 800855e:	9003      	str	r0, [sp, #12]
 8008560:	9106      	str	r1, [sp, #24]
 8008562:	1c96      	adds	r6, r2, #2
 8008564:	1a9b      	subs	r3, r3, r2
 8008566:	199a      	adds	r2, r3, r6
 8008568:	9600      	str	r6, [sp, #0]
 800856a:	9205      	str	r2, [sp, #20]
 800856c:	9a00      	ldr	r2, [sp, #0]
 800856e:	3601      	adds	r6, #1
 8008570:	7810      	ldrb	r0, [r2, #0]
 8008572:	2830      	cmp	r0, #48	; 0x30
 8008574:	d0f7      	beq.n	8008566 <__gethex+0x16>
 8008576:	f7ff ffd6 	bl	8008526 <__hexdig_fun>
 800857a:	2300      	movs	r3, #0
 800857c:	001d      	movs	r5, r3
 800857e:	9302      	str	r3, [sp, #8]
 8008580:	4298      	cmp	r0, r3
 8008582:	d11d      	bne.n	80085c0 <__gethex+0x70>
 8008584:	2201      	movs	r2, #1
 8008586:	49a6      	ldr	r1, [pc, #664]	; (8008820 <__gethex+0x2d0>)
 8008588:	9800      	ldr	r0, [sp, #0]
 800858a:	f7fe ffdf 	bl	800754c <strncmp>
 800858e:	0007      	movs	r7, r0
 8008590:	42a8      	cmp	r0, r5
 8008592:	d169      	bne.n	8008668 <__gethex+0x118>
 8008594:	9b00      	ldr	r3, [sp, #0]
 8008596:	0034      	movs	r4, r6
 8008598:	7858      	ldrb	r0, [r3, #1]
 800859a:	f7ff ffc4 	bl	8008526 <__hexdig_fun>
 800859e:	2301      	movs	r3, #1
 80085a0:	9302      	str	r3, [sp, #8]
 80085a2:	42a8      	cmp	r0, r5
 80085a4:	d02f      	beq.n	8008606 <__gethex+0xb6>
 80085a6:	9600      	str	r6, [sp, #0]
 80085a8:	9b00      	ldr	r3, [sp, #0]
 80085aa:	7818      	ldrb	r0, [r3, #0]
 80085ac:	2830      	cmp	r0, #48	; 0x30
 80085ae:	d009      	beq.n	80085c4 <__gethex+0x74>
 80085b0:	f7ff ffb9 	bl	8008526 <__hexdig_fun>
 80085b4:	4242      	negs	r2, r0
 80085b6:	4142      	adcs	r2, r0
 80085b8:	2301      	movs	r3, #1
 80085ba:	0035      	movs	r5, r6
 80085bc:	9202      	str	r2, [sp, #8]
 80085be:	9305      	str	r3, [sp, #20]
 80085c0:	9c00      	ldr	r4, [sp, #0]
 80085c2:	e004      	b.n	80085ce <__gethex+0x7e>
 80085c4:	9b00      	ldr	r3, [sp, #0]
 80085c6:	3301      	adds	r3, #1
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	e7ed      	b.n	80085a8 <__gethex+0x58>
 80085cc:	3401      	adds	r4, #1
 80085ce:	7820      	ldrb	r0, [r4, #0]
 80085d0:	f7ff ffa9 	bl	8008526 <__hexdig_fun>
 80085d4:	1e07      	subs	r7, r0, #0
 80085d6:	d1f9      	bne.n	80085cc <__gethex+0x7c>
 80085d8:	2201      	movs	r2, #1
 80085da:	0020      	movs	r0, r4
 80085dc:	4990      	ldr	r1, [pc, #576]	; (8008820 <__gethex+0x2d0>)
 80085de:	f7fe ffb5 	bl	800754c <strncmp>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d10d      	bne.n	8008602 <__gethex+0xb2>
 80085e6:	2d00      	cmp	r5, #0
 80085e8:	d106      	bne.n	80085f8 <__gethex+0xa8>
 80085ea:	3401      	adds	r4, #1
 80085ec:	0025      	movs	r5, r4
 80085ee:	7820      	ldrb	r0, [r4, #0]
 80085f0:	f7ff ff99 	bl	8008526 <__hexdig_fun>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	d102      	bne.n	80085fe <__gethex+0xae>
 80085f8:	1b2d      	subs	r5, r5, r4
 80085fa:	00af      	lsls	r7, r5, #2
 80085fc:	e003      	b.n	8008606 <__gethex+0xb6>
 80085fe:	3401      	adds	r4, #1
 8008600:	e7f5      	b.n	80085ee <__gethex+0x9e>
 8008602:	2d00      	cmp	r5, #0
 8008604:	d1f8      	bne.n	80085f8 <__gethex+0xa8>
 8008606:	2220      	movs	r2, #32
 8008608:	7823      	ldrb	r3, [r4, #0]
 800860a:	0026      	movs	r6, r4
 800860c:	4393      	bics	r3, r2
 800860e:	2b50      	cmp	r3, #80	; 0x50
 8008610:	d11d      	bne.n	800864e <__gethex+0xfe>
 8008612:	7863      	ldrb	r3, [r4, #1]
 8008614:	2b2b      	cmp	r3, #43	; 0x2b
 8008616:	d02c      	beq.n	8008672 <__gethex+0x122>
 8008618:	2b2d      	cmp	r3, #45	; 0x2d
 800861a:	d02e      	beq.n	800867a <__gethex+0x12a>
 800861c:	2300      	movs	r3, #0
 800861e:	1c66      	adds	r6, r4, #1
 8008620:	9304      	str	r3, [sp, #16]
 8008622:	7830      	ldrb	r0, [r6, #0]
 8008624:	f7ff ff7f 	bl	8008526 <__hexdig_fun>
 8008628:	1e43      	subs	r3, r0, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b18      	cmp	r3, #24
 800862e:	d82b      	bhi.n	8008688 <__gethex+0x138>
 8008630:	3810      	subs	r0, #16
 8008632:	0005      	movs	r5, r0
 8008634:	7870      	ldrb	r0, [r6, #1]
 8008636:	f7ff ff76 	bl	8008526 <__hexdig_fun>
 800863a:	1e43      	subs	r3, r0, #1
 800863c:	b2db      	uxtb	r3, r3
 800863e:	3601      	adds	r6, #1
 8008640:	2b18      	cmp	r3, #24
 8008642:	d91c      	bls.n	800867e <__gethex+0x12e>
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d000      	beq.n	800864c <__gethex+0xfc>
 800864a:	426d      	negs	r5, r5
 800864c:	197f      	adds	r7, r7, r5
 800864e:	9b06      	ldr	r3, [sp, #24]
 8008650:	601e      	str	r6, [r3, #0]
 8008652:	9b02      	ldr	r3, [sp, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d019      	beq.n	800868c <__gethex+0x13c>
 8008658:	2600      	movs	r6, #0
 800865a:	9b05      	ldr	r3, [sp, #20]
 800865c:	42b3      	cmp	r3, r6
 800865e:	d100      	bne.n	8008662 <__gethex+0x112>
 8008660:	3606      	adds	r6, #6
 8008662:	0030      	movs	r0, r6
 8008664:	b009      	add	sp, #36	; 0x24
 8008666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008668:	2301      	movs	r3, #1
 800866a:	2700      	movs	r7, #0
 800866c:	9c00      	ldr	r4, [sp, #0]
 800866e:	9302      	str	r3, [sp, #8]
 8008670:	e7c9      	b.n	8008606 <__gethex+0xb6>
 8008672:	2300      	movs	r3, #0
 8008674:	9304      	str	r3, [sp, #16]
 8008676:	1ca6      	adds	r6, r4, #2
 8008678:	e7d3      	b.n	8008622 <__gethex+0xd2>
 800867a:	2301      	movs	r3, #1
 800867c:	e7fa      	b.n	8008674 <__gethex+0x124>
 800867e:	230a      	movs	r3, #10
 8008680:	435d      	muls	r5, r3
 8008682:	182d      	adds	r5, r5, r0
 8008684:	3d10      	subs	r5, #16
 8008686:	e7d5      	b.n	8008634 <__gethex+0xe4>
 8008688:	0026      	movs	r6, r4
 800868a:	e7e0      	b.n	800864e <__gethex+0xfe>
 800868c:	9b00      	ldr	r3, [sp, #0]
 800868e:	9902      	ldr	r1, [sp, #8]
 8008690:	1ae3      	subs	r3, r4, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	2b07      	cmp	r3, #7
 8008696:	dc0a      	bgt.n	80086ae <__gethex+0x15e>
 8008698:	9803      	ldr	r0, [sp, #12]
 800869a:	f000 fb1b 	bl	8008cd4 <_Balloc>
 800869e:	1e05      	subs	r5, r0, #0
 80086a0:	d108      	bne.n	80086b4 <__gethex+0x164>
 80086a2:	002a      	movs	r2, r5
 80086a4:	21e4      	movs	r1, #228	; 0xe4
 80086a6:	4b5f      	ldr	r3, [pc, #380]	; (8008824 <__gethex+0x2d4>)
 80086a8:	485f      	ldr	r0, [pc, #380]	; (8008828 <__gethex+0x2d8>)
 80086aa:	f001 faa3 	bl	8009bf4 <__assert_func>
 80086ae:	3101      	adds	r1, #1
 80086b0:	105b      	asrs	r3, r3, #1
 80086b2:	e7ef      	b.n	8008694 <__gethex+0x144>
 80086b4:	0003      	movs	r3, r0
 80086b6:	3314      	adds	r3, #20
 80086b8:	9302      	str	r3, [sp, #8]
 80086ba:	9305      	str	r3, [sp, #20]
 80086bc:	2300      	movs	r3, #0
 80086be:	001e      	movs	r6, r3
 80086c0:	9304      	str	r3, [sp, #16]
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d33f      	bcc.n	8008748 <__gethex+0x1f8>
 80086c8:	9c05      	ldr	r4, [sp, #20]
 80086ca:	9b02      	ldr	r3, [sp, #8]
 80086cc:	c440      	stmia	r4!, {r6}
 80086ce:	1ae4      	subs	r4, r4, r3
 80086d0:	10a4      	asrs	r4, r4, #2
 80086d2:	0030      	movs	r0, r6
 80086d4:	612c      	str	r4, [r5, #16]
 80086d6:	f000 fbf5 	bl	8008ec4 <__hi0bits>
 80086da:	9b01      	ldr	r3, [sp, #4]
 80086dc:	0164      	lsls	r4, r4, #5
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	1a26      	subs	r6, r4, r0
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	429e      	cmp	r6, r3
 80086e6:	dd51      	ble.n	800878c <__gethex+0x23c>
 80086e8:	1af6      	subs	r6, r6, r3
 80086ea:	0031      	movs	r1, r6
 80086ec:	0028      	movs	r0, r5
 80086ee:	f000 ff89 	bl	8009604 <__any_on>
 80086f2:	1e04      	subs	r4, r0, #0
 80086f4:	d016      	beq.n	8008724 <__gethex+0x1d4>
 80086f6:	2401      	movs	r4, #1
 80086f8:	231f      	movs	r3, #31
 80086fa:	0020      	movs	r0, r4
 80086fc:	1e72      	subs	r2, r6, #1
 80086fe:	4013      	ands	r3, r2
 8008700:	4098      	lsls	r0, r3
 8008702:	0003      	movs	r3, r0
 8008704:	1151      	asrs	r1, r2, #5
 8008706:	9802      	ldr	r0, [sp, #8]
 8008708:	0089      	lsls	r1, r1, #2
 800870a:	5809      	ldr	r1, [r1, r0]
 800870c:	4219      	tst	r1, r3
 800870e:	d009      	beq.n	8008724 <__gethex+0x1d4>
 8008710:	42a2      	cmp	r2, r4
 8008712:	dd06      	ble.n	8008722 <__gethex+0x1d2>
 8008714:	0028      	movs	r0, r5
 8008716:	1eb1      	subs	r1, r6, #2
 8008718:	f000 ff74 	bl	8009604 <__any_on>
 800871c:	3402      	adds	r4, #2
 800871e:	2800      	cmp	r0, #0
 8008720:	d100      	bne.n	8008724 <__gethex+0x1d4>
 8008722:	2402      	movs	r4, #2
 8008724:	0031      	movs	r1, r6
 8008726:	0028      	movs	r0, r5
 8008728:	f7ff fea8 	bl	800847c <rshift>
 800872c:	19bf      	adds	r7, r7, r6
 800872e:	9b01      	ldr	r3, [sp, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	42bb      	cmp	r3, r7
 8008734:	da3a      	bge.n	80087ac <__gethex+0x25c>
 8008736:	0029      	movs	r1, r5
 8008738:	9803      	ldr	r0, [sp, #12]
 800873a:	f000 fb0f 	bl	8008d5c <_Bfree>
 800873e:	2300      	movs	r3, #0
 8008740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008742:	26a3      	movs	r6, #163	; 0xa3
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	e78c      	b.n	8008662 <__gethex+0x112>
 8008748:	3c01      	subs	r4, #1
 800874a:	7823      	ldrb	r3, [r4, #0]
 800874c:	2b2e      	cmp	r3, #46	; 0x2e
 800874e:	d012      	beq.n	8008776 <__gethex+0x226>
 8008750:	9b04      	ldr	r3, [sp, #16]
 8008752:	2b20      	cmp	r3, #32
 8008754:	d104      	bne.n	8008760 <__gethex+0x210>
 8008756:	9b05      	ldr	r3, [sp, #20]
 8008758:	c340      	stmia	r3!, {r6}
 800875a:	2600      	movs	r6, #0
 800875c:	9305      	str	r3, [sp, #20]
 800875e:	9604      	str	r6, [sp, #16]
 8008760:	7820      	ldrb	r0, [r4, #0]
 8008762:	f7ff fee0 	bl	8008526 <__hexdig_fun>
 8008766:	230f      	movs	r3, #15
 8008768:	4018      	ands	r0, r3
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	4098      	lsls	r0, r3
 800876e:	3304      	adds	r3, #4
 8008770:	4306      	orrs	r6, r0
 8008772:	9304      	str	r3, [sp, #16]
 8008774:	e7a5      	b.n	80086c2 <__gethex+0x172>
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	42a3      	cmp	r3, r4
 800877a:	d8e9      	bhi.n	8008750 <__gethex+0x200>
 800877c:	2201      	movs	r2, #1
 800877e:	0020      	movs	r0, r4
 8008780:	4927      	ldr	r1, [pc, #156]	; (8008820 <__gethex+0x2d0>)
 8008782:	f7fe fee3 	bl	800754c <strncmp>
 8008786:	2800      	cmp	r0, #0
 8008788:	d1e2      	bne.n	8008750 <__gethex+0x200>
 800878a:	e79a      	b.n	80086c2 <__gethex+0x172>
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	2400      	movs	r4, #0
 8008790:	429e      	cmp	r6, r3
 8008792:	dacc      	bge.n	800872e <__gethex+0x1de>
 8008794:	1b9e      	subs	r6, r3, r6
 8008796:	0029      	movs	r1, r5
 8008798:	0032      	movs	r2, r6
 800879a:	9803      	ldr	r0, [sp, #12]
 800879c:	f000 fcfe 	bl	800919c <__lshift>
 80087a0:	0003      	movs	r3, r0
 80087a2:	3314      	adds	r3, #20
 80087a4:	0005      	movs	r5, r0
 80087a6:	1bbf      	subs	r7, r7, r6
 80087a8:	9302      	str	r3, [sp, #8]
 80087aa:	e7c0      	b.n	800872e <__gethex+0x1de>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	685e      	ldr	r6, [r3, #4]
 80087b0:	42be      	cmp	r6, r7
 80087b2:	dd70      	ble.n	8008896 <__gethex+0x346>
 80087b4:	9b00      	ldr	r3, [sp, #0]
 80087b6:	1bf6      	subs	r6, r6, r7
 80087b8:	42b3      	cmp	r3, r6
 80087ba:	dc37      	bgt.n	800882c <__gethex+0x2dc>
 80087bc:	9b01      	ldr	r3, [sp, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d024      	beq.n	800880e <__gethex+0x2be>
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d026      	beq.n	8008816 <__gethex+0x2c6>
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d117      	bne.n	80087fc <__gethex+0x2ac>
 80087cc:	9b00      	ldr	r3, [sp, #0]
 80087ce:	42b3      	cmp	r3, r6
 80087d0:	d114      	bne.n	80087fc <__gethex+0x2ac>
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d10b      	bne.n	80087ee <__gethex+0x29e>
 80087d6:	9b01      	ldr	r3, [sp, #4]
 80087d8:	9a07      	ldr	r2, [sp, #28]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2662      	movs	r6, #98	; 0x62
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	2301      	movs	r3, #1
 80087e2:	9a02      	ldr	r2, [sp, #8]
 80087e4:	612b      	str	r3, [r5, #16]
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ea:	601d      	str	r5, [r3, #0]
 80087ec:	e739      	b.n	8008662 <__gethex+0x112>
 80087ee:	9900      	ldr	r1, [sp, #0]
 80087f0:	0028      	movs	r0, r5
 80087f2:	3901      	subs	r1, #1
 80087f4:	f000 ff06 	bl	8009604 <__any_on>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d1ec      	bne.n	80087d6 <__gethex+0x286>
 80087fc:	0029      	movs	r1, r5
 80087fe:	9803      	ldr	r0, [sp, #12]
 8008800:	f000 faac 	bl	8008d5c <_Bfree>
 8008804:	2300      	movs	r3, #0
 8008806:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008808:	2650      	movs	r6, #80	; 0x50
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	e729      	b.n	8008662 <__gethex+0x112>
 800880e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1f3      	bne.n	80087fc <__gethex+0x2ac>
 8008814:	e7df      	b.n	80087d6 <__gethex+0x286>
 8008816:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1dc      	bne.n	80087d6 <__gethex+0x286>
 800881c:	e7ee      	b.n	80087fc <__gethex+0x2ac>
 800881e:	46c0      	nop			; (mov r8, r8)
 8008820:	0800a440 	.word	0x0800a440
 8008824:	0800a555 	.word	0x0800a555
 8008828:	0800a566 	.word	0x0800a566
 800882c:	1e77      	subs	r7, r6, #1
 800882e:	2c00      	cmp	r4, #0
 8008830:	d12f      	bne.n	8008892 <__gethex+0x342>
 8008832:	2f00      	cmp	r7, #0
 8008834:	d004      	beq.n	8008840 <__gethex+0x2f0>
 8008836:	0039      	movs	r1, r7
 8008838:	0028      	movs	r0, r5
 800883a:	f000 fee3 	bl	8009604 <__any_on>
 800883e:	0004      	movs	r4, r0
 8008840:	231f      	movs	r3, #31
 8008842:	117a      	asrs	r2, r7, #5
 8008844:	401f      	ands	r7, r3
 8008846:	3b1e      	subs	r3, #30
 8008848:	40bb      	lsls	r3, r7
 800884a:	9902      	ldr	r1, [sp, #8]
 800884c:	0092      	lsls	r2, r2, #2
 800884e:	5852      	ldr	r2, [r2, r1]
 8008850:	421a      	tst	r2, r3
 8008852:	d001      	beq.n	8008858 <__gethex+0x308>
 8008854:	2302      	movs	r3, #2
 8008856:	431c      	orrs	r4, r3
 8008858:	9b00      	ldr	r3, [sp, #0]
 800885a:	0031      	movs	r1, r6
 800885c:	1b9b      	subs	r3, r3, r6
 800885e:	2602      	movs	r6, #2
 8008860:	0028      	movs	r0, r5
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	f7ff fe0a 	bl	800847c <rshift>
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	685f      	ldr	r7, [r3, #4]
 800886c:	2c00      	cmp	r4, #0
 800886e:	d041      	beq.n	80088f4 <__gethex+0x3a4>
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	2b02      	cmp	r3, #2
 8008876:	d010      	beq.n	800889a <__gethex+0x34a>
 8008878:	2b03      	cmp	r3, #3
 800887a:	d012      	beq.n	80088a2 <__gethex+0x352>
 800887c:	2b01      	cmp	r3, #1
 800887e:	d106      	bne.n	800888e <__gethex+0x33e>
 8008880:	07a2      	lsls	r2, r4, #30
 8008882:	d504      	bpl.n	800888e <__gethex+0x33e>
 8008884:	9a02      	ldr	r2, [sp, #8]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	4314      	orrs	r4, r2
 800888a:	421c      	tst	r4, r3
 800888c:	d10c      	bne.n	80088a8 <__gethex+0x358>
 800888e:	2310      	movs	r3, #16
 8008890:	e02f      	b.n	80088f2 <__gethex+0x3a2>
 8008892:	2401      	movs	r4, #1
 8008894:	e7d4      	b.n	8008840 <__gethex+0x2f0>
 8008896:	2601      	movs	r6, #1
 8008898:	e7e8      	b.n	800886c <__gethex+0x31c>
 800889a:	2301      	movs	r3, #1
 800889c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d0f2      	beq.n	800888e <__gethex+0x33e>
 80088a8:	692b      	ldr	r3, [r5, #16]
 80088aa:	2000      	movs	r0, #0
 80088ac:	9302      	str	r3, [sp, #8]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	002b      	movs	r3, r5
 80088b4:	9a04      	ldr	r2, [sp, #16]
 80088b6:	3314      	adds	r3, #20
 80088b8:	1899      	adds	r1, r3, r2
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	1c54      	adds	r4, r2, #1
 80088be:	d01e      	beq.n	80088fe <__gethex+0x3ae>
 80088c0:	3201      	adds	r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	002b      	movs	r3, r5
 80088c6:	3314      	adds	r3, #20
 80088c8:	2e02      	cmp	r6, #2
 80088ca:	d141      	bne.n	8008950 <__gethex+0x400>
 80088cc:	9a01      	ldr	r2, [sp, #4]
 80088ce:	9900      	ldr	r1, [sp, #0]
 80088d0:	6812      	ldr	r2, [r2, #0]
 80088d2:	3a01      	subs	r2, #1
 80088d4:	428a      	cmp	r2, r1
 80088d6:	d10b      	bne.n	80088f0 <__gethex+0x3a0>
 80088d8:	221f      	movs	r2, #31
 80088da:	9800      	ldr	r0, [sp, #0]
 80088dc:	1149      	asrs	r1, r1, #5
 80088de:	4002      	ands	r2, r0
 80088e0:	2001      	movs	r0, #1
 80088e2:	0004      	movs	r4, r0
 80088e4:	4094      	lsls	r4, r2
 80088e6:	0089      	lsls	r1, r1, #2
 80088e8:	58cb      	ldr	r3, [r1, r3]
 80088ea:	4223      	tst	r3, r4
 80088ec:	d000      	beq.n	80088f0 <__gethex+0x3a0>
 80088ee:	2601      	movs	r6, #1
 80088f0:	2320      	movs	r3, #32
 80088f2:	431e      	orrs	r6, r3
 80088f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f6:	601d      	str	r5, [r3, #0]
 80088f8:	9b07      	ldr	r3, [sp, #28]
 80088fa:	601f      	str	r7, [r3, #0]
 80088fc:	e6b1      	b.n	8008662 <__gethex+0x112>
 80088fe:	c301      	stmia	r3!, {r0}
 8008900:	4299      	cmp	r1, r3
 8008902:	d8da      	bhi.n	80088ba <__gethex+0x36a>
 8008904:	68ab      	ldr	r3, [r5, #8]
 8008906:	9a02      	ldr	r2, [sp, #8]
 8008908:	429a      	cmp	r2, r3
 800890a:	db18      	blt.n	800893e <__gethex+0x3ee>
 800890c:	6869      	ldr	r1, [r5, #4]
 800890e:	9803      	ldr	r0, [sp, #12]
 8008910:	3101      	adds	r1, #1
 8008912:	f000 f9df 	bl	8008cd4 <_Balloc>
 8008916:	1e04      	subs	r4, r0, #0
 8008918:	d104      	bne.n	8008924 <__gethex+0x3d4>
 800891a:	0022      	movs	r2, r4
 800891c:	2184      	movs	r1, #132	; 0x84
 800891e:	4b1c      	ldr	r3, [pc, #112]	; (8008990 <__gethex+0x440>)
 8008920:	481c      	ldr	r0, [pc, #112]	; (8008994 <__gethex+0x444>)
 8008922:	e6c2      	b.n	80086aa <__gethex+0x15a>
 8008924:	0029      	movs	r1, r5
 8008926:	692a      	ldr	r2, [r5, #16]
 8008928:	310c      	adds	r1, #12
 800892a:	3202      	adds	r2, #2
 800892c:	0092      	lsls	r2, r2, #2
 800892e:	300c      	adds	r0, #12
 8008930:	f7fe fea8 	bl	8007684 <memcpy>
 8008934:	0029      	movs	r1, r5
 8008936:	9803      	ldr	r0, [sp, #12]
 8008938:	f000 fa10 	bl	8008d5c <_Bfree>
 800893c:	0025      	movs	r5, r4
 800893e:	692b      	ldr	r3, [r5, #16]
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	612a      	str	r2, [r5, #16]
 8008944:	2201      	movs	r2, #1
 8008946:	3304      	adds	r3, #4
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	18eb      	adds	r3, r5, r3
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	e7b9      	b.n	80088c4 <__gethex+0x374>
 8008950:	692a      	ldr	r2, [r5, #16]
 8008952:	9902      	ldr	r1, [sp, #8]
 8008954:	428a      	cmp	r2, r1
 8008956:	dd09      	ble.n	800896c <__gethex+0x41c>
 8008958:	2101      	movs	r1, #1
 800895a:	0028      	movs	r0, r5
 800895c:	f7ff fd8e 	bl	800847c <rshift>
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	3701      	adds	r7, #1
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	42bb      	cmp	r3, r7
 8008968:	dac1      	bge.n	80088ee <__gethex+0x39e>
 800896a:	e6e4      	b.n	8008736 <__gethex+0x1e6>
 800896c:	221f      	movs	r2, #31
 800896e:	9c00      	ldr	r4, [sp, #0]
 8008970:	9900      	ldr	r1, [sp, #0]
 8008972:	2601      	movs	r6, #1
 8008974:	4014      	ands	r4, r2
 8008976:	4211      	tst	r1, r2
 8008978:	d0ba      	beq.n	80088f0 <__gethex+0x3a0>
 800897a:	9a04      	ldr	r2, [sp, #16]
 800897c:	189b      	adds	r3, r3, r2
 800897e:	3b04      	subs	r3, #4
 8008980:	6818      	ldr	r0, [r3, #0]
 8008982:	f000 fa9f 	bl	8008ec4 <__hi0bits>
 8008986:	2320      	movs	r3, #32
 8008988:	1b1b      	subs	r3, r3, r4
 800898a:	4298      	cmp	r0, r3
 800898c:	dbe4      	blt.n	8008958 <__gethex+0x408>
 800898e:	e7af      	b.n	80088f0 <__gethex+0x3a0>
 8008990:	0800a555 	.word	0x0800a555
 8008994:	0800a566 	.word	0x0800a566

08008998 <L_shift>:
 8008998:	2308      	movs	r3, #8
 800899a:	b570      	push	{r4, r5, r6, lr}
 800899c:	2520      	movs	r5, #32
 800899e:	1a9a      	subs	r2, r3, r2
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	1aad      	subs	r5, r5, r2
 80089a4:	6843      	ldr	r3, [r0, #4]
 80089a6:	6804      	ldr	r4, [r0, #0]
 80089a8:	001e      	movs	r6, r3
 80089aa:	40ae      	lsls	r6, r5
 80089ac:	40d3      	lsrs	r3, r2
 80089ae:	4334      	orrs	r4, r6
 80089b0:	6004      	str	r4, [r0, #0]
 80089b2:	6043      	str	r3, [r0, #4]
 80089b4:	3004      	adds	r0, #4
 80089b6:	4288      	cmp	r0, r1
 80089b8:	d3f4      	bcc.n	80089a4 <L_shift+0xc>
 80089ba:	bd70      	pop	{r4, r5, r6, pc}

080089bc <__match>:
 80089bc:	b530      	push	{r4, r5, lr}
 80089be:	6803      	ldr	r3, [r0, #0]
 80089c0:	780c      	ldrb	r4, [r1, #0]
 80089c2:	3301      	adds	r3, #1
 80089c4:	2c00      	cmp	r4, #0
 80089c6:	d102      	bne.n	80089ce <__match+0x12>
 80089c8:	6003      	str	r3, [r0, #0]
 80089ca:	2001      	movs	r0, #1
 80089cc:	bd30      	pop	{r4, r5, pc}
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	0015      	movs	r5, r2
 80089d2:	3d41      	subs	r5, #65	; 0x41
 80089d4:	2d19      	cmp	r5, #25
 80089d6:	d800      	bhi.n	80089da <__match+0x1e>
 80089d8:	3220      	adds	r2, #32
 80089da:	3101      	adds	r1, #1
 80089dc:	42a2      	cmp	r2, r4
 80089de:	d0ef      	beq.n	80089c0 <__match+0x4>
 80089e0:	2000      	movs	r0, #0
 80089e2:	e7f3      	b.n	80089cc <__match+0x10>

080089e4 <__hexnan>:
 80089e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e6:	680b      	ldr	r3, [r1, #0]
 80089e8:	b08b      	sub	sp, #44	; 0x2c
 80089ea:	9201      	str	r2, [sp, #4]
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	115a      	asrs	r2, r3, #5
 80089f0:	0092      	lsls	r2, r2, #2
 80089f2:	188a      	adds	r2, r1, r2
 80089f4:	9202      	str	r2, [sp, #8]
 80089f6:	0019      	movs	r1, r3
 80089f8:	221f      	movs	r2, #31
 80089fa:	4011      	ands	r1, r2
 80089fc:	9008      	str	r0, [sp, #32]
 80089fe:	9106      	str	r1, [sp, #24]
 8008a00:	4213      	tst	r3, r2
 8008a02:	d002      	beq.n	8008a0a <__hexnan+0x26>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	3304      	adds	r3, #4
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	2500      	movs	r5, #0
 8008a0e:	1f1f      	subs	r7, r3, #4
 8008a10:	003e      	movs	r6, r7
 8008a12:	003c      	movs	r4, r7
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	603d      	str	r5, [r7, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	9507      	str	r5, [sp, #28]
 8008a1c:	9305      	str	r3, [sp, #20]
 8008a1e:	9503      	str	r5, [sp, #12]
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	3301      	adds	r3, #1
 8008a24:	9309      	str	r3, [sp, #36]	; 0x24
 8008a26:	9b05      	ldr	r3, [sp, #20]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	9304      	str	r3, [sp, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d028      	beq.n	8008a82 <__hexnan+0x9e>
 8008a30:	9804      	ldr	r0, [sp, #16]
 8008a32:	f7ff fd78 	bl	8008526 <__hexdig_fun>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d154      	bne.n	8008ae4 <__hexnan+0x100>
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d819      	bhi.n	8008a74 <__hexnan+0x90>
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	9a07      	ldr	r2, [sp, #28]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	dd12      	ble.n	8008a6e <__hexnan+0x8a>
 8008a48:	42b4      	cmp	r4, r6
 8008a4a:	d206      	bcs.n	8008a5a <__hexnan+0x76>
 8008a4c:	2d07      	cmp	r5, #7
 8008a4e:	dc04      	bgt.n	8008a5a <__hexnan+0x76>
 8008a50:	002a      	movs	r2, r5
 8008a52:	0031      	movs	r1, r6
 8008a54:	0020      	movs	r0, r4
 8008a56:	f7ff ff9f 	bl	8008998 <L_shift>
 8008a5a:	9b01      	ldr	r3, [sp, #4]
 8008a5c:	2508      	movs	r5, #8
 8008a5e:	429c      	cmp	r4, r3
 8008a60:	d905      	bls.n	8008a6e <__hexnan+0x8a>
 8008a62:	1f26      	subs	r6, r4, #4
 8008a64:	2500      	movs	r5, #0
 8008a66:	0034      	movs	r4, r6
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	6035      	str	r5, [r6, #0]
 8008a6c:	9307      	str	r3, [sp, #28]
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	9305      	str	r3, [sp, #20]
 8008a72:	e7d5      	b.n	8008a20 <__hexnan+0x3c>
 8008a74:	9b04      	ldr	r3, [sp, #16]
 8008a76:	2b29      	cmp	r3, #41	; 0x29
 8008a78:	d159      	bne.n	8008b2e <__hexnan+0x14a>
 8008a7a:	9b05      	ldr	r3, [sp, #20]
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	3302      	adds	r3, #2
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d052      	beq.n	8008b2e <__hexnan+0x14a>
 8008a88:	42b4      	cmp	r4, r6
 8008a8a:	d206      	bcs.n	8008a9a <__hexnan+0xb6>
 8008a8c:	2d07      	cmp	r5, #7
 8008a8e:	dc04      	bgt.n	8008a9a <__hexnan+0xb6>
 8008a90:	002a      	movs	r2, r5
 8008a92:	0031      	movs	r1, r6
 8008a94:	0020      	movs	r0, r4
 8008a96:	f7ff ff7f 	bl	8008998 <L_shift>
 8008a9a:	9b01      	ldr	r3, [sp, #4]
 8008a9c:	429c      	cmp	r4, r3
 8008a9e:	d935      	bls.n	8008b0c <__hexnan+0x128>
 8008aa0:	001a      	movs	r2, r3
 8008aa2:	0023      	movs	r3, r4
 8008aa4:	cb02      	ldmia	r3!, {r1}
 8008aa6:	c202      	stmia	r2!, {r1}
 8008aa8:	429f      	cmp	r7, r3
 8008aaa:	d2fb      	bcs.n	8008aa4 <__hexnan+0xc0>
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	1c62      	adds	r2, r4, #1
 8008ab0:	1ed9      	subs	r1, r3, #3
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	4291      	cmp	r1, r2
 8008ab6:	d305      	bcc.n	8008ac4 <__hexnan+0xe0>
 8008ab8:	9b02      	ldr	r3, [sp, #8]
 8008aba:	3b04      	subs	r3, #4
 8008abc:	1b1b      	subs	r3, r3, r4
 8008abe:	089b      	lsrs	r3, r3, #2
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	9a01      	ldr	r2, [sp, #4]
 8008ac6:	18d3      	adds	r3, r2, r3
 8008ac8:	2200      	movs	r2, #0
 8008aca:	c304      	stmia	r3!, {r2}
 8008acc:	429f      	cmp	r7, r3
 8008ace:	d2fc      	bcs.n	8008aca <__hexnan+0xe6>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d104      	bne.n	8008ae0 <__hexnan+0xfc>
 8008ad6:	9b01      	ldr	r3, [sp, #4]
 8008ad8:	429f      	cmp	r7, r3
 8008ada:	d126      	bne.n	8008b2a <__hexnan+0x146>
 8008adc:	2301      	movs	r3, #1
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	2005      	movs	r0, #5
 8008ae2:	e025      	b.n	8008b30 <__hexnan+0x14c>
 8008ae4:	9b03      	ldr	r3, [sp, #12]
 8008ae6:	3501      	adds	r5, #1
 8008ae8:	3301      	adds	r3, #1
 8008aea:	9303      	str	r3, [sp, #12]
 8008aec:	2d08      	cmp	r5, #8
 8008aee:	dd06      	ble.n	8008afe <__hexnan+0x11a>
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	429c      	cmp	r4, r3
 8008af4:	d9bb      	bls.n	8008a6e <__hexnan+0x8a>
 8008af6:	2300      	movs	r3, #0
 8008af8:	2501      	movs	r5, #1
 8008afa:	3c04      	subs	r4, #4
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	220f      	movs	r2, #15
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	4010      	ands	r0, r2
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	4303      	orrs	r3, r0
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	e7b0      	b.n	8008a6e <__hexnan+0x8a>
 8008b0c:	9b06      	ldr	r3, [sp, #24]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0de      	beq.n	8008ad0 <__hexnan+0xec>
 8008b12:	2320      	movs	r3, #32
 8008b14:	9a06      	ldr	r2, [sp, #24]
 8008b16:	9902      	ldr	r1, [sp, #8]
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	4252      	negs	r2, r2
 8008b1e:	40da      	lsrs	r2, r3
 8008b20:	3904      	subs	r1, #4
 8008b22:	680b      	ldr	r3, [r1, #0]
 8008b24:	4013      	ands	r3, r2
 8008b26:	600b      	str	r3, [r1, #0]
 8008b28:	e7d2      	b.n	8008ad0 <__hexnan+0xec>
 8008b2a:	3f04      	subs	r7, #4
 8008b2c:	e7d0      	b.n	8008ad0 <__hexnan+0xec>
 8008b2e:	2004      	movs	r0, #4
 8008b30:	b00b      	add	sp, #44	; 0x2c
 8008b32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b34 <malloc>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4b03      	ldr	r3, [pc, #12]	; (8008b44 <malloc+0x10>)
 8008b38:	0001      	movs	r1, r0
 8008b3a:	6818      	ldr	r0, [r3, #0]
 8008b3c:	f000 f826 	bl	8008b8c <_malloc_r>
 8008b40:	bd10      	pop	{r4, pc}
 8008b42:	46c0      	nop			; (mov r8, r8)
 8008b44:	200001d4 	.word	0x200001d4

08008b48 <sbrk_aligned>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4e0f      	ldr	r6, [pc, #60]	; (8008b88 <sbrk_aligned+0x40>)
 8008b4c:	000d      	movs	r5, r1
 8008b4e:	6831      	ldr	r1, [r6, #0]
 8008b50:	0004      	movs	r4, r0
 8008b52:	2900      	cmp	r1, #0
 8008b54:	d102      	bne.n	8008b5c <sbrk_aligned+0x14>
 8008b56:	f001 f83b 	bl	8009bd0 <_sbrk_r>
 8008b5a:	6030      	str	r0, [r6, #0]
 8008b5c:	0029      	movs	r1, r5
 8008b5e:	0020      	movs	r0, r4
 8008b60:	f001 f836 	bl	8009bd0 <_sbrk_r>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d00a      	beq.n	8008b7e <sbrk_aligned+0x36>
 8008b68:	2303      	movs	r3, #3
 8008b6a:	1cc5      	adds	r5, r0, #3
 8008b6c:	439d      	bics	r5, r3
 8008b6e:	42a8      	cmp	r0, r5
 8008b70:	d007      	beq.n	8008b82 <sbrk_aligned+0x3a>
 8008b72:	1a29      	subs	r1, r5, r0
 8008b74:	0020      	movs	r0, r4
 8008b76:	f001 f82b 	bl	8009bd0 <_sbrk_r>
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d101      	bne.n	8008b82 <sbrk_aligned+0x3a>
 8008b7e:	2501      	movs	r5, #1
 8008b80:	426d      	negs	r5, r5
 8008b82:	0028      	movs	r0, r5
 8008b84:	bd70      	pop	{r4, r5, r6, pc}
 8008b86:	46c0      	nop			; (mov r8, r8)
 8008b88:	20000418 	.word	0x20000418

08008b8c <_malloc_r>:
 8008b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b8e:	2203      	movs	r2, #3
 8008b90:	1ccb      	adds	r3, r1, #3
 8008b92:	4393      	bics	r3, r2
 8008b94:	3308      	adds	r3, #8
 8008b96:	0006      	movs	r6, r0
 8008b98:	001f      	movs	r7, r3
 8008b9a:	2b0c      	cmp	r3, #12
 8008b9c:	d238      	bcs.n	8008c10 <_malloc_r+0x84>
 8008b9e:	270c      	movs	r7, #12
 8008ba0:	42b9      	cmp	r1, r7
 8008ba2:	d837      	bhi.n	8008c14 <_malloc_r+0x88>
 8008ba4:	0030      	movs	r0, r6
 8008ba6:	f000 f885 	bl	8008cb4 <__malloc_lock>
 8008baa:	4b38      	ldr	r3, [pc, #224]	; (8008c8c <_malloc_r+0x100>)
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	001c      	movs	r4, r3
 8008bb2:	2c00      	cmp	r4, #0
 8008bb4:	d133      	bne.n	8008c1e <_malloc_r+0x92>
 8008bb6:	0039      	movs	r1, r7
 8008bb8:	0030      	movs	r0, r6
 8008bba:	f7ff ffc5 	bl	8008b48 <sbrk_aligned>
 8008bbe:	0004      	movs	r4, r0
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d15e      	bne.n	8008c82 <_malloc_r+0xf6>
 8008bc4:	9b00      	ldr	r3, [sp, #0]
 8008bc6:	681c      	ldr	r4, [r3, #0]
 8008bc8:	0025      	movs	r5, r4
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	d14e      	bne.n	8008c6c <_malloc_r+0xe0>
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	d051      	beq.n	8008c76 <_malloc_r+0xea>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	0029      	movs	r1, r5
 8008bd6:	18e3      	adds	r3, r4, r3
 8008bd8:	0030      	movs	r0, r6
 8008bda:	9301      	str	r3, [sp, #4]
 8008bdc:	f000 fff8 	bl	8009bd0 <_sbrk_r>
 8008be0:	9b01      	ldr	r3, [sp, #4]
 8008be2:	4283      	cmp	r3, r0
 8008be4:	d147      	bne.n	8008c76 <_malloc_r+0xea>
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	0030      	movs	r0, r6
 8008bea:	1aff      	subs	r7, r7, r3
 8008bec:	0039      	movs	r1, r7
 8008bee:	f7ff ffab 	bl	8008b48 <sbrk_aligned>
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	d03f      	beq.n	8008c76 <_malloc_r+0xea>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	19db      	adds	r3, r3, r7
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	9b00      	ldr	r3, [sp, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d040      	beq.n	8008c86 <_malloc_r+0xfa>
 8008c04:	685a      	ldr	r2, [r3, #4]
 8008c06:	42a2      	cmp	r2, r4
 8008c08:	d133      	bne.n	8008c72 <_malloc_r+0xe6>
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	605a      	str	r2, [r3, #4]
 8008c0e:	e014      	b.n	8008c3a <_malloc_r+0xae>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dac5      	bge.n	8008ba0 <_malloc_r+0x14>
 8008c14:	230c      	movs	r3, #12
 8008c16:	2500      	movs	r5, #0
 8008c18:	6033      	str	r3, [r6, #0]
 8008c1a:	0028      	movs	r0, r5
 8008c1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c1e:	6821      	ldr	r1, [r4, #0]
 8008c20:	1bc9      	subs	r1, r1, r7
 8008c22:	d420      	bmi.n	8008c66 <_malloc_r+0xda>
 8008c24:	290b      	cmp	r1, #11
 8008c26:	d918      	bls.n	8008c5a <_malloc_r+0xce>
 8008c28:	19e2      	adds	r2, r4, r7
 8008c2a:	6027      	str	r7, [r4, #0]
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d112      	bne.n	8008c56 <_malloc_r+0xca>
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	6863      	ldr	r3, [r4, #4]
 8008c36:	6011      	str	r1, [r2, #0]
 8008c38:	6053      	str	r3, [r2, #4]
 8008c3a:	0030      	movs	r0, r6
 8008c3c:	0025      	movs	r5, r4
 8008c3e:	f000 f841 	bl	8008cc4 <__malloc_unlock>
 8008c42:	2207      	movs	r2, #7
 8008c44:	350b      	adds	r5, #11
 8008c46:	1d23      	adds	r3, r4, #4
 8008c48:	4395      	bics	r5, r2
 8008c4a:	1aea      	subs	r2, r5, r3
 8008c4c:	429d      	cmp	r5, r3
 8008c4e:	d0e4      	beq.n	8008c1a <_malloc_r+0x8e>
 8008c50:	1b5b      	subs	r3, r3, r5
 8008c52:	50a3      	str	r3, [r4, r2]
 8008c54:	e7e1      	b.n	8008c1a <_malloc_r+0x8e>
 8008c56:	605a      	str	r2, [r3, #4]
 8008c58:	e7ec      	b.n	8008c34 <_malloc_r+0xa8>
 8008c5a:	6862      	ldr	r2, [r4, #4]
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d1d5      	bne.n	8008c0c <_malloc_r+0x80>
 8008c60:	9b00      	ldr	r3, [sp, #0]
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	e7e9      	b.n	8008c3a <_malloc_r+0xae>
 8008c66:	0023      	movs	r3, r4
 8008c68:	6864      	ldr	r4, [r4, #4]
 8008c6a:	e7a2      	b.n	8008bb2 <_malloc_r+0x26>
 8008c6c:	002c      	movs	r4, r5
 8008c6e:	686d      	ldr	r5, [r5, #4]
 8008c70:	e7ab      	b.n	8008bca <_malloc_r+0x3e>
 8008c72:	0013      	movs	r3, r2
 8008c74:	e7c4      	b.n	8008c00 <_malloc_r+0x74>
 8008c76:	230c      	movs	r3, #12
 8008c78:	0030      	movs	r0, r6
 8008c7a:	6033      	str	r3, [r6, #0]
 8008c7c:	f000 f822 	bl	8008cc4 <__malloc_unlock>
 8008c80:	e7cb      	b.n	8008c1a <_malloc_r+0x8e>
 8008c82:	6027      	str	r7, [r4, #0]
 8008c84:	e7d9      	b.n	8008c3a <_malloc_r+0xae>
 8008c86:	605b      	str	r3, [r3, #4]
 8008c88:	deff      	udf	#255	; 0xff
 8008c8a:	46c0      	nop			; (mov r8, r8)
 8008c8c:	20000414 	.word	0x20000414

08008c90 <__ascii_mbtowc>:
 8008c90:	b082      	sub	sp, #8
 8008c92:	2900      	cmp	r1, #0
 8008c94:	d100      	bne.n	8008c98 <__ascii_mbtowc+0x8>
 8008c96:	a901      	add	r1, sp, #4
 8008c98:	1e10      	subs	r0, r2, #0
 8008c9a:	d006      	beq.n	8008caa <__ascii_mbtowc+0x1a>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <__ascii_mbtowc+0x1e>
 8008ca0:	7813      	ldrb	r3, [r2, #0]
 8008ca2:	600b      	str	r3, [r1, #0]
 8008ca4:	7810      	ldrb	r0, [r2, #0]
 8008ca6:	1e43      	subs	r3, r0, #1
 8008ca8:	4198      	sbcs	r0, r3
 8008caa:	b002      	add	sp, #8
 8008cac:	4770      	bx	lr
 8008cae:	2002      	movs	r0, #2
 8008cb0:	4240      	negs	r0, r0
 8008cb2:	e7fa      	b.n	8008caa <__ascii_mbtowc+0x1a>

08008cb4 <__malloc_lock>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	4802      	ldr	r0, [pc, #8]	; (8008cc0 <__malloc_lock+0xc>)
 8008cb8:	f7fe fcd7 	bl	800766a <__retarget_lock_acquire_recursive>
 8008cbc:	bd10      	pop	{r4, pc}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	20000410 	.word	0x20000410

08008cc4 <__malloc_unlock>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	4802      	ldr	r0, [pc, #8]	; (8008cd0 <__malloc_unlock+0xc>)
 8008cc8:	f7fe fcd0 	bl	800766c <__retarget_lock_release_recursive>
 8008ccc:	bd10      	pop	{r4, pc}
 8008cce:	46c0      	nop			; (mov r8, r8)
 8008cd0:	20000410 	.word	0x20000410

08008cd4 <_Balloc>:
 8008cd4:	b570      	push	{r4, r5, r6, lr}
 8008cd6:	69c5      	ldr	r5, [r0, #28]
 8008cd8:	0006      	movs	r6, r0
 8008cda:	000c      	movs	r4, r1
 8008cdc:	2d00      	cmp	r5, #0
 8008cde:	d10e      	bne.n	8008cfe <_Balloc+0x2a>
 8008ce0:	2010      	movs	r0, #16
 8008ce2:	f7ff ff27 	bl	8008b34 <malloc>
 8008ce6:	1e02      	subs	r2, r0, #0
 8008ce8:	61f0      	str	r0, [r6, #28]
 8008cea:	d104      	bne.n	8008cf6 <_Balloc+0x22>
 8008cec:	216b      	movs	r1, #107	; 0x6b
 8008cee:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <_Balloc+0x80>)
 8008cf0:	4819      	ldr	r0, [pc, #100]	; (8008d58 <_Balloc+0x84>)
 8008cf2:	f000 ff7f 	bl	8009bf4 <__assert_func>
 8008cf6:	6045      	str	r5, [r0, #4]
 8008cf8:	6085      	str	r5, [r0, #8]
 8008cfa:	6005      	str	r5, [r0, #0]
 8008cfc:	60c5      	str	r5, [r0, #12]
 8008cfe:	69f5      	ldr	r5, [r6, #28]
 8008d00:	68eb      	ldr	r3, [r5, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d013      	beq.n	8008d2e <_Balloc+0x5a>
 8008d06:	69f3      	ldr	r3, [r6, #28]
 8008d08:	00a2      	lsls	r2, r4, #2
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	189b      	adds	r3, r3, r2
 8008d0e:	6818      	ldr	r0, [r3, #0]
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d118      	bne.n	8008d46 <_Balloc+0x72>
 8008d14:	2101      	movs	r1, #1
 8008d16:	000d      	movs	r5, r1
 8008d18:	40a5      	lsls	r5, r4
 8008d1a:	1d6a      	adds	r2, r5, #5
 8008d1c:	0030      	movs	r0, r6
 8008d1e:	0092      	lsls	r2, r2, #2
 8008d20:	f000 ff86 	bl	8009c30 <_calloc_r>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d00c      	beq.n	8008d42 <_Balloc+0x6e>
 8008d28:	6044      	str	r4, [r0, #4]
 8008d2a:	6085      	str	r5, [r0, #8]
 8008d2c:	e00d      	b.n	8008d4a <_Balloc+0x76>
 8008d2e:	2221      	movs	r2, #33	; 0x21
 8008d30:	2104      	movs	r1, #4
 8008d32:	0030      	movs	r0, r6
 8008d34:	f000 ff7c 	bl	8009c30 <_calloc_r>
 8008d38:	69f3      	ldr	r3, [r6, #28]
 8008d3a:	60e8      	str	r0, [r5, #12]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e1      	bne.n	8008d06 <_Balloc+0x32>
 8008d42:	2000      	movs	r0, #0
 8008d44:	bd70      	pop	{r4, r5, r6, pc}
 8008d46:	6802      	ldr	r2, [r0, #0]
 8008d48:	601a      	str	r2, [r3, #0]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6103      	str	r3, [r0, #16]
 8008d4e:	60c3      	str	r3, [r0, #12]
 8008d50:	e7f8      	b.n	8008d44 <_Balloc+0x70>
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	0800a4e6 	.word	0x0800a4e6
 8008d58:	0800a5c6 	.word	0x0800a5c6

08008d5c <_Bfree>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	69c6      	ldr	r6, [r0, #28]
 8008d60:	0005      	movs	r5, r0
 8008d62:	000c      	movs	r4, r1
 8008d64:	2e00      	cmp	r6, #0
 8008d66:	d10e      	bne.n	8008d86 <_Bfree+0x2a>
 8008d68:	2010      	movs	r0, #16
 8008d6a:	f7ff fee3 	bl	8008b34 <malloc>
 8008d6e:	1e02      	subs	r2, r0, #0
 8008d70:	61e8      	str	r0, [r5, #28]
 8008d72:	d104      	bne.n	8008d7e <_Bfree+0x22>
 8008d74:	218f      	movs	r1, #143	; 0x8f
 8008d76:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <_Bfree+0x40>)
 8008d78:	4809      	ldr	r0, [pc, #36]	; (8008da0 <_Bfree+0x44>)
 8008d7a:	f000 ff3b 	bl	8009bf4 <__assert_func>
 8008d7e:	6046      	str	r6, [r0, #4]
 8008d80:	6086      	str	r6, [r0, #8]
 8008d82:	6006      	str	r6, [r0, #0]
 8008d84:	60c6      	str	r6, [r0, #12]
 8008d86:	2c00      	cmp	r4, #0
 8008d88:	d007      	beq.n	8008d9a <_Bfree+0x3e>
 8008d8a:	69eb      	ldr	r3, [r5, #28]
 8008d8c:	6862      	ldr	r2, [r4, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	189b      	adds	r3, r3, r2
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	6022      	str	r2, [r4, #0]
 8008d98:	601c      	str	r4, [r3, #0]
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	0800a4e6 	.word	0x0800a4e6
 8008da0:	0800a5c6 	.word	0x0800a5c6

08008da4 <__multadd>:
 8008da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008da6:	000e      	movs	r6, r1
 8008da8:	9001      	str	r0, [sp, #4]
 8008daa:	000c      	movs	r4, r1
 8008dac:	001d      	movs	r5, r3
 8008dae:	2000      	movs	r0, #0
 8008db0:	690f      	ldr	r7, [r1, #16]
 8008db2:	3614      	adds	r6, #20
 8008db4:	6833      	ldr	r3, [r6, #0]
 8008db6:	3001      	adds	r0, #1
 8008db8:	b299      	uxth	r1, r3
 8008dba:	4351      	muls	r1, r2
 8008dbc:	0c1b      	lsrs	r3, r3, #16
 8008dbe:	4353      	muls	r3, r2
 8008dc0:	1949      	adds	r1, r1, r5
 8008dc2:	0c0d      	lsrs	r5, r1, #16
 8008dc4:	195b      	adds	r3, r3, r5
 8008dc6:	0c1d      	lsrs	r5, r3, #16
 8008dc8:	b289      	uxth	r1, r1
 8008dca:	041b      	lsls	r3, r3, #16
 8008dcc:	185b      	adds	r3, r3, r1
 8008dce:	c608      	stmia	r6!, {r3}
 8008dd0:	4287      	cmp	r7, r0
 8008dd2:	dcef      	bgt.n	8008db4 <__multadd+0x10>
 8008dd4:	2d00      	cmp	r5, #0
 8008dd6:	d022      	beq.n	8008e1e <__multadd+0x7a>
 8008dd8:	68a3      	ldr	r3, [r4, #8]
 8008dda:	42bb      	cmp	r3, r7
 8008ddc:	dc19      	bgt.n	8008e12 <__multadd+0x6e>
 8008dde:	6861      	ldr	r1, [r4, #4]
 8008de0:	9801      	ldr	r0, [sp, #4]
 8008de2:	3101      	adds	r1, #1
 8008de4:	f7ff ff76 	bl	8008cd4 <_Balloc>
 8008de8:	1e06      	subs	r6, r0, #0
 8008dea:	d105      	bne.n	8008df8 <__multadd+0x54>
 8008dec:	0032      	movs	r2, r6
 8008dee:	21ba      	movs	r1, #186	; 0xba
 8008df0:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <__multadd+0x80>)
 8008df2:	480d      	ldr	r0, [pc, #52]	; (8008e28 <__multadd+0x84>)
 8008df4:	f000 fefe 	bl	8009bf4 <__assert_func>
 8008df8:	0021      	movs	r1, r4
 8008dfa:	6922      	ldr	r2, [r4, #16]
 8008dfc:	310c      	adds	r1, #12
 8008dfe:	3202      	adds	r2, #2
 8008e00:	0092      	lsls	r2, r2, #2
 8008e02:	300c      	adds	r0, #12
 8008e04:	f7fe fc3e 	bl	8007684 <memcpy>
 8008e08:	0021      	movs	r1, r4
 8008e0a:	9801      	ldr	r0, [sp, #4]
 8008e0c:	f7ff ffa6 	bl	8008d5c <_Bfree>
 8008e10:	0034      	movs	r4, r6
 8008e12:	1d3b      	adds	r3, r7, #4
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	18e3      	adds	r3, r4, r3
 8008e18:	605d      	str	r5, [r3, #4]
 8008e1a:	1c7b      	adds	r3, r7, #1
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	0020      	movs	r0, r4
 8008e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e22:	46c0      	nop			; (mov r8, r8)
 8008e24:	0800a555 	.word	0x0800a555
 8008e28:	0800a5c6 	.word	0x0800a5c6

08008e2c <__s2b>:
 8008e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e2e:	0006      	movs	r6, r0
 8008e30:	0018      	movs	r0, r3
 8008e32:	000c      	movs	r4, r1
 8008e34:	3008      	adds	r0, #8
 8008e36:	2109      	movs	r1, #9
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	0015      	movs	r5, r2
 8008e3c:	f7f7 fa08 	bl	8000250 <__divsi3>
 8008e40:	2301      	movs	r3, #1
 8008e42:	2100      	movs	r1, #0
 8008e44:	4283      	cmp	r3, r0
 8008e46:	db0a      	blt.n	8008e5e <__s2b+0x32>
 8008e48:	0030      	movs	r0, r6
 8008e4a:	f7ff ff43 	bl	8008cd4 <_Balloc>
 8008e4e:	1e01      	subs	r1, r0, #0
 8008e50:	d108      	bne.n	8008e64 <__s2b+0x38>
 8008e52:	000a      	movs	r2, r1
 8008e54:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <__s2b+0x90>)
 8008e56:	481a      	ldr	r0, [pc, #104]	; (8008ec0 <__s2b+0x94>)
 8008e58:	31d3      	adds	r1, #211	; 0xd3
 8008e5a:	f000 fecb 	bl	8009bf4 <__assert_func>
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	3101      	adds	r1, #1
 8008e62:	e7ef      	b.n	8008e44 <__s2b+0x18>
 8008e64:	9b08      	ldr	r3, [sp, #32]
 8008e66:	6143      	str	r3, [r0, #20]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	6103      	str	r3, [r0, #16]
 8008e6c:	2d09      	cmp	r5, #9
 8008e6e:	dd18      	ble.n	8008ea2 <__s2b+0x76>
 8008e70:	0023      	movs	r3, r4
 8008e72:	3309      	adds	r3, #9
 8008e74:	001f      	movs	r7, r3
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	1964      	adds	r4, r4, r5
 8008e7a:	783b      	ldrb	r3, [r7, #0]
 8008e7c:	220a      	movs	r2, #10
 8008e7e:	0030      	movs	r0, r6
 8008e80:	3b30      	subs	r3, #48	; 0x30
 8008e82:	f7ff ff8f 	bl	8008da4 <__multadd>
 8008e86:	3701      	adds	r7, #1
 8008e88:	0001      	movs	r1, r0
 8008e8a:	42a7      	cmp	r7, r4
 8008e8c:	d1f5      	bne.n	8008e7a <__s2b+0x4e>
 8008e8e:	002c      	movs	r4, r5
 8008e90:	9b00      	ldr	r3, [sp, #0]
 8008e92:	3c08      	subs	r4, #8
 8008e94:	191c      	adds	r4, r3, r4
 8008e96:	002f      	movs	r7, r5
 8008e98:	9b01      	ldr	r3, [sp, #4]
 8008e9a:	429f      	cmp	r7, r3
 8008e9c:	db04      	blt.n	8008ea8 <__s2b+0x7c>
 8008e9e:	0008      	movs	r0, r1
 8008ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ea2:	2509      	movs	r5, #9
 8008ea4:	340a      	adds	r4, #10
 8008ea6:	e7f6      	b.n	8008e96 <__s2b+0x6a>
 8008ea8:	1b63      	subs	r3, r4, r5
 8008eaa:	5ddb      	ldrb	r3, [r3, r7]
 8008eac:	220a      	movs	r2, #10
 8008eae:	0030      	movs	r0, r6
 8008eb0:	3b30      	subs	r3, #48	; 0x30
 8008eb2:	f7ff ff77 	bl	8008da4 <__multadd>
 8008eb6:	3701      	adds	r7, #1
 8008eb8:	0001      	movs	r1, r0
 8008eba:	e7ed      	b.n	8008e98 <__s2b+0x6c>
 8008ebc:	0800a555 	.word	0x0800a555
 8008ec0:	0800a5c6 	.word	0x0800a5c6

08008ec4 <__hi0bits>:
 8008ec4:	0003      	movs	r3, r0
 8008ec6:	0c02      	lsrs	r2, r0, #16
 8008ec8:	2000      	movs	r0, #0
 8008eca:	4282      	cmp	r2, r0
 8008ecc:	d101      	bne.n	8008ed2 <__hi0bits+0xe>
 8008ece:	041b      	lsls	r3, r3, #16
 8008ed0:	3010      	adds	r0, #16
 8008ed2:	0e1a      	lsrs	r2, r3, #24
 8008ed4:	d101      	bne.n	8008eda <__hi0bits+0x16>
 8008ed6:	3008      	adds	r0, #8
 8008ed8:	021b      	lsls	r3, r3, #8
 8008eda:	0f1a      	lsrs	r2, r3, #28
 8008edc:	d101      	bne.n	8008ee2 <__hi0bits+0x1e>
 8008ede:	3004      	adds	r0, #4
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	0f9a      	lsrs	r2, r3, #30
 8008ee4:	d101      	bne.n	8008eea <__hi0bits+0x26>
 8008ee6:	3002      	adds	r0, #2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	db03      	blt.n	8008ef6 <__hi0bits+0x32>
 8008eee:	3001      	adds	r0, #1
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	d400      	bmi.n	8008ef6 <__hi0bits+0x32>
 8008ef4:	2020      	movs	r0, #32
 8008ef6:	4770      	bx	lr

08008ef8 <__lo0bits>:
 8008ef8:	6803      	ldr	r3, [r0, #0]
 8008efa:	0001      	movs	r1, r0
 8008efc:	2207      	movs	r2, #7
 8008efe:	0018      	movs	r0, r3
 8008f00:	4010      	ands	r0, r2
 8008f02:	4213      	tst	r3, r2
 8008f04:	d00d      	beq.n	8008f22 <__lo0bits+0x2a>
 8008f06:	3a06      	subs	r2, #6
 8008f08:	2000      	movs	r0, #0
 8008f0a:	4213      	tst	r3, r2
 8008f0c:	d105      	bne.n	8008f1a <__lo0bits+0x22>
 8008f0e:	3002      	adds	r0, #2
 8008f10:	4203      	tst	r3, r0
 8008f12:	d003      	beq.n	8008f1c <__lo0bits+0x24>
 8008f14:	40d3      	lsrs	r3, r2
 8008f16:	0010      	movs	r0, r2
 8008f18:	600b      	str	r3, [r1, #0]
 8008f1a:	4770      	bx	lr
 8008f1c:	089b      	lsrs	r3, r3, #2
 8008f1e:	600b      	str	r3, [r1, #0]
 8008f20:	e7fb      	b.n	8008f1a <__lo0bits+0x22>
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	d101      	bne.n	8008f2c <__lo0bits+0x34>
 8008f28:	2010      	movs	r0, #16
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	d101      	bne.n	8008f36 <__lo0bits+0x3e>
 8008f32:	3008      	adds	r0, #8
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	071a      	lsls	r2, r3, #28
 8008f38:	d101      	bne.n	8008f3e <__lo0bits+0x46>
 8008f3a:	3004      	adds	r0, #4
 8008f3c:	091b      	lsrs	r3, r3, #4
 8008f3e:	079a      	lsls	r2, r3, #30
 8008f40:	d101      	bne.n	8008f46 <__lo0bits+0x4e>
 8008f42:	3002      	adds	r0, #2
 8008f44:	089b      	lsrs	r3, r3, #2
 8008f46:	07da      	lsls	r2, r3, #31
 8008f48:	d4e9      	bmi.n	8008f1e <__lo0bits+0x26>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	d1e6      	bne.n	8008f1e <__lo0bits+0x26>
 8008f50:	2020      	movs	r0, #32
 8008f52:	e7e2      	b.n	8008f1a <__lo0bits+0x22>

08008f54 <__i2b>:
 8008f54:	b510      	push	{r4, lr}
 8008f56:	000c      	movs	r4, r1
 8008f58:	2101      	movs	r1, #1
 8008f5a:	f7ff febb 	bl	8008cd4 <_Balloc>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d107      	bne.n	8008f72 <__i2b+0x1e>
 8008f62:	2146      	movs	r1, #70	; 0x46
 8008f64:	4c05      	ldr	r4, [pc, #20]	; (8008f7c <__i2b+0x28>)
 8008f66:	0002      	movs	r2, r0
 8008f68:	4b05      	ldr	r3, [pc, #20]	; (8008f80 <__i2b+0x2c>)
 8008f6a:	0020      	movs	r0, r4
 8008f6c:	31ff      	adds	r1, #255	; 0xff
 8008f6e:	f000 fe41 	bl	8009bf4 <__assert_func>
 8008f72:	2301      	movs	r3, #1
 8008f74:	6144      	str	r4, [r0, #20]
 8008f76:	6103      	str	r3, [r0, #16]
 8008f78:	bd10      	pop	{r4, pc}
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	0800a5c6 	.word	0x0800a5c6
 8008f80:	0800a555 	.word	0x0800a555

08008f84 <__multiply>:
 8008f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f86:	0015      	movs	r5, r2
 8008f88:	690a      	ldr	r2, [r1, #16]
 8008f8a:	692b      	ldr	r3, [r5, #16]
 8008f8c:	000c      	movs	r4, r1
 8008f8e:	b08b      	sub	sp, #44	; 0x2c
 8008f90:	429a      	cmp	r2, r3
 8008f92:	da01      	bge.n	8008f98 <__multiply+0x14>
 8008f94:	002c      	movs	r4, r5
 8008f96:	000d      	movs	r5, r1
 8008f98:	6927      	ldr	r7, [r4, #16]
 8008f9a:	692e      	ldr	r6, [r5, #16]
 8008f9c:	6861      	ldr	r1, [r4, #4]
 8008f9e:	19bb      	adds	r3, r7, r6
 8008fa0:	9303      	str	r3, [sp, #12]
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	19ba      	adds	r2, r7, r6
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	da00      	bge.n	8008fac <__multiply+0x28>
 8008faa:	3101      	adds	r1, #1
 8008fac:	f7ff fe92 	bl	8008cd4 <_Balloc>
 8008fb0:	9002      	str	r0, [sp, #8]
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d106      	bne.n	8008fc4 <__multiply+0x40>
 8008fb6:	21b1      	movs	r1, #177	; 0xb1
 8008fb8:	4b48      	ldr	r3, [pc, #288]	; (80090dc <__multiply+0x158>)
 8008fba:	4849      	ldr	r0, [pc, #292]	; (80090e0 <__multiply+0x15c>)
 8008fbc:	9a02      	ldr	r2, [sp, #8]
 8008fbe:	0049      	lsls	r1, r1, #1
 8008fc0:	f000 fe18 	bl	8009bf4 <__assert_func>
 8008fc4:	9b02      	ldr	r3, [sp, #8]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	3314      	adds	r3, #20
 8008fca:	469c      	mov	ip, r3
 8008fcc:	19bb      	adds	r3, r7, r6
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4463      	add	r3, ip
 8008fd2:	9304      	str	r3, [sp, #16]
 8008fd4:	4663      	mov	r3, ip
 8008fd6:	9904      	ldr	r1, [sp, #16]
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	d32a      	bcc.n	8009032 <__multiply+0xae>
 8008fdc:	0023      	movs	r3, r4
 8008fde:	00bf      	lsls	r7, r7, #2
 8008fe0:	3314      	adds	r3, #20
 8008fe2:	3514      	adds	r5, #20
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	00b6      	lsls	r6, r6, #2
 8008fe8:	19db      	adds	r3, r3, r7
 8008fea:	9305      	str	r3, [sp, #20]
 8008fec:	19ab      	adds	r3, r5, r6
 8008fee:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	9306      	str	r3, [sp, #24]
 8008ff4:	0023      	movs	r3, r4
 8008ff6:	9a05      	ldr	r2, [sp, #20]
 8008ff8:	3315      	adds	r3, #21
 8008ffa:	9501      	str	r5, [sp, #4]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d305      	bcc.n	800900c <__multiply+0x88>
 8009000:	1b13      	subs	r3, r2, r4
 8009002:	3b15      	subs	r3, #21
 8009004:	089b      	lsrs	r3, r3, #2
 8009006:	3301      	adds	r3, #1
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	9306      	str	r3, [sp, #24]
 800900c:	9b01      	ldr	r3, [sp, #4]
 800900e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009010:	4293      	cmp	r3, r2
 8009012:	d310      	bcc.n	8009036 <__multiply+0xb2>
 8009014:	9b03      	ldr	r3, [sp, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	dd05      	ble.n	8009026 <__multiply+0xa2>
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	3b04      	subs	r3, #4
 800901e:	9304      	str	r3, [sp, #16]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d056      	beq.n	80090d4 <__multiply+0x150>
 8009026:	9b02      	ldr	r3, [sp, #8]
 8009028:	9a03      	ldr	r2, [sp, #12]
 800902a:	0018      	movs	r0, r3
 800902c:	611a      	str	r2, [r3, #16]
 800902e:	b00b      	add	sp, #44	; 0x2c
 8009030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009032:	c304      	stmia	r3!, {r2}
 8009034:	e7cf      	b.n	8008fd6 <__multiply+0x52>
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	b280      	uxth	r0, r0
 800903c:	2800      	cmp	r0, #0
 800903e:	d01e      	beq.n	800907e <__multiply+0xfa>
 8009040:	4667      	mov	r7, ip
 8009042:	2500      	movs	r5, #0
 8009044:	9e08      	ldr	r6, [sp, #32]
 8009046:	ce02      	ldmia	r6!, {r1}
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	9307      	str	r3, [sp, #28]
 800904c:	b28b      	uxth	r3, r1
 800904e:	4343      	muls	r3, r0
 8009050:	001a      	movs	r2, r3
 8009052:	466b      	mov	r3, sp
 8009054:	8b9b      	ldrh	r3, [r3, #28]
 8009056:	18d3      	adds	r3, r2, r3
 8009058:	195b      	adds	r3, r3, r5
 800905a:	0c0d      	lsrs	r5, r1, #16
 800905c:	4345      	muls	r5, r0
 800905e:	9a07      	ldr	r2, [sp, #28]
 8009060:	0c11      	lsrs	r1, r2, #16
 8009062:	1869      	adds	r1, r5, r1
 8009064:	0c1a      	lsrs	r2, r3, #16
 8009066:	188a      	adds	r2, r1, r2
 8009068:	b29b      	uxth	r3, r3
 800906a:	0c15      	lsrs	r5, r2, #16
 800906c:	0412      	lsls	r2, r2, #16
 800906e:	431a      	orrs	r2, r3
 8009070:	9b05      	ldr	r3, [sp, #20]
 8009072:	c704      	stmia	r7!, {r2}
 8009074:	42b3      	cmp	r3, r6
 8009076:	d8e6      	bhi.n	8009046 <__multiply+0xc2>
 8009078:	4663      	mov	r3, ip
 800907a:	9a06      	ldr	r2, [sp, #24]
 800907c:	509d      	str	r5, [r3, r2]
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	0c00      	lsrs	r0, r0, #16
 8009084:	d020      	beq.n	80090c8 <__multiply+0x144>
 8009086:	4663      	mov	r3, ip
 8009088:	0025      	movs	r5, r4
 800908a:	4661      	mov	r1, ip
 800908c:	2700      	movs	r7, #0
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3514      	adds	r5, #20
 8009092:	682a      	ldr	r2, [r5, #0]
 8009094:	680e      	ldr	r6, [r1, #0]
 8009096:	b292      	uxth	r2, r2
 8009098:	4342      	muls	r2, r0
 800909a:	0c36      	lsrs	r6, r6, #16
 800909c:	1992      	adds	r2, r2, r6
 800909e:	19d2      	adds	r2, r2, r7
 80090a0:	0416      	lsls	r6, r2, #16
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	431e      	orrs	r6, r3
 80090a6:	600e      	str	r6, [r1, #0]
 80090a8:	cd40      	ldmia	r5!, {r6}
 80090aa:	684b      	ldr	r3, [r1, #4]
 80090ac:	0c36      	lsrs	r6, r6, #16
 80090ae:	4346      	muls	r6, r0
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	0c12      	lsrs	r2, r2, #16
 80090b4:	18f3      	adds	r3, r6, r3
 80090b6:	189b      	adds	r3, r3, r2
 80090b8:	9a05      	ldr	r2, [sp, #20]
 80090ba:	0c1f      	lsrs	r7, r3, #16
 80090bc:	3104      	adds	r1, #4
 80090be:	42aa      	cmp	r2, r5
 80090c0:	d8e7      	bhi.n	8009092 <__multiply+0x10e>
 80090c2:	4662      	mov	r2, ip
 80090c4:	9906      	ldr	r1, [sp, #24]
 80090c6:	5053      	str	r3, [r2, r1]
 80090c8:	9b01      	ldr	r3, [sp, #4]
 80090ca:	3304      	adds	r3, #4
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	2304      	movs	r3, #4
 80090d0:	449c      	add	ip, r3
 80090d2:	e79b      	b.n	800900c <__multiply+0x88>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	9303      	str	r3, [sp, #12]
 80090da:	e79b      	b.n	8009014 <__multiply+0x90>
 80090dc:	0800a555 	.word	0x0800a555
 80090e0:	0800a5c6 	.word	0x0800a5c6

080090e4 <__pow5mult>:
 80090e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090e6:	2303      	movs	r3, #3
 80090e8:	0015      	movs	r5, r2
 80090ea:	0007      	movs	r7, r0
 80090ec:	000e      	movs	r6, r1
 80090ee:	401a      	ands	r2, r3
 80090f0:	421d      	tst	r5, r3
 80090f2:	d008      	beq.n	8009106 <__pow5mult+0x22>
 80090f4:	4925      	ldr	r1, [pc, #148]	; (800918c <__pow5mult+0xa8>)
 80090f6:	3a01      	subs	r2, #1
 80090f8:	0092      	lsls	r2, r2, #2
 80090fa:	5852      	ldr	r2, [r2, r1]
 80090fc:	2300      	movs	r3, #0
 80090fe:	0031      	movs	r1, r6
 8009100:	f7ff fe50 	bl	8008da4 <__multadd>
 8009104:	0006      	movs	r6, r0
 8009106:	10ad      	asrs	r5, r5, #2
 8009108:	d03d      	beq.n	8009186 <__pow5mult+0xa2>
 800910a:	69fc      	ldr	r4, [r7, #28]
 800910c:	2c00      	cmp	r4, #0
 800910e:	d10f      	bne.n	8009130 <__pow5mult+0x4c>
 8009110:	2010      	movs	r0, #16
 8009112:	f7ff fd0f 	bl	8008b34 <malloc>
 8009116:	1e02      	subs	r2, r0, #0
 8009118:	61f8      	str	r0, [r7, #28]
 800911a:	d105      	bne.n	8009128 <__pow5mult+0x44>
 800911c:	21b4      	movs	r1, #180	; 0xb4
 800911e:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <__pow5mult+0xac>)
 8009120:	481c      	ldr	r0, [pc, #112]	; (8009194 <__pow5mult+0xb0>)
 8009122:	31ff      	adds	r1, #255	; 0xff
 8009124:	f000 fd66 	bl	8009bf4 <__assert_func>
 8009128:	6044      	str	r4, [r0, #4]
 800912a:	6084      	str	r4, [r0, #8]
 800912c:	6004      	str	r4, [r0, #0]
 800912e:	60c4      	str	r4, [r0, #12]
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	689c      	ldr	r4, [r3, #8]
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	2c00      	cmp	r4, #0
 8009138:	d108      	bne.n	800914c <__pow5mult+0x68>
 800913a:	0038      	movs	r0, r7
 800913c:	4916      	ldr	r1, [pc, #88]	; (8009198 <__pow5mult+0xb4>)
 800913e:	f7ff ff09 	bl	8008f54 <__i2b>
 8009142:	9b01      	ldr	r3, [sp, #4]
 8009144:	0004      	movs	r4, r0
 8009146:	6098      	str	r0, [r3, #8]
 8009148:	2300      	movs	r3, #0
 800914a:	6003      	str	r3, [r0, #0]
 800914c:	2301      	movs	r3, #1
 800914e:	421d      	tst	r5, r3
 8009150:	d00a      	beq.n	8009168 <__pow5mult+0x84>
 8009152:	0031      	movs	r1, r6
 8009154:	0022      	movs	r2, r4
 8009156:	0038      	movs	r0, r7
 8009158:	f7ff ff14 	bl	8008f84 <__multiply>
 800915c:	0031      	movs	r1, r6
 800915e:	9001      	str	r0, [sp, #4]
 8009160:	0038      	movs	r0, r7
 8009162:	f7ff fdfb 	bl	8008d5c <_Bfree>
 8009166:	9e01      	ldr	r6, [sp, #4]
 8009168:	106d      	asrs	r5, r5, #1
 800916a:	d00c      	beq.n	8009186 <__pow5mult+0xa2>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	2800      	cmp	r0, #0
 8009170:	d107      	bne.n	8009182 <__pow5mult+0x9e>
 8009172:	0022      	movs	r2, r4
 8009174:	0021      	movs	r1, r4
 8009176:	0038      	movs	r0, r7
 8009178:	f7ff ff04 	bl	8008f84 <__multiply>
 800917c:	2300      	movs	r3, #0
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	0004      	movs	r4, r0
 8009184:	e7e2      	b.n	800914c <__pow5mult+0x68>
 8009186:	0030      	movs	r0, r6
 8009188:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800918a:	46c0      	nop			; (mov r8, r8)
 800918c:	0800a710 	.word	0x0800a710
 8009190:	0800a4e6 	.word	0x0800a4e6
 8009194:	0800a5c6 	.word	0x0800a5c6
 8009198:	00000271 	.word	0x00000271

0800919c <__lshift>:
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	000c      	movs	r4, r1
 80091a0:	0017      	movs	r7, r2
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	1155      	asrs	r5, r2, #5
 80091a6:	b087      	sub	sp, #28
 80091a8:	18eb      	adds	r3, r5, r3
 80091aa:	9302      	str	r3, [sp, #8]
 80091ac:	3301      	adds	r3, #1
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	6849      	ldr	r1, [r1, #4]
 80091b2:	68a3      	ldr	r3, [r4, #8]
 80091b4:	9004      	str	r0, [sp, #16]
 80091b6:	9a01      	ldr	r2, [sp, #4]
 80091b8:	4293      	cmp	r3, r2
 80091ba:	db10      	blt.n	80091de <__lshift+0x42>
 80091bc:	9804      	ldr	r0, [sp, #16]
 80091be:	f7ff fd89 	bl	8008cd4 <_Balloc>
 80091c2:	2300      	movs	r3, #0
 80091c4:	0002      	movs	r2, r0
 80091c6:	0006      	movs	r6, r0
 80091c8:	0019      	movs	r1, r3
 80091ca:	3214      	adds	r2, #20
 80091cc:	4298      	cmp	r0, r3
 80091ce:	d10c      	bne.n	80091ea <__lshift+0x4e>
 80091d0:	31df      	adds	r1, #223	; 0xdf
 80091d2:	0032      	movs	r2, r6
 80091d4:	4b26      	ldr	r3, [pc, #152]	; (8009270 <__lshift+0xd4>)
 80091d6:	4827      	ldr	r0, [pc, #156]	; (8009274 <__lshift+0xd8>)
 80091d8:	31ff      	adds	r1, #255	; 0xff
 80091da:	f000 fd0b 	bl	8009bf4 <__assert_func>
 80091de:	3101      	adds	r1, #1
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	e7e8      	b.n	80091b6 <__lshift+0x1a>
 80091e4:	0098      	lsls	r0, r3, #2
 80091e6:	5011      	str	r1, [r2, r0]
 80091e8:	3301      	adds	r3, #1
 80091ea:	42ab      	cmp	r3, r5
 80091ec:	dbfa      	blt.n	80091e4 <__lshift+0x48>
 80091ee:	43eb      	mvns	r3, r5
 80091f0:	17db      	asrs	r3, r3, #31
 80091f2:	401d      	ands	r5, r3
 80091f4:	211f      	movs	r1, #31
 80091f6:	0023      	movs	r3, r4
 80091f8:	0038      	movs	r0, r7
 80091fa:	00ad      	lsls	r5, r5, #2
 80091fc:	1955      	adds	r5, r2, r5
 80091fe:	6922      	ldr	r2, [r4, #16]
 8009200:	3314      	adds	r3, #20
 8009202:	0092      	lsls	r2, r2, #2
 8009204:	4008      	ands	r0, r1
 8009206:	4684      	mov	ip, r0
 8009208:	189a      	adds	r2, r3, r2
 800920a:	420f      	tst	r7, r1
 800920c:	d02a      	beq.n	8009264 <__lshift+0xc8>
 800920e:	3101      	adds	r1, #1
 8009210:	1a09      	subs	r1, r1, r0
 8009212:	9105      	str	r1, [sp, #20]
 8009214:	2100      	movs	r1, #0
 8009216:	9503      	str	r5, [sp, #12]
 8009218:	4667      	mov	r7, ip
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	40b8      	lsls	r0, r7
 800921e:	4308      	orrs	r0, r1
 8009220:	9903      	ldr	r1, [sp, #12]
 8009222:	c101      	stmia	r1!, {r0}
 8009224:	9103      	str	r1, [sp, #12]
 8009226:	9805      	ldr	r0, [sp, #20]
 8009228:	cb02      	ldmia	r3!, {r1}
 800922a:	40c1      	lsrs	r1, r0
 800922c:	429a      	cmp	r2, r3
 800922e:	d8f3      	bhi.n	8009218 <__lshift+0x7c>
 8009230:	0020      	movs	r0, r4
 8009232:	3015      	adds	r0, #21
 8009234:	2304      	movs	r3, #4
 8009236:	4282      	cmp	r2, r0
 8009238:	d304      	bcc.n	8009244 <__lshift+0xa8>
 800923a:	1b13      	subs	r3, r2, r4
 800923c:	3b15      	subs	r3, #21
 800923e:	089b      	lsrs	r3, r3, #2
 8009240:	3301      	adds	r3, #1
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	50e9      	str	r1, [r5, r3]
 8009246:	2900      	cmp	r1, #0
 8009248:	d002      	beq.n	8009250 <__lshift+0xb4>
 800924a:	9b02      	ldr	r3, [sp, #8]
 800924c:	3302      	adds	r3, #2
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	9804      	ldr	r0, [sp, #16]
 8009254:	3b01      	subs	r3, #1
 8009256:	0021      	movs	r1, r4
 8009258:	6133      	str	r3, [r6, #16]
 800925a:	f7ff fd7f 	bl	8008d5c <_Bfree>
 800925e:	0030      	movs	r0, r6
 8009260:	b007      	add	sp, #28
 8009262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009264:	cb02      	ldmia	r3!, {r1}
 8009266:	c502      	stmia	r5!, {r1}
 8009268:	429a      	cmp	r2, r3
 800926a:	d8fb      	bhi.n	8009264 <__lshift+0xc8>
 800926c:	e7f0      	b.n	8009250 <__lshift+0xb4>
 800926e:	46c0      	nop			; (mov r8, r8)
 8009270:	0800a555 	.word	0x0800a555
 8009274:	0800a5c6 	.word	0x0800a5c6

08009278 <__mcmp>:
 8009278:	b530      	push	{r4, r5, lr}
 800927a:	690b      	ldr	r3, [r1, #16]
 800927c:	6904      	ldr	r4, [r0, #16]
 800927e:	0002      	movs	r2, r0
 8009280:	1ae0      	subs	r0, r4, r3
 8009282:	429c      	cmp	r4, r3
 8009284:	d10e      	bne.n	80092a4 <__mcmp+0x2c>
 8009286:	3214      	adds	r2, #20
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	3114      	adds	r1, #20
 800928c:	0014      	movs	r4, r2
 800928e:	18c9      	adds	r1, r1, r3
 8009290:	18d2      	adds	r2, r2, r3
 8009292:	3a04      	subs	r2, #4
 8009294:	3904      	subs	r1, #4
 8009296:	6815      	ldr	r5, [r2, #0]
 8009298:	680b      	ldr	r3, [r1, #0]
 800929a:	429d      	cmp	r5, r3
 800929c:	d003      	beq.n	80092a6 <__mcmp+0x2e>
 800929e:	2001      	movs	r0, #1
 80092a0:	429d      	cmp	r5, r3
 80092a2:	d303      	bcc.n	80092ac <__mcmp+0x34>
 80092a4:	bd30      	pop	{r4, r5, pc}
 80092a6:	4294      	cmp	r4, r2
 80092a8:	d3f3      	bcc.n	8009292 <__mcmp+0x1a>
 80092aa:	e7fb      	b.n	80092a4 <__mcmp+0x2c>
 80092ac:	4240      	negs	r0, r0
 80092ae:	e7f9      	b.n	80092a4 <__mcmp+0x2c>

080092b0 <__mdiff>:
 80092b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092b2:	000e      	movs	r6, r1
 80092b4:	0007      	movs	r7, r0
 80092b6:	0011      	movs	r1, r2
 80092b8:	0030      	movs	r0, r6
 80092ba:	b087      	sub	sp, #28
 80092bc:	0014      	movs	r4, r2
 80092be:	f7ff ffdb 	bl	8009278 <__mcmp>
 80092c2:	1e05      	subs	r5, r0, #0
 80092c4:	d110      	bne.n	80092e8 <__mdiff+0x38>
 80092c6:	0001      	movs	r1, r0
 80092c8:	0038      	movs	r0, r7
 80092ca:	f7ff fd03 	bl	8008cd4 <_Balloc>
 80092ce:	1e02      	subs	r2, r0, #0
 80092d0:	d104      	bne.n	80092dc <__mdiff+0x2c>
 80092d2:	4b3f      	ldr	r3, [pc, #252]	; (80093d0 <__mdiff+0x120>)
 80092d4:	483f      	ldr	r0, [pc, #252]	; (80093d4 <__mdiff+0x124>)
 80092d6:	4940      	ldr	r1, [pc, #256]	; (80093d8 <__mdiff+0x128>)
 80092d8:	f000 fc8c 	bl	8009bf4 <__assert_func>
 80092dc:	2301      	movs	r3, #1
 80092de:	6145      	str	r5, [r0, #20]
 80092e0:	6103      	str	r3, [r0, #16]
 80092e2:	0010      	movs	r0, r2
 80092e4:	b007      	add	sp, #28
 80092e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e8:	2301      	movs	r3, #1
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	2800      	cmp	r0, #0
 80092ee:	db04      	blt.n	80092fa <__mdiff+0x4a>
 80092f0:	0023      	movs	r3, r4
 80092f2:	0034      	movs	r4, r6
 80092f4:	001e      	movs	r6, r3
 80092f6:	2300      	movs	r3, #0
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	0038      	movs	r0, r7
 80092fc:	6861      	ldr	r1, [r4, #4]
 80092fe:	f7ff fce9 	bl	8008cd4 <_Balloc>
 8009302:	1e02      	subs	r2, r0, #0
 8009304:	d103      	bne.n	800930e <__mdiff+0x5e>
 8009306:	4b32      	ldr	r3, [pc, #200]	; (80093d0 <__mdiff+0x120>)
 8009308:	4832      	ldr	r0, [pc, #200]	; (80093d4 <__mdiff+0x124>)
 800930a:	4934      	ldr	r1, [pc, #208]	; (80093dc <__mdiff+0x12c>)
 800930c:	e7e4      	b.n	80092d8 <__mdiff+0x28>
 800930e:	9b01      	ldr	r3, [sp, #4]
 8009310:	2700      	movs	r7, #0
 8009312:	60c3      	str	r3, [r0, #12]
 8009314:	6920      	ldr	r0, [r4, #16]
 8009316:	3414      	adds	r4, #20
 8009318:	0083      	lsls	r3, r0, #2
 800931a:	18e3      	adds	r3, r4, r3
 800931c:	0021      	movs	r1, r4
 800931e:	9401      	str	r4, [sp, #4]
 8009320:	0034      	movs	r4, r6
 8009322:	9302      	str	r3, [sp, #8]
 8009324:	6933      	ldr	r3, [r6, #16]
 8009326:	3414      	adds	r4, #20
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	18e3      	adds	r3, r4, r3
 800932c:	9303      	str	r3, [sp, #12]
 800932e:	0013      	movs	r3, r2
 8009330:	3314      	adds	r3, #20
 8009332:	469c      	mov	ip, r3
 8009334:	9305      	str	r3, [sp, #20]
 8009336:	9104      	str	r1, [sp, #16]
 8009338:	9b04      	ldr	r3, [sp, #16]
 800933a:	cc02      	ldmia	r4!, {r1}
 800933c:	cb20      	ldmia	r3!, {r5}
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	b2ab      	uxth	r3, r5
 8009342:	19df      	adds	r7, r3, r7
 8009344:	b28b      	uxth	r3, r1
 8009346:	1afb      	subs	r3, r7, r3
 8009348:	0c09      	lsrs	r1, r1, #16
 800934a:	0c2d      	lsrs	r5, r5, #16
 800934c:	1a6d      	subs	r5, r5, r1
 800934e:	1419      	asrs	r1, r3, #16
 8009350:	1869      	adds	r1, r5, r1
 8009352:	b29b      	uxth	r3, r3
 8009354:	140f      	asrs	r7, r1, #16
 8009356:	0409      	lsls	r1, r1, #16
 8009358:	4319      	orrs	r1, r3
 800935a:	4663      	mov	r3, ip
 800935c:	c302      	stmia	r3!, {r1}
 800935e:	469c      	mov	ip, r3
 8009360:	9b03      	ldr	r3, [sp, #12]
 8009362:	42a3      	cmp	r3, r4
 8009364:	d8e8      	bhi.n	8009338 <__mdiff+0x88>
 8009366:	0031      	movs	r1, r6
 8009368:	9c03      	ldr	r4, [sp, #12]
 800936a:	3115      	adds	r1, #21
 800936c:	2304      	movs	r3, #4
 800936e:	428c      	cmp	r4, r1
 8009370:	d304      	bcc.n	800937c <__mdiff+0xcc>
 8009372:	1ba3      	subs	r3, r4, r6
 8009374:	3b15      	subs	r3, #21
 8009376:	089b      	lsrs	r3, r3, #2
 8009378:	3301      	adds	r3, #1
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	9901      	ldr	r1, [sp, #4]
 800937e:	18cd      	adds	r5, r1, r3
 8009380:	9905      	ldr	r1, [sp, #20]
 8009382:	002e      	movs	r6, r5
 8009384:	18cb      	adds	r3, r1, r3
 8009386:	469c      	mov	ip, r3
 8009388:	9902      	ldr	r1, [sp, #8]
 800938a:	428e      	cmp	r6, r1
 800938c:	d310      	bcc.n	80093b0 <__mdiff+0x100>
 800938e:	9e02      	ldr	r6, [sp, #8]
 8009390:	1ee9      	subs	r1, r5, #3
 8009392:	2400      	movs	r4, #0
 8009394:	428e      	cmp	r6, r1
 8009396:	d304      	bcc.n	80093a2 <__mdiff+0xf2>
 8009398:	0031      	movs	r1, r6
 800939a:	3103      	adds	r1, #3
 800939c:	1b49      	subs	r1, r1, r5
 800939e:	0889      	lsrs	r1, r1, #2
 80093a0:	008c      	lsls	r4, r1, #2
 80093a2:	191b      	adds	r3, r3, r4
 80093a4:	3b04      	subs	r3, #4
 80093a6:	6819      	ldr	r1, [r3, #0]
 80093a8:	2900      	cmp	r1, #0
 80093aa:	d00f      	beq.n	80093cc <__mdiff+0x11c>
 80093ac:	6110      	str	r0, [r2, #16]
 80093ae:	e798      	b.n	80092e2 <__mdiff+0x32>
 80093b0:	ce02      	ldmia	r6!, {r1}
 80093b2:	b28c      	uxth	r4, r1
 80093b4:	19e4      	adds	r4, r4, r7
 80093b6:	0c0f      	lsrs	r7, r1, #16
 80093b8:	1421      	asrs	r1, r4, #16
 80093ba:	1879      	adds	r1, r7, r1
 80093bc:	b2a4      	uxth	r4, r4
 80093be:	140f      	asrs	r7, r1, #16
 80093c0:	0409      	lsls	r1, r1, #16
 80093c2:	4321      	orrs	r1, r4
 80093c4:	4664      	mov	r4, ip
 80093c6:	c402      	stmia	r4!, {r1}
 80093c8:	46a4      	mov	ip, r4
 80093ca:	e7dd      	b.n	8009388 <__mdiff+0xd8>
 80093cc:	3801      	subs	r0, #1
 80093ce:	e7e9      	b.n	80093a4 <__mdiff+0xf4>
 80093d0:	0800a555 	.word	0x0800a555
 80093d4:	0800a5c6 	.word	0x0800a5c6
 80093d8:	00000237 	.word	0x00000237
 80093dc:	00000245 	.word	0x00000245

080093e0 <__ulp>:
 80093e0:	2000      	movs	r0, #0
 80093e2:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <__ulp+0x30>)
 80093e4:	4019      	ands	r1, r3
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <__ulp+0x34>)
 80093e8:	18c9      	adds	r1, r1, r3
 80093ea:	4281      	cmp	r1, r0
 80093ec:	dc06      	bgt.n	80093fc <__ulp+0x1c>
 80093ee:	4249      	negs	r1, r1
 80093f0:	150b      	asrs	r3, r1, #20
 80093f2:	2b13      	cmp	r3, #19
 80093f4:	dc03      	bgt.n	80093fe <__ulp+0x1e>
 80093f6:	2180      	movs	r1, #128	; 0x80
 80093f8:	0309      	lsls	r1, r1, #12
 80093fa:	4119      	asrs	r1, r3
 80093fc:	4770      	bx	lr
 80093fe:	3b14      	subs	r3, #20
 8009400:	2001      	movs	r0, #1
 8009402:	2b1e      	cmp	r3, #30
 8009404:	dc02      	bgt.n	800940c <__ulp+0x2c>
 8009406:	2080      	movs	r0, #128	; 0x80
 8009408:	0600      	lsls	r0, r0, #24
 800940a:	40d8      	lsrs	r0, r3
 800940c:	2100      	movs	r1, #0
 800940e:	e7f5      	b.n	80093fc <__ulp+0x1c>
 8009410:	7ff00000 	.word	0x7ff00000
 8009414:	fcc00000 	.word	0xfcc00000

08009418 <__b2d>:
 8009418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800941a:	0006      	movs	r6, r0
 800941c:	6903      	ldr	r3, [r0, #16]
 800941e:	3614      	adds	r6, #20
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	18f3      	adds	r3, r6, r3
 8009424:	1f1d      	subs	r5, r3, #4
 8009426:	682c      	ldr	r4, [r5, #0]
 8009428:	000f      	movs	r7, r1
 800942a:	0020      	movs	r0, r4
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	f7ff fd49 	bl	8008ec4 <__hi0bits>
 8009432:	2220      	movs	r2, #32
 8009434:	1a12      	subs	r2, r2, r0
 8009436:	603a      	str	r2, [r7, #0]
 8009438:	0003      	movs	r3, r0
 800943a:	4a1c      	ldr	r2, [pc, #112]	; (80094ac <__b2d+0x94>)
 800943c:	280a      	cmp	r0, #10
 800943e:	dc15      	bgt.n	800946c <__b2d+0x54>
 8009440:	210b      	movs	r1, #11
 8009442:	0027      	movs	r7, r4
 8009444:	1a09      	subs	r1, r1, r0
 8009446:	40cf      	lsrs	r7, r1
 8009448:	433a      	orrs	r2, r7
 800944a:	468c      	mov	ip, r1
 800944c:	0011      	movs	r1, r2
 800944e:	2200      	movs	r2, #0
 8009450:	42ae      	cmp	r6, r5
 8009452:	d202      	bcs.n	800945a <__b2d+0x42>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	3a08      	subs	r2, #8
 8009458:	6812      	ldr	r2, [r2, #0]
 800945a:	3315      	adds	r3, #21
 800945c:	409c      	lsls	r4, r3
 800945e:	4663      	mov	r3, ip
 8009460:	0027      	movs	r7, r4
 8009462:	40da      	lsrs	r2, r3
 8009464:	4317      	orrs	r7, r2
 8009466:	0038      	movs	r0, r7
 8009468:	b003      	add	sp, #12
 800946a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946c:	2700      	movs	r7, #0
 800946e:	42ae      	cmp	r6, r5
 8009470:	d202      	bcs.n	8009478 <__b2d+0x60>
 8009472:	9d01      	ldr	r5, [sp, #4]
 8009474:	3d08      	subs	r5, #8
 8009476:	682f      	ldr	r7, [r5, #0]
 8009478:	210b      	movs	r1, #11
 800947a:	4249      	negs	r1, r1
 800947c:	468c      	mov	ip, r1
 800947e:	449c      	add	ip, r3
 8009480:	2b0b      	cmp	r3, #11
 8009482:	d010      	beq.n	80094a6 <__b2d+0x8e>
 8009484:	4661      	mov	r1, ip
 8009486:	2320      	movs	r3, #32
 8009488:	408c      	lsls	r4, r1
 800948a:	1a5b      	subs	r3, r3, r1
 800948c:	0039      	movs	r1, r7
 800948e:	40d9      	lsrs	r1, r3
 8009490:	430c      	orrs	r4, r1
 8009492:	4322      	orrs	r2, r4
 8009494:	0011      	movs	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	42b5      	cmp	r5, r6
 800949a:	d901      	bls.n	80094a0 <__b2d+0x88>
 800949c:	3d04      	subs	r5, #4
 800949e:	682a      	ldr	r2, [r5, #0]
 80094a0:	4664      	mov	r4, ip
 80094a2:	40a7      	lsls	r7, r4
 80094a4:	e7dd      	b.n	8009462 <__b2d+0x4a>
 80094a6:	4322      	orrs	r2, r4
 80094a8:	0011      	movs	r1, r2
 80094aa:	e7dc      	b.n	8009466 <__b2d+0x4e>
 80094ac:	3ff00000 	.word	0x3ff00000

080094b0 <__d2b>:
 80094b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094b2:	2101      	movs	r1, #1
 80094b4:	0014      	movs	r4, r2
 80094b6:	001d      	movs	r5, r3
 80094b8:	9f08      	ldr	r7, [sp, #32]
 80094ba:	f7ff fc0b 	bl	8008cd4 <_Balloc>
 80094be:	1e06      	subs	r6, r0, #0
 80094c0:	d105      	bne.n	80094ce <__d2b+0x1e>
 80094c2:	0032      	movs	r2, r6
 80094c4:	4b24      	ldr	r3, [pc, #144]	; (8009558 <__d2b+0xa8>)
 80094c6:	4825      	ldr	r0, [pc, #148]	; (800955c <__d2b+0xac>)
 80094c8:	4925      	ldr	r1, [pc, #148]	; (8009560 <__d2b+0xb0>)
 80094ca:	f000 fb93 	bl	8009bf4 <__assert_func>
 80094ce:	032b      	lsls	r3, r5, #12
 80094d0:	006d      	lsls	r5, r5, #1
 80094d2:	0b1b      	lsrs	r3, r3, #12
 80094d4:	0d6d      	lsrs	r5, r5, #21
 80094d6:	d125      	bne.n	8009524 <__d2b+0x74>
 80094d8:	9301      	str	r3, [sp, #4]
 80094da:	2c00      	cmp	r4, #0
 80094dc:	d028      	beq.n	8009530 <__d2b+0x80>
 80094de:	4668      	mov	r0, sp
 80094e0:	9400      	str	r4, [sp, #0]
 80094e2:	f7ff fd09 	bl	8008ef8 <__lo0bits>
 80094e6:	9b01      	ldr	r3, [sp, #4]
 80094e8:	9900      	ldr	r1, [sp, #0]
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d01e      	beq.n	800952c <__d2b+0x7c>
 80094ee:	2220      	movs	r2, #32
 80094f0:	001c      	movs	r4, r3
 80094f2:	1a12      	subs	r2, r2, r0
 80094f4:	4094      	lsls	r4, r2
 80094f6:	0022      	movs	r2, r4
 80094f8:	40c3      	lsrs	r3, r0
 80094fa:	430a      	orrs	r2, r1
 80094fc:	6172      	str	r2, [r6, #20]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	9c01      	ldr	r4, [sp, #4]
 8009502:	61b4      	str	r4, [r6, #24]
 8009504:	1e63      	subs	r3, r4, #1
 8009506:	419c      	sbcs	r4, r3
 8009508:	3401      	adds	r4, #1
 800950a:	6134      	str	r4, [r6, #16]
 800950c:	2d00      	cmp	r5, #0
 800950e:	d017      	beq.n	8009540 <__d2b+0x90>
 8009510:	2435      	movs	r4, #53	; 0x35
 8009512:	4b14      	ldr	r3, [pc, #80]	; (8009564 <__d2b+0xb4>)
 8009514:	18ed      	adds	r5, r5, r3
 8009516:	182d      	adds	r5, r5, r0
 8009518:	603d      	str	r5, [r7, #0]
 800951a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951c:	1a24      	subs	r4, r4, r0
 800951e:	601c      	str	r4, [r3, #0]
 8009520:	0030      	movs	r0, r6
 8009522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009524:	2280      	movs	r2, #128	; 0x80
 8009526:	0352      	lsls	r2, r2, #13
 8009528:	4313      	orrs	r3, r2
 800952a:	e7d5      	b.n	80094d8 <__d2b+0x28>
 800952c:	6171      	str	r1, [r6, #20]
 800952e:	e7e7      	b.n	8009500 <__d2b+0x50>
 8009530:	a801      	add	r0, sp, #4
 8009532:	f7ff fce1 	bl	8008ef8 <__lo0bits>
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	2401      	movs	r4, #1
 800953a:	6173      	str	r3, [r6, #20]
 800953c:	3020      	adds	r0, #32
 800953e:	e7e4      	b.n	800950a <__d2b+0x5a>
 8009540:	4b09      	ldr	r3, [pc, #36]	; (8009568 <__d2b+0xb8>)
 8009542:	18c0      	adds	r0, r0, r3
 8009544:	4b09      	ldr	r3, [pc, #36]	; (800956c <__d2b+0xbc>)
 8009546:	6038      	str	r0, [r7, #0]
 8009548:	18e3      	adds	r3, r4, r3
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	18f3      	adds	r3, r6, r3
 800954e:	6958      	ldr	r0, [r3, #20]
 8009550:	f7ff fcb8 	bl	8008ec4 <__hi0bits>
 8009554:	0164      	lsls	r4, r4, #5
 8009556:	e7e0      	b.n	800951a <__d2b+0x6a>
 8009558:	0800a555 	.word	0x0800a555
 800955c:	0800a5c6 	.word	0x0800a5c6
 8009560:	0000030f 	.word	0x0000030f
 8009564:	fffffbcd 	.word	0xfffffbcd
 8009568:	fffffbce 	.word	0xfffffbce
 800956c:	3fffffff 	.word	0x3fffffff

08009570 <__ratio>:
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	b087      	sub	sp, #28
 8009574:	000f      	movs	r7, r1
 8009576:	a904      	add	r1, sp, #16
 8009578:	0006      	movs	r6, r0
 800957a:	f7ff ff4d 	bl	8009418 <__b2d>
 800957e:	9000      	str	r0, [sp, #0]
 8009580:	9101      	str	r1, [sp, #4]
 8009582:	9c00      	ldr	r4, [sp, #0]
 8009584:	9d01      	ldr	r5, [sp, #4]
 8009586:	0038      	movs	r0, r7
 8009588:	a905      	add	r1, sp, #20
 800958a:	f7ff ff45 	bl	8009418 <__b2d>
 800958e:	9002      	str	r0, [sp, #8]
 8009590:	9103      	str	r1, [sp, #12]
 8009592:	9a02      	ldr	r2, [sp, #8]
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	6930      	ldr	r0, [r6, #16]
 8009598:	6939      	ldr	r1, [r7, #16]
 800959a:	9e04      	ldr	r6, [sp, #16]
 800959c:	1a40      	subs	r0, r0, r1
 800959e:	9905      	ldr	r1, [sp, #20]
 80095a0:	0140      	lsls	r0, r0, #5
 80095a2:	1a71      	subs	r1, r6, r1
 80095a4:	1841      	adds	r1, r0, r1
 80095a6:	0508      	lsls	r0, r1, #20
 80095a8:	2900      	cmp	r1, #0
 80095aa:	dd07      	ble.n	80095bc <__ratio+0x4c>
 80095ac:	9901      	ldr	r1, [sp, #4]
 80095ae:	1845      	adds	r5, r0, r1
 80095b0:	0020      	movs	r0, r4
 80095b2:	0029      	movs	r1, r5
 80095b4:	f7f7 fc32 	bl	8000e1c <__aeabi_ddiv>
 80095b8:	b007      	add	sp, #28
 80095ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095bc:	9903      	ldr	r1, [sp, #12]
 80095be:	1a0b      	subs	r3, r1, r0
 80095c0:	e7f6      	b.n	80095b0 <__ratio+0x40>

080095c2 <__copybits>:
 80095c2:	b570      	push	{r4, r5, r6, lr}
 80095c4:	0014      	movs	r4, r2
 80095c6:	0005      	movs	r5, r0
 80095c8:	3901      	subs	r1, #1
 80095ca:	6913      	ldr	r3, [r2, #16]
 80095cc:	1149      	asrs	r1, r1, #5
 80095ce:	3101      	adds	r1, #1
 80095d0:	0089      	lsls	r1, r1, #2
 80095d2:	3414      	adds	r4, #20
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	1841      	adds	r1, r0, r1
 80095d8:	18e3      	adds	r3, r4, r3
 80095da:	42a3      	cmp	r3, r4
 80095dc:	d80d      	bhi.n	80095fa <__copybits+0x38>
 80095de:	0014      	movs	r4, r2
 80095e0:	3411      	adds	r4, #17
 80095e2:	2500      	movs	r5, #0
 80095e4:	429c      	cmp	r4, r3
 80095e6:	d803      	bhi.n	80095f0 <__copybits+0x2e>
 80095e8:	1a9b      	subs	r3, r3, r2
 80095ea:	3b11      	subs	r3, #17
 80095ec:	089b      	lsrs	r3, r3, #2
 80095ee:	009d      	lsls	r5, r3, #2
 80095f0:	2300      	movs	r3, #0
 80095f2:	1940      	adds	r0, r0, r5
 80095f4:	4281      	cmp	r1, r0
 80095f6:	d803      	bhi.n	8009600 <__copybits+0x3e>
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	cc40      	ldmia	r4!, {r6}
 80095fc:	c540      	stmia	r5!, {r6}
 80095fe:	e7ec      	b.n	80095da <__copybits+0x18>
 8009600:	c008      	stmia	r0!, {r3}
 8009602:	e7f7      	b.n	80095f4 <__copybits+0x32>

08009604 <__any_on>:
 8009604:	0002      	movs	r2, r0
 8009606:	6900      	ldr	r0, [r0, #16]
 8009608:	b510      	push	{r4, lr}
 800960a:	3214      	adds	r2, #20
 800960c:	114b      	asrs	r3, r1, #5
 800960e:	4298      	cmp	r0, r3
 8009610:	db13      	blt.n	800963a <__any_on+0x36>
 8009612:	dd0c      	ble.n	800962e <__any_on+0x2a>
 8009614:	241f      	movs	r4, #31
 8009616:	0008      	movs	r0, r1
 8009618:	4020      	ands	r0, r4
 800961a:	4221      	tst	r1, r4
 800961c:	d007      	beq.n	800962e <__any_on+0x2a>
 800961e:	0099      	lsls	r1, r3, #2
 8009620:	588c      	ldr	r4, [r1, r2]
 8009622:	0021      	movs	r1, r4
 8009624:	40c1      	lsrs	r1, r0
 8009626:	4081      	lsls	r1, r0
 8009628:	2001      	movs	r0, #1
 800962a:	428c      	cmp	r4, r1
 800962c:	d104      	bne.n	8009638 <__any_on+0x34>
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	18d3      	adds	r3, r2, r3
 8009632:	4293      	cmp	r3, r2
 8009634:	d803      	bhi.n	800963e <__any_on+0x3a>
 8009636:	2000      	movs	r0, #0
 8009638:	bd10      	pop	{r4, pc}
 800963a:	0003      	movs	r3, r0
 800963c:	e7f7      	b.n	800962e <__any_on+0x2a>
 800963e:	3b04      	subs	r3, #4
 8009640:	6819      	ldr	r1, [r3, #0]
 8009642:	2900      	cmp	r1, #0
 8009644:	d0f5      	beq.n	8009632 <__any_on+0x2e>
 8009646:	2001      	movs	r0, #1
 8009648:	e7f6      	b.n	8009638 <__any_on+0x34>
	...

0800964c <_strtol_l.constprop.0>:
 800964c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800964e:	b087      	sub	sp, #28
 8009650:	001e      	movs	r6, r3
 8009652:	9005      	str	r0, [sp, #20]
 8009654:	9101      	str	r1, [sp, #4]
 8009656:	9202      	str	r2, [sp, #8]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d048      	beq.n	80096ee <_strtol_l.constprop.0+0xa2>
 800965c:	000b      	movs	r3, r1
 800965e:	2e24      	cmp	r6, #36	; 0x24
 8009660:	d845      	bhi.n	80096ee <_strtol_l.constprop.0+0xa2>
 8009662:	4a3b      	ldr	r2, [pc, #236]	; (8009750 <_strtol_l.constprop.0+0x104>)
 8009664:	2108      	movs	r1, #8
 8009666:	4694      	mov	ip, r2
 8009668:	001a      	movs	r2, r3
 800966a:	4660      	mov	r0, ip
 800966c:	7814      	ldrb	r4, [r2, #0]
 800966e:	3301      	adds	r3, #1
 8009670:	5d00      	ldrb	r0, [r0, r4]
 8009672:	001d      	movs	r5, r3
 8009674:	0007      	movs	r7, r0
 8009676:	400f      	ands	r7, r1
 8009678:	4208      	tst	r0, r1
 800967a:	d1f5      	bne.n	8009668 <_strtol_l.constprop.0+0x1c>
 800967c:	2c2d      	cmp	r4, #45	; 0x2d
 800967e:	d13d      	bne.n	80096fc <_strtol_l.constprop.0+0xb0>
 8009680:	2701      	movs	r7, #1
 8009682:	781c      	ldrb	r4, [r3, #0]
 8009684:	1c95      	adds	r5, r2, #2
 8009686:	2e00      	cmp	r6, #0
 8009688:	d05e      	beq.n	8009748 <_strtol_l.constprop.0+0xfc>
 800968a:	2e10      	cmp	r6, #16
 800968c:	d109      	bne.n	80096a2 <_strtol_l.constprop.0+0x56>
 800968e:	2c30      	cmp	r4, #48	; 0x30
 8009690:	d107      	bne.n	80096a2 <_strtol_l.constprop.0+0x56>
 8009692:	2220      	movs	r2, #32
 8009694:	782b      	ldrb	r3, [r5, #0]
 8009696:	4393      	bics	r3, r2
 8009698:	2b58      	cmp	r3, #88	; 0x58
 800969a:	d150      	bne.n	800973e <_strtol_l.constprop.0+0xf2>
 800969c:	2610      	movs	r6, #16
 800969e:	786c      	ldrb	r4, [r5, #1]
 80096a0:	3502      	adds	r5, #2
 80096a2:	4b2c      	ldr	r3, [pc, #176]	; (8009754 <_strtol_l.constprop.0+0x108>)
 80096a4:	0031      	movs	r1, r6
 80096a6:	18fb      	adds	r3, r7, r3
 80096a8:	0018      	movs	r0, r3
 80096aa:	9303      	str	r3, [sp, #12]
 80096ac:	f7f6 fdcc 	bl	8000248 <__aeabi_uidivmod>
 80096b0:	2200      	movs	r2, #0
 80096b2:	9104      	str	r1, [sp, #16]
 80096b4:	2101      	movs	r1, #1
 80096b6:	4684      	mov	ip, r0
 80096b8:	0010      	movs	r0, r2
 80096ba:	4249      	negs	r1, r1
 80096bc:	0023      	movs	r3, r4
 80096be:	3b30      	subs	r3, #48	; 0x30
 80096c0:	2b09      	cmp	r3, #9
 80096c2:	d903      	bls.n	80096cc <_strtol_l.constprop.0+0x80>
 80096c4:	3b11      	subs	r3, #17
 80096c6:	2b19      	cmp	r3, #25
 80096c8:	d81d      	bhi.n	8009706 <_strtol_l.constprop.0+0xba>
 80096ca:	330a      	adds	r3, #10
 80096cc:	429e      	cmp	r6, r3
 80096ce:	dd1e      	ble.n	800970e <_strtol_l.constprop.0+0xc2>
 80096d0:	1c54      	adds	r4, r2, #1
 80096d2:	d009      	beq.n	80096e8 <_strtol_l.constprop.0+0x9c>
 80096d4:	000a      	movs	r2, r1
 80096d6:	4584      	cmp	ip, r0
 80096d8:	d306      	bcc.n	80096e8 <_strtol_l.constprop.0+0x9c>
 80096da:	d102      	bne.n	80096e2 <_strtol_l.constprop.0+0x96>
 80096dc:	9c04      	ldr	r4, [sp, #16]
 80096de:	429c      	cmp	r4, r3
 80096e0:	db02      	blt.n	80096e8 <_strtol_l.constprop.0+0x9c>
 80096e2:	2201      	movs	r2, #1
 80096e4:	4370      	muls	r0, r6
 80096e6:	1818      	adds	r0, r3, r0
 80096e8:	782c      	ldrb	r4, [r5, #0]
 80096ea:	3501      	adds	r5, #1
 80096ec:	e7e6      	b.n	80096bc <_strtol_l.constprop.0+0x70>
 80096ee:	f7fd ff91 	bl	8007614 <__errno>
 80096f2:	2316      	movs	r3, #22
 80096f4:	6003      	str	r3, [r0, #0]
 80096f6:	2000      	movs	r0, #0
 80096f8:	b007      	add	sp, #28
 80096fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fc:	2c2b      	cmp	r4, #43	; 0x2b
 80096fe:	d1c2      	bne.n	8009686 <_strtol_l.constprop.0+0x3a>
 8009700:	781c      	ldrb	r4, [r3, #0]
 8009702:	1c95      	adds	r5, r2, #2
 8009704:	e7bf      	b.n	8009686 <_strtol_l.constprop.0+0x3a>
 8009706:	0023      	movs	r3, r4
 8009708:	3b61      	subs	r3, #97	; 0x61
 800970a:	2b19      	cmp	r3, #25
 800970c:	d9dd      	bls.n	80096ca <_strtol_l.constprop.0+0x7e>
 800970e:	1c53      	adds	r3, r2, #1
 8009710:	d109      	bne.n	8009726 <_strtol_l.constprop.0+0xda>
 8009712:	2322      	movs	r3, #34	; 0x22
 8009714:	9a05      	ldr	r2, [sp, #20]
 8009716:	9803      	ldr	r0, [sp, #12]
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	9b02      	ldr	r3, [sp, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0eb      	beq.n	80096f8 <_strtol_l.constprop.0+0xac>
 8009720:	1e6b      	subs	r3, r5, #1
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	e007      	b.n	8009736 <_strtol_l.constprop.0+0xea>
 8009726:	2f00      	cmp	r7, #0
 8009728:	d000      	beq.n	800972c <_strtol_l.constprop.0+0xe0>
 800972a:	4240      	negs	r0, r0
 800972c:	9b02      	ldr	r3, [sp, #8]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d0e2      	beq.n	80096f8 <_strtol_l.constprop.0+0xac>
 8009732:	2a00      	cmp	r2, #0
 8009734:	d1f4      	bne.n	8009720 <_strtol_l.constprop.0+0xd4>
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	601a      	str	r2, [r3, #0]
 800973c:	e7dc      	b.n	80096f8 <_strtol_l.constprop.0+0xac>
 800973e:	2430      	movs	r4, #48	; 0x30
 8009740:	2e00      	cmp	r6, #0
 8009742:	d1ae      	bne.n	80096a2 <_strtol_l.constprop.0+0x56>
 8009744:	3608      	adds	r6, #8
 8009746:	e7ac      	b.n	80096a2 <_strtol_l.constprop.0+0x56>
 8009748:	2c30      	cmp	r4, #48	; 0x30
 800974a:	d0a2      	beq.n	8009692 <_strtol_l.constprop.0+0x46>
 800974c:	260a      	movs	r6, #10
 800974e:	e7a8      	b.n	80096a2 <_strtol_l.constprop.0+0x56>
 8009750:	0800a71d 	.word	0x0800a71d
 8009754:	7fffffff 	.word	0x7fffffff

08009758 <_strtol_r>:
 8009758:	b510      	push	{r4, lr}
 800975a:	f7ff ff77 	bl	800964c <_strtol_l.constprop.0>
 800975e:	bd10      	pop	{r4, pc}

08009760 <__ascii_wctomb>:
 8009760:	0003      	movs	r3, r0
 8009762:	1e08      	subs	r0, r1, #0
 8009764:	d005      	beq.n	8009772 <__ascii_wctomb+0x12>
 8009766:	2aff      	cmp	r2, #255	; 0xff
 8009768:	d904      	bls.n	8009774 <__ascii_wctomb+0x14>
 800976a:	228a      	movs	r2, #138	; 0x8a
 800976c:	2001      	movs	r0, #1
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	4240      	negs	r0, r0
 8009772:	4770      	bx	lr
 8009774:	2001      	movs	r0, #1
 8009776:	700a      	strb	r2, [r1, #0]
 8009778:	e7fb      	b.n	8009772 <__ascii_wctomb+0x12>
	...

0800977c <__ssputs_r>:
 800977c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800977e:	b085      	sub	sp, #20
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	9203      	str	r2, [sp, #12]
 8009784:	688e      	ldr	r6, [r1, #8]
 8009786:	9a01      	ldr	r2, [sp, #4]
 8009788:	0007      	movs	r7, r0
 800978a:	000c      	movs	r4, r1
 800978c:	680b      	ldr	r3, [r1, #0]
 800978e:	4296      	cmp	r6, r2
 8009790:	d831      	bhi.n	80097f6 <__ssputs_r+0x7a>
 8009792:	898a      	ldrh	r2, [r1, #12]
 8009794:	2190      	movs	r1, #144	; 0x90
 8009796:	00c9      	lsls	r1, r1, #3
 8009798:	420a      	tst	r2, r1
 800979a:	d029      	beq.n	80097f0 <__ssputs_r+0x74>
 800979c:	2003      	movs	r0, #3
 800979e:	6921      	ldr	r1, [r4, #16]
 80097a0:	1a5b      	subs	r3, r3, r1
 80097a2:	9302      	str	r3, [sp, #8]
 80097a4:	6963      	ldr	r3, [r4, #20]
 80097a6:	4343      	muls	r3, r0
 80097a8:	0fdd      	lsrs	r5, r3, #31
 80097aa:	18ed      	adds	r5, r5, r3
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	9802      	ldr	r0, [sp, #8]
 80097b0:	3301      	adds	r3, #1
 80097b2:	181b      	adds	r3, r3, r0
 80097b4:	106d      	asrs	r5, r5, #1
 80097b6:	42ab      	cmp	r3, r5
 80097b8:	d900      	bls.n	80097bc <__ssputs_r+0x40>
 80097ba:	001d      	movs	r5, r3
 80097bc:	0552      	lsls	r2, r2, #21
 80097be:	d529      	bpl.n	8009814 <__ssputs_r+0x98>
 80097c0:	0029      	movs	r1, r5
 80097c2:	0038      	movs	r0, r7
 80097c4:	f7ff f9e2 	bl	8008b8c <_malloc_r>
 80097c8:	1e06      	subs	r6, r0, #0
 80097ca:	d02d      	beq.n	8009828 <__ssputs_r+0xac>
 80097cc:	9a02      	ldr	r2, [sp, #8]
 80097ce:	6921      	ldr	r1, [r4, #16]
 80097d0:	f7fd ff58 	bl	8007684 <memcpy>
 80097d4:	89a2      	ldrh	r2, [r4, #12]
 80097d6:	4b19      	ldr	r3, [pc, #100]	; (800983c <__ssputs_r+0xc0>)
 80097d8:	401a      	ands	r2, r3
 80097da:	2380      	movs	r3, #128	; 0x80
 80097dc:	4313      	orrs	r3, r2
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	9b02      	ldr	r3, [sp, #8]
 80097e2:	6126      	str	r6, [r4, #16]
 80097e4:	18f6      	adds	r6, r6, r3
 80097e6:	6026      	str	r6, [r4, #0]
 80097e8:	6165      	str	r5, [r4, #20]
 80097ea:	9e01      	ldr	r6, [sp, #4]
 80097ec:	1aed      	subs	r5, r5, r3
 80097ee:	60a5      	str	r5, [r4, #8]
 80097f0:	9b01      	ldr	r3, [sp, #4]
 80097f2:	429e      	cmp	r6, r3
 80097f4:	d900      	bls.n	80097f8 <__ssputs_r+0x7c>
 80097f6:	9e01      	ldr	r6, [sp, #4]
 80097f8:	0032      	movs	r2, r6
 80097fa:	9903      	ldr	r1, [sp, #12]
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	f000 f9d4 	bl	8009baa <memmove>
 8009802:	2000      	movs	r0, #0
 8009804:	68a3      	ldr	r3, [r4, #8]
 8009806:	1b9b      	subs	r3, r3, r6
 8009808:	60a3      	str	r3, [r4, #8]
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	199b      	adds	r3, r3, r6
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	b005      	add	sp, #20
 8009812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009814:	002a      	movs	r2, r5
 8009816:	0038      	movs	r0, r7
 8009818:	f000 fa37 	bl	8009c8a <_realloc_r>
 800981c:	1e06      	subs	r6, r0, #0
 800981e:	d1df      	bne.n	80097e0 <__ssputs_r+0x64>
 8009820:	0038      	movs	r0, r7
 8009822:	6921      	ldr	r1, [r4, #16]
 8009824:	f7fe fde0 	bl	80083e8 <_free_r>
 8009828:	230c      	movs	r3, #12
 800982a:	2001      	movs	r0, #1
 800982c:	603b      	str	r3, [r7, #0]
 800982e:	89a2      	ldrh	r2, [r4, #12]
 8009830:	3334      	adds	r3, #52	; 0x34
 8009832:	4313      	orrs	r3, r2
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	4240      	negs	r0, r0
 8009838:	e7ea      	b.n	8009810 <__ssputs_r+0x94>
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	fffffb7f 	.word	0xfffffb7f

08009840 <_svfiprintf_r>:
 8009840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009842:	b0a1      	sub	sp, #132	; 0x84
 8009844:	9003      	str	r0, [sp, #12]
 8009846:	001d      	movs	r5, r3
 8009848:	898b      	ldrh	r3, [r1, #12]
 800984a:	000f      	movs	r7, r1
 800984c:	0016      	movs	r6, r2
 800984e:	061b      	lsls	r3, r3, #24
 8009850:	d511      	bpl.n	8009876 <_svfiprintf_r+0x36>
 8009852:	690b      	ldr	r3, [r1, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10e      	bne.n	8009876 <_svfiprintf_r+0x36>
 8009858:	2140      	movs	r1, #64	; 0x40
 800985a:	f7ff f997 	bl	8008b8c <_malloc_r>
 800985e:	6038      	str	r0, [r7, #0]
 8009860:	6138      	str	r0, [r7, #16]
 8009862:	2800      	cmp	r0, #0
 8009864:	d105      	bne.n	8009872 <_svfiprintf_r+0x32>
 8009866:	230c      	movs	r3, #12
 8009868:	9a03      	ldr	r2, [sp, #12]
 800986a:	3801      	subs	r0, #1
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	b021      	add	sp, #132	; 0x84
 8009870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009872:	2340      	movs	r3, #64	; 0x40
 8009874:	617b      	str	r3, [r7, #20]
 8009876:	2300      	movs	r3, #0
 8009878:	ac08      	add	r4, sp, #32
 800987a:	6163      	str	r3, [r4, #20]
 800987c:	3320      	adds	r3, #32
 800987e:	7663      	strb	r3, [r4, #25]
 8009880:	3310      	adds	r3, #16
 8009882:	76a3      	strb	r3, [r4, #26]
 8009884:	9507      	str	r5, [sp, #28]
 8009886:	0035      	movs	r5, r6
 8009888:	782b      	ldrb	r3, [r5, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <_svfiprintf_r+0x52>
 800988e:	2b25      	cmp	r3, #37	; 0x25
 8009890:	d148      	bne.n	8009924 <_svfiprintf_r+0xe4>
 8009892:	1bab      	subs	r3, r5, r6
 8009894:	9305      	str	r3, [sp, #20]
 8009896:	42b5      	cmp	r5, r6
 8009898:	d00b      	beq.n	80098b2 <_svfiprintf_r+0x72>
 800989a:	0032      	movs	r2, r6
 800989c:	0039      	movs	r1, r7
 800989e:	9803      	ldr	r0, [sp, #12]
 80098a0:	f7ff ff6c 	bl	800977c <__ssputs_r>
 80098a4:	3001      	adds	r0, #1
 80098a6:	d100      	bne.n	80098aa <_svfiprintf_r+0x6a>
 80098a8:	e0af      	b.n	8009a0a <_svfiprintf_r+0x1ca>
 80098aa:	6963      	ldr	r3, [r4, #20]
 80098ac:	9a05      	ldr	r2, [sp, #20]
 80098ae:	189b      	adds	r3, r3, r2
 80098b0:	6163      	str	r3, [r4, #20]
 80098b2:	782b      	ldrb	r3, [r5, #0]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d100      	bne.n	80098ba <_svfiprintf_r+0x7a>
 80098b8:	e0a7      	b.n	8009a0a <_svfiprintf_r+0x1ca>
 80098ba:	2201      	movs	r2, #1
 80098bc:	2300      	movs	r3, #0
 80098be:	4252      	negs	r2, r2
 80098c0:	6062      	str	r2, [r4, #4]
 80098c2:	a904      	add	r1, sp, #16
 80098c4:	3254      	adds	r2, #84	; 0x54
 80098c6:	1852      	adds	r2, r2, r1
 80098c8:	1c6e      	adds	r6, r5, #1
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	60e3      	str	r3, [r4, #12]
 80098ce:	60a3      	str	r3, [r4, #8]
 80098d0:	7013      	strb	r3, [r2, #0]
 80098d2:	65a3      	str	r3, [r4, #88]	; 0x58
 80098d4:	4b55      	ldr	r3, [pc, #340]	; (8009a2c <_svfiprintf_r+0x1ec>)
 80098d6:	2205      	movs	r2, #5
 80098d8:	0018      	movs	r0, r3
 80098da:	7831      	ldrb	r1, [r6, #0]
 80098dc:	9305      	str	r3, [sp, #20]
 80098de:	f7fd fec6 	bl	800766e <memchr>
 80098e2:	1c75      	adds	r5, r6, #1
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d11f      	bne.n	8009928 <_svfiprintf_r+0xe8>
 80098e8:	6822      	ldr	r2, [r4, #0]
 80098ea:	06d3      	lsls	r3, r2, #27
 80098ec:	d504      	bpl.n	80098f8 <_svfiprintf_r+0xb8>
 80098ee:	2353      	movs	r3, #83	; 0x53
 80098f0:	a904      	add	r1, sp, #16
 80098f2:	185b      	adds	r3, r3, r1
 80098f4:	2120      	movs	r1, #32
 80098f6:	7019      	strb	r1, [r3, #0]
 80098f8:	0713      	lsls	r3, r2, #28
 80098fa:	d504      	bpl.n	8009906 <_svfiprintf_r+0xc6>
 80098fc:	2353      	movs	r3, #83	; 0x53
 80098fe:	a904      	add	r1, sp, #16
 8009900:	185b      	adds	r3, r3, r1
 8009902:	212b      	movs	r1, #43	; 0x2b
 8009904:	7019      	strb	r1, [r3, #0]
 8009906:	7833      	ldrb	r3, [r6, #0]
 8009908:	2b2a      	cmp	r3, #42	; 0x2a
 800990a:	d016      	beq.n	800993a <_svfiprintf_r+0xfa>
 800990c:	0035      	movs	r5, r6
 800990e:	2100      	movs	r1, #0
 8009910:	200a      	movs	r0, #10
 8009912:	68e3      	ldr	r3, [r4, #12]
 8009914:	782a      	ldrb	r2, [r5, #0]
 8009916:	1c6e      	adds	r6, r5, #1
 8009918:	3a30      	subs	r2, #48	; 0x30
 800991a:	2a09      	cmp	r2, #9
 800991c:	d94e      	bls.n	80099bc <_svfiprintf_r+0x17c>
 800991e:	2900      	cmp	r1, #0
 8009920:	d111      	bne.n	8009946 <_svfiprintf_r+0x106>
 8009922:	e017      	b.n	8009954 <_svfiprintf_r+0x114>
 8009924:	3501      	adds	r5, #1
 8009926:	e7af      	b.n	8009888 <_svfiprintf_r+0x48>
 8009928:	9b05      	ldr	r3, [sp, #20]
 800992a:	6822      	ldr	r2, [r4, #0]
 800992c:	1ac0      	subs	r0, r0, r3
 800992e:	2301      	movs	r3, #1
 8009930:	4083      	lsls	r3, r0
 8009932:	4313      	orrs	r3, r2
 8009934:	002e      	movs	r6, r5
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	e7cc      	b.n	80098d4 <_svfiprintf_r+0x94>
 800993a:	9b07      	ldr	r3, [sp, #28]
 800993c:	1d19      	adds	r1, r3, #4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	9107      	str	r1, [sp, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	db01      	blt.n	800994a <_svfiprintf_r+0x10a>
 8009946:	930b      	str	r3, [sp, #44]	; 0x2c
 8009948:	e004      	b.n	8009954 <_svfiprintf_r+0x114>
 800994a:	425b      	negs	r3, r3
 800994c:	60e3      	str	r3, [r4, #12]
 800994e:	2302      	movs	r3, #2
 8009950:	4313      	orrs	r3, r2
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	782b      	ldrb	r3, [r5, #0]
 8009956:	2b2e      	cmp	r3, #46	; 0x2e
 8009958:	d10a      	bne.n	8009970 <_svfiprintf_r+0x130>
 800995a:	786b      	ldrb	r3, [r5, #1]
 800995c:	2b2a      	cmp	r3, #42	; 0x2a
 800995e:	d135      	bne.n	80099cc <_svfiprintf_r+0x18c>
 8009960:	9b07      	ldr	r3, [sp, #28]
 8009962:	3502      	adds	r5, #2
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	9207      	str	r2, [sp, #28]
 800996a:	2b00      	cmp	r3, #0
 800996c:	db2b      	blt.n	80099c6 <_svfiprintf_r+0x186>
 800996e:	9309      	str	r3, [sp, #36]	; 0x24
 8009970:	4e2f      	ldr	r6, [pc, #188]	; (8009a30 <_svfiprintf_r+0x1f0>)
 8009972:	2203      	movs	r2, #3
 8009974:	0030      	movs	r0, r6
 8009976:	7829      	ldrb	r1, [r5, #0]
 8009978:	f7fd fe79 	bl	800766e <memchr>
 800997c:	2800      	cmp	r0, #0
 800997e:	d006      	beq.n	800998e <_svfiprintf_r+0x14e>
 8009980:	2340      	movs	r3, #64	; 0x40
 8009982:	1b80      	subs	r0, r0, r6
 8009984:	4083      	lsls	r3, r0
 8009986:	6822      	ldr	r2, [r4, #0]
 8009988:	3501      	adds	r5, #1
 800998a:	4313      	orrs	r3, r2
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	7829      	ldrb	r1, [r5, #0]
 8009990:	2206      	movs	r2, #6
 8009992:	4828      	ldr	r0, [pc, #160]	; (8009a34 <_svfiprintf_r+0x1f4>)
 8009994:	1c6e      	adds	r6, r5, #1
 8009996:	7621      	strb	r1, [r4, #24]
 8009998:	f7fd fe69 	bl	800766e <memchr>
 800999c:	2800      	cmp	r0, #0
 800999e:	d03c      	beq.n	8009a1a <_svfiprintf_r+0x1da>
 80099a0:	4b25      	ldr	r3, [pc, #148]	; (8009a38 <_svfiprintf_r+0x1f8>)
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d125      	bne.n	80099f2 <_svfiprintf_r+0x1b2>
 80099a6:	2207      	movs	r2, #7
 80099a8:	9b07      	ldr	r3, [sp, #28]
 80099aa:	3307      	adds	r3, #7
 80099ac:	4393      	bics	r3, r2
 80099ae:	3308      	adds	r3, #8
 80099b0:	9307      	str	r3, [sp, #28]
 80099b2:	6963      	ldr	r3, [r4, #20]
 80099b4:	9a04      	ldr	r2, [sp, #16]
 80099b6:	189b      	adds	r3, r3, r2
 80099b8:	6163      	str	r3, [r4, #20]
 80099ba:	e764      	b.n	8009886 <_svfiprintf_r+0x46>
 80099bc:	4343      	muls	r3, r0
 80099be:	0035      	movs	r5, r6
 80099c0:	2101      	movs	r1, #1
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	e7a6      	b.n	8009914 <_svfiprintf_r+0xd4>
 80099c6:	2301      	movs	r3, #1
 80099c8:	425b      	negs	r3, r3
 80099ca:	e7d0      	b.n	800996e <_svfiprintf_r+0x12e>
 80099cc:	2300      	movs	r3, #0
 80099ce:	200a      	movs	r0, #10
 80099d0:	001a      	movs	r2, r3
 80099d2:	3501      	adds	r5, #1
 80099d4:	6063      	str	r3, [r4, #4]
 80099d6:	7829      	ldrb	r1, [r5, #0]
 80099d8:	1c6e      	adds	r6, r5, #1
 80099da:	3930      	subs	r1, #48	; 0x30
 80099dc:	2909      	cmp	r1, #9
 80099de:	d903      	bls.n	80099e8 <_svfiprintf_r+0x1a8>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d0c5      	beq.n	8009970 <_svfiprintf_r+0x130>
 80099e4:	9209      	str	r2, [sp, #36]	; 0x24
 80099e6:	e7c3      	b.n	8009970 <_svfiprintf_r+0x130>
 80099e8:	4342      	muls	r2, r0
 80099ea:	0035      	movs	r5, r6
 80099ec:	2301      	movs	r3, #1
 80099ee:	1852      	adds	r2, r2, r1
 80099f0:	e7f1      	b.n	80099d6 <_svfiprintf_r+0x196>
 80099f2:	aa07      	add	r2, sp, #28
 80099f4:	9200      	str	r2, [sp, #0]
 80099f6:	0021      	movs	r1, r4
 80099f8:	003a      	movs	r2, r7
 80099fa:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <_svfiprintf_r+0x1fc>)
 80099fc:	9803      	ldr	r0, [sp, #12]
 80099fe:	f7fc fe8f 	bl	8006720 <_printf_float>
 8009a02:	9004      	str	r0, [sp, #16]
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	3301      	adds	r3, #1
 8009a08:	d1d3      	bne.n	80099b2 <_svfiprintf_r+0x172>
 8009a0a:	89bb      	ldrh	r3, [r7, #12]
 8009a0c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009a0e:	065b      	lsls	r3, r3, #25
 8009a10:	d400      	bmi.n	8009a14 <_svfiprintf_r+0x1d4>
 8009a12:	e72c      	b.n	800986e <_svfiprintf_r+0x2e>
 8009a14:	2001      	movs	r0, #1
 8009a16:	4240      	negs	r0, r0
 8009a18:	e729      	b.n	800986e <_svfiprintf_r+0x2e>
 8009a1a:	aa07      	add	r2, sp, #28
 8009a1c:	9200      	str	r2, [sp, #0]
 8009a1e:	0021      	movs	r1, r4
 8009a20:	003a      	movs	r2, r7
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <_svfiprintf_r+0x1fc>)
 8009a24:	9803      	ldr	r0, [sp, #12]
 8009a26:	f7fd f941 	bl	8006cac <_printf_i>
 8009a2a:	e7ea      	b.n	8009a02 <_svfiprintf_r+0x1c2>
 8009a2c:	0800a81d 	.word	0x0800a81d
 8009a30:	0800a823 	.word	0x0800a823
 8009a34:	0800a827 	.word	0x0800a827
 8009a38:	08006721 	.word	0x08006721
 8009a3c:	0800977d 	.word	0x0800977d

08009a40 <__sflush_r>:
 8009a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a42:	898b      	ldrh	r3, [r1, #12]
 8009a44:	0005      	movs	r5, r0
 8009a46:	000c      	movs	r4, r1
 8009a48:	071a      	lsls	r2, r3, #28
 8009a4a:	d45c      	bmi.n	8009b06 <__sflush_r+0xc6>
 8009a4c:	684a      	ldr	r2, [r1, #4]
 8009a4e:	2a00      	cmp	r2, #0
 8009a50:	dc04      	bgt.n	8009a5c <__sflush_r+0x1c>
 8009a52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	dc01      	bgt.n	8009a5c <__sflush_r+0x1c>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009a5e:	2f00      	cmp	r7, #0
 8009a60:	d0fa      	beq.n	8009a58 <__sflush_r+0x18>
 8009a62:	2200      	movs	r2, #0
 8009a64:	2080      	movs	r0, #128	; 0x80
 8009a66:	682e      	ldr	r6, [r5, #0]
 8009a68:	602a      	str	r2, [r5, #0]
 8009a6a:	001a      	movs	r2, r3
 8009a6c:	0140      	lsls	r0, r0, #5
 8009a6e:	6a21      	ldr	r1, [r4, #32]
 8009a70:	4002      	ands	r2, r0
 8009a72:	4203      	tst	r3, r0
 8009a74:	d034      	beq.n	8009ae0 <__sflush_r+0xa0>
 8009a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	075b      	lsls	r3, r3, #29
 8009a7c:	d506      	bpl.n	8009a8c <__sflush_r+0x4c>
 8009a7e:	6863      	ldr	r3, [r4, #4]
 8009a80:	1ac0      	subs	r0, r0, r3
 8009a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <__sflush_r+0x4c>
 8009a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a8a:	1ac0      	subs	r0, r0, r3
 8009a8c:	0002      	movs	r2, r0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	0028      	movs	r0, r5
 8009a92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009a94:	6a21      	ldr	r1, [r4, #32]
 8009a96:	47b8      	blx	r7
 8009a98:	89a2      	ldrh	r2, [r4, #12]
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	d106      	bne.n	8009aac <__sflush_r+0x6c>
 8009a9e:	6829      	ldr	r1, [r5, #0]
 8009aa0:	291d      	cmp	r1, #29
 8009aa2:	d82c      	bhi.n	8009afe <__sflush_r+0xbe>
 8009aa4:	4b2a      	ldr	r3, [pc, #168]	; (8009b50 <__sflush_r+0x110>)
 8009aa6:	410b      	asrs	r3, r1
 8009aa8:	07db      	lsls	r3, r3, #31
 8009aaa:	d428      	bmi.n	8009afe <__sflush_r+0xbe>
 8009aac:	2300      	movs	r3, #0
 8009aae:	6063      	str	r3, [r4, #4]
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	6023      	str	r3, [r4, #0]
 8009ab4:	04d2      	lsls	r2, r2, #19
 8009ab6:	d505      	bpl.n	8009ac4 <__sflush_r+0x84>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <__sflush_r+0x82>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d100      	bne.n	8009ac4 <__sflush_r+0x84>
 8009ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ac6:	602e      	str	r6, [r5, #0]
 8009ac8:	2900      	cmp	r1, #0
 8009aca:	d0c5      	beq.n	8009a58 <__sflush_r+0x18>
 8009acc:	0023      	movs	r3, r4
 8009ace:	3344      	adds	r3, #68	; 0x44
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	d002      	beq.n	8009ada <__sflush_r+0x9a>
 8009ad4:	0028      	movs	r0, r5
 8009ad6:	f7fe fc87 	bl	80083e8 <_free_r>
 8009ada:	2000      	movs	r0, #0
 8009adc:	6360      	str	r0, [r4, #52]	; 0x34
 8009ade:	e7bc      	b.n	8009a5a <__sflush_r+0x1a>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	0028      	movs	r0, r5
 8009ae4:	47b8      	blx	r7
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	d1c6      	bne.n	8009a78 <__sflush_r+0x38>
 8009aea:	682b      	ldr	r3, [r5, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0c3      	beq.n	8009a78 <__sflush_r+0x38>
 8009af0:	2b1d      	cmp	r3, #29
 8009af2:	d001      	beq.n	8009af8 <__sflush_r+0xb8>
 8009af4:	2b16      	cmp	r3, #22
 8009af6:	d101      	bne.n	8009afc <__sflush_r+0xbc>
 8009af8:	602e      	str	r6, [r5, #0]
 8009afa:	e7ad      	b.n	8009a58 <__sflush_r+0x18>
 8009afc:	89a2      	ldrh	r2, [r4, #12]
 8009afe:	2340      	movs	r3, #64	; 0x40
 8009b00:	4313      	orrs	r3, r2
 8009b02:	81a3      	strh	r3, [r4, #12]
 8009b04:	e7a9      	b.n	8009a5a <__sflush_r+0x1a>
 8009b06:	690e      	ldr	r6, [r1, #16]
 8009b08:	2e00      	cmp	r6, #0
 8009b0a:	d0a5      	beq.n	8009a58 <__sflush_r+0x18>
 8009b0c:	680f      	ldr	r7, [r1, #0]
 8009b0e:	600e      	str	r6, [r1, #0]
 8009b10:	1bba      	subs	r2, r7, r6
 8009b12:	9201      	str	r2, [sp, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	079b      	lsls	r3, r3, #30
 8009b18:	d100      	bne.n	8009b1c <__sflush_r+0xdc>
 8009b1a:	694a      	ldr	r2, [r1, #20]
 8009b1c:	60a2      	str	r2, [r4, #8]
 8009b1e:	9b01      	ldr	r3, [sp, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	dd99      	ble.n	8009a58 <__sflush_r+0x18>
 8009b24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009b26:	0032      	movs	r2, r6
 8009b28:	001f      	movs	r7, r3
 8009b2a:	0028      	movs	r0, r5
 8009b2c:	9b01      	ldr	r3, [sp, #4]
 8009b2e:	6a21      	ldr	r1, [r4, #32]
 8009b30:	47b8      	blx	r7
 8009b32:	2800      	cmp	r0, #0
 8009b34:	dc06      	bgt.n	8009b44 <__sflush_r+0x104>
 8009b36:	2340      	movs	r3, #64	; 0x40
 8009b38:	2001      	movs	r0, #1
 8009b3a:	89a2      	ldrh	r2, [r4, #12]
 8009b3c:	4240      	negs	r0, r0
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	e78a      	b.n	8009a5a <__sflush_r+0x1a>
 8009b44:	9b01      	ldr	r3, [sp, #4]
 8009b46:	1836      	adds	r6, r6, r0
 8009b48:	1a1b      	subs	r3, r3, r0
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	e7e7      	b.n	8009b1e <__sflush_r+0xde>
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	dfbffffe 	.word	0xdfbffffe

08009b54 <_fflush_r>:
 8009b54:	690b      	ldr	r3, [r1, #16]
 8009b56:	b570      	push	{r4, r5, r6, lr}
 8009b58:	0005      	movs	r5, r0
 8009b5a:	000c      	movs	r4, r1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <_fflush_r+0x12>
 8009b60:	2500      	movs	r5, #0
 8009b62:	0028      	movs	r0, r5
 8009b64:	bd70      	pop	{r4, r5, r6, pc}
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d004      	beq.n	8009b74 <_fflush_r+0x20>
 8009b6a:	6a03      	ldr	r3, [r0, #32]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d101      	bne.n	8009b74 <_fflush_r+0x20>
 8009b70:	f7fd fc44 	bl	80073fc <__sinit>
 8009b74:	220c      	movs	r2, #12
 8009b76:	5ea3      	ldrsh	r3, [r4, r2]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d0f1      	beq.n	8009b60 <_fflush_r+0xc>
 8009b7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b7e:	07d2      	lsls	r2, r2, #31
 8009b80:	d404      	bmi.n	8009b8c <_fflush_r+0x38>
 8009b82:	059b      	lsls	r3, r3, #22
 8009b84:	d402      	bmi.n	8009b8c <_fflush_r+0x38>
 8009b86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b88:	f7fd fd6f 	bl	800766a <__retarget_lock_acquire_recursive>
 8009b8c:	0028      	movs	r0, r5
 8009b8e:	0021      	movs	r1, r4
 8009b90:	f7ff ff56 	bl	8009a40 <__sflush_r>
 8009b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b96:	0005      	movs	r5, r0
 8009b98:	07db      	lsls	r3, r3, #31
 8009b9a:	d4e2      	bmi.n	8009b62 <_fflush_r+0xe>
 8009b9c:	89a3      	ldrh	r3, [r4, #12]
 8009b9e:	059b      	lsls	r3, r3, #22
 8009ba0:	d4df      	bmi.n	8009b62 <_fflush_r+0xe>
 8009ba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ba4:	f7fd fd62 	bl	800766c <__retarget_lock_release_recursive>
 8009ba8:	e7db      	b.n	8009b62 <_fflush_r+0xe>

08009baa <memmove>:
 8009baa:	b510      	push	{r4, lr}
 8009bac:	4288      	cmp	r0, r1
 8009bae:	d902      	bls.n	8009bb6 <memmove+0xc>
 8009bb0:	188b      	adds	r3, r1, r2
 8009bb2:	4298      	cmp	r0, r3
 8009bb4:	d303      	bcc.n	8009bbe <memmove+0x14>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	e007      	b.n	8009bca <memmove+0x20>
 8009bba:	5c8b      	ldrb	r3, [r1, r2]
 8009bbc:	5483      	strb	r3, [r0, r2]
 8009bbe:	3a01      	subs	r2, #1
 8009bc0:	d2fb      	bcs.n	8009bba <memmove+0x10>
 8009bc2:	bd10      	pop	{r4, pc}
 8009bc4:	5ccc      	ldrb	r4, [r1, r3]
 8009bc6:	54c4      	strb	r4, [r0, r3]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d1fa      	bne.n	8009bc4 <memmove+0x1a>
 8009bce:	e7f8      	b.n	8009bc2 <memmove+0x18>

08009bd0 <_sbrk_r>:
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	b570      	push	{r4, r5, r6, lr}
 8009bd4:	4d06      	ldr	r5, [pc, #24]	; (8009bf0 <_sbrk_r+0x20>)
 8009bd6:	0004      	movs	r4, r0
 8009bd8:	0008      	movs	r0, r1
 8009bda:	602b      	str	r3, [r5, #0]
 8009bdc:	f7f9 fa3e 	bl	800305c <_sbrk>
 8009be0:	1c43      	adds	r3, r0, #1
 8009be2:	d103      	bne.n	8009bec <_sbrk_r+0x1c>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d000      	beq.n	8009bec <_sbrk_r+0x1c>
 8009bea:	6023      	str	r3, [r4, #0]
 8009bec:	bd70      	pop	{r4, r5, r6, pc}
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	2000040c 	.word	0x2000040c

08009bf4 <__assert_func>:
 8009bf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009bf6:	0014      	movs	r4, r2
 8009bf8:	001a      	movs	r2, r3
 8009bfa:	4b09      	ldr	r3, [pc, #36]	; (8009c20 <__assert_func+0x2c>)
 8009bfc:	0005      	movs	r5, r0
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	000e      	movs	r6, r1
 8009c02:	68d8      	ldr	r0, [r3, #12]
 8009c04:	4b07      	ldr	r3, [pc, #28]	; (8009c24 <__assert_func+0x30>)
 8009c06:	2c00      	cmp	r4, #0
 8009c08:	d101      	bne.n	8009c0e <__assert_func+0x1a>
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <__assert_func+0x34>)
 8009c0c:	001c      	movs	r4, r3
 8009c0e:	4907      	ldr	r1, [pc, #28]	; (8009c2c <__assert_func+0x38>)
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	9402      	str	r4, [sp, #8]
 8009c14:	002b      	movs	r3, r5
 8009c16:	9600      	str	r6, [sp, #0]
 8009c18:	f000 f866 	bl	8009ce8 <fiprintf>
 8009c1c:	f000 f874 	bl	8009d08 <abort>
 8009c20:	200001d4 	.word	0x200001d4
 8009c24:	0800a82e 	.word	0x0800a82e
 8009c28:	0800a869 	.word	0x0800a869
 8009c2c:	0800a83b 	.word	0x0800a83b

08009c30 <_calloc_r>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	0c0b      	lsrs	r3, r1, #16
 8009c34:	0c15      	lsrs	r5, r2, #16
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d11e      	bne.n	8009c78 <_calloc_r+0x48>
 8009c3a:	2d00      	cmp	r5, #0
 8009c3c:	d10c      	bne.n	8009c58 <_calloc_r+0x28>
 8009c3e:	b289      	uxth	r1, r1
 8009c40:	b294      	uxth	r4, r2
 8009c42:	434c      	muls	r4, r1
 8009c44:	0021      	movs	r1, r4
 8009c46:	f7fe ffa1 	bl	8008b8c <_malloc_r>
 8009c4a:	1e05      	subs	r5, r0, #0
 8009c4c:	d01b      	beq.n	8009c86 <_calloc_r+0x56>
 8009c4e:	0022      	movs	r2, r4
 8009c50:	2100      	movs	r1, #0
 8009c52:	f7fd fc73 	bl	800753c <memset>
 8009c56:	e016      	b.n	8009c86 <_calloc_r+0x56>
 8009c58:	1c2b      	adds	r3, r5, #0
 8009c5a:	1c0c      	adds	r4, r1, #0
 8009c5c:	b289      	uxth	r1, r1
 8009c5e:	b292      	uxth	r2, r2
 8009c60:	434a      	muls	r2, r1
 8009c62:	b2a1      	uxth	r1, r4
 8009c64:	b29c      	uxth	r4, r3
 8009c66:	434c      	muls	r4, r1
 8009c68:	0c13      	lsrs	r3, r2, #16
 8009c6a:	18e4      	adds	r4, r4, r3
 8009c6c:	0c23      	lsrs	r3, r4, #16
 8009c6e:	d107      	bne.n	8009c80 <_calloc_r+0x50>
 8009c70:	0424      	lsls	r4, r4, #16
 8009c72:	b292      	uxth	r2, r2
 8009c74:	4314      	orrs	r4, r2
 8009c76:	e7e5      	b.n	8009c44 <_calloc_r+0x14>
 8009c78:	2d00      	cmp	r5, #0
 8009c7a:	d101      	bne.n	8009c80 <_calloc_r+0x50>
 8009c7c:	1c14      	adds	r4, r2, #0
 8009c7e:	e7ed      	b.n	8009c5c <_calloc_r+0x2c>
 8009c80:	230c      	movs	r3, #12
 8009c82:	2500      	movs	r5, #0
 8009c84:	6003      	str	r3, [r0, #0]
 8009c86:	0028      	movs	r0, r5
 8009c88:	bd70      	pop	{r4, r5, r6, pc}

08009c8a <_realloc_r>:
 8009c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8c:	0007      	movs	r7, r0
 8009c8e:	000e      	movs	r6, r1
 8009c90:	0014      	movs	r4, r2
 8009c92:	2900      	cmp	r1, #0
 8009c94:	d105      	bne.n	8009ca2 <_realloc_r+0x18>
 8009c96:	0011      	movs	r1, r2
 8009c98:	f7fe ff78 	bl	8008b8c <_malloc_r>
 8009c9c:	0005      	movs	r5, r0
 8009c9e:	0028      	movs	r0, r5
 8009ca0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ca2:	2a00      	cmp	r2, #0
 8009ca4:	d103      	bne.n	8009cae <_realloc_r+0x24>
 8009ca6:	f7fe fb9f 	bl	80083e8 <_free_r>
 8009caa:	0025      	movs	r5, r4
 8009cac:	e7f7      	b.n	8009c9e <_realloc_r+0x14>
 8009cae:	f000 f832 	bl	8009d16 <_malloc_usable_size_r>
 8009cb2:	9001      	str	r0, [sp, #4]
 8009cb4:	4284      	cmp	r4, r0
 8009cb6:	d803      	bhi.n	8009cc0 <_realloc_r+0x36>
 8009cb8:	0035      	movs	r5, r6
 8009cba:	0843      	lsrs	r3, r0, #1
 8009cbc:	42a3      	cmp	r3, r4
 8009cbe:	d3ee      	bcc.n	8009c9e <_realloc_r+0x14>
 8009cc0:	0021      	movs	r1, r4
 8009cc2:	0038      	movs	r0, r7
 8009cc4:	f7fe ff62 	bl	8008b8c <_malloc_r>
 8009cc8:	1e05      	subs	r5, r0, #0
 8009cca:	d0e8      	beq.n	8009c9e <_realloc_r+0x14>
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	0022      	movs	r2, r4
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	d900      	bls.n	8009cd6 <_realloc_r+0x4c>
 8009cd4:	001a      	movs	r2, r3
 8009cd6:	0031      	movs	r1, r6
 8009cd8:	0028      	movs	r0, r5
 8009cda:	f7fd fcd3 	bl	8007684 <memcpy>
 8009cde:	0031      	movs	r1, r6
 8009ce0:	0038      	movs	r0, r7
 8009ce2:	f7fe fb81 	bl	80083e8 <_free_r>
 8009ce6:	e7da      	b.n	8009c9e <_realloc_r+0x14>

08009ce8 <fiprintf>:
 8009ce8:	b40e      	push	{r1, r2, r3}
 8009cea:	b517      	push	{r0, r1, r2, r4, lr}
 8009cec:	4c05      	ldr	r4, [pc, #20]	; (8009d04 <fiprintf+0x1c>)
 8009cee:	ab05      	add	r3, sp, #20
 8009cf0:	cb04      	ldmia	r3!, {r2}
 8009cf2:	0001      	movs	r1, r0
 8009cf4:	6820      	ldr	r0, [r4, #0]
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	f000 f83c 	bl	8009d74 <_vfiprintf_r>
 8009cfc:	bc1e      	pop	{r1, r2, r3, r4}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	b003      	add	sp, #12
 8009d02:	4718      	bx	r3
 8009d04:	200001d4 	.word	0x200001d4

08009d08 <abort>:
 8009d08:	2006      	movs	r0, #6
 8009d0a:	b510      	push	{r4, lr}
 8009d0c:	f000 fa1e 	bl	800a14c <raise>
 8009d10:	2001      	movs	r0, #1
 8009d12:	f7f9 f931 	bl	8002f78 <_exit>

08009d16 <_malloc_usable_size_r>:
 8009d16:	1f0b      	subs	r3, r1, #4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	1f18      	subs	r0, r3, #4
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	da01      	bge.n	8009d24 <_malloc_usable_size_r+0xe>
 8009d20:	580b      	ldr	r3, [r1, r0]
 8009d22:	18c0      	adds	r0, r0, r3
 8009d24:	4770      	bx	lr

08009d26 <__sfputc_r>:
 8009d26:	6893      	ldr	r3, [r2, #8]
 8009d28:	b510      	push	{r4, lr}
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	6093      	str	r3, [r2, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	da04      	bge.n	8009d3c <__sfputc_r+0x16>
 8009d32:	6994      	ldr	r4, [r2, #24]
 8009d34:	42a3      	cmp	r3, r4
 8009d36:	db07      	blt.n	8009d48 <__sfputc_r+0x22>
 8009d38:	290a      	cmp	r1, #10
 8009d3a:	d005      	beq.n	8009d48 <__sfputc_r+0x22>
 8009d3c:	6813      	ldr	r3, [r2, #0]
 8009d3e:	1c58      	adds	r0, r3, #1
 8009d40:	6010      	str	r0, [r2, #0]
 8009d42:	7019      	strb	r1, [r3, #0]
 8009d44:	0008      	movs	r0, r1
 8009d46:	bd10      	pop	{r4, pc}
 8009d48:	f000 f930 	bl	8009fac <__swbuf_r>
 8009d4c:	0001      	movs	r1, r0
 8009d4e:	e7f9      	b.n	8009d44 <__sfputc_r+0x1e>

08009d50 <__sfputs_r>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	0006      	movs	r6, r0
 8009d54:	000f      	movs	r7, r1
 8009d56:	0014      	movs	r4, r2
 8009d58:	18d5      	adds	r5, r2, r3
 8009d5a:	42ac      	cmp	r4, r5
 8009d5c:	d101      	bne.n	8009d62 <__sfputs_r+0x12>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e007      	b.n	8009d72 <__sfputs_r+0x22>
 8009d62:	7821      	ldrb	r1, [r4, #0]
 8009d64:	003a      	movs	r2, r7
 8009d66:	0030      	movs	r0, r6
 8009d68:	f7ff ffdd 	bl	8009d26 <__sfputc_r>
 8009d6c:	3401      	adds	r4, #1
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	d1f3      	bne.n	8009d5a <__sfputs_r+0xa>
 8009d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d74 <_vfiprintf_r>:
 8009d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d76:	b0a1      	sub	sp, #132	; 0x84
 8009d78:	000f      	movs	r7, r1
 8009d7a:	0015      	movs	r5, r2
 8009d7c:	001e      	movs	r6, r3
 8009d7e:	9003      	str	r0, [sp, #12]
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d004      	beq.n	8009d8e <_vfiprintf_r+0x1a>
 8009d84:	6a03      	ldr	r3, [r0, #32]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <_vfiprintf_r+0x1a>
 8009d8a:	f7fd fb37 	bl	80073fc <__sinit>
 8009d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d90:	07db      	lsls	r3, r3, #31
 8009d92:	d405      	bmi.n	8009da0 <_vfiprintf_r+0x2c>
 8009d94:	89bb      	ldrh	r3, [r7, #12]
 8009d96:	059b      	lsls	r3, r3, #22
 8009d98:	d402      	bmi.n	8009da0 <_vfiprintf_r+0x2c>
 8009d9a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009d9c:	f7fd fc65 	bl	800766a <__retarget_lock_acquire_recursive>
 8009da0:	89bb      	ldrh	r3, [r7, #12]
 8009da2:	071b      	lsls	r3, r3, #28
 8009da4:	d502      	bpl.n	8009dac <_vfiprintf_r+0x38>
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d113      	bne.n	8009dd4 <_vfiprintf_r+0x60>
 8009dac:	0039      	movs	r1, r7
 8009dae:	9803      	ldr	r0, [sp, #12]
 8009db0:	f000 f93e 	bl	800a030 <__swsetup_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d00d      	beq.n	8009dd4 <_vfiprintf_r+0x60>
 8009db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dba:	07db      	lsls	r3, r3, #31
 8009dbc:	d503      	bpl.n	8009dc6 <_vfiprintf_r+0x52>
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	4240      	negs	r0, r0
 8009dc2:	b021      	add	sp, #132	; 0x84
 8009dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc6:	89bb      	ldrh	r3, [r7, #12]
 8009dc8:	059b      	lsls	r3, r3, #22
 8009dca:	d4f8      	bmi.n	8009dbe <_vfiprintf_r+0x4a>
 8009dcc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009dce:	f7fd fc4d 	bl	800766c <__retarget_lock_release_recursive>
 8009dd2:	e7f4      	b.n	8009dbe <_vfiprintf_r+0x4a>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	ac08      	add	r4, sp, #32
 8009dd8:	6163      	str	r3, [r4, #20]
 8009dda:	3320      	adds	r3, #32
 8009ddc:	7663      	strb	r3, [r4, #25]
 8009dde:	3310      	adds	r3, #16
 8009de0:	76a3      	strb	r3, [r4, #26]
 8009de2:	9607      	str	r6, [sp, #28]
 8009de4:	002e      	movs	r6, r5
 8009de6:	7833      	ldrb	r3, [r6, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <_vfiprintf_r+0x7c>
 8009dec:	2b25      	cmp	r3, #37	; 0x25
 8009dee:	d148      	bne.n	8009e82 <_vfiprintf_r+0x10e>
 8009df0:	1b73      	subs	r3, r6, r5
 8009df2:	9305      	str	r3, [sp, #20]
 8009df4:	42ae      	cmp	r6, r5
 8009df6:	d00b      	beq.n	8009e10 <_vfiprintf_r+0x9c>
 8009df8:	002a      	movs	r2, r5
 8009dfa:	0039      	movs	r1, r7
 8009dfc:	9803      	ldr	r0, [sp, #12]
 8009dfe:	f7ff ffa7 	bl	8009d50 <__sfputs_r>
 8009e02:	3001      	adds	r0, #1
 8009e04:	d100      	bne.n	8009e08 <_vfiprintf_r+0x94>
 8009e06:	e0af      	b.n	8009f68 <_vfiprintf_r+0x1f4>
 8009e08:	6963      	ldr	r3, [r4, #20]
 8009e0a:	9a05      	ldr	r2, [sp, #20]
 8009e0c:	189b      	adds	r3, r3, r2
 8009e0e:	6163      	str	r3, [r4, #20]
 8009e10:	7833      	ldrb	r3, [r6, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d100      	bne.n	8009e18 <_vfiprintf_r+0xa4>
 8009e16:	e0a7      	b.n	8009f68 <_vfiprintf_r+0x1f4>
 8009e18:	2201      	movs	r2, #1
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4252      	negs	r2, r2
 8009e1e:	6062      	str	r2, [r4, #4]
 8009e20:	a904      	add	r1, sp, #16
 8009e22:	3254      	adds	r2, #84	; 0x54
 8009e24:	1852      	adds	r2, r2, r1
 8009e26:	1c75      	adds	r5, r6, #1
 8009e28:	6023      	str	r3, [r4, #0]
 8009e2a:	60e3      	str	r3, [r4, #12]
 8009e2c:	60a3      	str	r3, [r4, #8]
 8009e2e:	7013      	strb	r3, [r2, #0]
 8009e30:	65a3      	str	r3, [r4, #88]	; 0x58
 8009e32:	4b59      	ldr	r3, [pc, #356]	; (8009f98 <_vfiprintf_r+0x224>)
 8009e34:	2205      	movs	r2, #5
 8009e36:	0018      	movs	r0, r3
 8009e38:	7829      	ldrb	r1, [r5, #0]
 8009e3a:	9305      	str	r3, [sp, #20]
 8009e3c:	f7fd fc17 	bl	800766e <memchr>
 8009e40:	1c6e      	adds	r6, r5, #1
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d11f      	bne.n	8009e86 <_vfiprintf_r+0x112>
 8009e46:	6822      	ldr	r2, [r4, #0]
 8009e48:	06d3      	lsls	r3, r2, #27
 8009e4a:	d504      	bpl.n	8009e56 <_vfiprintf_r+0xe2>
 8009e4c:	2353      	movs	r3, #83	; 0x53
 8009e4e:	a904      	add	r1, sp, #16
 8009e50:	185b      	adds	r3, r3, r1
 8009e52:	2120      	movs	r1, #32
 8009e54:	7019      	strb	r1, [r3, #0]
 8009e56:	0713      	lsls	r3, r2, #28
 8009e58:	d504      	bpl.n	8009e64 <_vfiprintf_r+0xf0>
 8009e5a:	2353      	movs	r3, #83	; 0x53
 8009e5c:	a904      	add	r1, sp, #16
 8009e5e:	185b      	adds	r3, r3, r1
 8009e60:	212b      	movs	r1, #43	; 0x2b
 8009e62:	7019      	strb	r1, [r3, #0]
 8009e64:	782b      	ldrb	r3, [r5, #0]
 8009e66:	2b2a      	cmp	r3, #42	; 0x2a
 8009e68:	d016      	beq.n	8009e98 <_vfiprintf_r+0x124>
 8009e6a:	002e      	movs	r6, r5
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	200a      	movs	r0, #10
 8009e70:	68e3      	ldr	r3, [r4, #12]
 8009e72:	7832      	ldrb	r2, [r6, #0]
 8009e74:	1c75      	adds	r5, r6, #1
 8009e76:	3a30      	subs	r2, #48	; 0x30
 8009e78:	2a09      	cmp	r2, #9
 8009e7a:	d94e      	bls.n	8009f1a <_vfiprintf_r+0x1a6>
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d111      	bne.n	8009ea4 <_vfiprintf_r+0x130>
 8009e80:	e017      	b.n	8009eb2 <_vfiprintf_r+0x13e>
 8009e82:	3601      	adds	r6, #1
 8009e84:	e7af      	b.n	8009de6 <_vfiprintf_r+0x72>
 8009e86:	9b05      	ldr	r3, [sp, #20]
 8009e88:	6822      	ldr	r2, [r4, #0]
 8009e8a:	1ac0      	subs	r0, r0, r3
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	4083      	lsls	r3, r0
 8009e90:	4313      	orrs	r3, r2
 8009e92:	0035      	movs	r5, r6
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	e7cc      	b.n	8009e32 <_vfiprintf_r+0xbe>
 8009e98:	9b07      	ldr	r3, [sp, #28]
 8009e9a:	1d19      	adds	r1, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9107      	str	r1, [sp, #28]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	db01      	blt.n	8009ea8 <_vfiprintf_r+0x134>
 8009ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ea6:	e004      	b.n	8009eb2 <_vfiprintf_r+0x13e>
 8009ea8:	425b      	negs	r3, r3
 8009eaa:	60e3      	str	r3, [r4, #12]
 8009eac:	2302      	movs	r3, #2
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	7833      	ldrb	r3, [r6, #0]
 8009eb4:	2b2e      	cmp	r3, #46	; 0x2e
 8009eb6:	d10a      	bne.n	8009ece <_vfiprintf_r+0x15a>
 8009eb8:	7873      	ldrb	r3, [r6, #1]
 8009eba:	2b2a      	cmp	r3, #42	; 0x2a
 8009ebc:	d135      	bne.n	8009f2a <_vfiprintf_r+0x1b6>
 8009ebe:	9b07      	ldr	r3, [sp, #28]
 8009ec0:	3602      	adds	r6, #2
 8009ec2:	1d1a      	adds	r2, r3, #4
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	9207      	str	r2, [sp, #28]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	db2b      	blt.n	8009f24 <_vfiprintf_r+0x1b0>
 8009ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ece:	4d33      	ldr	r5, [pc, #204]	; (8009f9c <_vfiprintf_r+0x228>)
 8009ed0:	2203      	movs	r2, #3
 8009ed2:	0028      	movs	r0, r5
 8009ed4:	7831      	ldrb	r1, [r6, #0]
 8009ed6:	f7fd fbca 	bl	800766e <memchr>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	d006      	beq.n	8009eec <_vfiprintf_r+0x178>
 8009ede:	2340      	movs	r3, #64	; 0x40
 8009ee0:	1b40      	subs	r0, r0, r5
 8009ee2:	4083      	lsls	r3, r0
 8009ee4:	6822      	ldr	r2, [r4, #0]
 8009ee6:	3601      	adds	r6, #1
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	6023      	str	r3, [r4, #0]
 8009eec:	7831      	ldrb	r1, [r6, #0]
 8009eee:	2206      	movs	r2, #6
 8009ef0:	482b      	ldr	r0, [pc, #172]	; (8009fa0 <_vfiprintf_r+0x22c>)
 8009ef2:	1c75      	adds	r5, r6, #1
 8009ef4:	7621      	strb	r1, [r4, #24]
 8009ef6:	f7fd fbba 	bl	800766e <memchr>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d043      	beq.n	8009f86 <_vfiprintf_r+0x212>
 8009efe:	4b29      	ldr	r3, [pc, #164]	; (8009fa4 <_vfiprintf_r+0x230>)
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d125      	bne.n	8009f50 <_vfiprintf_r+0x1dc>
 8009f04:	2207      	movs	r2, #7
 8009f06:	9b07      	ldr	r3, [sp, #28]
 8009f08:	3307      	adds	r3, #7
 8009f0a:	4393      	bics	r3, r2
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	6963      	ldr	r3, [r4, #20]
 8009f12:	9a04      	ldr	r2, [sp, #16]
 8009f14:	189b      	adds	r3, r3, r2
 8009f16:	6163      	str	r3, [r4, #20]
 8009f18:	e764      	b.n	8009de4 <_vfiprintf_r+0x70>
 8009f1a:	4343      	muls	r3, r0
 8009f1c:	002e      	movs	r6, r5
 8009f1e:	2101      	movs	r1, #1
 8009f20:	189b      	adds	r3, r3, r2
 8009f22:	e7a6      	b.n	8009e72 <_vfiprintf_r+0xfe>
 8009f24:	2301      	movs	r3, #1
 8009f26:	425b      	negs	r3, r3
 8009f28:	e7d0      	b.n	8009ecc <_vfiprintf_r+0x158>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	200a      	movs	r0, #10
 8009f2e:	001a      	movs	r2, r3
 8009f30:	3601      	adds	r6, #1
 8009f32:	6063      	str	r3, [r4, #4]
 8009f34:	7831      	ldrb	r1, [r6, #0]
 8009f36:	1c75      	adds	r5, r6, #1
 8009f38:	3930      	subs	r1, #48	; 0x30
 8009f3a:	2909      	cmp	r1, #9
 8009f3c:	d903      	bls.n	8009f46 <_vfiprintf_r+0x1d2>
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0c5      	beq.n	8009ece <_vfiprintf_r+0x15a>
 8009f42:	9209      	str	r2, [sp, #36]	; 0x24
 8009f44:	e7c3      	b.n	8009ece <_vfiprintf_r+0x15a>
 8009f46:	4342      	muls	r2, r0
 8009f48:	002e      	movs	r6, r5
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	1852      	adds	r2, r2, r1
 8009f4e:	e7f1      	b.n	8009f34 <_vfiprintf_r+0x1c0>
 8009f50:	aa07      	add	r2, sp, #28
 8009f52:	9200      	str	r2, [sp, #0]
 8009f54:	0021      	movs	r1, r4
 8009f56:	003a      	movs	r2, r7
 8009f58:	4b13      	ldr	r3, [pc, #76]	; (8009fa8 <_vfiprintf_r+0x234>)
 8009f5a:	9803      	ldr	r0, [sp, #12]
 8009f5c:	f7fc fbe0 	bl	8006720 <_printf_float>
 8009f60:	9004      	str	r0, [sp, #16]
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	3301      	adds	r3, #1
 8009f66:	d1d3      	bne.n	8009f10 <_vfiprintf_r+0x19c>
 8009f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f6a:	07db      	lsls	r3, r3, #31
 8009f6c:	d405      	bmi.n	8009f7a <_vfiprintf_r+0x206>
 8009f6e:	89bb      	ldrh	r3, [r7, #12]
 8009f70:	059b      	lsls	r3, r3, #22
 8009f72:	d402      	bmi.n	8009f7a <_vfiprintf_r+0x206>
 8009f74:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009f76:	f7fd fb79 	bl	800766c <__retarget_lock_release_recursive>
 8009f7a:	89bb      	ldrh	r3, [r7, #12]
 8009f7c:	065b      	lsls	r3, r3, #25
 8009f7e:	d500      	bpl.n	8009f82 <_vfiprintf_r+0x20e>
 8009f80:	e71d      	b.n	8009dbe <_vfiprintf_r+0x4a>
 8009f82:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f84:	e71d      	b.n	8009dc2 <_vfiprintf_r+0x4e>
 8009f86:	aa07      	add	r2, sp, #28
 8009f88:	9200      	str	r2, [sp, #0]
 8009f8a:	0021      	movs	r1, r4
 8009f8c:	003a      	movs	r2, r7
 8009f8e:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <_vfiprintf_r+0x234>)
 8009f90:	9803      	ldr	r0, [sp, #12]
 8009f92:	f7fc fe8b 	bl	8006cac <_printf_i>
 8009f96:	e7e3      	b.n	8009f60 <_vfiprintf_r+0x1ec>
 8009f98:	0800a81d 	.word	0x0800a81d
 8009f9c:	0800a823 	.word	0x0800a823
 8009fa0:	0800a827 	.word	0x0800a827
 8009fa4:	08006721 	.word	0x08006721
 8009fa8:	08009d51 	.word	0x08009d51

08009fac <__swbuf_r>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	0006      	movs	r6, r0
 8009fb0:	000d      	movs	r5, r1
 8009fb2:	0014      	movs	r4, r2
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d004      	beq.n	8009fc2 <__swbuf_r+0x16>
 8009fb8:	6a03      	ldr	r3, [r0, #32]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <__swbuf_r+0x16>
 8009fbe:	f7fd fa1d 	bl	80073fc <__sinit>
 8009fc2:	69a3      	ldr	r3, [r4, #24]
 8009fc4:	60a3      	str	r3, [r4, #8]
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	071b      	lsls	r3, r3, #28
 8009fca:	d528      	bpl.n	800a01e <__swbuf_r+0x72>
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d025      	beq.n	800a01e <__swbuf_r+0x72>
 8009fd2:	6923      	ldr	r3, [r4, #16]
 8009fd4:	6820      	ldr	r0, [r4, #0]
 8009fd6:	b2ef      	uxtb	r7, r5
 8009fd8:	1ac0      	subs	r0, r0, r3
 8009fda:	6963      	ldr	r3, [r4, #20]
 8009fdc:	b2ed      	uxtb	r5, r5
 8009fde:	4283      	cmp	r3, r0
 8009fe0:	dc05      	bgt.n	8009fee <__swbuf_r+0x42>
 8009fe2:	0021      	movs	r1, r4
 8009fe4:	0030      	movs	r0, r6
 8009fe6:	f7ff fdb5 	bl	8009b54 <_fflush_r>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d11d      	bne.n	800a02a <__swbuf_r+0x7e>
 8009fee:	68a3      	ldr	r3, [r4, #8]
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	60a3      	str	r3, [r4, #8]
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	1c5a      	adds	r2, r3, #1
 8009ffa:	6022      	str	r2, [r4, #0]
 8009ffc:	701f      	strb	r7, [r3, #0]
 8009ffe:	6963      	ldr	r3, [r4, #20]
 800a000:	4283      	cmp	r3, r0
 800a002:	d004      	beq.n	800a00e <__swbuf_r+0x62>
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	07db      	lsls	r3, r3, #31
 800a008:	d507      	bpl.n	800a01a <__swbuf_r+0x6e>
 800a00a:	2d0a      	cmp	r5, #10
 800a00c:	d105      	bne.n	800a01a <__swbuf_r+0x6e>
 800a00e:	0021      	movs	r1, r4
 800a010:	0030      	movs	r0, r6
 800a012:	f7ff fd9f 	bl	8009b54 <_fflush_r>
 800a016:	2800      	cmp	r0, #0
 800a018:	d107      	bne.n	800a02a <__swbuf_r+0x7e>
 800a01a:	0028      	movs	r0, r5
 800a01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01e:	0021      	movs	r1, r4
 800a020:	0030      	movs	r0, r6
 800a022:	f000 f805 	bl	800a030 <__swsetup_r>
 800a026:	2800      	cmp	r0, #0
 800a028:	d0d3      	beq.n	8009fd2 <__swbuf_r+0x26>
 800a02a:	2501      	movs	r5, #1
 800a02c:	426d      	negs	r5, r5
 800a02e:	e7f4      	b.n	800a01a <__swbuf_r+0x6e>

0800a030 <__swsetup_r>:
 800a030:	4b30      	ldr	r3, [pc, #192]	; (800a0f4 <__swsetup_r+0xc4>)
 800a032:	b570      	push	{r4, r5, r6, lr}
 800a034:	0005      	movs	r5, r0
 800a036:	6818      	ldr	r0, [r3, #0]
 800a038:	000c      	movs	r4, r1
 800a03a:	2800      	cmp	r0, #0
 800a03c:	d004      	beq.n	800a048 <__swsetup_r+0x18>
 800a03e:	6a03      	ldr	r3, [r0, #32]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <__swsetup_r+0x18>
 800a044:	f7fd f9da 	bl	80073fc <__sinit>
 800a048:	230c      	movs	r3, #12
 800a04a:	5ee2      	ldrsh	r2, [r4, r3]
 800a04c:	b293      	uxth	r3, r2
 800a04e:	0711      	lsls	r1, r2, #28
 800a050:	d423      	bmi.n	800a09a <__swsetup_r+0x6a>
 800a052:	06d9      	lsls	r1, r3, #27
 800a054:	d407      	bmi.n	800a066 <__swsetup_r+0x36>
 800a056:	2309      	movs	r3, #9
 800a058:	2001      	movs	r0, #1
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	3337      	adds	r3, #55	; 0x37
 800a05e:	4313      	orrs	r3, r2
 800a060:	81a3      	strh	r3, [r4, #12]
 800a062:	4240      	negs	r0, r0
 800a064:	bd70      	pop	{r4, r5, r6, pc}
 800a066:	075b      	lsls	r3, r3, #29
 800a068:	d513      	bpl.n	800a092 <__swsetup_r+0x62>
 800a06a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a06c:	2900      	cmp	r1, #0
 800a06e:	d008      	beq.n	800a082 <__swsetup_r+0x52>
 800a070:	0023      	movs	r3, r4
 800a072:	3344      	adds	r3, #68	; 0x44
 800a074:	4299      	cmp	r1, r3
 800a076:	d002      	beq.n	800a07e <__swsetup_r+0x4e>
 800a078:	0028      	movs	r0, r5
 800a07a:	f7fe f9b5 	bl	80083e8 <_free_r>
 800a07e:	2300      	movs	r3, #0
 800a080:	6363      	str	r3, [r4, #52]	; 0x34
 800a082:	2224      	movs	r2, #36	; 0x24
 800a084:	89a3      	ldrh	r3, [r4, #12]
 800a086:	4393      	bics	r3, r2
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	2300      	movs	r3, #0
 800a08c:	6063      	str	r3, [r4, #4]
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	2308      	movs	r3, #8
 800a094:	89a2      	ldrh	r2, [r4, #12]
 800a096:	4313      	orrs	r3, r2
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <__swsetup_r+0x88>
 800a0a0:	21a0      	movs	r1, #160	; 0xa0
 800a0a2:	2280      	movs	r2, #128	; 0x80
 800a0a4:	89a3      	ldrh	r3, [r4, #12]
 800a0a6:	0089      	lsls	r1, r1, #2
 800a0a8:	0092      	lsls	r2, r2, #2
 800a0aa:	400b      	ands	r3, r1
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d003      	beq.n	800a0b8 <__swsetup_r+0x88>
 800a0b0:	0021      	movs	r1, r4
 800a0b2:	0028      	movs	r0, r5
 800a0b4:	f000 f892 	bl	800a1dc <__smakebuf_r>
 800a0b8:	220c      	movs	r2, #12
 800a0ba:	5ea3      	ldrsh	r3, [r4, r2]
 800a0bc:	2001      	movs	r0, #1
 800a0be:	001a      	movs	r2, r3
 800a0c0:	b299      	uxth	r1, r3
 800a0c2:	4002      	ands	r2, r0
 800a0c4:	4203      	tst	r3, r0
 800a0c6:	d00f      	beq.n	800a0e8 <__swsetup_r+0xb8>
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	60a2      	str	r2, [r4, #8]
 800a0cc:	6962      	ldr	r2, [r4, #20]
 800a0ce:	4252      	negs	r2, r2
 800a0d0:	61a2      	str	r2, [r4, #24]
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	4282      	cmp	r2, r0
 800a0d8:	d1c4      	bne.n	800a064 <__swsetup_r+0x34>
 800a0da:	0609      	lsls	r1, r1, #24
 800a0dc:	d5c2      	bpl.n	800a064 <__swsetup_r+0x34>
 800a0de:	2240      	movs	r2, #64	; 0x40
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	3801      	subs	r0, #1
 800a0e6:	e7bd      	b.n	800a064 <__swsetup_r+0x34>
 800a0e8:	0788      	lsls	r0, r1, #30
 800a0ea:	d400      	bmi.n	800a0ee <__swsetup_r+0xbe>
 800a0ec:	6962      	ldr	r2, [r4, #20]
 800a0ee:	60a2      	str	r2, [r4, #8]
 800a0f0:	e7ef      	b.n	800a0d2 <__swsetup_r+0xa2>
 800a0f2:	46c0      	nop			; (mov r8, r8)
 800a0f4:	200001d4 	.word	0x200001d4

0800a0f8 <_raise_r>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	0004      	movs	r4, r0
 800a0fc:	000d      	movs	r5, r1
 800a0fe:	291f      	cmp	r1, #31
 800a100:	d904      	bls.n	800a10c <_raise_r+0x14>
 800a102:	2316      	movs	r3, #22
 800a104:	6003      	str	r3, [r0, #0]
 800a106:	2001      	movs	r0, #1
 800a108:	4240      	negs	r0, r0
 800a10a:	bd70      	pop	{r4, r5, r6, pc}
 800a10c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d004      	beq.n	800a11c <_raise_r+0x24>
 800a112:	008a      	lsls	r2, r1, #2
 800a114:	189b      	adds	r3, r3, r2
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	2a00      	cmp	r2, #0
 800a11a:	d108      	bne.n	800a12e <_raise_r+0x36>
 800a11c:	0020      	movs	r0, r4
 800a11e:	f000 f831 	bl	800a184 <_getpid_r>
 800a122:	002a      	movs	r2, r5
 800a124:	0001      	movs	r1, r0
 800a126:	0020      	movs	r0, r4
 800a128:	f000 f81a 	bl	800a160 <_kill_r>
 800a12c:	e7ed      	b.n	800a10a <_raise_r+0x12>
 800a12e:	2000      	movs	r0, #0
 800a130:	2a01      	cmp	r2, #1
 800a132:	d0ea      	beq.n	800a10a <_raise_r+0x12>
 800a134:	1c51      	adds	r1, r2, #1
 800a136:	d103      	bne.n	800a140 <_raise_r+0x48>
 800a138:	2316      	movs	r3, #22
 800a13a:	3001      	adds	r0, #1
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	e7e4      	b.n	800a10a <_raise_r+0x12>
 800a140:	2400      	movs	r4, #0
 800a142:	0028      	movs	r0, r5
 800a144:	601c      	str	r4, [r3, #0]
 800a146:	4790      	blx	r2
 800a148:	0020      	movs	r0, r4
 800a14a:	e7de      	b.n	800a10a <_raise_r+0x12>

0800a14c <raise>:
 800a14c:	b510      	push	{r4, lr}
 800a14e:	4b03      	ldr	r3, [pc, #12]	; (800a15c <raise+0x10>)
 800a150:	0001      	movs	r1, r0
 800a152:	6818      	ldr	r0, [r3, #0]
 800a154:	f7ff ffd0 	bl	800a0f8 <_raise_r>
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	200001d4 	.word	0x200001d4

0800a160 <_kill_r>:
 800a160:	2300      	movs	r3, #0
 800a162:	b570      	push	{r4, r5, r6, lr}
 800a164:	4d06      	ldr	r5, [pc, #24]	; (800a180 <_kill_r+0x20>)
 800a166:	0004      	movs	r4, r0
 800a168:	0008      	movs	r0, r1
 800a16a:	0011      	movs	r1, r2
 800a16c:	602b      	str	r3, [r5, #0]
 800a16e:	f7f8 fef3 	bl	8002f58 <_kill>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d103      	bne.n	800a17e <_kill_r+0x1e>
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d000      	beq.n	800a17e <_kill_r+0x1e>
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	2000040c 	.word	0x2000040c

0800a184 <_getpid_r>:
 800a184:	b510      	push	{r4, lr}
 800a186:	f7f8 fee1 	bl	8002f4c <_getpid>
 800a18a:	bd10      	pop	{r4, pc}

0800a18c <__swhatbuf_r>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	000e      	movs	r6, r1
 800a190:	001d      	movs	r5, r3
 800a192:	230e      	movs	r3, #14
 800a194:	5ec9      	ldrsh	r1, [r1, r3]
 800a196:	0014      	movs	r4, r2
 800a198:	b096      	sub	sp, #88	; 0x58
 800a19a:	2900      	cmp	r1, #0
 800a19c:	da0c      	bge.n	800a1b8 <__swhatbuf_r+0x2c>
 800a19e:	89b2      	ldrh	r2, [r6, #12]
 800a1a0:	2380      	movs	r3, #128	; 0x80
 800a1a2:	0011      	movs	r1, r2
 800a1a4:	4019      	ands	r1, r3
 800a1a6:	421a      	tst	r2, r3
 800a1a8:	d013      	beq.n	800a1d2 <__swhatbuf_r+0x46>
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	3b40      	subs	r3, #64	; 0x40
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	6029      	str	r1, [r5, #0]
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	b016      	add	sp, #88	; 0x58
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	466a      	mov	r2, sp
 800a1ba:	f000 f84d 	bl	800a258 <_fstat_r>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	dbed      	blt.n	800a19e <__swhatbuf_r+0x12>
 800a1c2:	23f0      	movs	r3, #240	; 0xf0
 800a1c4:	9901      	ldr	r1, [sp, #4]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	4019      	ands	r1, r3
 800a1ca:	4b03      	ldr	r3, [pc, #12]	; (800a1d8 <__swhatbuf_r+0x4c>)
 800a1cc:	18c9      	adds	r1, r1, r3
 800a1ce:	424b      	negs	r3, r1
 800a1d0:	4159      	adcs	r1, r3
 800a1d2:	2380      	movs	r3, #128	; 0x80
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	e7ea      	b.n	800a1ae <__swhatbuf_r+0x22>
 800a1d8:	ffffe000 	.word	0xffffe000

0800a1dc <__smakebuf_r>:
 800a1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1de:	2602      	movs	r6, #2
 800a1e0:	898b      	ldrh	r3, [r1, #12]
 800a1e2:	0005      	movs	r5, r0
 800a1e4:	000c      	movs	r4, r1
 800a1e6:	4233      	tst	r3, r6
 800a1e8:	d006      	beq.n	800a1f8 <__smakebuf_r+0x1c>
 800a1ea:	0023      	movs	r3, r4
 800a1ec:	3347      	adds	r3, #71	; 0x47
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	6163      	str	r3, [r4, #20]
 800a1f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a1f8:	466a      	mov	r2, sp
 800a1fa:	ab01      	add	r3, sp, #4
 800a1fc:	f7ff ffc6 	bl	800a18c <__swhatbuf_r>
 800a200:	9900      	ldr	r1, [sp, #0]
 800a202:	0007      	movs	r7, r0
 800a204:	0028      	movs	r0, r5
 800a206:	f7fe fcc1 	bl	8008b8c <_malloc_r>
 800a20a:	2800      	cmp	r0, #0
 800a20c:	d108      	bne.n	800a220 <__smakebuf_r+0x44>
 800a20e:	220c      	movs	r2, #12
 800a210:	5ea3      	ldrsh	r3, [r4, r2]
 800a212:	059a      	lsls	r2, r3, #22
 800a214:	d4ef      	bmi.n	800a1f6 <__smakebuf_r+0x1a>
 800a216:	2203      	movs	r2, #3
 800a218:	4393      	bics	r3, r2
 800a21a:	431e      	orrs	r6, r3
 800a21c:	81a6      	strh	r6, [r4, #12]
 800a21e:	e7e4      	b.n	800a1ea <__smakebuf_r+0xe>
 800a220:	2380      	movs	r3, #128	; 0x80
 800a222:	89a2      	ldrh	r2, [r4, #12]
 800a224:	6020      	str	r0, [r4, #0]
 800a226:	4313      	orrs	r3, r2
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	9b00      	ldr	r3, [sp, #0]
 800a22c:	6120      	str	r0, [r4, #16]
 800a22e:	6163      	str	r3, [r4, #20]
 800a230:	9b01      	ldr	r3, [sp, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00c      	beq.n	800a250 <__smakebuf_r+0x74>
 800a236:	0028      	movs	r0, r5
 800a238:	230e      	movs	r3, #14
 800a23a:	5ee1      	ldrsh	r1, [r4, r3]
 800a23c:	f000 f81e 	bl	800a27c <_isatty_r>
 800a240:	2800      	cmp	r0, #0
 800a242:	d005      	beq.n	800a250 <__smakebuf_r+0x74>
 800a244:	2303      	movs	r3, #3
 800a246:	89a2      	ldrh	r2, [r4, #12]
 800a248:	439a      	bics	r2, r3
 800a24a:	3b02      	subs	r3, #2
 800a24c:	4313      	orrs	r3, r2
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	433b      	orrs	r3, r7
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	e7ce      	b.n	800a1f6 <__smakebuf_r+0x1a>

0800a258 <_fstat_r>:
 800a258:	2300      	movs	r3, #0
 800a25a:	b570      	push	{r4, r5, r6, lr}
 800a25c:	4d06      	ldr	r5, [pc, #24]	; (800a278 <_fstat_r+0x20>)
 800a25e:	0004      	movs	r4, r0
 800a260:	0008      	movs	r0, r1
 800a262:	0011      	movs	r1, r2
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	f7f8 fed6 	bl	8003016 <_fstat>
 800a26a:	1c43      	adds	r3, r0, #1
 800a26c:	d103      	bne.n	800a276 <_fstat_r+0x1e>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d000      	beq.n	800a276 <_fstat_r+0x1e>
 800a274:	6023      	str	r3, [r4, #0]
 800a276:	bd70      	pop	{r4, r5, r6, pc}
 800a278:	2000040c 	.word	0x2000040c

0800a27c <_isatty_r>:
 800a27c:	2300      	movs	r3, #0
 800a27e:	b570      	push	{r4, r5, r6, lr}
 800a280:	4d06      	ldr	r5, [pc, #24]	; (800a29c <_isatty_r+0x20>)
 800a282:	0004      	movs	r4, r0
 800a284:	0008      	movs	r0, r1
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	f7f8 fed3 	bl	8003032 <_isatty>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d103      	bne.n	800a298 <_isatty_r+0x1c>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d000      	beq.n	800a298 <_isatty_r+0x1c>
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	bd70      	pop	{r4, r5, r6, pc}
 800a29a:	46c0      	nop			; (mov r8, r8)
 800a29c:	2000040c 	.word	0x2000040c

0800a2a0 <_init>:
 800a2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2a2:	46c0      	nop			; (mov r8, r8)
 800a2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a6:	bc08      	pop	{r3}
 800a2a8:	469e      	mov	lr, r3
 800a2aa:	4770      	bx	lr

0800a2ac <_fini>:
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	46c0      	nop			; (mov r8, r8)
 800a2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2b2:	bc08      	pop	{r3}
 800a2b4:	469e      	mov	lr, r3
 800a2b6:	4770      	bx	lr
